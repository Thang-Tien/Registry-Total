"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fontkit";
exports.ids = ["vendor-chunks/fontkit"];
exports.modules = {

/***/ "(ssr)/./node_modules/fontkit/dist/module.mjs":
/*!**********************************************!*\
  !*** ./node_modules/fontkit/dist/module.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ $d636bc798e7178db$export$185802fd694ee1f5),\n/* harmony export */   defaultLanguage: () => (/* binding */ $d636bc798e7178db$export$42940898df819940),\n/* harmony export */   logErrors: () => (/* binding */ $d636bc798e7178db$export$bd5c5d8b8dcafd78),\n/* harmony export */   open: () => (/* binding */ $b422b1e013cd6010$export$3ce6949f20cea765),\n/* harmony export */   openSync: () => (/* binding */ $b422b1e013cd6010$export$fa5499edb1ab414a),\n/* harmony export */   registerFormat: () => (/* binding */ $d636bc798e7178db$export$36b2f24e97d43be),\n/* harmony export */   setDefaultLanguage: () => (/* binding */ $d636bc798e7178db$export$5157e7780d44cc36)\n/* harmony export */ });\n/* harmony import */ var restructure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! restructure */ \"(ssr)/./node_modules/restructure/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @swc/helpers/src/_define_property.mjs */ \"(ssr)/./node_modules/fontkit/node_modules/@swc/helpers/esm/_define_property.js\");\n/* harmony import */ var _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @swc/helpers/src/_ts_decorate.mjs */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-deep-equal */ \"(ssr)/./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var unicode_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unicode-properties */ \"(ssr)/./node_modules/unicode-properties/dist/module.mjs\");\n/* harmony import */ var unicode_trie__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unicode-trie */ \"(ssr)/./node_modules/unicode-trie/index.js\");\n/* harmony import */ var dfa__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dfa */ \"(ssr)/./node_modules/dfa/index.js\");\n/* harmony import */ var clone__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! clone */ \"(ssr)/./node_modules/clone/clone.js\");\n/* harmony import */ var tiny_inflate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tiny-inflate */ \"(ssr)/./node_modules/tiny-inflate/index.js\");\n/* harmony import */ var brotli_decompress_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! brotli/decompress.js */ \"(ssr)/./node_modules/brotli/decompress.js\");\n\n\n\n\n\n\n\n\n\n\n\nfunction $parcel$export(e, n, v, s) {\n    Object.defineProperty(e, n, {\n        get: v,\n        set: s,\n        enumerable: true,\n        configurable: true\n    });\n}\nfunction $parcel$interopDefault(a) {\n    return a && a.__esModule ? a.default : a;\n}\nvar $d636bc798e7178db$exports = {};\n$parcel$export($d636bc798e7178db$exports, \"logErrors\", ()=>$d636bc798e7178db$export$bd5c5d8b8dcafd78);\n$parcel$export($d636bc798e7178db$exports, \"registerFormat\", ()=>$d636bc798e7178db$export$36b2f24e97d43be);\n$parcel$export($d636bc798e7178db$exports, \"create\", ()=>$d636bc798e7178db$export$185802fd694ee1f5);\n$parcel$export($d636bc798e7178db$exports, \"defaultLanguage\", ()=>$d636bc798e7178db$export$42940898df819940);\n$parcel$export($d636bc798e7178db$exports, \"setDefaultLanguage\", ()=>$d636bc798e7178db$export$5157e7780d44cc36);\nlet $d636bc798e7178db$export$bd5c5d8b8dcafd78 = false;\nlet $d636bc798e7178db$var$formats = [];\nfunction $d636bc798e7178db$export$36b2f24e97d43be(format) {\n    $d636bc798e7178db$var$formats.push(format);\n}\nfunction $d636bc798e7178db$export$185802fd694ee1f5(buffer, postscriptName) {\n    for(let i = 0; i < $d636bc798e7178db$var$formats.length; i++){\n        let format = $d636bc798e7178db$var$formats[i];\n        if (format.probe(buffer)) {\n            let font = new format(new (0, restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream)(buffer));\n            if (postscriptName) return font.getFont(postscriptName);\n            return font;\n        }\n    }\n    throw new Error(\"Unknown font format\");\n}\nlet $d636bc798e7178db$export$42940898df819940 = \"en\";\nfunction $d636bc798e7178db$export$5157e7780d44cc36(lang = \"en\") {\n    $d636bc798e7178db$export$42940898df819940 = lang;\n}\nvar $b422b1e013cd6010$exports = {};\n$parcel$export($b422b1e013cd6010$exports, \"openSync\", ()=>$b422b1e013cd6010$export$fa5499edb1ab414a);\n$parcel$export($b422b1e013cd6010$exports, \"open\", ()=>$b422b1e013cd6010$export$3ce6949f20cea765);\nfunction $b422b1e013cd6010$export$fa5499edb1ab414a(filename, postscriptName) {\n    let buffer = (0, fs__WEBPACK_IMPORTED_MODULE_1__).readFileSync(filename);\n    return (0, $d636bc798e7178db$export$185802fd694ee1f5)(buffer, postscriptName);\n}\nasync function $b422b1e013cd6010$export$3ce6949f20cea765(filename, postscriptName, callback) {\n    if (typeof postscriptName === \"function\") {\n        callback = postscriptName;\n        postscriptName = null;\n    }\n    let buffer = await (0, fs__WEBPACK_IMPORTED_MODULE_1__).promises.readFile(filename);\n    return (0, $d636bc798e7178db$export$185802fd694ee1f5)(buffer, postscriptName);\n}\nfunction $e71565f2ce09cb6b$export$69a3209f1a06c04d(target, key1, descriptor) {\n    if (descriptor.get) {\n        let get = descriptor.get;\n        descriptor.get = function() {\n            let value = get.call(this);\n            Object.defineProperty(this, key1, {\n                value: value\n            });\n            return value;\n        };\n    } else if (typeof descriptor.value === \"function\") {\n        let fn = descriptor.value;\n        return {\n            get () {\n                let cache1 = new Map;\n                function memoized(...args) {\n                    let key = args.length > 0 ? args[0] : \"value\";\n                    if (cache1.has(key)) return cache1.get(key);\n                    let result = fn.apply(this, args);\n                    cache1.set(key, result);\n                    return result;\n                }\n                Object.defineProperty(this, key1, {\n                    value: memoized\n                });\n                return memoized;\n            }\n        };\n    }\n}\nlet $26a62205ad06574e$var$SubHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    firstCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    entryCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    idDelta: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    idRangeOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $26a62205ad06574e$var$CmapGroup = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    startCharCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    endCharCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    glyphID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $26a62205ad06574e$var$UnicodeValueRange = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    startUnicodeValue: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    additionalCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $26a62205ad06574e$var$UVSMapping = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    unicodeValue: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    glyphID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $26a62205ad06574e$var$DefaultUVS = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($26a62205ad06574e$var$UnicodeValueRange, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $26a62205ad06574e$var$NonDefaultUVS = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($26a62205ad06574e$var$UVSMapping, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $26a62205ad06574e$var$VarSelectorRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    varSelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    defaultUVS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $26a62205ad06574e$var$DefaultUVS, {\n        type: \"parent\"\n    }),\n    nonDefaultUVS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $26a62205ad06574e$var$NonDefaultUVS, {\n        type: \"parent\"\n    })\n});\nlet $26a62205ad06574e$var$CmapSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    0: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codeMap: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 256)\n    },\n    2: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        subHeaderKeys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 256),\n        subHeaderCount: (t)=>Math.max.apply(Math, t.subHeaderKeys),\n        subHeaders: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($26a62205ad06574e$var$SubHeader, \"subHeaderCount\"),\n        glyphIndexArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"subHeaderCount\")\n    },\n    4: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        segCountX2: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        segCount: (t)=>t.segCountX2 >> 1,\n        searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        endCode: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"segCount\"),\n        reservedPad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        startCode: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"segCount\"),\n        idDelta: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, \"segCount\"),\n        idRangeOffset: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"segCount\"),\n        glyphIndexArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>(t.length - t._currentOffset) / 2)\n    },\n    6: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        firstCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entryCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphIndices: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"entryCount\")\n    },\n    8: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        is32: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 8192),\n        nGroups: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($26a62205ad06574e$var$CmapGroup, \"nGroups\")\n    },\n    10: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        firstCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        entryCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        glyphIndices: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numChars\")\n    },\n    12: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        nGroups: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($26a62205ad06574e$var$CmapGroup, \"nGroups\")\n    },\n    13: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        language: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        nGroups: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($26a62205ad06574e$var$CmapGroup, \"nGroups\")\n    },\n    14: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        numRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        varSelectors: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($26a62205ad06574e$var$VarSelectorRecord, \"numRecords\")\n    }\n});\nlet $26a62205ad06574e$var$CmapEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    platformID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    encodingID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    table: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $26a62205ad06574e$var$CmapSubtable, {\n        type: \"parent\",\n        lazy: true\n    })\n});\nvar $26a62205ad06574e$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numSubtables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($26a62205ad06574e$var$CmapEntry, \"numSubtables\")\n});\nvar $f2612a29f92ac062$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    revision: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    checkSumAdjustment: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    magicNumber: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    unitsPerEm: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    created: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int32, 2),\n    modified: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int32, 2),\n    xMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    macStyle: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n        \"bold\",\n        \"italic\",\n        \"underline\",\n        \"outline\",\n        \"shadow\",\n        \"condensed\",\n        \"extended\"\n    ]),\n    lowestRecPPEM: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    fontDirectionHint: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    indexToLocFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    glyphDataFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // 0 for current format\n});\nvar $2c179dd593583073$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    ascent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    descent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    lineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    advanceWidthMax: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minLeftSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    minRightSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMaxExtent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRise: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRun: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 4),\n    metricDataFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    numberOfMetrics: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Number of advance widths in 'hmtx' table\n});\nlet $bdc9060542264b85$var$HmtxEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    advance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    bearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nvar $bdc9060542264b85$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    metrics: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($bdc9060542264b85$var$HmtxEntry, (t)=>t.parent.hhea.numberOfMetrics),\n    bearings: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, (t)=>t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)\n});\nvar $dbf51cb3d3fe409d$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxPoints: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxContours: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentPoints: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentContours: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxZones: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxTwilightPoints: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxStorage: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxFunctionDefs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxInstructionDefs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxStackElements: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxSizeOfInstructions: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentElements: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    maxComponentDepth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Maximum levels of recursion; 1 for simple components\n});\nfunction $e449ad78d50845fe$export$badc544e0651b6b1(platformID, encodingID, languageID = 0) {\n    if (platformID === 1 && $e449ad78d50845fe$export$479e671907f486d1[languageID]) return $e449ad78d50845fe$export$479e671907f486d1[languageID];\n    return $e449ad78d50845fe$export$6fef87b7618bdf0b[platformID][encodingID];\n}\nconst $e449ad78d50845fe$var$SINGLE_BYTE_ENCODINGS = new Set([\n    \"x-mac-roman\",\n    \"x-mac-cyrillic\",\n    \"iso-8859-6\",\n    \"iso-8859-8\"\n]);\nconst $e449ad78d50845fe$var$MAC_ENCODINGS = {\n    \"x-mac-croatian\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xaeŠ™\\xb4\\xa8≠Ž\\xd8∞\\xb1≤≥∆\\xb5∂∑∏š∫\\xaa\\xbaΩž\\xf8\\xbf\\xa1\\xac√ƒ≈Ć\\xabČ… \\xc0\\xc3\\xd5ŒœĐ—“”‘’\\xf7◊\\xa9⁄€‹›\\xc6\\xbb–\\xb7‚„‰\\xc2ć\\xc1č\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4đ\\xd2\\xda\\xdb\\xd9ıˆ˜\\xafπ\\xcb˚\\xb8\\xca\\xe6ˇ\",\n    \"x-mac-gaelic\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8Ḃ\\xb1≤≥ḃĊċḊḋḞḟĠġṀ\\xe6\\xf8ṁṖṗɼƒſṠ\\xab\\xbb… \\xc0\\xc3\\xd5Œœ–—“”‘’ṡẛ\\xffŸṪ€‹›Ŷŷṫ\\xb7Ỳỳ⁊\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4♣\\xd2\\xda\\xdb\\xd9ı\\xdd\\xfdŴŵẄẅẀẁẂẃ\",\n    \"x-mac-greek\": \"\\xc4\\xb9\\xb2\\xc9\\xb3\\xd6\\xdc΅\\xe0\\xe2\\xe4΄\\xa8\\xe7\\xe9\\xe8\\xea\\xeb\\xa3™\\xee\\xef•\\xbd‰\\xf4\\xf6\\xa6€\\xf9\\xfb\\xfc†ΓΔΘΛΞΠ\\xdf\\xae\\xa9ΣΪ\\xa7≠\\xb0\\xb7Α\\xb1≤≥\\xa5ΒΕΖΗΙΚΜΦΫΨΩάΝ\\xacΟΡ≈Τ\\xab\\xbb… ΥΧΆΈœ–―“”‘’\\xf7ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\xad\",\n    \"x-mac-icelandic\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\xdd\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩ\\xe6\\xf8\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb… \\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸ⁄€\\xd0\\xf0\\xde\\xfe\\xfd\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ıˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\",\n    \"x-mac-inuit\": \"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ\\xb0ᒡᒥᒦ•\\xb6ᒧ\\xae\\xa9™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł\",\n    \"x-mac-ce\": \"\\xc4Āā\\xc9Ą\\xd6\\xdc\\xe1ąČ\\xe4čĆć\\xe9ŹźĎ\\xedďĒēĖ\\xf3ė\\xf4\\xf6\\xf5\\xfaĚě\\xfc†\\xb0Ę\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™ę\\xa8≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ\\xac√ńŇ∆\\xab\\xbb… ňŐ\\xd5őŌ–—“”‘’\\xf7◊ōŔŕŘ‹›řŖŗŠ‚„šŚś\\xc1Ťť\\xcdŽžŪ\\xd3\\xd4ūŮ\\xdaůŰűŲų\\xdd\\xfdķŻŁżĢˇ\",\n    \"x-mac-romanian\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠ĂȘ∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩăș\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb… \\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸ⁄€‹›Țț‡\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ıˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\",\n    \"x-mac-turkish\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩ\\xe6\\xf8\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb… \\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸĞğİıŞş‡\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\"\n};\nconst $e449ad78d50845fe$var$encodingCache = new Map();\nfunction $e449ad78d50845fe$export$1dceb3c14ed68bee(encoding) {\n    let cached = $e449ad78d50845fe$var$encodingCache.get(encoding);\n    if (cached) return cached;\n    // These encodings aren't supported by TextDecoder.\n    let mapping = $e449ad78d50845fe$var$MAC_ENCODINGS[encoding];\n    if (mapping) {\n        let res = new Map();\n        for(let i = 0; i < mapping.length; i++)res.set(mapping.charCodeAt(i), 0x80 + i);\n        $e449ad78d50845fe$var$encodingCache.set(encoding, res);\n        return res;\n    }\n    // Only single byte encodings can be mapped 1:1.\n    if ($e449ad78d50845fe$var$SINGLE_BYTE_ENCODINGS.has(encoding)) {\n        // TextEncoder only supports utf8, whereas TextDecoder supports legacy encodings.\n        // Use this to create a mapping of code points.\n        let decoder = new TextDecoder(encoding);\n        let mapping = new Uint8Array(0x80);\n        for(let i = 0; i < 0x80; i++)mapping[i] = 0x80 + i;\n        let res = new Map();\n        let s = decoder.decode(mapping);\n        for(let i1 = 0; i1 < 0x80; i1++)res.set(s.charCodeAt(i1), 0x80 + i1);\n        $e449ad78d50845fe$var$encodingCache.set(encoding, res);\n        return res;\n    }\n}\nconst $e449ad78d50845fe$export$6fef87b7618bdf0b = [\n    // unicode\n    [\n        \"utf16be\",\n        \"utf16be\",\n        \"utf16be\",\n        \"utf16be\",\n        \"utf16be\",\n        \"utf16be\"\n    ],\n    // macintosh\n    // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n    // 0\tRoman                 17\tMalayalam\n    // 1\tJapanese\t            18\tSinhalese\n    // 2\tTraditional Chinese\t  19\tBurmese\n    // 3\tKorean\t              20\tKhmer\n    // 4\tArabic\t              21\tThai\n    // 5\tHebrew\t              22\tLaotian\n    // 6\tGreek\t                23\tGeorgian\n    // 7\tRussian\t              24\tArmenian\n    // 8\tRSymbol\t              25\tSimplified Chinese\n    // 9\tDevanagari\t          26\tTibetan\n    // 10\tGurmukhi\t            27\tMongolian\n    // 11\tGujarati\t            28\tGeez\n    // 12\tOriya\t                29\tSlavic\n    // 13\tBengali\t              30\tVietnamese\n    // 14\tTamil\t                31\tSindhi\n    // 15\tTelugu\t              32\t(Uninterpreted)\n    // 16\tKannada\n    [\n        \"x-mac-roman\",\n        \"shift-jis\",\n        \"big5\",\n        \"euc-kr\",\n        \"iso-8859-6\",\n        \"iso-8859-8\",\n        \"x-mac-greek\",\n        \"x-mac-cyrillic\",\n        \"x-mac-symbol\",\n        \"x-mac-devanagari\",\n        \"x-mac-gurmukhi\",\n        \"x-mac-gujarati\",\n        \"Oriya\",\n        \"Bengali\",\n        \"Tamil\",\n        \"Telugu\",\n        \"Kannada\",\n        \"Malayalam\",\n        \"Sinhalese\",\n        \"Burmese\",\n        \"Khmer\",\n        \"iso-8859-11\",\n        \"Laotian\",\n        \"Georgian\",\n        \"Armenian\",\n        \"hz-gb-2312\",\n        \"Tibetan\",\n        \"Mongolian\",\n        \"Geez\",\n        \"x-mac-ce\",\n        \"Vietnamese\",\n        \"Sindhi\"\n    ],\n    // ISO (deprecated)\n    [\n        \"ascii\"\n    ],\n    // windows\n    // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n    [\n        \"symbol\",\n        \"utf16be\",\n        \"shift-jis\",\n        \"gb18030\",\n        \"big5\",\n        \"x-cp20949\",\n        \"johab\",\n        null,\n        null,\n        null,\n        \"utf16be\"\n    ]\n];\nconst $e449ad78d50845fe$export$479e671907f486d1 = {\n    15: \"x-mac-icelandic\",\n    17: \"x-mac-turkish\",\n    18: \"x-mac-croatian\",\n    24: \"x-mac-ce\",\n    25: \"x-mac-ce\",\n    26: \"x-mac-ce\",\n    27: \"x-mac-ce\",\n    28: \"x-mac-ce\",\n    30: \"x-mac-icelandic\",\n    37: \"x-mac-romanian\",\n    38: \"x-mac-ce\",\n    39: \"x-mac-ce\",\n    40: \"x-mac-ce\",\n    143: \"x-mac-inuit\",\n    146: \"x-mac-gaelic\"\n};\nconst $e449ad78d50845fe$export$2092376fd002e13 = [\n    // unicode\n    [],\n    {\n        0: \"en\",\n        30: \"fo\",\n        60: \"ks\",\n        90: \"rw\",\n        1: \"fr\",\n        31: \"fa\",\n        61: \"ku\",\n        91: \"rn\",\n        2: \"de\",\n        32: \"ru\",\n        62: \"sd\",\n        92: \"ny\",\n        3: \"it\",\n        33: \"zh\",\n        63: \"bo\",\n        93: \"mg\",\n        4: \"nl\",\n        34: \"nl-BE\",\n        64: \"ne\",\n        94: \"eo\",\n        5: \"sv\",\n        35: \"ga\",\n        65: \"sa\",\n        128: \"cy\",\n        6: \"es\",\n        36: \"sq\",\n        66: \"mr\",\n        129: \"eu\",\n        7: \"da\",\n        37: \"ro\",\n        67: \"bn\",\n        130: \"ca\",\n        8: \"pt\",\n        38: \"cz\",\n        68: \"as\",\n        131: \"la\",\n        9: \"no\",\n        39: \"sk\",\n        69: \"gu\",\n        132: \"qu\",\n        10: \"he\",\n        40: \"si\",\n        70: \"pa\",\n        133: \"gn\",\n        11: \"ja\",\n        41: \"yi\",\n        71: \"or\",\n        134: \"ay\",\n        12: \"ar\",\n        42: \"sr\",\n        72: \"ml\",\n        135: \"tt\",\n        13: \"fi\",\n        43: \"mk\",\n        73: \"kn\",\n        136: \"ug\",\n        14: \"el\",\n        44: \"bg\",\n        74: \"ta\",\n        137: \"dz\",\n        15: \"is\",\n        45: \"uk\",\n        75: \"te\",\n        138: \"jv\",\n        16: \"mt\",\n        46: \"be\",\n        76: \"si\",\n        139: \"su\",\n        17: \"tr\",\n        47: \"uz\",\n        77: \"my\",\n        140: \"gl\",\n        18: \"hr\",\n        48: \"kk\",\n        78: \"km\",\n        141: \"af\",\n        19: \"zh-Hant\",\n        49: \"az-Cyrl\",\n        79: \"lo\",\n        142: \"br\",\n        20: \"ur\",\n        50: \"az-Arab\",\n        80: \"vi\",\n        143: \"iu\",\n        21: \"hi\",\n        51: \"hy\",\n        81: \"id\",\n        144: \"gd\",\n        22: \"th\",\n        52: \"ka\",\n        82: \"tl\",\n        145: \"gv\",\n        23: \"ko\",\n        53: \"mo\",\n        83: \"ms\",\n        146: \"ga\",\n        24: \"lt\",\n        54: \"ky\",\n        84: \"ms-Arab\",\n        147: \"to\",\n        25: \"pl\",\n        55: \"tg\",\n        85: \"am\",\n        148: \"el-polyton\",\n        26: \"hu\",\n        56: \"tk\",\n        86: \"ti\",\n        149: \"kl\",\n        27: \"es\",\n        57: \"mn-CN\",\n        87: \"om\",\n        150: \"az\",\n        28: \"lv\",\n        58: \"mn\",\n        88: \"so\",\n        151: \"nn\",\n        29: \"se\",\n        59: \"ps\",\n        89: \"sw\"\n    },\n    // ISO (deprecated)\n    [],\n    {\n        0x0436: \"af\",\n        0x4009: \"en-IN\",\n        0x0487: \"rw\",\n        0x0432: \"tn\",\n        0x041C: \"sq\",\n        0x1809: \"en-IE\",\n        0x0441: \"sw\",\n        0x045B: \"si\",\n        0x0484: \"gsw\",\n        0x2009: \"en-JM\",\n        0x0457: \"kok\",\n        0x041B: \"sk\",\n        0x045E: \"am\",\n        0x4409: \"en-MY\",\n        0x0412: \"ko\",\n        0x0424: \"sl\",\n        0x1401: \"ar-DZ\",\n        0x1409: \"en-NZ\",\n        0x0440: \"ky\",\n        0x2C0A: \"es-AR\",\n        0x3C01: \"ar-BH\",\n        0x3409: \"en-PH\",\n        0x0454: \"lo\",\n        0x400A: \"es-BO\",\n        0x0C01: \"ar\",\n        0x4809: \"en-SG\",\n        0x0426: \"lv\",\n        0x340A: \"es-CL\",\n        0x0801: \"ar-IQ\",\n        0x1C09: \"en-ZA\",\n        0x0427: \"lt\",\n        0x240A: \"es-CO\",\n        0x2C01: \"ar-JO\",\n        0x2C09: \"en-TT\",\n        0x082E: \"dsb\",\n        0x140A: \"es-CR\",\n        0x3401: \"ar-KW\",\n        0x0809: \"en-GB\",\n        0x046E: \"lb\",\n        0x1C0A: \"es-DO\",\n        0x3001: \"ar-LB\",\n        0x0409: \"en\",\n        0x042F: \"mk\",\n        0x300A: \"es-EC\",\n        0x1001: \"ar-LY\",\n        0x3009: \"en-ZW\",\n        0x083E: \"ms-BN\",\n        0x440A: \"es-SV\",\n        0x1801: \"ary\",\n        0x0425: \"et\",\n        0x043E: \"ms\",\n        0x100A: \"es-GT\",\n        0x2001: \"ar-OM\",\n        0x0438: \"fo\",\n        0x044C: \"ml\",\n        0x480A: \"es-HN\",\n        0x4001: \"ar-QA\",\n        0x0464: \"fil\",\n        0x043A: \"mt\",\n        0x080A: \"es-MX\",\n        0x0401: \"ar-SA\",\n        0x040B: \"fi\",\n        0x0481: \"mi\",\n        0x4C0A: \"es-NI\",\n        0x2801: \"ar-SY\",\n        0x080C: \"fr-BE\",\n        0x047A: \"arn\",\n        0x180A: \"es-PA\",\n        0x1C01: \"aeb\",\n        0x0C0C: \"fr-CA\",\n        0x044E: \"mr\",\n        0x3C0A: \"es-PY\",\n        0x3801: \"ar-AE\",\n        0x040C: \"fr\",\n        0x047C: \"moh\",\n        0x280A: \"es-PE\",\n        0x2401: \"ar-YE\",\n        0x140C: \"fr-LU\",\n        0x0450: \"mn\",\n        0x500A: \"es-PR\",\n        0x042B: \"hy\",\n        0x180C: \"fr-MC\",\n        0x0850: \"mn-CN\",\n        0x0C0A: \"es\",\n        0x044D: \"as\",\n        0x100C: \"fr-CH\",\n        0x0461: \"ne\",\n        0x040A: \"es\",\n        0x082C: \"az-Cyrl\",\n        0x0462: \"fy\",\n        0x0414: \"nb\",\n        0x540A: \"es-US\",\n        0x042C: \"az\",\n        0x0456: \"gl\",\n        0x0814: \"nn\",\n        0x380A: \"es-UY\",\n        0x046D: \"ba\",\n        0x0437: \"ka\",\n        0x0482: \"oc\",\n        0x200A: \"es-VE\",\n        0x042D: \"eu\",\n        0x0C07: \"de-AT\",\n        0x0448: \"or\",\n        0x081D: \"sv-FI\",\n        0x0423: \"be\",\n        0x0407: \"de\",\n        0x0463: \"ps\",\n        0x041D: \"sv\",\n        0x0845: \"bn\",\n        0x1407: \"de-LI\",\n        0x0415: \"pl\",\n        0x045A: \"syr\",\n        0x0445: \"bn-IN\",\n        0x1007: \"de-LU\",\n        0x0416: \"pt\",\n        0x0428: \"tg\",\n        0x201A: \"bs-Cyrl\",\n        0x0807: \"de-CH\",\n        0x0816: \"pt-PT\",\n        0x085F: \"tzm\",\n        0x141A: \"bs\",\n        0x0408: \"el\",\n        0x0446: \"pa\",\n        0x0449: \"ta\",\n        0x047E: \"br\",\n        0x046F: \"kl\",\n        0x046B: \"qu-BO\",\n        0x0444: \"tt\",\n        0x0402: \"bg\",\n        0x0447: \"gu\",\n        0x086B: \"qu-EC\",\n        0x044A: \"te\",\n        0x0403: \"ca\",\n        0x0468: \"ha\",\n        0x0C6B: \"qu\",\n        0x041E: \"th\",\n        0x0C04: \"zh-HK\",\n        0x040D: \"he\",\n        0x0418: \"ro\",\n        0x0451: \"bo\",\n        0x1404: \"zh-MO\",\n        0x0439: \"hi\",\n        0x0417: \"rm\",\n        0x041F: \"tr\",\n        0x0804: \"zh\",\n        0x040E: \"hu\",\n        0x0419: \"ru\",\n        0x0442: \"tk\",\n        0x1004: \"zh-SG\",\n        0x040F: \"is\",\n        0x243B: \"smn\",\n        0x0480: \"ug\",\n        0x0404: \"zh-TW\",\n        0x0470: \"ig\",\n        0x103B: \"smj-NO\",\n        0x0422: \"uk\",\n        0x0483: \"co\",\n        0x0421: \"id\",\n        0x143B: \"smj\",\n        0x042E: \"hsb\",\n        0x041A: \"hr\",\n        0x045D: \"iu\",\n        0x0C3B: \"se-FI\",\n        0x0420: \"ur\",\n        0x101A: \"hr-BA\",\n        0x085D: \"iu-Latn\",\n        0x043B: \"se\",\n        0x0843: \"uz-Cyrl\",\n        0x0405: \"cs\",\n        0x083C: \"ga\",\n        0x083B: \"se-SE\",\n        0x0443: \"uz\",\n        0x0406: \"da\",\n        0x0434: \"xh\",\n        0x203B: \"sms\",\n        0x042A: \"vi\",\n        0x048C: \"prs\",\n        0x0435: \"zu\",\n        0x183B: \"sma-NO\",\n        0x0452: \"cy\",\n        0x0465: \"dv\",\n        0x0410: \"it\",\n        0x1C3B: \"sms\",\n        0x0488: \"wo\",\n        0x0813: \"nl-BE\",\n        0x0810: \"it-CH\",\n        0x044F: \"sa\",\n        0x0485: \"sah\",\n        0x0413: \"nl\",\n        0x0411: \"ja\",\n        0x1C1A: \"sr-Cyrl-BA\",\n        0x0478: \"ii\",\n        0x0C09: \"en-AU\",\n        0x044B: \"kn\",\n        0x0C1A: \"sr\",\n        0x046A: \"yo\",\n        0x2809: \"en-BZ\",\n        0x043F: \"kk\",\n        0x181A: \"sr-Latn-BA\",\n        0x1009: \"en-CA\",\n        0x0453: \"km\",\n        0x081A: \"sr-Latn\",\n        0x2409: \"en-029\",\n        0x0486: \"quc\",\n        0x046C: \"nso\"\n    }\n];\nlet $2bcf221753ec8e32$var$NameRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    platformID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    encodingID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    languageID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    string: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.String(\"length\", (t)=>(0, $e449ad78d50845fe$export$badc544e0651b6b1)(t.platformID, t.encodingID, t.languageID)), {\n        type: \"parent\",\n        relativeTo: (ctx)=>ctx.parent.stringOffset,\n        allowNull: false\n    })\n});\nlet $2bcf221753ec8e32$var$LangTagRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.String(\"length\", \"utf16be\"), {\n        type: \"parent\",\n        relativeTo: (ctx)=>ctx.stringOffset\n    })\n});\nvar $2bcf221753ec8e32$var$NameTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    0: {\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        stringOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        records: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($2bcf221753ec8e32$var$NameRecord, \"count\")\n    },\n    1: {\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        stringOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        records: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($2bcf221753ec8e32$var$NameRecord, \"count\"),\n        langTagCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        langTags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($2bcf221753ec8e32$var$LangTagRecord, \"langTagCount\")\n    }\n});\nvar $2bcf221753ec8e32$export$2e2bcd8739ae039 = $2bcf221753ec8e32$var$NameTable;\nconst $2bcf221753ec8e32$var$NAMES = [\n    \"copyright\",\n    \"fontFamily\",\n    \"fontSubfamily\",\n    \"uniqueSubfamily\",\n    \"fullName\",\n    \"version\",\n    \"postscriptName\",\n    \"trademark\",\n    \"manufacturer\",\n    \"designer\",\n    \"description\",\n    \"vendorURL\",\n    \"designerURL\",\n    \"license\",\n    \"licenseURL\",\n    null,\n    \"preferredFamily\",\n    \"preferredSubfamily\",\n    \"compatibleFull\",\n    \"sampleText\",\n    \"postscriptCIDFontName\",\n    \"wwsFamilyName\",\n    \"wwsSubfamilyName\"\n];\n$2bcf221753ec8e32$var$NameTable.process = function(stream) {\n    var records = {};\n    for (let record of this.records){\n        // find out what language this is for\n        let language = (0, $e449ad78d50845fe$export$2092376fd002e13)[record.platformID][record.languageID];\n        if (language == null && this.langTags != null && record.languageID >= 0x8000) language = this.langTags[record.languageID - 0x8000].tag;\n        if (language == null) language = record.platformID + \"-\" + record.languageID;\n        // if the nameID is >= 256, it is a font feature record (AAT)\n        let key = record.nameID >= 256 ? \"fontFeatures\" : $2bcf221753ec8e32$var$NAMES[record.nameID] || record.nameID;\n        if (records[key] == null) records[key] = {};\n        let obj = records[key];\n        if (record.nameID >= 256) obj = obj[record.nameID] || (obj[record.nameID] = {});\n        if (typeof record.string === \"string\" || typeof obj[language] !== \"string\") obj[language] = record.string;\n    }\n    this.records = records;\n};\n$2bcf221753ec8e32$var$NameTable.preEncode = function() {\n    if (Array.isArray(this.records)) return;\n    this.version = 0;\n    let records = [];\n    for(let key in this.records){\n        let val = this.records[key];\n        if (key === \"fontFeatures\") continue;\n        records.push({\n            platformID: 3,\n            encodingID: 1,\n            languageID: 0x409,\n            nameID: $2bcf221753ec8e32$var$NAMES.indexOf(key),\n            length: val.en.length * 2,\n            string: val.en\n        });\n        if (key === \"postscriptName\") records.push({\n            platformID: 1,\n            encodingID: 0,\n            languageID: 0,\n            nameID: $2bcf221753ec8e32$var$NAMES.indexOf(key),\n            length: val.en.length,\n            string: val.en\n        });\n    }\n    this.records = records;\n    this.count = records.length;\n    this.stringOffset = $2bcf221753ec8e32$var$NameTable.size(this, null, false);\n};\nvar $84b272aa31b70606$var$OS2 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    header: {\n        xAvgCharWidth: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        usWeightClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usWidthClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        fsType: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n            null,\n            \"noEmbedding\",\n            \"viewOnly\",\n            \"editable\",\n            null,\n            null,\n            null,\n            null,\n            \"noSubsetting\",\n            \"bitmapOnly\"\n        ]),\n        ySubscriptXSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySubscriptYSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySubscriptXOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySubscriptYOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptXSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptYSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptXOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        ySuperscriptYOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yStrikeoutSize: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yStrikeoutPosition: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        sFamilyClass: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        panose: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 10),\n        ulCharRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 4),\n        vendorID: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n        fsSelection: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n            \"italic\",\n            \"underscore\",\n            \"negative\",\n            \"outlined\",\n            \"strikeout\",\n            \"bold\",\n            \"regular\",\n            \"useTypoMetrics\",\n            \"wws\",\n            \"oblique\"\n        ]),\n        usFirstCharIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usLastCharIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // The maximum Unicode index in this font\n    },\n    // The Apple version of this table ends here, but the Microsoft one continues on...\n    0: {},\n    1: {\n        typoAscender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoDescender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoLineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        winAscent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        winDescent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codePageRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 2)\n    },\n    2: {\n        // these should be common with version 1 somehow\n        typoAscender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoDescender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoLineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        winAscent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        winDescent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codePageRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 2),\n        xHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        capHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        defaultChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        breakChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        maxContent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    5: {\n        typoAscender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoDescender: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        typoLineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        winAscent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        winDescent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        codePageRange: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, 2),\n        xHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        capHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        defaultChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        breakChar: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        maxContent: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usLowerOpticalPointSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        usUpperOpticalPointSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }\n});\nlet $84b272aa31b70606$var$versions = $84b272aa31b70606$var$OS2.versions;\n$84b272aa31b70606$var$versions[3] = $84b272aa31b70606$var$versions[4] = $84b272aa31b70606$var$versions[2];\nvar $84b272aa31b70606$export$2e2bcd8739ae039 = $84b272aa31b70606$var$OS2;\nvar $32d9e2eb9565d93c$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32, {\n    header: {\n        italicAngle: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        underlinePosition: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        underlineThickness: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        isFixedPitch: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        minMemType42: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        maxMemType42: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        minMemType1: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        maxMemType1: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n    },\n    1: {},\n    2: {\n        numberOfGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphNameIndex: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numberOfGlyphs\"),\n        names: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8))\n    },\n    2.5: {\n        numberOfGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, \"numberOfGlyphs\")\n    },\n    3: {},\n    4: {\n        map: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (t)=>t.parent.maxp.numGlyphs)\n    }\n});\nvar $5202bd9d9ad8eaac$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    controlValues: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16)\n});\nvar // These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\n$5c0f37ca5ffb1850$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    instructions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8)\n});\nlet $2b2b260902b1c57e$var$loca = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"head.indexToLocFormat\", {\n    0: {\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    },\n    1: {\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32)\n    }\n});\n$2b2b260902b1c57e$var$loca.process = function() {\n    if (this.version === 0 && !this._processed) {\n        for(let i = 0; i < this.offsets.length; i++)this.offsets[i] <<= 1;\n        this._processed = true;\n    }\n};\n$2b2b260902b1c57e$var$loca.preEncode = function() {\n    if (this.version === 0 && this._processed !== false) {\n        for(let i = 0; i < this.offsets.length; i++)this.offsets[i] >>>= 1;\n        this._processed = false;\n    }\n};\nvar $2b2b260902b1c57e$export$2e2bcd8739ae039 = $2b2b260902b1c57e$var$loca;\nvar $7afb878c7bea4f66$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    controlValueProgram: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8)\n});\nvar $6c92b6371bce8bd9$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer);\nclass $43e9821ef3717eec$export$2e2bcd8739ae039 {\n    getCFFVersion(ctx) {\n        while(ctx && !ctx.hdrSize)ctx = ctx.parent;\n        return ctx ? ctx.version : -1;\n    }\n    decode(stream, parent) {\n        let version = this.getCFFVersion(parent);\n        let count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();\n        if (count === 0) return [];\n        let offSize = stream.readUInt8();\n        let offsetType;\n        if (offSize === 1) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint8;\n        else if (offSize === 2) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16;\n        else if (offSize === 3) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint24;\n        else if (offSize === 4) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint32;\n        else throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);\n        let ret = [];\n        let startPos = stream.pos + (count + 1) * offSize - 1;\n        let start = offsetType.decode(stream);\n        for(let i = 0; i < count; i++){\n            let end = offsetType.decode(stream);\n            if (this.type != null) {\n                let pos = stream.pos;\n                stream.pos = startPos + start;\n                parent.length = end - start;\n                ret.push(this.type.decode(stream, parent));\n                stream.pos = pos;\n            } else ret.push({\n                offset: startPos + start,\n                length: end - start\n            });\n            start = end;\n        }\n        stream.pos = startPos + start;\n        return ret;\n    }\n    size(arr, parent) {\n        let size = 2;\n        if (arr.length === 0) return size;\n        let type = this.type || new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer;\n        // find maximum offset to detminine offset type\n        let offset = 1;\n        for(let i = 0; i < arr.length; i++){\n            let item = arr[i];\n            offset += type.size(item, parent);\n        }\n        let offsetType;\n        if (offset <= 0xff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint8;\n        else if (offset <= 0xffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16;\n        else if (offset <= 0xffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint24;\n        else if (offset <= 0xffffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint32;\n        else throw new Error(\"Bad offset in CFFIndex\");\n        size += 1 + offsetType.size() * (arr.length + 1);\n        size += offset - 1;\n        return size;\n    }\n    encode(stream, arr, parent) {\n        stream.writeUInt16BE(arr.length);\n        if (arr.length === 0) return;\n        let type = this.type || new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer;\n        // find maximum offset to detminine offset type\n        let sizes = [];\n        let offset = 1;\n        for (let item of arr){\n            let s = type.size(item, parent);\n            sizes.push(s);\n            offset += s;\n        }\n        let offsetType;\n        if (offset <= 0xff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint8;\n        else if (offset <= 0xffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16;\n        else if (offset <= 0xffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint24;\n        else if (offset <= 0xffffffff) offsetType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint32;\n        else throw new Error(\"Bad offset in CFFIndex\");\n        // write offset size\n        stream.writeUInt8(offsetType.size());\n        // write elements\n        offset = 1;\n        offsetType.encode(stream, offset);\n        for (let size of sizes){\n            offset += size;\n            offsetType.encode(stream, offset);\n        }\n        for (let item1 of arr)type.encode(stream, item1, parent);\n        return;\n    }\n    constructor(type){\n        this.type = type;\n    }\n}\nconst $c2d28e92708f99da$var$FLOAT_EOF = 0xf;\nconst $c2d28e92708f99da$var$FLOAT_LOOKUP = [\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \".\",\n    \"E\",\n    \"E-\",\n    null,\n    \"-\"\n];\nconst $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP = {\n    \".\": 10,\n    \"E\": 11,\n    \"E-\": 12,\n    \"-\": 14\n};\nclass $c2d28e92708f99da$export$2e2bcd8739ae039 {\n    static decode(stream, value) {\n        if (32 <= value && value <= 246) return value - 139;\n        if (247 <= value && value <= 250) return (value - 247) * 256 + stream.readUInt8() + 108;\n        if (251 <= value && value <= 254) return -(value - 251) * 256 - stream.readUInt8() - 108;\n        if (value === 28) return stream.readInt16BE();\n        if (value === 29) return stream.readInt32BE();\n        if (value === 30) {\n            let str = \"\";\n            while(true){\n                let b = stream.readUInt8();\n                let n1 = b >> 4;\n                if (n1 === $c2d28e92708f99da$var$FLOAT_EOF) break;\n                str += $c2d28e92708f99da$var$FLOAT_LOOKUP[n1];\n                let n2 = b & 15;\n                if (n2 === $c2d28e92708f99da$var$FLOAT_EOF) break;\n                str += $c2d28e92708f99da$var$FLOAT_LOOKUP[n2];\n            }\n            return parseFloat(str);\n        }\n        return null;\n    }\n    static size(value) {\n        // if the value needs to be forced to the largest size (32 bit)\n        // e.g. for unknown pointers, set to 32768\n        if (value.forceLarge) value = 32768;\n        if ((value | 0) !== value) {\n            let str = \"\" + value;\n            return 1 + Math.ceil((str.length + 1) / 2);\n        } else if (-107 <= value && value <= 107) return 1;\n        else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) return 2;\n        else if (-32768 <= value && value <= 32767) return 3;\n        else return 5;\n    }\n    static encode(stream, value) {\n        // if the value needs to be forced to the largest size (32 bit)\n        // e.g. for unknown pointers, save the old value and set to 32768\n        let val = Number(value);\n        if (value.forceLarge) {\n            stream.writeUInt8(29);\n            return stream.writeInt32BE(val);\n        } else if ((val | 0) !== val) {\n            stream.writeUInt8(30);\n            let str = \"\" + val;\n            for(let i = 0; i < str.length; i += 2){\n                let c1 = str[i];\n                let n1 = $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP[c1] || +c1;\n                if (i === str.length - 1) var n2 = $c2d28e92708f99da$var$FLOAT_EOF;\n                else {\n                    let c2 = str[i + 1];\n                    var n2 = $c2d28e92708f99da$var$FLOAT_ENCODE_LOOKUP[c2] || +c2;\n                }\n                stream.writeUInt8(n1 << 4 | n2 & 15);\n            }\n            if (n2 !== $c2d28e92708f99da$var$FLOAT_EOF) return stream.writeUInt8($c2d28e92708f99da$var$FLOAT_EOF << 4);\n        } else if (-107 <= val && val <= 107) return stream.writeUInt8(val + 139);\n        else if (108 <= val && val <= 1131) {\n            val -= 108;\n            stream.writeUInt8((val >> 8) + 247);\n            return stream.writeUInt8(val & 0xff);\n        } else if (-1131 <= val && val <= -108) {\n            val = -val - 108;\n            stream.writeUInt8((val >> 8) + 251);\n            return stream.writeUInt8(val & 0xff);\n        } else if (-32768 <= val && val <= 32767) {\n            stream.writeUInt8(28);\n            return stream.writeInt16BE(val);\n        } else {\n            stream.writeUInt8(29);\n            return stream.writeInt32BE(val);\n        }\n    }\n}\nclass $61aa549f16d58b9b$export$2e2bcd8739ae039 {\n    decodeOperands(type, stream, ret, operands) {\n        if (Array.isArray(type)) return operands.map((op, i)=>this.decodeOperands(type[i], stream, ret, [\n                op\n            ]));\n        else if (type.decode != null) return type.decode(stream, ret, operands);\n        else switch(type){\n            case \"number\":\n            case \"offset\":\n            case \"sid\":\n                return operands[0];\n            case \"boolean\":\n                return !!operands[0];\n            default:\n                return operands;\n        }\n    }\n    encodeOperands(type, stream, ctx, operands) {\n        if (Array.isArray(type)) return operands.map((op, i)=>this.encodeOperands(type[i], stream, ctx, op)[0]);\n        else if (type.encode != null) return type.encode(stream, operands, ctx);\n        else if (typeof operands === \"number\") return [\n            operands\n        ];\n        else if (typeof operands === \"boolean\") return [\n            +operands\n        ];\n        else if (Array.isArray(operands)) return operands;\n        else return [\n            operands\n        ];\n    }\n    decode(stream, parent) {\n        let end = stream.pos + parent.length;\n        let ret = {};\n        let operands = [];\n        // define hidden properties\n        Object.defineProperties(ret, {\n            parent: {\n                value: parent\n            },\n            _startOffset: {\n                value: stream.pos\n            }\n        });\n        // fill in defaults\n        for(let key in this.fields){\n            let field = this.fields[key];\n            ret[field[1]] = field[3];\n        }\n        while(stream.pos < end){\n            let b = stream.readUInt8();\n            if (b < 28) {\n                if (b === 12) b = b << 8 | stream.readUInt8();\n                let field = this.fields[b];\n                if (!field) throw new Error(`Unknown operator ${b}`);\n                let val = this.decodeOperands(field[2], stream, ret, operands);\n                if (val != null) {\n                    if (val instanceof (0, restructure__WEBPACK_IMPORTED_MODULE_0__.PropertyDescriptor)) Object.defineProperty(ret, field[1], val);\n                    else ret[field[1]] = val;\n                }\n                operands = [];\n            } else operands.push((0, $c2d28e92708f99da$export$2e2bcd8739ae039).decode(stream, b));\n        }\n        return ret;\n    }\n    size(dict, parent, includePointers = true) {\n        let ctx = {\n            parent: parent,\n            val: dict,\n            pointerSize: 0,\n            startOffset: parent.startOffset || 0\n        };\n        let len = 0;\n        for(let k in this.fields){\n            let field = this.fields[k];\n            let val = dict[field[1]];\n            if (val == null || (0, fast_deep_equal__WEBPACK_IMPORTED_MODULE_2__)(val, field[3])) continue;\n            let operands = this.encodeOperands(field[2], null, ctx, val);\n            for (let op of operands)len += (0, $c2d28e92708f99da$export$2e2bcd8739ae039).size(op);\n            let key = Array.isArray(field[0]) ? field[0] : [\n                field[0]\n            ];\n            len += key.length;\n        }\n        if (includePointers) len += ctx.pointerSize;\n        return len;\n    }\n    encode(stream, dict, parent) {\n        let ctx = {\n            pointers: [],\n            startOffset: stream.pos,\n            parent: parent,\n            val: dict,\n            pointerSize: 0\n        };\n        ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n        for (let field of this.ops){\n            let val = dict[field[1]];\n            if (val == null || (0, fast_deep_equal__WEBPACK_IMPORTED_MODULE_2__)(val, field[3])) continue;\n            let operands = this.encodeOperands(field[2], stream, ctx, val);\n            for (let op of operands)(0, $c2d28e92708f99da$export$2e2bcd8739ae039).encode(stream, op);\n            let key = Array.isArray(field[0]) ? field[0] : [\n                field[0]\n            ];\n            for (let op1 of key)stream.writeUInt8(op1);\n        }\n        let i = 0;\n        while(i < ctx.pointers.length){\n            let ptr = ctx.pointers[i++];\n            ptr.type.encode(stream, ptr.val, ptr.parent);\n        }\n        return;\n    }\n    constructor(ops = []){\n        this.ops = ops;\n        this.fields = {};\n        for (let field of ops){\n            let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n            this.fields[key] = field;\n        }\n    }\n}\nclass $0e34a43d05bde82c$export$2e2bcd8739ae039 extends restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer {\n    decode(stream, parent, operands) {\n        this.offsetType = {\n            decode: ()=>operands[0]\n        };\n        return super.decode(stream, parent, operands);\n    }\n    encode(stream, value, ctx) {\n        if (!stream) {\n            // compute the size (so ctx.pointerSize is correct)\n            this.offsetType = {\n                size: ()=>0\n            };\n            this.size(value, ctx);\n            return [\n                new $0e34a43d05bde82c$var$Ptr(0)\n            ];\n        }\n        let ptr = null;\n        this.offsetType = {\n            encode: (stream, val)=>ptr = val\n        };\n        super.encode(stream, value, ctx);\n        return [\n            new $0e34a43d05bde82c$var$Ptr(ptr)\n        ];\n    }\n    constructor(type, options = {}){\n        if (options.type == null) options.type = \"global\";\n        super(null, type, options);\n    }\n}\nclass $0e34a43d05bde82c$var$Ptr {\n    valueOf() {\n        return this.val;\n    }\n    constructor(val){\n        this.val = val;\n        this.forceLarge = true;\n    }\n}\nclass $6d59db2e29cc77b3$var$CFFBlendOp {\n    static decode(stream, parent, operands) {\n        let numBlends = operands.pop();\n        // TODO: actually blend. For now just consume the deltas\n        // since we don't use any of the values anyway.\n        while(operands.length > numBlends)operands.pop();\n    }\n}\nvar $6d59db2e29cc77b3$export$2e2bcd8739ae039 = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([\n    // key       name                    type                                          default\n    [\n        6,\n        \"BlueValues\",\n        \"delta\",\n        null\n    ],\n    [\n        7,\n        \"OtherBlues\",\n        \"delta\",\n        null\n    ],\n    [\n        8,\n        \"FamilyBlues\",\n        \"delta\",\n        null\n    ],\n    [\n        9,\n        \"FamilyOtherBlues\",\n        \"delta\",\n        null\n    ],\n    [\n        [\n            12,\n            9\n        ],\n        \"BlueScale\",\n        \"number\",\n        0.039625\n    ],\n    [\n        [\n            12,\n            10\n        ],\n        \"BlueShift\",\n        \"number\",\n        7\n    ],\n    [\n        [\n            12,\n            11\n        ],\n        \"BlueFuzz\",\n        \"number\",\n        1\n    ],\n    [\n        10,\n        \"StdHW\",\n        \"number\",\n        null\n    ],\n    [\n        11,\n        \"StdVW\",\n        \"number\",\n        null\n    ],\n    [\n        [\n            12,\n            12\n        ],\n        \"StemSnapH\",\n        \"delta\",\n        null\n    ],\n    [\n        [\n            12,\n            13\n        ],\n        \"StemSnapV\",\n        \"delta\",\n        null\n    ],\n    [\n        [\n            12,\n            14\n        ],\n        \"ForceBold\",\n        \"boolean\",\n        false\n    ],\n    [\n        [\n            12,\n            17\n        ],\n        \"LanguageGroup\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            18\n        ],\n        \"ExpansionFactor\",\n        \"number\",\n        0.06\n    ],\n    [\n        [\n            12,\n            19\n        ],\n        \"initialRandomSeed\",\n        \"number\",\n        0\n    ],\n    [\n        20,\n        \"defaultWidthX\",\n        \"number\",\n        0\n    ],\n    [\n        21,\n        \"nominalWidthX\",\n        \"number\",\n        0\n    ],\n    [\n        22,\n        \"vsindex\",\n        \"number\",\n        0\n    ],\n    [\n        23,\n        \"blend\",\n        $6d59db2e29cc77b3$var$CFFBlendOp,\n        null\n    ],\n    [\n        19,\n        \"Subrs\",\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039), {\n            type: \"local\"\n        }),\n        null\n    ]\n]);\nvar // not edit. Length should be 391.\n$229224aec43783c5$export$2e2bcd8739ae039 = [\n    \".notdef\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"questiondown\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"ring\",\n    \"cedilla\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"AE\",\n    \"ordfeminine\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"ae\",\n    \"dotlessi\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\",\n    \"onesuperior\",\n    \"logicalnot\",\n    \"mu\",\n    \"trademark\",\n    \"Eth\",\n    \"onehalf\",\n    \"plusminus\",\n    \"Thorn\",\n    \"onequarter\",\n    \"divide\",\n    \"brokenbar\",\n    \"degree\",\n    \"thorn\",\n    \"threequarters\",\n    \"twosuperior\",\n    \"registered\",\n    \"minus\",\n    \"eth\",\n    \"multiply\",\n    \"threesuperior\",\n    \"copyright\",\n    \"Aacute\",\n    \"Acircumflex\",\n    \"Adieresis\",\n    \"Agrave\",\n    \"Aring\",\n    \"Atilde\",\n    \"Ccedilla\",\n    \"Eacute\",\n    \"Ecircumflex\",\n    \"Edieresis\",\n    \"Egrave\",\n    \"Iacute\",\n    \"Icircumflex\",\n    \"Idieresis\",\n    \"Igrave\",\n    \"Ntilde\",\n    \"Oacute\",\n    \"Ocircumflex\",\n    \"Odieresis\",\n    \"Ograve\",\n    \"Otilde\",\n    \"Scaron\",\n    \"Uacute\",\n    \"Ucircumflex\",\n    \"Udieresis\",\n    \"Ugrave\",\n    \"Yacute\",\n    \"Ydieresis\",\n    \"Zcaron\",\n    \"aacute\",\n    \"acircumflex\",\n    \"adieresis\",\n    \"agrave\",\n    \"aring\",\n    \"atilde\",\n    \"ccedilla\",\n    \"eacute\",\n    \"ecircumflex\",\n    \"edieresis\",\n    \"egrave\",\n    \"iacute\",\n    \"icircumflex\",\n    \"idieresis\",\n    \"igrave\",\n    \"ntilde\",\n    \"oacute\",\n    \"ocircumflex\",\n    \"odieresis\",\n    \"ograve\",\n    \"otilde\",\n    \"scaron\",\n    \"uacute\",\n    \"ucircumflex\",\n    \"udieresis\",\n    \"ugrave\",\n    \"yacute\",\n    \"ydieresis\",\n    \"zcaron\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"isuperior\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"ff\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"Dotaccentsmall\",\n    \"Macronsmall\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"zerosuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\",\n    \"001.000\",\n    \"001.001\",\n    \"001.002\",\n    \"001.003\",\n    \"Black\",\n    \"Bold\",\n    \"Book\",\n    \"Light\",\n    \"Medium\",\n    \"Regular\",\n    \"Roman\",\n    \"Semibold\"\n];\nlet $bc0433d9b7e41f5f$export$dee0027060fa13bd = [\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"\",\n    \"questiondown\",\n    \"\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"\",\n    \"ring\",\n    \"cedilla\",\n    \"\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"AE\",\n    \"\",\n    \"ordfeminine\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"ae\",\n    \"\",\n    \"\",\n    \"\",\n    \"dotlessi\",\n    \"\",\n    \"\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\"\n];\nlet $bc0433d9b7e41f5f$export$4f58f497e14a53c3 = [\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"space\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"fraction\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"colon\",\n    \"semicolon\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"\",\n    \"\",\n    \"isuperior\",\n    \"\",\n    \"\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"\",\n    \"\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"\",\n    \"ff\",\n    \"fi\",\n    \"fl\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"\",\n    \"\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"\",\n    \"Dotaccentsmall\",\n    \"\",\n    \"\",\n    \"Macronsmall\",\n    \"\",\n    \"\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"\",\n    \"\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"\",\n    \"\",\n    \"\",\n    \"onequarter\",\n    \"onehalf\",\n    \"threequarters\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"\",\n    \"\",\n    \"zerosuperior\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\"\n];\nlet $ef658f5c9a1488b2$export$c33b50336c234f16 = [\n    \".notdef\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"questiondown\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"ring\",\n    \"cedilla\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"AE\",\n    \"ordfeminine\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"ae\",\n    \"dotlessi\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\",\n    \"onesuperior\",\n    \"logicalnot\",\n    \"mu\",\n    \"trademark\",\n    \"Eth\",\n    \"onehalf\",\n    \"plusminus\",\n    \"Thorn\",\n    \"onequarter\",\n    \"divide\",\n    \"brokenbar\",\n    \"degree\",\n    \"thorn\",\n    \"threequarters\",\n    \"twosuperior\",\n    \"registered\",\n    \"minus\",\n    \"eth\",\n    \"multiply\",\n    \"threesuperior\",\n    \"copyright\",\n    \"Aacute\",\n    \"Acircumflex\",\n    \"Adieresis\",\n    \"Agrave\",\n    \"Aring\",\n    \"Atilde\",\n    \"Ccedilla\",\n    \"Eacute\",\n    \"Ecircumflex\",\n    \"Edieresis\",\n    \"Egrave\",\n    \"Iacute\",\n    \"Icircumflex\",\n    \"Idieresis\",\n    \"Igrave\",\n    \"Ntilde\",\n    \"Oacute\",\n    \"Ocircumflex\",\n    \"Odieresis\",\n    \"Ograve\",\n    \"Otilde\",\n    \"Scaron\",\n    \"Uacute\",\n    \"Ucircumflex\",\n    \"Udieresis\",\n    \"Ugrave\",\n    \"Yacute\",\n    \"Ydieresis\",\n    \"Zcaron\",\n    \"aacute\",\n    \"acircumflex\",\n    \"adieresis\",\n    \"agrave\",\n    \"aring\",\n    \"atilde\",\n    \"ccedilla\",\n    \"eacute\",\n    \"ecircumflex\",\n    \"edieresis\",\n    \"egrave\",\n    \"iacute\",\n    \"icircumflex\",\n    \"idieresis\",\n    \"igrave\",\n    \"ntilde\",\n    \"oacute\",\n    \"ocircumflex\",\n    \"odieresis\",\n    \"ograve\",\n    \"otilde\",\n    \"scaron\",\n    \"uacute\",\n    \"ucircumflex\",\n    \"udieresis\",\n    \"ugrave\",\n    \"yacute\",\n    \"ydieresis\",\n    \"zcaron\"\n];\nlet $ef658f5c9a1488b2$export$3ed0f9e1fee8d489 = [\n    \".notdef\",\n    \"space\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"fraction\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"colon\",\n    \"semicolon\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"isuperior\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"ff\",\n    \"fi\",\n    \"fl\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"Dotaccentsmall\",\n    \"Macronsmall\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"onequarter\",\n    \"onehalf\",\n    \"threequarters\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"zerosuperior\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\"\n];\nlet $ef658f5c9a1488b2$export$dc28be11139d4120 = [\n    \".notdef\",\n    \"space\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"fraction\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"colon\",\n    \"semicolon\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"isuperior\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"ff\",\n    \"fi\",\n    \"fl\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"parenrightinferior\",\n    \"hyphensuperior\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"centoldstyle\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"onequarter\",\n    \"onehalf\",\n    \"threequarters\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"zerosuperior\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\"\n];\n//########################\n// Scripts and Languages #\n//########################\nlet $7cbbe4e24ef3cb75$var$LangSysTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    reqFeatureIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureIndexes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"featureCount\")\n});\nlet $7cbbe4e24ef3cb75$var$LangSysRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    langSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$LangSysTable, {\n        type: \"parent\"\n    })\n});\nlet $7cbbe4e24ef3cb75$var$Script = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    defaultLangSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$LangSysTable),\n    count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    langSysRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LangSysRecord, \"count\")\n});\nlet $7cbbe4e24ef3cb75$var$ScriptRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    script: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$Script, {\n        type: \"parent\"\n    })\n});\nlet $7cbbe4e24ef3cb75$export$3e15fc05ce864229 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$ScriptRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\n//#######################\n// Features and Lookups #\n//#######################\nlet $7cbbe4e24ef3cb75$var$FeatureParams = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $7cbbe4e24ef3cb75$export$6e91cf7616333d5 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    featureParams: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$FeatureParams),\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupListIndexes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"lookupCount\")\n});\nlet $7cbbe4e24ef3cb75$var$FeatureRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    feature: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$6e91cf7616333d5, {\n        type: \"parent\"\n    })\n});\nlet $7cbbe4e24ef3cb75$export$aa18130def4b6cb4 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$FeatureRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $7cbbe4e24ef3cb75$var$LookupFlags = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    markAttachmentType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n        \"rightToLeft\",\n        \"ignoreBaseGlyphs\",\n        \"ignoreLigatures\",\n        \"ignoreMarks\",\n        \"useMarkFilteringSet\"\n    ])\n});\nfunction $7cbbe4e24ef3cb75$export$df0008c6ff2da22a(SubTable) {\n    let Lookup = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        lookupType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        flags: $7cbbe4e24ef3cb75$var$LookupFlags,\n        subTableCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        subTables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, SubTable), \"subTableCount\"),\n        markFilteringSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.flags.flags.useMarkFilteringSet)\n    });\n    return new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, Lookup), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\n}\n//#################\n// Coverage Table #\n//#################\nlet $7cbbe4e24ef3cb75$var$RangeRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    start: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    end: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    startCoverageIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $7cbbe4e24ef3cb75$export$17608c3f81a6111 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"glyphCount\")\n    },\n    2: {\n        rangeCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$RangeRecord, \"rangeCount\")\n    }\n});\n//#########################\n// Class Definition Table #\n//#########################\nlet $7cbbe4e24ef3cb75$var$ClassRangeRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    start: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    end: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    class: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $7cbbe4e24ef3cb75$export$843d551fbbafef71 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        startGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classValueArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"glyphCount\")\n    },\n    2: {\n        classRangeCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classRangeRecord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$ClassRangeRecord, \"classRangeCount\")\n    }\n});\nlet $7cbbe4e24ef3cb75$export$8215d14a63d9fb10 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    a: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    b: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    deltaFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\n//#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\nlet $7cbbe4e24ef3cb75$var$LookupRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    sequenceIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupListIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $7cbbe4e24ef3cb75$var$Rule = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    input: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.glyphCount - 1),\n    lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LookupRecord, \"lookupCount\")\n});\nlet $7cbbe4e24ef3cb75$var$RuleSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$Rule), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $7cbbe4e24ef3cb75$var$ClassRule = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    classes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.glyphCount - 1),\n    lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LookupRecord, \"lookupCount\")\n});\nlet $7cbbe4e24ef3cb75$var$ClassSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$ClassRule), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $7cbbe4e24ef3cb75$export$841858b892ce1f4c = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n        ruleSetCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        ruleSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$RuleSet), \"ruleSetCount\")\n    },\n    2: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n        classDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n        classSetCnt: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$ClassSet), \"classSetCnt\")\n    },\n    3: {\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverages: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), \"glyphCount\"),\n        lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LookupRecord, \"lookupCount\")\n    }\n});\n//######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\nlet $7cbbe4e24ef3cb75$var$ChainRule = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    backtrackGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    backtrack: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"backtrackGlyphCount\"),\n    inputGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    input: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.inputGlyphCount - 1),\n    lookaheadGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookahead: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"lookaheadGlyphCount\"),\n    lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LookupRecord, \"lookupCount\")\n});\nlet $7cbbe4e24ef3cb75$var$ChainRuleSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$ChainRule), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $7cbbe4e24ef3cb75$export$5e6d09e6861162f6 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n        chainCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        chainRuleSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$ChainRuleSet), \"chainCount\")\n    },\n    2: {\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111),\n        backtrackClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n        inputClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n        lookaheadClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$843d551fbbafef71),\n        chainCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        chainClassSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$var$ChainRuleSet), \"chainCount\")\n    },\n    3: {\n        backtrackGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        backtrackCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), \"backtrackGlyphCount\"),\n        inputGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        inputCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), \"inputGlyphCount\"),\n        lookaheadGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookaheadCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $7cbbe4e24ef3cb75$export$17608c3f81a6111), \"lookaheadGlyphCount\"),\n        lookupCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($7cbbe4e24ef3cb75$var$LookupRecord, \"lookupCount\")\n    }\n});\n/*******************\n * Variation Store *\n *******************/ let $1a47b0c45c1c22fe$var$F2DOT14 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Fixed(16, \"BE\", 14);\nlet $1a47b0c45c1c22fe$var$RegionAxisCoordinates = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    startCoord: $1a47b0c45c1c22fe$var$F2DOT14,\n    peakCoord: $1a47b0c45c1c22fe$var$F2DOT14,\n    endCoord: $1a47b0c45c1c22fe$var$F2DOT14\n});\nlet $1a47b0c45c1c22fe$var$VariationRegionList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    regionCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    variationRegions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($1a47b0c45c1c22fe$var$RegionAxisCoordinates, \"axisCount\"), \"regionCount\")\n});\nlet $1a47b0c45c1c22fe$var$DeltaSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    shortDeltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, (t)=>t.parent.shortDeltaCount),\n    regionDeltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int8, (t)=>t.parent.regionIndexCount - t.parent.shortDeltaCount),\n    deltas: (t)=>t.shortDeltas.concat(t.regionDeltas)\n});\nlet $1a47b0c45c1c22fe$var$ItemVariationData = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    itemCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    shortDeltaCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    regionIndexCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    regionIndexes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"regionIndexCount\"),\n    deltaSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($1a47b0c45c1c22fe$var$DeltaSet, \"itemCount\")\n});\nlet $1a47b0c45c1c22fe$export$fe1b122a2710f241 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    variationRegionList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $1a47b0c45c1c22fe$var$VariationRegionList),\n    variationDataCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    itemVariationData: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $1a47b0c45c1c22fe$var$ItemVariationData), \"variationDataCount\")\n});\n/**********************\n * Feature Variations *\n **********************/ let $1a47b0c45c1c22fe$var$ConditionTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        axisIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        axisIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        filterRangeMinValue: $1a47b0c45c1c22fe$var$F2DOT14,\n        filterRangeMaxValue: $1a47b0c45c1c22fe$var$F2DOT14\n    }\n});\nlet $1a47b0c45c1c22fe$var$ConditionSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    conditionCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    conditionTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $1a47b0c45c1c22fe$var$ConditionTable), \"conditionCount\")\n});\nlet $1a47b0c45c1c22fe$var$FeatureTableSubstitutionRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    featureIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    alternateFeatureTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $7cbbe4e24ef3cb75$export$6e91cf7616333d5), {\n        type: \"parent\"\n    })\n});\nlet $1a47b0c45c1c22fe$var$FeatureTableSubstitution = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    substitutionCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    substitutions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($1a47b0c45c1c22fe$var$FeatureTableSubstitutionRecord, \"substitutionCount\")\n});\nlet $1a47b0c45c1c22fe$var$FeatureVariationRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    conditionSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $1a47b0c45c1c22fe$var$ConditionSet, {\n        type: \"parent\"\n    }),\n    featureTableSubstitution: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $1a47b0c45c1c22fe$var$FeatureTableSubstitution, {\n        type: \"parent\"\n    })\n});\nlet $1a47b0c45c1c22fe$export$441b70b7971dd419 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureVariationRecordCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    featureVariationRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($1a47b0c45c1c22fe$var$FeatureVariationRecord, \"featureVariationRecordCount\")\n});\n// Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\nclass $b84fd3dd9d8eddb2$var$PredefinedOp {\n    decode(stream, parent, operands) {\n        if (this.predefinedOps[operands[0]]) return this.predefinedOps[operands[0]];\n        return this.type.decode(stream, parent, operands);\n    }\n    size(value, ctx) {\n        return this.type.size(value, ctx);\n    }\n    encode(stream, value, ctx) {\n        let index = this.predefinedOps.indexOf(value);\n        if (index !== -1) return index;\n        return this.type.encode(stream, value, ctx);\n    }\n    constructor(predefinedOps, type){\n        this.predefinedOps = predefinedOps;\n        this.type = type;\n    }\n}\nclass $b84fd3dd9d8eddb2$var$CFFEncodingVersion extends restructure__WEBPACK_IMPORTED_MODULE_0__.Number {\n    decode(stream) {\n        return restructure__WEBPACK_IMPORTED_MODULE_0__.uint8.decode(stream) & 0x7f;\n    }\n    constructor(){\n        super(\"UInt8\");\n    }\n}\nlet $b84fd3dd9d8eddb2$var$Range1 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nLeft: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $b84fd3dd9d8eddb2$var$Range2 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nLeft: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $b84fd3dd9d8eddb2$var$CFFCustomEncoding = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(new $b84fd3dd9d8eddb2$var$CFFEncodingVersion(), {\n    0: {\n        nCodes: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        codes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, \"nCodes\")\n    },\n    1: {\n        nRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        ranges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($b84fd3dd9d8eddb2$var$Range1, \"nRanges\")\n    }\n});\nlet $b84fd3dd9d8eddb2$var$CFFEncoding = new $b84fd3dd9d8eddb2$var$PredefinedOp([\n    (0, $bc0433d9b7e41f5f$export$dee0027060fa13bd),\n    (0, $bc0433d9b7e41f5f$export$4f58f497e14a53c3)\n], new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFCustomEncoding, {\n    lazy: true\n}));\n// Decodes an array of ranges until the total\n// length is equal to the provided length.\nclass $b84fd3dd9d8eddb2$var$RangeArray extends restructure__WEBPACK_IMPORTED_MODULE_0__.Array {\n    decode(stream, parent) {\n        let length = (0, restructure__WEBPACK_IMPORTED_MODULE_0__.resolveLength)(this.length, stream, parent);\n        let count = 0;\n        let res = [];\n        while(count < length){\n            let range = this.type.decode(stream, parent);\n            range.offset = count;\n            count += range.nLeft + 1;\n            res.push(range);\n        }\n        return res;\n    }\n}\nlet $b84fd3dd9d8eddb2$var$CFFCustomCharset = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, {\n    0: {\n        glyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.parent.CharStrings.length - 1)\n    },\n    1: {\n        ranges: new $b84fd3dd9d8eddb2$var$RangeArray($b84fd3dd9d8eddb2$var$Range1, (t)=>t.parent.CharStrings.length - 1)\n    },\n    2: {\n        ranges: new $b84fd3dd9d8eddb2$var$RangeArray($b84fd3dd9d8eddb2$var$Range2, (t)=>t.parent.CharStrings.length - 1)\n    }\n});\nlet $b84fd3dd9d8eddb2$var$CFFCharset = new $b84fd3dd9d8eddb2$var$PredefinedOp([\n    (0, $ef658f5c9a1488b2$export$c33b50336c234f16),\n    (0, $ef658f5c9a1488b2$export$3ed0f9e1fee8d489),\n    (0, $ef658f5c9a1488b2$export$dc28be11139d4120)\n], new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFCustomCharset, {\n    lazy: true\n}));\nlet $b84fd3dd9d8eddb2$var$FDRange3 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    fd: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $b84fd3dd9d8eddb2$var$FDRange4 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    first: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    fd: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $b84fd3dd9d8eddb2$var$FDSelect = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, {\n    0: {\n        fds: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.parent.CharStrings.length)\n    },\n    3: {\n        nRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        ranges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($b84fd3dd9d8eddb2$var$FDRange3, \"nRanges\"),\n        sentinel: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    4: {\n        nRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        ranges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($b84fd3dd9d8eddb2$var$FDRange4, \"nRanges\"),\n        sentinel: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n    }\n});\nlet $b84fd3dd9d8eddb2$var$ptr = new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)((0, $6d59db2e29cc77b3$export$2e2bcd8739ae039));\nclass $b84fd3dd9d8eddb2$var$CFFPrivateOp {\n    decode(stream, parent, operands) {\n        parent.length = operands[0];\n        return $b84fd3dd9d8eddb2$var$ptr.decode(stream, parent, [\n            operands[1]\n        ]);\n    }\n    size(dict, ctx) {\n        return [\n            (0, $6d59db2e29cc77b3$export$2e2bcd8739ae039).size(dict, ctx, false),\n            $b84fd3dd9d8eddb2$var$ptr.size(dict, ctx)[0]\n        ];\n    }\n    encode(stream, dict, ctx) {\n        return [\n            (0, $6d59db2e29cc77b3$export$2e2bcd8739ae039).size(dict, ctx, false),\n            $b84fd3dd9d8eddb2$var$ptr.encode(stream, dict, ctx)[0]\n        ];\n    }\n}\nlet $b84fd3dd9d8eddb2$var$FontDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([\n    // key       name                   type(s)                                 default\n    [\n        18,\n        \"Private\",\n        new $b84fd3dd9d8eddb2$var$CFFPrivateOp,\n        null\n    ],\n    [\n        [\n            12,\n            38\n        ],\n        \"FontName\",\n        \"sid\",\n        null\n    ],\n    [\n        [\n            12,\n            7\n        ],\n        \"FontMatrix\",\n        \"array\",\n        [\n            0.001,\n            0,\n            0,\n            0.001,\n            0,\n            0\n        ]\n    ],\n    [\n        [\n            12,\n            5\n        ],\n        \"PaintType\",\n        \"number\",\n        0\n    ]\n]);\nlet $b84fd3dd9d8eddb2$var$CFFTopDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([\n    // key       name                   type(s)                                 default\n    [\n        [\n            12,\n            30\n        ],\n        \"ROS\",\n        [\n            \"sid\",\n            \"sid\",\n            \"number\"\n        ],\n        null\n    ],\n    [\n        0,\n        \"version\",\n        \"sid\",\n        null\n    ],\n    [\n        1,\n        \"Notice\",\n        \"sid\",\n        null\n    ],\n    [\n        [\n            12,\n            0\n        ],\n        \"Copyright\",\n        \"sid\",\n        null\n    ],\n    [\n        2,\n        \"FullName\",\n        \"sid\",\n        null\n    ],\n    [\n        3,\n        \"FamilyName\",\n        \"sid\",\n        null\n    ],\n    [\n        4,\n        \"Weight\",\n        \"sid\",\n        null\n    ],\n    [\n        [\n            12,\n            1\n        ],\n        \"isFixedPitch\",\n        \"boolean\",\n        false\n    ],\n    [\n        [\n            12,\n            2\n        ],\n        \"ItalicAngle\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            3\n        ],\n        \"UnderlinePosition\",\n        \"number\",\n        -100\n    ],\n    [\n        [\n            12,\n            4\n        ],\n        \"UnderlineThickness\",\n        \"number\",\n        50\n    ],\n    [\n        [\n            12,\n            5\n        ],\n        \"PaintType\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            6\n        ],\n        \"CharstringType\",\n        \"number\",\n        2\n    ],\n    [\n        [\n            12,\n            7\n        ],\n        \"FontMatrix\",\n        \"array\",\n        [\n            0.001,\n            0,\n            0,\n            0.001,\n            0,\n            0\n        ]\n    ],\n    [\n        13,\n        \"UniqueID\",\n        \"number\",\n        null\n    ],\n    [\n        5,\n        \"FontBBox\",\n        \"array\",\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ],\n    [\n        [\n            12,\n            8\n        ],\n        \"StrokeWidth\",\n        \"number\",\n        0\n    ],\n    [\n        14,\n        \"XUID\",\n        \"array\",\n        null\n    ],\n    [\n        15,\n        \"charset\",\n        $b84fd3dd9d8eddb2$var$CFFCharset,\n        (0, $ef658f5c9a1488b2$export$c33b50336c234f16)\n    ],\n    [\n        16,\n        \"Encoding\",\n        $b84fd3dd9d8eddb2$var$CFFEncoding,\n        (0, $bc0433d9b7e41f5f$export$dee0027060fa13bd)\n    ],\n    [\n        17,\n        \"CharStrings\",\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)),\n        null\n    ],\n    [\n        18,\n        \"Private\",\n        new $b84fd3dd9d8eddb2$var$CFFPrivateOp,\n        null\n    ],\n    [\n        [\n            12,\n            20\n        ],\n        \"SyntheticBase\",\n        \"number\",\n        null\n    ],\n    [\n        [\n            12,\n            21\n        ],\n        \"PostScript\",\n        \"sid\",\n        null\n    ],\n    [\n        [\n            12,\n            22\n        ],\n        \"BaseFontName\",\n        \"sid\",\n        null\n    ],\n    [\n        [\n            12,\n            23\n        ],\n        \"BaseFontBlend\",\n        \"delta\",\n        null\n    ],\n    // CID font specific\n    [\n        [\n            12,\n            31\n        ],\n        \"CIDFontVersion\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            32\n        ],\n        \"CIDFontRevision\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            33\n        ],\n        \"CIDFontType\",\n        \"number\",\n        0\n    ],\n    [\n        [\n            12,\n            34\n        ],\n        \"CIDCount\",\n        \"number\",\n        8720\n    ],\n    [\n        [\n            12,\n            35\n        ],\n        \"UIDBase\",\n        \"number\",\n        null\n    ],\n    [\n        [\n            12,\n            37\n        ],\n        \"FDSelect\",\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FDSelect),\n        null\n    ],\n    [\n        [\n            12,\n            36\n        ],\n        \"FDArray\",\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FontDict)),\n        null\n    ],\n    [\n        [\n            12,\n            38\n        ],\n        \"FontName\",\n        \"sid\",\n        null\n    ]\n]);\nlet $b84fd3dd9d8eddb2$var$VariationStore = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    itemVariationStore: (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241)\n});\nlet $b84fd3dd9d8eddb2$var$CFF2TopDict = new (0, $61aa549f16d58b9b$export$2e2bcd8739ae039)([\n    [\n        [\n            12,\n            7\n        ],\n        \"FontMatrix\",\n        \"array\",\n        [\n            0.001,\n            0,\n            0,\n            0.001,\n            0,\n            0\n        ]\n    ],\n    [\n        17,\n        \"CharStrings\",\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)),\n        null\n    ],\n    [\n        [\n            12,\n            37\n        ],\n        \"FDSelect\",\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FDSelect),\n        null\n    ],\n    [\n        [\n            12,\n            36\n        ],\n        \"FDArray\",\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)(new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$FontDict)),\n        null\n    ],\n    [\n        24,\n        \"vstore\",\n        new (0, $0e34a43d05bde82c$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$VariationStore),\n        null\n    ],\n    [\n        25,\n        \"maxstack\",\n        \"number\",\n        193\n    ]\n]);\nlet $b84fd3dd9d8eddb2$var$CFFTop = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.fixed16, {\n    1: {\n        hdrSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        offSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        nameIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(\"length\")),\n        topDictIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)($b84fd3dd9d8eddb2$var$CFFTopDict),\n        stringIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(\"length\")),\n        globalSubrIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)\n    },\n    2: {\n        hdrSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        topDict: $b84fd3dd9d8eddb2$var$CFF2TopDict,\n        globalSubrIndex: new (0, $43e9821ef3717eec$export$2e2bcd8739ae039)\n    }\n});\nvar $b84fd3dd9d8eddb2$export$2e2bcd8739ae039 = $b84fd3dd9d8eddb2$var$CFFTop;\nclass $822ac0d589e4e237$var$CFFFont {\n    static decode(stream) {\n        return new $822ac0d589e4e237$var$CFFFont(stream);\n    }\n    decode() {\n        let start = this.stream.pos;\n        let top = (0, $b84fd3dd9d8eddb2$export$2e2bcd8739ae039).decode(this.stream);\n        for(let key in top){\n            let val = top[key];\n            this[key] = val;\n        }\n        if (this.version < 2) {\n            if (this.topDictIndex.length !== 1) throw new Error(\"Only a single font is allowed in CFF\");\n            this.topDict = this.topDictIndex[0];\n        }\n        this.isCIDFont = this.topDict.ROS != null;\n        return this;\n    }\n    string(sid) {\n        if (this.version >= 2) return null;\n        if (sid < (0, $229224aec43783c5$export$2e2bcd8739ae039).length) return (0, $229224aec43783c5$export$2e2bcd8739ae039)[sid];\n        return this.stringIndex[sid - (0, $229224aec43783c5$export$2e2bcd8739ae039).length];\n    }\n    get postscriptName() {\n        if (this.version < 2) return this.nameIndex[0];\n        return null;\n    }\n    get fullName() {\n        return this.string(this.topDict.FullName);\n    }\n    get familyName() {\n        return this.string(this.topDict.FamilyName);\n    }\n    getCharString(glyph) {\n        this.stream.pos = this.topDict.CharStrings[glyph].offset;\n        return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n    }\n    getGlyphName(gid) {\n        // CFF2 glyph names are in the post table.\n        if (this.version >= 2) return null;\n        // CID-keyed fonts don't have glyph names\n        if (this.isCIDFont) return null;\n        let { charset: charset } = this.topDict;\n        if (Array.isArray(charset)) return charset[gid];\n        if (gid === 0) return \".notdef\";\n        gid -= 1;\n        switch(charset.version){\n            case 0:\n                return this.string(charset.glyphs[gid]);\n            case 1:\n            case 2:\n                for(let i = 0; i < charset.ranges.length; i++){\n                    let range = charset.ranges[i];\n                    if (range.offset <= gid && gid <= range.offset + range.nLeft) return this.string(range.first + (gid - range.offset));\n                }\n                break;\n        }\n        return null;\n    }\n    fdForGlyph(gid) {\n        if (!this.topDict.FDSelect) return null;\n        switch(this.topDict.FDSelect.version){\n            case 0:\n                return this.topDict.FDSelect.fds[gid];\n            case 3:\n            case 4:\n                let { ranges: ranges } = this.topDict.FDSelect;\n                let low = 0;\n                let high = ranges.length - 1;\n                while(low <= high){\n                    let mid = low + high >> 1;\n                    if (gid < ranges[mid].first) high = mid - 1;\n                    else if (mid < high && gid >= ranges[mid + 1].first) low = mid + 1;\n                    else return ranges[mid].fd;\n                }\n            default:\n                throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);\n        }\n    }\n    privateDictForGlyph(gid) {\n        if (this.topDict.FDSelect) {\n            let fd = this.fdForGlyph(gid);\n            if (this.topDict.FDArray[fd]) return this.topDict.FDArray[fd].Private;\n            return null;\n        }\n        if (this.version < 2) return this.topDict.Private;\n        return this.topDict.FDArray[0].Private;\n    }\n    constructor(stream){\n        this.stream = stream;\n        this.decode();\n    }\n}\nvar $822ac0d589e4e237$export$2e2bcd8739ae039 = $822ac0d589e4e237$var$CFFFont;\nlet $2bbf2bc1ce37cd8f$var$VerticalOrigin = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    vertOriginY: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nvar $2bbf2bc1ce37cd8f$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    defaultVertOriginY: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    numVertOriginYMetrics: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    metrics: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($2bbf2bc1ce37cd8f$var$VerticalOrigin, \"numVertOriginYMetrics\")\n});\nlet $0941618dc22a946d$export$16b227cb15d716a0 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    height: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    width: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    horiBearingX: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    horiBearingY: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    horiAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    vertBearingX: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    vertBearingY: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    vertAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $0941618dc22a946d$export$62c53e75f69bfe12 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    height: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    width: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    bearingX: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    bearingY: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    advance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nlet $0941618dc22a946d$var$EBDTComponent = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    xOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    yOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int8\n});\nclass $0941618dc22a946d$var$ByteAligned {\n}\nclass $0941618dc22a946d$var$BitAligned {\n}\nlet $0941618dc22a946d$export$f1f5ddeb20d14f = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"version\", {\n    1: {\n        metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n        data: $0941618dc22a946d$var$ByteAligned\n    },\n    2: {\n        metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n        data: $0941618dc22a946d$var$BitAligned\n    },\n    // format 3 is deprecated\n    // format 4 is not supported by Microsoft\n    5: {\n        data: $0941618dc22a946d$var$BitAligned\n    },\n    6: {\n        metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n        data: $0941618dc22a946d$var$ByteAligned\n    },\n    7: {\n        metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n        data: $0941618dc22a946d$var$BitAligned\n    },\n    8: {\n        metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n        pad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8),\n        numComponents: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($0941618dc22a946d$var$EBDTComponent, \"numComponents\")\n    },\n    9: {\n        metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n        pad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8),\n        numComponents: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($0941618dc22a946d$var$EBDTComponent, \"numComponents\")\n    },\n    17: {\n        metrics: $0941618dc22a946d$export$62c53e75f69bfe12,\n        dataLen: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(\"dataLen\")\n    },\n    18: {\n        metrics: $0941618dc22a946d$export$16b227cb15d716a0,\n        dataLen: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(\"dataLen\")\n    },\n    19: {\n        dataLen: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(\"dataLen\")\n    }\n});\nlet $9911c4c7201c13de$var$SBitLineMetrics = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    ascender: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    descender: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    widthMax: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    caretSlopeNumerator: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    caretSlopeDenominator: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    caretOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    minOriginSB: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    minAdvanceSB: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    maxBeforeBL: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    minAfterBL: restructure__WEBPACK_IMPORTED_MODULE_0__.int8,\n    pad: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.int8, 2)\n});\nlet $9911c4c7201c13de$var$CodeOffsetPair = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyphCode: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    offset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $9911c4c7201c13de$var$IndexSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    header: {\n        imageFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        imageDataOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n    },\n    1: {\n        offsetArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (t)=>t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n    },\n    2: {\n        imageSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        bigMetrics: (0, $0941618dc22a946d$export$16b227cb15d716a0)\n    },\n    3: {\n        offsetArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n    },\n    4: {\n        numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        glyphArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9911c4c7201c13de$var$CodeOffsetPair, (t)=>t.numGlyphs + 1)\n    },\n    5: {\n        imageSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        bigMetrics: (0, $0941618dc22a946d$export$16b227cb15d716a0),\n        numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        glyphCodeArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numGlyphs\")\n    }\n});\nlet $9911c4c7201c13de$var$IndexSubtableArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    firstGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lastGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    subtable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $9911c4c7201c13de$var$IndexSubtable)\n});\nlet $9911c4c7201c13de$var$BitmapSizeTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    indexSubTableArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9911c4c7201c13de$var$IndexSubtableArray, 1), {\n        type: \"parent\"\n    }),\n    indexTablesSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numberOfIndexSubTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    colorRef: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    hori: $9911c4c7201c13de$var$SBitLineMetrics,\n    vert: $9911c4c7201c13de$var$SBitLineMetrics,\n    startGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    endGlyphIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ppemX: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    ppemY: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    bitDepth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n        \"horizontal\",\n        \"vertical\"\n    ])\n});\nvar $9911c4c7201c13de$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numSizes: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    sizes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($9911c4c7201c13de$var$BitmapSizeTable, \"numSizes\")\n});\nlet $abb847051efd51b1$var$ImageTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    ppem: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    resolution: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    imageOffsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"void\"), (t)=>t.parent.parent.maxp.numGlyphs + 1)\n});\nvar // It includes several image tables with images for each bitmap glyph\n// of several different sizes.\n$abb847051efd51b1$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n        \"renderOutlines\"\n    ]),\n    numImgTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    imageTables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $abb847051efd51b1$var$ImageTable), \"numImgTables\")\n});\nlet $eb629188f3dfefdd$var$LayerRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    gid: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    paletteIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Index value to use in the appropriate palette. This value must\n}); // be less than numPaletteEntries in the CPAL table, except for\n// the special case noted below. Each palette entry is 16 bits.\n// A palette index of 0xFFFF is a special case indicating that\n// the text foreground color should be used.\nlet $eb629188f3dfefdd$var$BaseGlyphRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    gid: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    // and is not rendered for color.\n    firstLayerIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    // There will be numLayers consecutive entries for this base glyph.\n    numLayers: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nvar $eb629188f3dfefdd$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numBaseGlyphRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseGlyphRecord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($eb629188f3dfefdd$var$BaseGlyphRecord, \"numBaseGlyphRecords\")),\n    layerRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($eb629188f3dfefdd$var$LayerRecord, \"numLayerRecords\"), {\n        lazy: true\n    }),\n    numLayerRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $08734b8e7dc64587$var$ColorRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    blue: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    green: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    red: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    alpha: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8\n});\nvar $08734b8e7dc64587$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    header: {\n        numPaletteEntries: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        numPalettes: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        numColorRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        colorRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($08734b8e7dc64587$var$ColorRecord, \"numColorRecords\")),\n        colorRecordIndices: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numPalettes\")\n    },\n    0: {},\n    1: {\n        offsetPaletteTypeArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"numPalettes\")),\n        offsetPaletteLabelArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numPalettes\")),\n        offsetPaletteEntryLabelArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numPaletteEntries\"))\n    }\n});\nlet $497cef411d884e34$var$BaseCoord = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // X or Y value, in design units\n    },\n    2: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        referenceGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        baseCoordPoint: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Index of contour point on the referenceGlyph\n    },\n    3: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        deviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10)) // Device table for X or Y value\n    }\n});\nlet $497cef411d884e34$var$BaseValues = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    defaultIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseCoordCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseCoords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseCoord), \"baseCoordCount\")\n});\nlet $497cef411d884e34$var$FeatMinMaxRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    minCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseCoord, {\n        type: \"parent\"\n    }),\n    maxCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseCoord, {\n        type: \"parent\"\n    }) // May be NULL\n});\nlet $497cef411d884e34$var$MinMax = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    minCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseCoord),\n    maxCoord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseCoord),\n    featMinMaxCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featMinMaxRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($497cef411d884e34$var$FeatMinMaxRecord, \"featMinMaxCount\") // In alphabetical order\n});\nlet $497cef411d884e34$var$BaseLangSysRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    minMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$MinMax, {\n        type: \"parent\"\n    })\n});\nlet $497cef411d884e34$var$BaseScript = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    baseValues: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseValues),\n    defaultMinMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$MinMax),\n    baseLangSysCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    baseLangSysRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($497cef411d884e34$var$BaseLangSysRecord, \"baseLangSysCount\") // in alphabetical order by BaseLangSysTag\n});\nlet $497cef411d884e34$var$BaseScriptRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    script: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseScript, {\n        type: \"parent\"\n    })\n});\nlet $497cef411d884e34$var$BaseScriptList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($497cef411d884e34$var$BaseScriptRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\n// Array of 4-byte baseline identification tags-must be in alphabetical order\nlet $497cef411d884e34$var$BaseTagList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $497cef411d884e34$var$Axis = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    baseTagList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseTagList),\n    baseScriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$BaseScriptList)\n});\nvar $497cef411d884e34$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        horizAxis: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$Axis),\n        vertAxis: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $497cef411d884e34$var$Axis) // May be NULL\n    },\n    0x00010000: {},\n    0x00010001: {\n        itemVariationStore: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241))\n    }\n});\nlet $cf5f33c63ef209e6$var$AttachPoint = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $cf5f33c63ef209e6$var$AttachList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    attachPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$AttachPoint), \"glyphCount\")\n});\nlet $cf5f33c63ef209e6$var$CaretValue = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n    },\n    2: {\n        caretValuePoint: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    3: {\n        coordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        deviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10))\n    }\n});\nlet $cf5f33c63ef209e6$var$LigGlyph = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$CaretValue), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $cf5f33c63ef209e6$var$LigCaretList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n    ligGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ligGlyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$LigGlyph), \"ligGlyphCount\")\n});\nlet $cf5f33c63ef209e6$var$MarkGlyphSetsDef = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    markSetTableFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    markSetCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), \"markSetCount\")\n});\nvar $cf5f33c63ef209e6$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        glyphClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n        attachList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$AttachList),\n        ligCaretList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$LigCaretList),\n        markAttachClassDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71))\n    },\n    0x00010000: {},\n    0x00010002: {\n        markGlyphSetsDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$MarkGlyphSetsDef)\n    },\n    0x00010003: {\n        markGlyphSetsDef: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $cf5f33c63ef209e6$var$MarkGlyphSetsDef),\n        itemVariationStore: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241))\n    }\n});\nlet $47e0e8ef515d9903$var$ValueFormat = new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n    \"xPlacement\",\n    \"yPlacement\",\n    \"xAdvance\",\n    \"yAdvance\",\n    \"xPlaDevice\",\n    \"yPlaDevice\",\n    \"xAdvDevice\",\n    \"yAdvDevice\"\n]);\nlet $47e0e8ef515d9903$var$types = {\n    xPlacement: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yPlacement: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yAdvance: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xPlaDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n        type: \"global\",\n        relativeTo: (ctx)=>ctx.rel\n    }),\n    yPlaDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n        type: \"global\",\n        relativeTo: (ctx)=>ctx.rel\n    }),\n    xAdvDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n        type: \"global\",\n        relativeTo: (ctx)=>ctx.rel\n    }),\n    yAdvDevice: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10), {\n        type: \"global\",\n        relativeTo: (ctx)=>ctx.rel\n    })\n};\nclass $47e0e8ef515d9903$var$ValueRecord {\n    buildStruct(parent) {\n        let struct = parent;\n        while(!struct[this.key] && struct.parent)struct = struct.parent;\n        if (!struct[this.key]) return;\n        let fields = {};\n        fields.rel = ()=>struct._startOffset;\n        let format = struct[this.key];\n        for(let key in format)if (format[key]) fields[key] = $47e0e8ef515d9903$var$types[key];\n        return new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct(fields);\n    }\n    size(val, ctx) {\n        return this.buildStruct(ctx).size(val, ctx);\n    }\n    decode(stream, parent) {\n        let res = this.buildStruct(parent).decode(stream, parent);\n        delete res.rel;\n        return res;\n    }\n    constructor(key = \"valueFormat\"){\n        this.key = key;\n    }\n}\nlet $47e0e8ef515d9903$var$PairValueRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    secondGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    value1: new $47e0e8ef515d9903$var$ValueRecord(\"valueFormat1\"),\n    value2: new $47e0e8ef515d9903$var$ValueRecord(\"valueFormat2\")\n});\nlet $47e0e8ef515d9903$var$PairSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($47e0e8ef515d9903$var$PairValueRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $47e0e8ef515d9903$var$Class2Record = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    value1: new $47e0e8ef515d9903$var$ValueRecord(\"valueFormat1\"),\n    value2: new $47e0e8ef515d9903$var$ValueRecord(\"valueFormat2\")\n});\nlet $47e0e8ef515d9903$var$Anchor = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    1: {\n        xCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n    },\n    2: {\n        xCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        anchorPoint: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    3: {\n        xCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        yCoordinate: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n        xDeviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10)),\n        yDeviceTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$8215d14a63d9fb10))\n    }\n});\nlet $47e0e8ef515d9903$var$EntryExitRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    entryAnchor: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$Anchor, {\n        type: \"parent\"\n    }),\n    exitAnchor: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$Anchor, {\n        type: \"parent\"\n    })\n});\nlet $47e0e8ef515d9903$var$MarkRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    class: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    markAnchor: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$Anchor, {\n        type: \"parent\"\n    })\n});\nlet $47e0e8ef515d9903$var$MarkArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($47e0e8ef515d9903$var$MarkRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $47e0e8ef515d9903$var$BaseRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$Anchor), (t)=>t.parent.classCount);\nlet $47e0e8ef515d9903$var$BaseArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($47e0e8ef515d9903$var$BaseRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $47e0e8ef515d9903$var$ComponentRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$Anchor), (t)=>t.parent.parent.classCount);\nlet $47e0e8ef515d9903$var$LigatureAttach = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($47e0e8ef515d9903$var$ComponentRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $47e0e8ef515d9903$var$LigatureArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$LigatureAttach), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $47e0e8ef515d9903$export$73a8cfb19cd43a0f = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"lookupType\", {\n    1: new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        1: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            valueFormat: $47e0e8ef515d9903$var$ValueFormat,\n            value: new $47e0e8ef515d9903$var$ValueRecord()\n        },\n        2: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            valueFormat: $47e0e8ef515d9903$var$ValueFormat,\n            valueCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            values: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new $47e0e8ef515d9903$var$ValueRecord(), \"valueCount\")\n        }\n    }),\n    2: new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        1: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            valueFormat1: $47e0e8ef515d9903$var$ValueFormat,\n            valueFormat2: $47e0e8ef515d9903$var$ValueFormat,\n            pairSetCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            pairSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$PairSet), \"pairSetCount\")\n        },\n        2: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            valueFormat1: $47e0e8ef515d9903$var$ValueFormat,\n            valueFormat2: $47e0e8ef515d9903$var$ValueFormat,\n            classDef1: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n            classDef2: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$843d551fbbafef71)),\n            class1Count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            class2Count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            classRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($47e0e8ef515d9903$var$Class2Record, \"class2Count\"), \"class1Count\")\n        }\n    }),\n    3: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        entryExitCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entryExitRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($47e0e8ef515d9903$var$EntryExitRecord, \"entryExitCount\")\n    },\n    4: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        baseCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        classCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$MarkArray),\n        baseArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$BaseArray)\n    },\n    5: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        ligatureCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        classCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        markArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$MarkArray),\n        ligatureArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$LigatureArray)\n    },\n    6: {\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        mark1Coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        mark2Coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        classCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        mark1Array: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$MarkArray),\n        mark2Array: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $47e0e8ef515d9903$var$BaseArray)\n    },\n    7: (0, $7cbbe4e24ef3cb75$export$841858b892ce1f4c),\n    8: (0, $7cbbe4e24ef3cb75$export$5e6d09e6861162f6),\n    9: {\n        posFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        extension: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, null)\n    }\n});\n// Fix circular reference\n$47e0e8ef515d9903$export$73a8cfb19cd43a0f.versions[9].extension.type = $47e0e8ef515d9903$export$73a8cfb19cd43a0f;\nvar $47e0e8ef515d9903$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        scriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$3e15fc05ce864229)),\n        featureList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$aa18130def4b6cb4)),\n        lookupList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)($47e0e8ef515d9903$export$73a8cfb19cd43a0f))\n    },\n    0x00010000: {},\n    0x00010001: {\n        featureVariations: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $1a47b0c45c1c22fe$export$441b70b7971dd419))\n    }\n});\nlet $d3f442064af66e06$var$Sequence = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $d3f442064af66e06$var$AlternateSet = $d3f442064af66e06$var$Sequence;\nlet $d3f442064af66e06$var$Ligature = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    compCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.compCount - 1)\n});\nlet $d3f442064af66e06$var$LigatureSet = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $d3f442064af66e06$var$Ligature), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $d3f442064af66e06$var$GSUBLookup = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"lookupType\", {\n    1: new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        1: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            deltaGlyphID: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n        },\n        2: {\n            coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n            glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            substitute: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"glyphCount\")\n        }\n    }),\n    2: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        sequences: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $d3f442064af66e06$var$Sequence), \"count\")\n    },\n    3: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        alternateSet: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $d3f442064af66e06$var$AlternateSet), \"count\")\n    },\n    4: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        ligatureSets: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $d3f442064af66e06$var$LigatureSet), \"count\")\n    },\n    5: (0, $7cbbe4e24ef3cb75$export$841858b892ce1f4c),\n    6: (0, $7cbbe4e24ef3cb75$export$5e6d09e6861162f6),\n    7: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookupType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        extension: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, null)\n    },\n    8: {\n        substFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)),\n        backtrackCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), \"backtrackGlyphCount\"),\n        lookaheadGlyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        lookaheadCoverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$17608c3f81a6111)), \"lookaheadGlyphCount\"),\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        substitutes: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"glyphCount\")\n    }\n});\n// Fix circular reference\n$d3f442064af66e06$var$GSUBLookup.versions[7].extension.type = $d3f442064af66e06$var$GSUBLookup;\nvar $d3f442064af66e06$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    header: {\n        scriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$3e15fc05ce864229)),\n        featureList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (0, $7cbbe4e24ef3cb75$export$aa18130def4b6cb4)),\n        lookupList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)($d3f442064af66e06$var$GSUBLookup))\n    },\n    0x00010000: {},\n    0x00010001: {\n        featureVariations: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $1a47b0c45c1c22fe$export$441b70b7971dd419))\n    }\n});\nlet $71cfb3c4767fbd0c$var$JstfGSUBModList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $71cfb3c4767fbd0c$var$JstfPriority = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    shrinkageEnableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    shrinkageDisableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    shrinkageEnableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    shrinkageDisableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    shrinkageJstfMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)((0, $47e0e8ef515d9903$export$73a8cfb19cd43a0f))),\n    extensionEnableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    extensionDisableGSUB: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    extensionEnableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    extensionDisableGPOS: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfGSUBModList),\n    extensionJstfMax: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new (0, $7cbbe4e24ef3cb75$export$df0008c6ff2da22a)((0, $47e0e8ef515d9903$export$73a8cfb19cd43a0f)))\n});\nlet $71cfb3c4767fbd0c$var$JstfLangSys = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfPriority), restructure__WEBPACK_IMPORTED_MODULE_0__.uint16);\nlet $71cfb3c4767fbd0c$var$JstfLangSysRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    jstfLangSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfLangSys)\n});\nlet $71cfb3c4767fbd0c$var$JstfScript = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    extenderGlyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)),\n    defaultLangSys: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfLangSys),\n    langSysCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    langSysRecords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($71cfb3c4767fbd0c$var$JstfLangSysRecord, \"langSysCount\")\n});\nlet $71cfb3c4767fbd0c$var$JstfScriptRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    script: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $71cfb3c4767fbd0c$var$JstfScript, {\n        type: \"parent\"\n    })\n});\nvar $71cfb3c4767fbd0c$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    scriptCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    scriptList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($71cfb3c4767fbd0c$var$JstfScriptRecord, \"scriptCount\")\n});\n// TODO: add this to restructure\nclass $d059a6bd2d3b5b63$var$VariableSizeNumber {\n    decode(stream, parent) {\n        switch(this.size(0, parent)){\n            case 1:\n                return stream.readUInt8();\n            case 2:\n                return stream.readUInt16BE();\n            case 3:\n                return stream.readUInt24BE();\n            case 4:\n                return stream.readUInt32BE();\n        }\n    }\n    size(val, parent) {\n        return (0, restructure__WEBPACK_IMPORTED_MODULE_0__.resolveLength)(this._size, null, parent);\n    }\n    constructor(size){\n        this._size = size;\n    }\n}\nlet $d059a6bd2d3b5b63$var$MapDataEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    entry: new $d059a6bd2d3b5b63$var$VariableSizeNumber((t)=>((t.parent.entryFormat & 0x0030) >> 4) + 1),\n    outerIndex: (t)=>t.entry >> (t.parent.entryFormat & 0x000F) + 1,\n    innerIndex: (t)=>t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1\n});\nlet $d059a6bd2d3b5b63$var$DeltaSetIndexMap = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    entryFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    mapCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    mapData: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($d059a6bd2d3b5b63$var$MapDataEntry, \"mapCount\")\n});\nvar $d059a6bd2d3b5b63$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    itemVariationStore: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, (0, $1a47b0c45c1c22fe$export$fe1b122a2710f241)),\n    advanceWidthMapping: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap),\n    LSBMapping: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap),\n    RSBMapping: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $d059a6bd2d3b5b63$var$DeltaSetIndexMap)\n});\nlet $dceeca3e1977ce30$var$Signature = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    offset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $dceeca3e1977ce30$var$SignatureBlock = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 2),\n    cbSignature: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    signature: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(\"cbSignature\")\n});\nvar $dceeca3e1977ce30$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    ulVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    usNumSigs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    usFlag: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    signatures: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($dceeca3e1977ce30$var$Signature, \"usNumSigs\"),\n    signatureBlocks: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($dceeca3e1977ce30$var$SignatureBlock, \"usNumSigs\")\n});\nlet $8acd740a9435aad0$var$GaspRange = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    rangeMaxPPEM: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    rangeGaspBehavior: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, [\n        \"grayscale\",\n        \"gridfit\",\n        \"symmetricSmoothing\",\n        \"symmetricGridfit\" // only in version 1, for ClearType\n    ])\n});\nvar $8acd740a9435aad0$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRanges: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    gaspRanges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($8acd740a9435aad0$var$GaspRange, \"numRanges\") // Sorted by ppem\n});\nlet $b5f380243c34d6a0$var$DeviceRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    pixelSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    maximumWidth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    widths: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.parent.parent.maxp.numGlyphs)\n});\nvar $b5f380243c34d6a0$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRecords: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    sizeDeviceRecord: restructure__WEBPACK_IMPORTED_MODULE_0__.int32,\n    records: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($b5f380243c34d6a0$var$DeviceRecord, \"numRecords\")\n});\nlet $ca2df1256966e313$var$KernPair = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    left: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    right: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    value: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nlet $ca2df1256966e313$var$ClassTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"nGlyphs\"),\n    max: (t)=>t.offsets.length && Math.max.apply(Math, t.offsets)\n});\nlet $ca2df1256966e313$var$Kern2Array = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    off: (t)=>t._startOffset - t.parent.parent._startOffset,\n    len: (t)=>((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2),\n    values: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, \"len\")\n});\nlet $ca2df1256966e313$var$KernSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"format\", {\n    0: {\n        nPairs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        pairs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca2df1256966e313$var$KernPair, \"nPairs\")\n    },\n    2: {\n        rowWidth: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        leftTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $ca2df1256966e313$var$ClassTable, {\n            type: \"parent\"\n        }),\n        rightTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $ca2df1256966e313$var$ClassTable, {\n            type: \"parent\"\n        }),\n        array: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $ca2df1256966e313$var$Kern2Array, {\n            type: \"parent\"\n        })\n    },\n    3: {\n        glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        kernValueCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        leftClassCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        rightClassCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        kernValue: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, \"kernValueCount\"),\n        leftClass: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, \"glyphCount\"),\n        rightClass: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, \"glyphCount\"),\n        kernIndex: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.leftClassCount * t.rightClassCount)\n    }\n});\nlet $ca2df1256966e313$var$KernTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"version\", {\n    0: {\n        subVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n            \"horizontal\",\n            \"minimum\",\n            \"crossStream\",\n            \"override\" // If set to 1 the value in this table replaces the accumulated value\n        ]),\n        subtable: $ca2df1256966e313$var$KernSubtable,\n        padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.length - t._currentOffset)\n    },\n    1: {\n        length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        coverage: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n            null,\n            null,\n            null,\n            null,\n            null,\n            \"variation\",\n            \"crossStream\",\n            \"vertical\" // Set if table has vertical kerning values\n        ]),\n        format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n        tupleIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        subtable: $ca2df1256966e313$var$KernSubtable,\n        padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.length - t._currentOffset)\n    }\n});\nvar $ca2df1256966e313$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n    0: {\n        nTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca2df1256966e313$var$KernTable, \"nTables\")\n    },\n    1: {\n        reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n        nTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca2df1256966e313$var$KernTable, \"nTables\")\n    }\n});\nvar // Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\n$7a9f92b0c46ebe33$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    yPels: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, \"numGlyphs\")\n});\nvar // NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\n$2b2ccc419d152631$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    fontNumber: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    pitch: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    xHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    style: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    typeFamily: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    capHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    symbolSet: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    typeface: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(16),\n    characterComplement: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(8),\n    fileName: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(6),\n    strokeWeight: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(1),\n    widthType: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(1),\n    serifStyle: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8)\n});\n// VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\nlet $ca5b40b9bcda9c9b$var$Ratio = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    bCharSet: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    xRatio: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    yStartRatio: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    yEndRatio: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8 // Ending y-Ratio value\n});\nlet $ca5b40b9bcda9c9b$var$vTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    yPelHeight: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // Minimum value (in pels) for this yPelHeight\n});\nlet $ca5b40b9bcda9c9b$var$VdmxGroup = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    recs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    startsz: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    endsz: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    entries: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca5b40b9bcda9c9b$var$vTable, \"recs\") // The VDMX records\n});\nvar $ca5b40b9bcda9c9b$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRecs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    numRatios: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ratioRanges: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca5b40b9bcda9c9b$var$Ratio, \"numRatios\"),\n    offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numRatios\"),\n    groups: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($ca5b40b9bcda9c9b$var$VdmxGroup, \"numRecs\") // The actual VDMX groupings\n});\nvar $69530a3c40755af0$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    ascent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    descent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    lineGap: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    advanceHeightMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    minTopSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    minBottomSideBearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMaxExtent: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRise: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretSlopeRun: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    caretOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 4),\n    metricDataFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    numberOfMetrics: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16 // Number of advance heights in the Vertical Metrics table\n});\nlet $344073dd270f0e62$var$VmtxEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    advance: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    bearing: restructure__WEBPACK_IMPORTED_MODULE_0__.int16 // The top sidebearing of the glyph\n});\nvar $344073dd270f0e62$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    metrics: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray($344073dd270f0e62$var$VmtxEntry, (t)=>t.parent.vhea.numberOfMetrics),\n    bearings: new restructure__WEBPACK_IMPORTED_MODULE_0__.LazyArray(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, (t)=>t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)\n});\nlet $3793b781918cfced$var$shortFrac = new restructure__WEBPACK_IMPORTED_MODULE_0__.Fixed(16, \"BE\", 14);\nlet $3793b781918cfced$var$Correspondence = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    fromCoord: $3793b781918cfced$var$shortFrac,\n    toCoord: $3793b781918cfced$var$shortFrac\n});\nlet $3793b781918cfced$var$Segment = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    pairCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    correspondence: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($3793b781918cfced$var$Correspondence, \"pairCount\")\n});\nvar $3793b781918cfced$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    segment: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($3793b781918cfced$var$Segment, \"axisCount\")\n});\nclass $6cb7dd5f47d82580$var$UnboundedArrayAccessor {\n    getItem(index) {\n        if (this._items[index] == null) {\n            let pos = this.stream.pos;\n            this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n            this._items[index] = this.type.decode(this.stream, this.parent);\n            this.stream.pos = pos;\n        }\n        return this._items[index];\n    }\n    inspect() {\n        return `[UnboundedArray ${this.type.constructor.name}]`;\n    }\n    constructor(type, stream, parent){\n        this.type = type;\n        this.stream = stream;\n        this.parent = parent;\n        this.base = this.stream.pos;\n        this._items = [];\n    }\n}\nclass $6cb7dd5f47d82580$export$c5af1eebc882e39a extends restructure__WEBPACK_IMPORTED_MODULE_0__.Array {\n    decode(stream, parent) {\n        return new $6cb7dd5f47d82580$var$UnboundedArrayAccessor(this.type, stream, parent);\n    }\n    constructor(type){\n        super(type, 0);\n    }\n}\nlet $6cb7dd5f47d82580$export$8351f8c2ae2f103c = function(ValueType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16) {\n    // Helper class that makes internal structures invisible to pointers\n    class Shadow {\n        decode(stream, ctx) {\n            ctx = ctx.parent.parent;\n            return this.type.decode(stream, ctx);\n        }\n        size(val, ctx) {\n            ctx = ctx.parent.parent;\n            return this.type.size(val, ctx);\n        }\n        encode(stream, val, ctx) {\n            ctx = ctx.parent.parent;\n            return this.type.encode(stream, val, ctx);\n        }\n        constructor(type){\n            this.type = type;\n        }\n    }\n    ValueType = new Shadow(ValueType);\n    let BinarySearchHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        unitSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        nUnits: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    });\n    let LookupSegmentSingle = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        lastGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        value: ValueType\n    });\n    let LookupSegmentArray = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        lastGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        values: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(ValueType, (t)=>t.lastGlyph - t.firstGlyph + 1), {\n            type: \"parent\"\n        })\n    });\n    let LookupSingle = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        value: ValueType\n    });\n    return new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, {\n        0: {\n            values: new $6cb7dd5f47d82580$export$c5af1eebc882e39a(ValueType) // length == number of glyphs maybe?\n        },\n        2: {\n            binarySearchHeader: BinarySearchHeader,\n            segments: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(LookupSegmentSingle, (t)=>t.binarySearchHeader.nUnits)\n        },\n        4: {\n            binarySearchHeader: BinarySearchHeader,\n            segments: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(LookupSegmentArray, (t)=>t.binarySearchHeader.nUnits)\n        },\n        6: {\n            binarySearchHeader: BinarySearchHeader,\n            segments: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(LookupSingle, (t)=>t.binarySearchHeader.nUnits)\n        },\n        8: {\n            firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            count: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n            values: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(ValueType, \"count\")\n        }\n    });\n};\nfunction $6cb7dd5f47d82580$export$79f7d93d790934ba(entryData = {}, lookupType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16) {\n    let entry = Object.assign({\n        newState: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }, entryData);\n    let Entry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct(entry);\n    let StateArray = new $6cb7dd5f47d82580$export$c5af1eebc882e39a(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.nClasses));\n    let StateHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        nClasses: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        classTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new $6cb7dd5f47d82580$export$8351f8c2ae2f103c(lookupType)),\n        stateArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, StateArray),\n        entryTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new $6cb7dd5f47d82580$export$c5af1eebc882e39a(Entry))\n    });\n    return StateHeader;\n}\nfunction $6cb7dd5f47d82580$export$105027425199cc51(entryData = {}, lookupType = restructure__WEBPACK_IMPORTED_MODULE_0__.uint16) {\n    let ClassLookupTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        version () {\n            return 8;\n        },\n        firstGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        values: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    });\n    let entry = Object.assign({\n        newStateOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        // convert offset to stateArray index\n        newState: (t)=>(t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }, entryData);\n    let Entry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct(entry);\n    let StateArray = new $6cb7dd5f47d82580$export$c5af1eebc882e39a(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.nClasses));\n    let StateHeader1 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n        nClasses: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        classTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, ClassLookupTable),\n        stateArray: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, StateArray),\n        entryTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new $6cb7dd5f47d82580$export$c5af1eebc882e39a(Entry))\n    });\n    return StateHeader1;\n}\nlet $6a3746e8c708f5a3$var$BslnSubtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"format\", {\n    0: {\n        deltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 32)\n    },\n    1: {\n        deltas: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.int16, 32),\n        mappingData: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    },\n    2: {\n        standardGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        controlPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 32)\n    },\n    3: {\n        standardGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        controlPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, 32),\n        mappingData: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    }\n});\nvar $6a3746e8c708f5a3$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    defaultBaseline: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    subtable: $6a3746e8c708f5a3$var$BslnSubtable\n});\nlet $d0c76fac617b308a$var$Setting = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    setting: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    name: (t)=>t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nlet $d0c76fac617b308a$var$FeatureName = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    feature: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nSettings: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    settingTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($d0c76fac617b308a$var$Setting, \"nSettings\"), {\n        type: \"parent\"\n    }),\n    featureFlags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Bitfield(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        \"hasDefault\",\n        \"exclusive\"\n    ]),\n    defaultSetting: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    nameIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nvar $d0c76fac617b308a$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    featureNameCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved1: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    reserved2: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32),\n    featureNames: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($d0c76fac617b308a$var$FeatureName, \"featureNameCount\")\n});\nlet $e83fd065f00fcd01$var$Axis = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    axisTag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    minValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    defaultValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    maxValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameID]\n});\nlet $e83fd065f00fcd01$var$Instance = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    nameID: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameID],\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    coord: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32, (t)=>t.parent.axisCount),\n    postscriptNameID: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, (t)=>t.parent.instanceSize - t._currentOffset > 0)\n});\nvar $e83fd065f00fcd01$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    offsetToData: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    countSizePairs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    axisSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    instanceCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    instanceSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    axis: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($e83fd065f00fcd01$var$Axis, \"axisCount\"),\n    instance: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($e83fd065f00fcd01$var$Instance, \"instanceCount\")\n});\nlet $dbe33c8d3a7f131c$var$shortFrac = new restructure__WEBPACK_IMPORTED_MODULE_0__.Fixed(16, \"BE\", 14);\nclass $dbe33c8d3a7f131c$var$Offset {\n    static decode(stream, parent) {\n        // In short format, offsets are multiplied by 2.\n        // This doesn't seem to be documented by Apple, but it\n        // is implemented this way in Freetype.\n        return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;\n    }\n}\nlet $dbe33c8d3a7f131c$var$gvar = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    axisCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    globalCoordCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    globalCoords: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($dbe33c8d3a7f131c$var$shortFrac, \"axisCount\"), \"globalCoordCount\")),\n    glyphCount: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    offsetToData: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer($dbe33c8d3a7f131c$var$Offset, \"void\", {\n        relativeTo: (ctx)=>ctx.offsetToData,\n        allowNull: false\n    }), (t)=>t.glyphCount + 1)\n});\nvar $dbe33c8d3a7f131c$export$2e2bcd8739ae039 = $dbe33c8d3a7f131c$var$gvar;\nlet $05b01887df96c4ee$var$ClassTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    coverage: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    subFeatureFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    stateTable: new (0, $6cb7dd5f47d82580$export$105027425199cc51)\n});\nlet $05b01887df96c4ee$var$WidthDeltaRecord = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    justClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    beforeGrowLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    beforeShrinkLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    afterGrowLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    afterShrinkLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    growFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    shrinkFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n});\nlet $05b01887df96c4ee$var$WidthDeltaCluster = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($05b01887df96c4ee$var$WidthDeltaRecord, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $05b01887df96c4ee$var$ActionData = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"actionType\", {\n    0: {\n        lowerLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        upperLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        order: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyphs: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)\n    },\n    1: {\n        addGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    2: {\n        substThreshold: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        addGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        substGlyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    },\n    3: {},\n    4: {\n        variationAxis: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        minimumLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        noStretchValue: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n        maximumLimit: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32\n    },\n    5: {\n        flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n        glyph: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n    }\n});\nlet $05b01887df96c4ee$var$Action = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    actionClass: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    actionType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    actionLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    actionData: $05b01887df96c4ee$var$ActionData,\n    padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.actionLength - t._currentOffset)\n});\nlet $05b01887df96c4ee$var$PostcompensationAction = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($05b01887df96c4ee$var$Action, restructure__WEBPACK_IMPORTED_MODULE_0__.uint32);\nlet $05b01887df96c4ee$var$PostCompensationTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$PostcompensationAction))\n});\nlet $05b01887df96c4ee$var$JustificationTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    classTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$ClassTable, {\n        type: \"parent\"\n    }),\n    wdcOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    postCompensationTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$PostCompensationTable, {\n        type: \"parent\"\n    }),\n    widthDeltaClusters: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$WidthDeltaCluster, {\n        type: \"parent\",\n        relativeTo: (ctx)=>ctx.wdcOffset\n    }))\n});\nvar $05b01887df96c4ee$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    horizontal: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$JustificationTable),\n    vertical: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05b01887df96c4ee$var$JustificationTable)\n});\nlet $03ee6ebd54db1053$var$LigatureData = {\n    action: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n};\nlet $03ee6ebd54db1053$var$ContextualData = {\n    markIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    currentIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n};\nlet $03ee6ebd54db1053$var$InsertionData = {\n    currentInsertIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    markedInsertIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16\n};\nlet $03ee6ebd54db1053$var$SubstitutionTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    items: new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)))\n});\nlet $03ee6ebd54db1053$var$SubtableData = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(\"type\", {\n    0: {\n        stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)\n    },\n    1: {\n        stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$ContextualData),\n        substitutionTable: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $03ee6ebd54db1053$var$SubstitutionTable)\n    },\n    2: {\n        stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$LigatureData),\n        ligatureActions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32)),\n        components: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16)),\n        ligatureList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16))\n    },\n    4: {\n        lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)\n    },\n    5: {\n        stateTable: new (0, $6cb7dd5f47d82580$export$79f7d93d790934ba)($03ee6ebd54db1053$var$InsertionData),\n        insertionActions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, new (0, $6cb7dd5f47d82580$export$c5af1eebc882e39a)(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16))\n    }\n});\nlet $03ee6ebd54db1053$var$Subtable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    coverage: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    type: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    subFeatureFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    table: $03ee6ebd54db1053$var$SubtableData,\n    padding: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, (t)=>t.length - t._currentOffset)\n});\nlet $03ee6ebd54db1053$var$FeatureEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    featureType: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    featureSetting: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    enableFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    disableFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $03ee6ebd54db1053$var$MorxChain = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    defaultFlags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    chainLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nFeatureEntries: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nSubtables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    features: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($03ee6ebd54db1053$var$FeatureEntry, \"nFeatureEntries\"),\n    subtables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($03ee6ebd54db1053$var$Subtable, \"nSubtables\")\n});\nvar $03ee6ebd54db1053$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    unused: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    nChains: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    chains: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($03ee6ebd54db1053$var$MorxChain, \"nChains\")\n});\nlet $b7492a80b0d1a056$var$OpticalBounds = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    left: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    top: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    right: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    bottom: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\nvar $b7492a80b0d1a056$export$2e2bcd8739ae039 = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.fixed32,\n    format: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    lookupTable: new (0, $6cb7dd5f47d82580$export$8351f8c2ae2f103c)($b7492a80b0d1a056$var$OpticalBounds)\n});\nlet $c3395722bea751e2$var$tables = {};\nvar $c3395722bea751e2$export$2e2bcd8739ae039 = $c3395722bea751e2$var$tables;\n$c3395722bea751e2$var$tables.cmap = (0, $26a62205ad06574e$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.head = (0, $f2612a29f92ac062$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hhea = (0, $2c179dd593583073$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hmtx = (0, $bdc9060542264b85$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.maxp = (0, $dbf51cb3d3fe409d$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.name = (0, $2bcf221753ec8e32$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables[\"OS/2\"] = (0, $84b272aa31b70606$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.post = (0, $32d9e2eb9565d93c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.fpgm = (0, $5c0f37ca5ffb1850$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.loca = (0, $2b2b260902b1c57e$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.prep = (0, $7afb878c7bea4f66$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables[\"cvt \"] = (0, $5202bd9d9ad8eaac$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.glyf = (0, $6c92b6371bce8bd9$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables[\"CFF \"] = (0, $822ac0d589e4e237$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables[\"CFF2\"] = (0, $822ac0d589e4e237$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.VORG = (0, $2bbf2bc1ce37cd8f$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.EBLC = (0, $9911c4c7201c13de$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.CBLC = $c3395722bea751e2$var$tables.EBLC;\n$c3395722bea751e2$var$tables.sbix = (0, $abb847051efd51b1$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.COLR = (0, $eb629188f3dfefdd$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.CPAL = (0, $08734b8e7dc64587$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.BASE = (0, $497cef411d884e34$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GDEF = (0, $cf5f33c63ef209e6$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GPOS = (0, $47e0e8ef515d9903$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.GSUB = (0, $d3f442064af66e06$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.JSTF = (0, $71cfb3c4767fbd0c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.HVAR = (0, $d059a6bd2d3b5b63$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.DSIG = (0, $dceeca3e1977ce30$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.gasp = (0, $8acd740a9435aad0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.hdmx = (0, $b5f380243c34d6a0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.kern = (0, $ca2df1256966e313$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.LTSH = (0, $7a9f92b0c46ebe33$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.PCLT = (0, $2b2ccc419d152631$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.VDMX = (0, $ca5b40b9bcda9c9b$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.vhea = (0, $69530a3c40755af0$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.vmtx = (0, $344073dd270f0e62$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.avar = (0, $3793b781918cfced$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.bsln = (0, $6a3746e8c708f5a3$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.feat = (0, $d0c76fac617b308a$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.fvar = (0, $e83fd065f00fcd01$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.gvar = (0, $dbe33c8d3a7f131c$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.just = (0, $05b01887df96c4ee$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.morx = (0, $03ee6ebd54db1053$export$2e2bcd8739ae039);\n$c3395722bea751e2$var$tables.opbd = (0, $b7492a80b0d1a056$export$2e2bcd8739ae039);\nlet $816c07a04b6dba87$var$TableEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    checkSum: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    offset: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"void\", {\n        type: \"global\"\n    }),\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $816c07a04b6dba87$var$Directory = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    numTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    searchRange: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    entrySelector: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    rangeShift: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($816c07a04b6dba87$var$TableEntry, \"numTables\")\n});\n$816c07a04b6dba87$var$Directory.process = function() {\n    let tables = {};\n    for (let table of this.tables)tables[table.tag] = table;\n    this.tables = tables;\n};\n$816c07a04b6dba87$var$Directory.preEncode = function() {\n    if (!Array.isArray(this.tables)) {\n        let tables = [];\n        for(let tag in this.tables){\n            let table = this.tables[tag];\n            if (table) tables.push({\n                tag: tag,\n                checkSum: 0,\n                offset: new restructure__WEBPACK_IMPORTED_MODULE_0__.VoidPointer((0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag], table),\n                length: (0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag].size(table)\n            });\n        }\n        this.tables = tables;\n    }\n    this.tag = \"true\";\n    this.numTables = this.tables.length;\n    let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);\n    let maxPowerOf2 = Math.pow(2, maxExponentFor2);\n    this.searchRange = maxPowerOf2 * 16;\n    this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;\n    this.rangeShift = this.numTables * 16 - this.searchRange;\n};\nvar $816c07a04b6dba87$export$2e2bcd8739ae039 = $816c07a04b6dba87$var$Directory;\nfunction $12727730ddfc8bfe$export$2e0ae67339d5f1ac(arr, cmp) {\n    let min = 0;\n    let max = arr.length - 1;\n    while(min <= max){\n        let mid = min + max >> 1;\n        let res = cmp(arr[mid]);\n        if (res < 0) max = mid - 1;\n        else if (res > 0) min = mid + 1;\n        else return mid;\n    }\n    return -1;\n}\nfunction $12727730ddfc8bfe$export$d02631cccf789723(index, end) {\n    let range1 = [];\n    while(index < end)range1.push(index++);\n    return range1;\n}\nconst $12727730ddfc8bfe$export$3d28c1996ced1f14 = new TextDecoder(\"ascii\");\n// Based on https://github.com/niklasvh/base64-arraybuffer. MIT license.\nconst $12727730ddfc8bfe$var$CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst $12727730ddfc8bfe$var$LOOKUP = new Uint8Array(256);\nfor(let i = 0; i < $12727730ddfc8bfe$var$CHARS.length; i++)$12727730ddfc8bfe$var$LOOKUP[$12727730ddfc8bfe$var$CHARS.charCodeAt(i)] = i;\nfunction $12727730ddfc8bfe$export$94fdf11bafc8de6b(base64) {\n    let bufferLength = base64.length * 0.75;\n    if (base64[base64.length - 1] === \"=\") {\n        bufferLength--;\n        if (base64[base64.length - 2] === \"=\") bufferLength--;\n    }\n    let bytes = new Uint8Array(bufferLength);\n    let p = 0;\n    for(let i1 = 0, len = base64.length; i1 < len; i1 += 4){\n        let encoded1 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i1)];\n        let encoded2 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i1 + 1)];\n        let encoded3 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i1 + 2)];\n        let encoded4 = $12727730ddfc8bfe$var$LOOKUP[base64.charCodeAt(i1 + 3)];\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return bytes;\n}\nclass $f08dd41ef10b694c$export$2e2bcd8739ae039 {\n    findSubtable(cmapTable, pairs) {\n        for (let [platformID, encodingID] of pairs)for (let cmap of cmapTable.tables){\n            if (cmap.platformID === platformID && cmap.encodingID === encodingID) return cmap.table;\n        }\n        return null;\n    }\n    lookup(codepoint, variationSelector) {\n        // If there is no Unicode cmap in this font, we need to re-encode\n        // the codepoint in the encoding that the cmap supports.\n        if (this.encoding) codepoint = this.encoding.get(codepoint) || codepoint;\n        else if (variationSelector) {\n            let gid = this.getVariationSelector(codepoint, variationSelector);\n            if (gid) return gid;\n        }\n        let cmap = this.cmap;\n        switch(cmap.version){\n            case 0:\n                return cmap.codeMap.get(codepoint) || 0;\n            case 4:\n                {\n                    let min = 0;\n                    let max = cmap.segCount - 1;\n                    while(min <= max){\n                        let mid = min + max >> 1;\n                        if (codepoint < cmap.startCode.get(mid)) max = mid - 1;\n                        else if (codepoint > cmap.endCode.get(mid)) min = mid + 1;\n                        else {\n                            let rangeOffset = cmap.idRangeOffset.get(mid);\n                            let gid;\n                            if (rangeOffset === 0) gid = codepoint + cmap.idDelta.get(mid);\n                            else {\n                                let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n                                gid = cmap.glyphIndexArray.get(index) || 0;\n                                if (gid !== 0) gid += cmap.idDelta.get(mid);\n                            }\n                            return gid & 0xffff;\n                        }\n                    }\n                    return 0;\n                }\n            case 8:\n                throw new Error(\"TODO: cmap format 8\");\n            case 6:\n            case 10:\n                return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n            case 12:\n            case 13:\n                {\n                    let min = 0;\n                    let max = cmap.nGroups - 1;\n                    while(min <= max){\n                        let mid = min + max >> 1;\n                        let group = cmap.groups.get(mid);\n                        if (codepoint < group.startCharCode) max = mid - 1;\n                        else if (codepoint > group.endCharCode) min = mid + 1;\n                        else {\n                            if (cmap.version === 12) return group.glyphID + (codepoint - group.startCharCode);\n                            else return group.glyphID;\n                        }\n                    }\n                    return 0;\n                }\n            case 14:\n                throw new Error(\"TODO: cmap format 14\");\n            default:\n                throw new Error(`Unknown cmap format ${cmap.version}`);\n        }\n    }\n    getVariationSelector(codepoint, variationSelector) {\n        if (!this.uvs) return 0;\n        let selectors = this.uvs.varSelectors.toArray();\n        let i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(selectors, (x)=>variationSelector - x.varSelector);\n        let sel = selectors[i];\n        if (i !== -1 && sel.defaultUVS) i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(sel.defaultUVS, (x)=>codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? 1 : 0);\n        if (i !== -1 && sel.nonDefaultUVS) {\n            i = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(sel.nonDefaultUVS, (x)=>codepoint - x.unicodeValue);\n            if (i !== -1) return sel.nonDefaultUVS[i].glyphID;\n        }\n        return 0;\n    }\n    getCharacterSet() {\n        let cmap = this.cmap;\n        switch(cmap.version){\n            case 0:\n                return (0, $12727730ddfc8bfe$export$d02631cccf789723)(0, cmap.codeMap.length);\n            case 4:\n                {\n                    let res = [];\n                    let endCodes = cmap.endCode.toArray();\n                    for(let i = 0; i < endCodes.length; i++){\n                        let tail = endCodes[i] + 1;\n                        let start = cmap.startCode.get(i);\n                        res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(start, tail));\n                    }\n                    return res;\n                }\n            case 8:\n                throw new Error(\"TODO: cmap format 8\");\n            case 6:\n            case 10:\n                return (0, $12727730ddfc8bfe$export$d02631cccf789723)(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n            case 12:\n            case 13:\n                {\n                    let res = [];\n                    for (let group of cmap.groups.toArray())res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));\n                    return res;\n                }\n            case 14:\n                throw new Error(\"TODO: cmap format 14\");\n            default:\n                throw new Error(`Unknown cmap format ${cmap.version}`);\n        }\n    }\n    codePointsForGlyph(gid) {\n        let cmap = this.cmap;\n        switch(cmap.version){\n            case 0:\n                {\n                    let res = [];\n                    for(let i = 0; i < 256; i++)if (cmap.codeMap.get(i) === gid) res.push(i);\n                    return res;\n                }\n            case 4:\n                {\n                    let res = [];\n                    for(let i = 0; i < cmap.segCount; i++){\n                        let end = cmap.endCode.get(i);\n                        let start = cmap.startCode.get(i);\n                        let rangeOffset = cmap.idRangeOffset.get(i);\n                        let delta = cmap.idDelta.get(i);\n                        for(var c = start; c <= end; c++){\n                            let g = 0;\n                            if (rangeOffset === 0) g = c + delta;\n                            else {\n                                let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);\n                                g = cmap.glyphIndexArray.get(index) || 0;\n                                if (g !== 0) g += delta;\n                            }\n                            if (g === gid) res.push(c);\n                        }\n                    }\n                    return res;\n                }\n            case 12:\n                {\n                    let res = [];\n                    for (let group of cmap.groups.toArray())if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) res.push(group.startCharCode + (gid - group.glyphID));\n                    return res;\n                }\n            case 13:\n                {\n                    let res = [];\n                    for (let group of cmap.groups.toArray())if (gid === group.glyphID) res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));\n                    return res;\n                }\n            default:\n                throw new Error(`Unknown cmap format ${cmap.version}`);\n        }\n    }\n    constructor(cmapTable){\n        // Attempt to find a Unicode cmap first\n        this.encoding = null;\n        this.cmap = this.findSubtable(cmapTable, [\n            // 32-bit subtables\n            [\n                3,\n                10\n            ],\n            [\n                0,\n                6\n            ],\n            [\n                0,\n                4\n            ],\n            // 16-bit subtables\n            [\n                3,\n                1\n            ],\n            [\n                0,\n                3\n            ],\n            [\n                0,\n                2\n            ],\n            [\n                0,\n                1\n            ],\n            [\n                0,\n                0\n            ]\n        ]);\n        // If not unicode cmap was found, take the first table with a supported encoding.\n        if (!this.cmap) for (let cmap of cmapTable.tables){\n            let encoding = (0, $e449ad78d50845fe$export$badc544e0651b6b1)(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n            let mapping = (0, $e449ad78d50845fe$export$1dceb3c14ed68bee)(encoding);\n            if (mapping) {\n                this.cmap = cmap.table;\n                this.encoding = mapping;\n            }\n        }\n        if (!this.cmap) throw new Error(\"Could not find a supported cmap table\");\n        this.uvs = this.findSubtable(cmapTable, [\n            [\n                0,\n                5\n            ]\n        ]);\n        if (this.uvs && this.uvs.version !== 14) this.uvs = null;\n    }\n}\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f08dd41ef10b694c$export$2e2bcd8739ae039.prototype, \"getCharacterSet\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f08dd41ef10b694c$export$2e2bcd8739ae039.prototype, \"codePointsForGlyph\", null);\nclass $0bba3a9db57637f3$export$2e2bcd8739ae039 {\n    process(glyphs, positions) {\n        for(let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++){\n            let left = glyphs[glyphIndex].id;\n            let right = glyphs[glyphIndex + 1].id;\n            positions[glyphIndex].xAdvance += this.getKerning(left, right);\n        }\n    }\n    getKerning(left, right) {\n        let res = 0;\n        for (let table of this.kern.tables){\n            if (table.coverage.crossStream) continue;\n            switch(table.version){\n                case 0:\n                    if (!table.coverage.horizontal) continue;\n                    break;\n                case 1:\n                    if (table.coverage.vertical || table.coverage.variation) continue;\n                    break;\n                default:\n                    throw new Error(`Unsupported kerning table version ${table.version}`);\n            }\n            let val = 0;\n            let s = table.subtable;\n            switch(table.format){\n                case 0:\n                    let pairIdx = (0, $12727730ddfc8bfe$export$2e0ae67339d5f1ac)(s.pairs, function(pair) {\n                        return left - pair.left || right - pair.right;\n                    });\n                    if (pairIdx >= 0) val = s.pairs[pairIdx].value;\n                    break;\n                case 2:\n                    let leftOffset = 0, rightOffset = 0;\n                    if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];\n                    else leftOffset = s.array.off;\n                    if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n                    let index = (leftOffset + rightOffset - s.array.off) / 2;\n                    val = s.array.values.get(index);\n                    break;\n                case 3:\n                    if (left >= s.glyphCount || right >= s.glyphCount) return 0;\n                    val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n                    break;\n                default:\n                    throw new Error(`Unsupported kerning sub-table format ${table.format}`);\n            }\n            // Microsoft supports the override flag, which resets the result\n            // Otherwise, the sum of the results from all subtables is returned\n            if (table.coverage.override) res = val;\n            else res += val;\n        }\n        return res;\n    }\n    constructor(font){\n        this.kern = font.kern;\n    }\n}\nclass $0a4bdfeb6dfd6f5e$export$2e2bcd8739ae039 {\n    positionGlyphs(glyphs, positions) {\n        // find each base + mark cluster, and position the marks relative to the base\n        let clusterStart = 0;\n        let clusterEnd = 0;\n        for(let index = 0; index < glyphs.length; index++){\n            let glyph = glyphs[index];\n            if (glyph.isMark) clusterEnd = index;\n            else {\n                if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n                clusterStart = clusterEnd = index;\n            }\n        }\n        if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        return positions;\n    }\n    positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n        let base = glyphs[clusterStart];\n        let baseBox = base.cbox.copy();\n        // adjust bounding box for ligature glyphs\n        if (base.codePoints.length > 1) baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;\n        let xOffset = -positions[clusterStart].xAdvance;\n        let yOffset = 0;\n        let yGap = this.font.unitsPerEm / 16;\n        // position each of the mark glyphs relative to the base glyph\n        for(let index = clusterStart + 1; index <= clusterEnd; index++){\n            let mark = glyphs[index];\n            let markBox = mark.cbox;\n            let position = positions[index];\n            let combiningClass = this.getCombiningClass(mark.codePoints[0]);\n            if (combiningClass !== \"Not_Reordered\") {\n                position.xOffset = position.yOffset = 0;\n                // x positioning\n                switch(combiningClass){\n                    case \"Double_Above\":\n                    case \"Double_Below\":\n                        // LTR. TODO: RTL support.\n                        position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n                        break;\n                    case \"Attached_Below_Left\":\n                    case \"Below_Left\":\n                    case \"Above_Left\":\n                        // left align\n                        position.xOffset += baseBox.minX - markBox.minX;\n                        break;\n                    case \"Attached_Above_Right\":\n                    case \"Below_Right\":\n                    case \"Above_Right\":\n                        // right align\n                        position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n                        break;\n                    default:\n                        // center align\n                        position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n                }\n                // y positioning\n                switch(combiningClass){\n                    case \"Double_Below\":\n                    case \"Below_Left\":\n                    case \"Below\":\n                    case \"Below_Right\":\n                    case \"Attached_Below_Left\":\n                    case \"Attached_Below\":\n                        // add a small gap between the glyphs if they are not attached\n                        if (combiningClass === \"Attached_Below_Left\" || combiningClass === \"Attached_Below\") baseBox.minY += yGap;\n                        position.yOffset = -baseBox.minY - markBox.maxY;\n                        baseBox.minY += markBox.height;\n                        break;\n                    case \"Double_Above\":\n                    case \"Above_Left\":\n                    case \"Above\":\n                    case \"Above_Right\":\n                    case \"Attached_Above\":\n                    case \"Attached_Above_Right\":\n                        // add a small gap between the glyphs if they are not attached\n                        if (combiningClass === \"Attached_Above\" || combiningClass === \"Attached_Above_Right\") baseBox.maxY += yGap;\n                        position.yOffset = baseBox.maxY - markBox.minY;\n                        baseBox.maxY += markBox.height;\n                        break;\n                }\n                position.xAdvance = position.yAdvance = 0;\n                position.xOffset += xOffset;\n                position.yOffset += yOffset;\n            } else {\n                xOffset -= position.xAdvance;\n                yOffset -= position.yAdvance;\n            }\n        }\n        return;\n    }\n    getCombiningClass(codePoint) {\n        let combiningClass = (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.getCombiningClass)(codePoint);\n        // Thai / Lao need some per-character work\n        if ((codePoint & -256) === 0x0e00) {\n            if (combiningClass === \"Not_Reordered\") switch(codePoint){\n                case 0x0e31:\n                case 0x0e34:\n                case 0x0e35:\n                case 0x0e36:\n                case 0x0e37:\n                case 0x0e47:\n                case 0x0e4c:\n                case 0x0e3d:\n                case 0x0e4e:\n                    return \"Above_Right\";\n                case 0x0eb1:\n                case 0x0eb4:\n                case 0x0eb5:\n                case 0x0eb6:\n                case 0x0eb7:\n                case 0x0ebb:\n                case 0x0ecc:\n                case 0x0ecd:\n                    return \"Above\";\n                case 0x0ebc:\n                    return \"Below\";\n            }\n            else if (codePoint === 0x0e3a) return \"Below_Right\";\n        }\n        switch(combiningClass){\n            // Hebrew\n            case \"CCC10\":\n            case \"CCC11\":\n            case \"CCC12\":\n            case \"CCC13\":\n            case \"CCC14\":\n            case \"CCC15\":\n            case \"CCC16\":\n            case \"CCC17\":\n            case \"CCC18\":\n            case \"CCC20\":\n            case \"CCC22\":\n                return \"Below\";\n            case \"CCC23\":\n                return \"Attached_Above\";\n            case \"CCC24\":\n                return \"Above_Right\";\n            case \"CCC25\":\n            case \"CCC19\":\n                return \"Above_Left\";\n            case \"CCC26\":\n                return \"Above\";\n            case \"CCC21\":\n                break;\n            // Arabic and Syriac\n            case \"CCC27\":\n            case \"CCC28\":\n            case \"CCC30\":\n            case \"CCC31\":\n            case \"CCC33\":\n            case \"CCC34\":\n            case \"CCC35\":\n            case \"CCC36\":\n                return \"Above\";\n            case \"CCC29\":\n            case \"CCC32\":\n                return \"Below\";\n            // Thai\n            case \"CCC103\":\n                return \"Below_Right\";\n            case \"CCC107\":\n                return \"Above_Right\";\n            // Lao\n            case \"CCC118\":\n                return \"Below\";\n            case \"CCC122\":\n                return \"Above\";\n            // Tibetan\n            case \"CCC129\":\n            case \"CCC132\":\n                return \"Below\";\n            case \"CCC130\":\n                return \"Above\";\n        }\n        return combiningClass;\n    }\n    constructor(font){\n        this.font = font;\n    }\n}\nclass $f34600ab9d7f70d8$export$2e2bcd8739ae039 {\n    /**\n   * The width of the bounding box\n   * @type {number}\n   */ get width() {\n        return this.maxX - this.minX;\n    }\n    /**\n   * The height of the bounding box\n   * @type {number}\n   */ get height() {\n        return this.maxY - this.minY;\n    }\n    addPoint(x, y) {\n        if (Math.abs(x) !== Infinity) {\n            if (x < this.minX) this.minX = x;\n            if (x > this.maxX) this.maxX = x;\n        }\n        if (Math.abs(y) !== Infinity) {\n            if (y < this.minY) this.minY = y;\n            if (y > this.maxY) this.maxY = y;\n        }\n    }\n    copy() {\n        return new $f34600ab9d7f70d8$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);\n    }\n    constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity){\n        /**\n     * The minimum X position in the bounding box\n     * @type {number}\n     */ this.minX = minX;\n        /**\n     * The minimum Y position in the bounding box\n     * @type {number}\n     */ this.minY = minY;\n        /**\n     * The maxmimum X position in the bounding box\n     * @type {number}\n     */ this.maxX = maxX;\n        /**\n     * The maxmimum Y position in the bounding box\n     * @type {number}\n     */ this.maxY = maxY;\n    }\n}\n// This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\nconst $130d1a642ebcd2b7$var$UNICODE_SCRIPTS = {\n    Caucasian_Albanian: \"aghb\",\n    Arabic: \"arab\",\n    Imperial_Aramaic: \"armi\",\n    Armenian: \"armn\",\n    Avestan: \"avst\",\n    Balinese: \"bali\",\n    Bamum: \"bamu\",\n    Bassa_Vah: \"bass\",\n    Batak: \"batk\",\n    Bengali: [\n        \"bng2\",\n        \"beng\"\n    ],\n    Bopomofo: \"bopo\",\n    Brahmi: \"brah\",\n    Braille: \"brai\",\n    Buginese: \"bugi\",\n    Buhid: \"buhd\",\n    Chakma: \"cakm\",\n    Canadian_Aboriginal: \"cans\",\n    Carian: \"cari\",\n    Cham: \"cham\",\n    Cherokee: \"cher\",\n    Coptic: \"copt\",\n    Cypriot: \"cprt\",\n    Cyrillic: \"cyrl\",\n    Devanagari: [\n        \"dev2\",\n        \"deva\"\n    ],\n    Deseret: \"dsrt\",\n    Duployan: \"dupl\",\n    Egyptian_Hieroglyphs: \"egyp\",\n    Elbasan: \"elba\",\n    Ethiopic: \"ethi\",\n    Georgian: \"geor\",\n    Glagolitic: \"glag\",\n    Gothic: \"goth\",\n    Grantha: \"gran\",\n    Greek: \"grek\",\n    Gujarati: [\n        \"gjr2\",\n        \"gujr\"\n    ],\n    Gurmukhi: [\n        \"gur2\",\n        \"guru\"\n    ],\n    Hangul: \"hang\",\n    Han: \"hani\",\n    Hanunoo: \"hano\",\n    Hebrew: \"hebr\",\n    Hiragana: \"hira\",\n    Pahawh_Hmong: \"hmng\",\n    Katakana_Or_Hiragana: \"hrkt\",\n    Old_Italic: \"ital\",\n    Javanese: \"java\",\n    Kayah_Li: \"kali\",\n    Katakana: \"kana\",\n    Kharoshthi: \"khar\",\n    Khmer: \"khmr\",\n    Khojki: \"khoj\",\n    Kannada: [\n        \"knd2\",\n        \"knda\"\n    ],\n    Kaithi: \"kthi\",\n    Tai_Tham: \"lana\",\n    Lao: \"lao \",\n    Latin: \"latn\",\n    Lepcha: \"lepc\",\n    Limbu: \"limb\",\n    Linear_A: \"lina\",\n    Linear_B: \"linb\",\n    Lisu: \"lisu\",\n    Lycian: \"lyci\",\n    Lydian: \"lydi\",\n    Mahajani: \"mahj\",\n    Mandaic: \"mand\",\n    Manichaean: \"mani\",\n    Mende_Kikakui: \"mend\",\n    Meroitic_Cursive: \"merc\",\n    Meroitic_Hieroglyphs: \"mero\",\n    Malayalam: [\n        \"mlm2\",\n        \"mlym\"\n    ],\n    Modi: \"modi\",\n    Mongolian: \"mong\",\n    Mro: \"mroo\",\n    Meetei_Mayek: \"mtei\",\n    Myanmar: [\n        \"mym2\",\n        \"mymr\"\n    ],\n    Old_North_Arabian: \"narb\",\n    Nabataean: \"nbat\",\n    Nko: \"nko \",\n    Ogham: \"ogam\",\n    Ol_Chiki: \"olck\",\n    Old_Turkic: \"orkh\",\n    Oriya: [\n        \"ory2\",\n        \"orya\"\n    ],\n    Osmanya: \"osma\",\n    Palmyrene: \"palm\",\n    Pau_Cin_Hau: \"pauc\",\n    Old_Permic: \"perm\",\n    Phags_Pa: \"phag\",\n    Inscriptional_Pahlavi: \"phli\",\n    Psalter_Pahlavi: \"phlp\",\n    Phoenician: \"phnx\",\n    Miao: \"plrd\",\n    Inscriptional_Parthian: \"prti\",\n    Rejang: \"rjng\",\n    Runic: \"runr\",\n    Samaritan: \"samr\",\n    Old_South_Arabian: \"sarb\",\n    Saurashtra: \"saur\",\n    Shavian: \"shaw\",\n    Sharada: \"shrd\",\n    Siddham: \"sidd\",\n    Khudawadi: \"sind\",\n    Sinhala: \"sinh\",\n    Sora_Sompeng: \"sora\",\n    Sundanese: \"sund\",\n    Syloti_Nagri: \"sylo\",\n    Syriac: \"syrc\",\n    Tagbanwa: \"tagb\",\n    Takri: \"takr\",\n    Tai_Le: \"tale\",\n    New_Tai_Lue: \"talu\",\n    Tamil: [\n        \"tml2\",\n        \"taml\"\n    ],\n    Tai_Viet: \"tavt\",\n    Telugu: [\n        \"tel2\",\n        \"telu\"\n    ],\n    Tifinagh: \"tfng\",\n    Tagalog: \"tglg\",\n    Thaana: \"thaa\",\n    Thai: \"thai\",\n    Tibetan: \"tibt\",\n    Tirhuta: \"tirh\",\n    Ugaritic: \"ugar\",\n    Vai: \"vai \",\n    Warang_Citi: \"wara\",\n    Old_Persian: \"xpeo\",\n    Cuneiform: \"xsux\",\n    Yi: \"yi  \",\n    Inherited: \"zinh\",\n    Common: \"zyyy\",\n    Unknown: \"zzzz\"\n};\nconst $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS = {};\nfor(let script in $130d1a642ebcd2b7$var$UNICODE_SCRIPTS){\n    let tag = $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script];\n    if (Array.isArray(tag)) for (let t of tag)$130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[t] = script;\n    else $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[tag] = script;\n}\nfunction $130d1a642ebcd2b7$export$b32f0b5f69d65e51(script1) {\n    return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script1];\n}\nfunction $130d1a642ebcd2b7$export$ce50e82f12a827a4(tag) {\n    return $130d1a642ebcd2b7$var$OPENTYPE_SCRIPTS[tag];\n}\nfunction $130d1a642ebcd2b7$export$e5cb25e204fb8450(string) {\n    let len = string.length;\n    let idx = 0;\n    while(idx < len){\n        let code = string.charCodeAt(idx++);\n        // Check if this is a high surrogate\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n            let next = string.charCodeAt(idx);\n            // Check if this is a low surrogate\n            if (0xdc00 <= next && next <= 0xdfff) {\n                idx++;\n                code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n            }\n        }\n        let script2 = (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.getScript)(code);\n        if (script2 !== \"Common\" && script2 !== \"Inherited\" && script2 !== \"Unknown\") return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script2];\n    }\n    return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS.Unknown;\n}\nfunction $130d1a642ebcd2b7$export$16fab0757cfc223d(codePoints) {\n    for(let i = 0; i < codePoints.length; i++){\n        let codePoint = codePoints[i];\n        let script3 = (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.getScript)(codePoint);\n        if (script3 !== \"Common\" && script3 !== \"Inherited\" && script3 !== \"Unknown\") return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS[script3];\n    }\n    return $130d1a642ebcd2b7$var$UNICODE_SCRIPTS.Unknown;\n}\n// The scripts in this map are written from right to left\nconst $130d1a642ebcd2b7$var$RTL = {\n    arab: true,\n    hebr: true,\n    syrc: true,\n    thaa: true,\n    cprt: true,\n    khar: true,\n    phnx: true,\n    \"nko \": true,\n    lydi: true,\n    avst: true,\n    armi: true,\n    phli: true,\n    prti: true,\n    sarb: true,\n    orkh: true,\n    samr: true,\n    mand: true,\n    merc: true,\n    mero: true,\n    // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n    mani: true,\n    mend: true,\n    nbat: true,\n    narb: true,\n    palm: true,\n    phlp: true // Psalter Pahlavi\n};\nfunction $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script4) {\n    if ($130d1a642ebcd2b7$var$RTL[script4]) return \"rtl\";\n    return \"ltr\";\n}\nclass $be07b3e97a42687a$export$2e2bcd8739ae039 {\n    /**\n   * The total advance width of the run.\n   * @type {number}\n   */ get advanceWidth() {\n        let width = 0;\n        for (let position of this.positions)width += position.xAdvance;\n        return width;\n    }\n    /**\n  * The total advance height of the run.\n  * @type {number}\n  */ get advanceHeight() {\n        let height = 0;\n        for (let position of this.positions)height += position.yAdvance;\n        return height;\n    }\n    /**\n  * The bounding box containing all glyphs in the run.\n  * @type {BBox}\n  */ get bbox() {\n        let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039);\n        let x = 0;\n        let y = 0;\n        for(let index = 0; index < this.glyphs.length; index++){\n            let glyph = this.glyphs[index];\n            let p = this.positions[index];\n            let b = glyph.bbox;\n            bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n            bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n            x += p.xAdvance;\n            y += p.yAdvance;\n        }\n        return bbox;\n    }\n    constructor(glyphs, features, script, language, direction){\n        /**\n     * An array of Glyph objects in the run\n     * @type {Glyph[]}\n     */ this.glyphs = glyphs;\n        /**\n     * An array of GlyphPosition objects for each glyph in the run\n     * @type {GlyphPosition[]}\n     */ this.positions = null;\n        /**\n     * The script that was requested for shaping. This was either passed in or detected automatically.\n     * @type {string}\n     */ this.script = script;\n        /**\n     * The language requested for shaping, as passed in. If `null`, the default language for the\n     * script was used.\n     * @type {string}\n     */ this.language = language || null;\n        /**\n     * The direction requested for shaping, as passed in (either ltr or rtl).\n     * If `null`, the default direction of the script is used.\n     * @type {string}\n     */ this.direction = direction || $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script);\n        /**\n     * The features requested during shaping. This is a combination of user\n     * specified features and features chosen by the shaper.\n     * @type {object}\n     */ this.features = {};\n        // Convert features to an object\n        if (Array.isArray(features)) for (let tag of features)this.features[tag] = true;\n        else if (typeof features === \"object\") this.features = features;\n    }\n}\nclass $1ac75d9a55b67f01$export$2e2bcd8739ae039 {\n    constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0){\n        /**\n     * The amount to move the virtual pen in the X direction after rendering this glyph.\n     * @type {number}\n     */ this.xAdvance = xAdvance;\n        /**\n     * The amount to move the virtual pen in the Y direction after rendering this glyph.\n     * @type {number}\n     */ this.yAdvance = yAdvance;\n        /**\n     * The offset from the pen position in the X direction at which to render this glyph.\n     * @type {number}\n     */ this.xOffset = xOffset;\n        /**\n     * The offset from the pen position in the Y direction at which to render this glyph.\n     * @type {number}\n     */ this.yOffset = yOffset;\n    }\n}\n// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nconst $3b6302b64eccc32c$var$features = {\n    allTypographicFeatures: {\n        code: 0,\n        exclusive: false,\n        allTypeFeatures: 0\n    },\n    ligatures: {\n        code: 1,\n        exclusive: false,\n        requiredLigatures: 0,\n        commonLigatures: 2,\n        rareLigatures: 4,\n        // logos: 6\n        rebusPictures: 8,\n        diphthongLigatures: 10,\n        squaredLigatures: 12,\n        abbrevSquaredLigatures: 14,\n        symbolLigatures: 16,\n        contextualLigatures: 18,\n        historicalLigatures: 20\n    },\n    cursiveConnection: {\n        code: 2,\n        exclusive: true,\n        unconnected: 0,\n        partiallyConnected: 1,\n        cursive: 2\n    },\n    letterCase: {\n        code: 3,\n        exclusive: true\n    },\n    // upperAndLowerCase: 0          # deprecated\n    // allCaps: 1                    # deprecated\n    // allLowerCase: 2               # deprecated\n    // smallCaps: 3                  # deprecated\n    // initialCaps: 4                # deprecated\n    // initialCapsAndSmallCaps: 5    # deprecated\n    verticalSubstitution: {\n        code: 4,\n        exclusive: false,\n        substituteVerticalForms: 0\n    },\n    linguisticRearrangement: {\n        code: 5,\n        exclusive: false,\n        linguisticRearrangement: 0\n    },\n    numberSpacing: {\n        code: 6,\n        exclusive: true,\n        monospacedNumbers: 0,\n        proportionalNumbers: 1,\n        thirdWidthNumbers: 2,\n        quarterWidthNumbers: 3\n    },\n    smartSwash: {\n        code: 8,\n        exclusive: false,\n        wordInitialSwashes: 0,\n        wordFinalSwashes: 2,\n        // lineInitialSwashes: 4\n        // lineFinalSwashes: 6\n        nonFinalSwashes: 8\n    },\n    diacritics: {\n        code: 9,\n        exclusive: true,\n        showDiacritics: 0,\n        hideDiacritics: 1,\n        decomposeDiacritics: 2\n    },\n    verticalPosition: {\n        code: 10,\n        exclusive: true,\n        normalPosition: 0,\n        superiors: 1,\n        inferiors: 2,\n        ordinals: 3,\n        scientificInferiors: 4\n    },\n    fractions: {\n        code: 11,\n        exclusive: true,\n        noFractions: 0,\n        verticalFractions: 1,\n        diagonalFractions: 2\n    },\n    overlappingCharacters: {\n        code: 13,\n        exclusive: false,\n        preventOverlap: 0\n    },\n    typographicExtras: {\n        code: 14,\n        exclusive: false,\n        // hyphensToEmDash: 0\n        // hyphenToEnDash: 2\n        slashedZero: 4\n    },\n    // formInterrobang: 6\n    // smartQuotes: 8\n    // periodsToEllipsis: 10\n    mathematicalExtras: {\n        code: 15,\n        exclusive: false,\n        // hyphenToMinus: 0\n        // asteristoMultiply: 2\n        // slashToDivide: 4\n        // inequalityLigatures: 6\n        // exponents: 8\n        mathematicalGreek: 10\n    },\n    ornamentSets: {\n        code: 16,\n        exclusive: true,\n        noOrnaments: 0,\n        dingbats: 1,\n        piCharacters: 2,\n        fleurons: 3,\n        decorativeBorders: 4,\n        internationalSymbols: 5,\n        mathSymbols: 6\n    },\n    characterAlternatives: {\n        code: 17,\n        exclusive: true,\n        noAlternates: 0\n    },\n    // user defined options\n    designComplexity: {\n        code: 18,\n        exclusive: true,\n        designLevel1: 0,\n        designLevel2: 1,\n        designLevel3: 2,\n        designLevel4: 3,\n        designLevel5: 4\n    },\n    styleOptions: {\n        code: 19,\n        exclusive: true,\n        noStyleOptions: 0,\n        displayText: 1,\n        engravedText: 2,\n        illuminatedCaps: 3,\n        titlingCaps: 4,\n        tallCaps: 5\n    },\n    characterShape: {\n        code: 20,\n        exclusive: true,\n        traditionalCharacters: 0,\n        simplifiedCharacters: 1,\n        JIS1978Characters: 2,\n        JIS1983Characters: 3,\n        JIS1990Characters: 4,\n        traditionalAltOne: 5,\n        traditionalAltTwo: 6,\n        traditionalAltThree: 7,\n        traditionalAltFour: 8,\n        traditionalAltFive: 9,\n        expertCharacters: 10,\n        JIS2004Characters: 11,\n        hojoCharacters: 12,\n        NLCCharacters: 13,\n        traditionalNamesCharacters: 14\n    },\n    numberCase: {\n        code: 21,\n        exclusive: true,\n        lowerCaseNumbers: 0,\n        upperCaseNumbers: 1\n    },\n    textSpacing: {\n        code: 22,\n        exclusive: true,\n        proportionalText: 0,\n        monospacedText: 1,\n        halfWidthText: 2,\n        thirdWidthText: 3,\n        quarterWidthText: 4,\n        altProportionalText: 5,\n        altHalfWidthText: 6\n    },\n    transliteration: {\n        code: 23,\n        exclusive: true,\n        noTransliteration: 0\n    },\n    // hanjaToHangul: 1\n    // hiraganaToKatakana: 2\n    // katakanaToHiragana: 3\n    // kanaToRomanization: 4\n    // romanizationToHiragana: 5\n    // romanizationToKatakana: 6\n    // hanjaToHangulAltOne: 7\n    // hanjaToHangulAltTwo: 8\n    // hanjaToHangulAltThree: 9\n    annotation: {\n        code: 24,\n        exclusive: true,\n        noAnnotation: 0,\n        boxAnnotation: 1,\n        roundedBoxAnnotation: 2,\n        circleAnnotation: 3,\n        invertedCircleAnnotation: 4,\n        parenthesisAnnotation: 5,\n        periodAnnotation: 6,\n        romanNumeralAnnotation: 7,\n        diamondAnnotation: 8,\n        invertedBoxAnnotation: 9,\n        invertedRoundedBoxAnnotation: 10\n    },\n    kanaSpacing: {\n        code: 25,\n        exclusive: true,\n        fullWidthKana: 0,\n        proportionalKana: 1\n    },\n    ideographicSpacing: {\n        code: 26,\n        exclusive: true,\n        fullWidthIdeographs: 0,\n        proportionalIdeographs: 1,\n        halfWidthIdeographs: 2\n    },\n    unicodeDecomposition: {\n        code: 27,\n        exclusive: false,\n        canonicalComposition: 0,\n        compatibilityComposition: 2,\n        transcodingComposition: 4\n    },\n    rubyKana: {\n        code: 28,\n        exclusive: false,\n        // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n        // rubyKana: 1     # deprecated - use rubyKanaOn instead\n        rubyKana: 2\n    },\n    CJKSymbolAlternatives: {\n        code: 29,\n        exclusive: true,\n        noCJKSymbolAlternatives: 0,\n        CJKSymbolAltOne: 1,\n        CJKSymbolAltTwo: 2,\n        CJKSymbolAltThree: 3,\n        CJKSymbolAltFour: 4,\n        CJKSymbolAltFive: 5\n    },\n    ideographicAlternatives: {\n        code: 30,\n        exclusive: true,\n        noIdeographicAlternatives: 0,\n        ideographicAltOne: 1,\n        ideographicAltTwo: 2,\n        ideographicAltThree: 3,\n        ideographicAltFour: 4,\n        ideographicAltFive: 5\n    },\n    CJKVerticalRomanPlacement: {\n        code: 31,\n        exclusive: true,\n        CJKVerticalRomanCentered: 0,\n        CJKVerticalRomanHBaseline: 1\n    },\n    italicCJKRoman: {\n        code: 32,\n        exclusive: false,\n        // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n        // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n        CJKItalicRoman: 2\n    },\n    caseSensitiveLayout: {\n        code: 33,\n        exclusive: false,\n        caseSensitiveLayout: 0,\n        caseSensitiveSpacing: 2\n    },\n    alternateKana: {\n        code: 34,\n        exclusive: false,\n        alternateHorizKana: 0,\n        alternateVertKana: 2\n    },\n    stylisticAlternatives: {\n        code: 35,\n        exclusive: false,\n        noStylisticAlternates: 0,\n        stylisticAltOne: 2,\n        stylisticAltTwo: 4,\n        stylisticAltThree: 6,\n        stylisticAltFour: 8,\n        stylisticAltFive: 10,\n        stylisticAltSix: 12,\n        stylisticAltSeven: 14,\n        stylisticAltEight: 16,\n        stylisticAltNine: 18,\n        stylisticAltTen: 20,\n        stylisticAltEleven: 22,\n        stylisticAltTwelve: 24,\n        stylisticAltThirteen: 26,\n        stylisticAltFourteen: 28,\n        stylisticAltFifteen: 30,\n        stylisticAltSixteen: 32,\n        stylisticAltSeventeen: 34,\n        stylisticAltEighteen: 36,\n        stylisticAltNineteen: 38,\n        stylisticAltTwenty: 40\n    },\n    contextualAlternates: {\n        code: 36,\n        exclusive: false,\n        contextualAlternates: 0,\n        swashAlternates: 2,\n        contextualSwashAlternates: 4\n    },\n    lowerCase: {\n        code: 37,\n        exclusive: true,\n        defaultLowerCase: 0,\n        lowerCaseSmallCaps: 1,\n        lowerCasePetiteCaps: 2\n    },\n    upperCase: {\n        code: 38,\n        exclusive: true,\n        defaultUpperCase: 0,\n        upperCaseSmallCaps: 1,\n        upperCasePetiteCaps: 2\n    },\n    languageTag: {\n        code: 39,\n        exclusive: true\n    },\n    CJKRomanSpacing: {\n        code: 103,\n        exclusive: true,\n        halfWidthCJKRoman: 0,\n        proportionalCJKRoman: 1,\n        defaultCJKRoman: 2,\n        fullWidthCJKRoman: 3\n    }\n};\nconst $3b6302b64eccc32c$var$feature = (name, selector)=>[\n        $3b6302b64eccc32c$var$features[name].code,\n        $3b6302b64eccc32c$var$features[name][selector]\n    ];\nconst $3b6302b64eccc32c$var$OTMapping = {\n    rlig: $3b6302b64eccc32c$var$feature(\"ligatures\", \"requiredLigatures\"),\n    clig: $3b6302b64eccc32c$var$feature(\"ligatures\", \"contextualLigatures\"),\n    dlig: $3b6302b64eccc32c$var$feature(\"ligatures\", \"rareLigatures\"),\n    hlig: $3b6302b64eccc32c$var$feature(\"ligatures\", \"historicalLigatures\"),\n    liga: $3b6302b64eccc32c$var$feature(\"ligatures\", \"commonLigatures\"),\n    hist: $3b6302b64eccc32c$var$feature(\"ligatures\", \"historicalLigatures\"),\n    smcp: $3b6302b64eccc32c$var$feature(\"lowerCase\", \"lowerCaseSmallCaps\"),\n    pcap: $3b6302b64eccc32c$var$feature(\"lowerCase\", \"lowerCasePetiteCaps\"),\n    frac: $3b6302b64eccc32c$var$feature(\"fractions\", \"diagonalFractions\"),\n    dnom: $3b6302b64eccc32c$var$feature(\"fractions\", \"diagonalFractions\"),\n    numr: $3b6302b64eccc32c$var$feature(\"fractions\", \"diagonalFractions\"),\n    afrc: $3b6302b64eccc32c$var$feature(\"fractions\", \"verticalFractions\"),\n    // aalt\n    // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n    // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n    // unic, vatu, vhal, vjmo, vpal, vrt2\n    // dist -> trak table?\n    // kern, vkrn -> kern table\n    // lfbd + opbd + rtbd -> opbd table?\n    // mark, mkmk -> acnt table?\n    // locl -> languageTag + ltag table\n    case: $3b6302b64eccc32c$var$feature(\"caseSensitiveLayout\", \"caseSensitiveLayout\"),\n    ccmp: $3b6302b64eccc32c$var$feature(\"unicodeDecomposition\", \"canonicalComposition\"),\n    cpct: $3b6302b64eccc32c$var$feature(\"CJKVerticalRomanPlacement\", \"CJKVerticalRomanCentered\"),\n    valt: $3b6302b64eccc32c$var$feature(\"CJKVerticalRomanPlacement\", \"CJKVerticalRomanCentered\"),\n    swsh: $3b6302b64eccc32c$var$feature(\"contextualAlternates\", \"swashAlternates\"),\n    cswh: $3b6302b64eccc32c$var$feature(\"contextualAlternates\", \"contextualSwashAlternates\"),\n    curs: $3b6302b64eccc32c$var$feature(\"cursiveConnection\", \"cursive\"),\n    c2pc: $3b6302b64eccc32c$var$feature(\"upperCase\", \"upperCasePetiteCaps\"),\n    c2sc: $3b6302b64eccc32c$var$feature(\"upperCase\", \"upperCaseSmallCaps\"),\n    init: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"wordInitialSwashes\"),\n    fin2: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"wordFinalSwashes\"),\n    medi: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"nonFinalSwashes\"),\n    med2: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"nonFinalSwashes\"),\n    fin3: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"wordFinalSwashes\"),\n    fina: $3b6302b64eccc32c$var$feature(\"smartSwash\", \"wordFinalSwashes\"),\n    pkna: $3b6302b64eccc32c$var$feature(\"kanaSpacing\", \"proportionalKana\"),\n    half: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"halfWidthText\"),\n    halt: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"altHalfWidthText\"),\n    hkna: $3b6302b64eccc32c$var$feature(\"alternateKana\", \"alternateHorizKana\"),\n    vkna: $3b6302b64eccc32c$var$feature(\"alternateKana\", \"alternateVertKana\"),\n    // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n    ital: $3b6302b64eccc32c$var$feature(\"italicCJKRoman\", \"CJKItalicRoman\"),\n    lnum: $3b6302b64eccc32c$var$feature(\"numberCase\", \"upperCaseNumbers\"),\n    onum: $3b6302b64eccc32c$var$feature(\"numberCase\", \"lowerCaseNumbers\"),\n    mgrk: $3b6302b64eccc32c$var$feature(\"mathematicalExtras\", \"mathematicalGreek\"),\n    // nalt: not enough info. what type of annotation?\n    // ornm: ditto, which ornament style?\n    calt: $3b6302b64eccc32c$var$feature(\"contextualAlternates\", \"contextualAlternates\"),\n    vrt2: $3b6302b64eccc32c$var$feature(\"verticalSubstitution\", \"substituteVerticalForms\"),\n    vert: $3b6302b64eccc32c$var$feature(\"verticalSubstitution\", \"substituteVerticalForms\"),\n    tnum: $3b6302b64eccc32c$var$feature(\"numberSpacing\", \"monospacedNumbers\"),\n    pnum: $3b6302b64eccc32c$var$feature(\"numberSpacing\", \"proportionalNumbers\"),\n    sups: $3b6302b64eccc32c$var$feature(\"verticalPosition\", \"superiors\"),\n    subs: $3b6302b64eccc32c$var$feature(\"verticalPosition\", \"inferiors\"),\n    ordn: $3b6302b64eccc32c$var$feature(\"verticalPosition\", \"ordinals\"),\n    pwid: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"proportionalText\"),\n    hwid: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"halfWidthText\"),\n    qwid: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"quarterWidthText\"),\n    twid: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"thirdWidthText\"),\n    fwid: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"proportionalText\"),\n    palt: $3b6302b64eccc32c$var$feature(\"textSpacing\", \"altProportionalText\"),\n    trad: $3b6302b64eccc32c$var$feature(\"characterShape\", \"traditionalCharacters\"),\n    smpl: $3b6302b64eccc32c$var$feature(\"characterShape\", \"simplifiedCharacters\"),\n    jp78: $3b6302b64eccc32c$var$feature(\"characterShape\", \"JIS1978Characters\"),\n    jp83: $3b6302b64eccc32c$var$feature(\"characterShape\", \"JIS1983Characters\"),\n    jp90: $3b6302b64eccc32c$var$feature(\"characterShape\", \"JIS1990Characters\"),\n    jp04: $3b6302b64eccc32c$var$feature(\"characterShape\", \"JIS2004Characters\"),\n    expt: $3b6302b64eccc32c$var$feature(\"characterShape\", \"expertCharacters\"),\n    hojo: $3b6302b64eccc32c$var$feature(\"characterShape\", \"hojoCharacters\"),\n    nlck: $3b6302b64eccc32c$var$feature(\"characterShape\", \"NLCCharacters\"),\n    tnam: $3b6302b64eccc32c$var$feature(\"characterShape\", \"traditionalNamesCharacters\"),\n    ruby: $3b6302b64eccc32c$var$feature(\"rubyKana\", \"rubyKana\"),\n    titl: $3b6302b64eccc32c$var$feature(\"styleOptions\", \"titlingCaps\"),\n    zero: $3b6302b64eccc32c$var$feature(\"typographicExtras\", \"slashedZero\"),\n    ss01: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltOne\"),\n    ss02: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltTwo\"),\n    ss03: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltThree\"),\n    ss04: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltFour\"),\n    ss05: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltFive\"),\n    ss06: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltSix\"),\n    ss07: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltSeven\"),\n    ss08: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltEight\"),\n    ss09: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltNine\"),\n    ss10: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltTen\"),\n    ss11: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltEleven\"),\n    ss12: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltTwelve\"),\n    ss13: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltThirteen\"),\n    ss14: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltFourteen\"),\n    ss15: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltFifteen\"),\n    ss16: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltSixteen\"),\n    ss17: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltSeventeen\"),\n    ss18: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltEighteen\"),\n    ss19: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltNineteen\"),\n    ss20: $3b6302b64eccc32c$var$feature(\"stylisticAlternatives\", \"stylisticAltTwenty\")\n};\n// salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n// Add cv01-cv99 features\nfor(let i = 1; i <= 99; i++)$3b6302b64eccc32c$var$OTMapping[`cv${`00${i}`.slice(-2)}`] = [\n    $3b6302b64eccc32c$var$features.characterAlternatives.code,\n    i\n];\n// create inverse mapping\nlet $3b6302b64eccc32c$var$AATMapping = {};\nfor(let ot in $3b6302b64eccc32c$var$OTMapping){\n    let aat = $3b6302b64eccc32c$var$OTMapping[ot];\n    if ($3b6302b64eccc32c$var$AATMapping[aat[0]] == null) $3b6302b64eccc32c$var$AATMapping[aat[0]] = {};\n    $3b6302b64eccc32c$var$AATMapping[aat[0]][aat[1]] = ot;\n}\nfunction $3b6302b64eccc32c$export$b813f7d2a1677c16(features1) {\n    let res = {};\n    for(let k in features1){\n        let r;\n        if (r = $3b6302b64eccc32c$var$OTMapping[k]) {\n            if (res[r[0]] == null) res[r[0]] = {};\n            res[r[0]][r[1]] = features1[k];\n        }\n    }\n    return res;\n}\n// Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\nfunction $3b6302b64eccc32c$var$mapFeatureStrings(f) {\n    let [type, setting] = f;\n    if (isNaN(type)) var typeCode = $3b6302b64eccc32c$var$features[type] && $3b6302b64eccc32c$var$features[type].code;\n    else var typeCode = type;\n    if (isNaN(setting)) var settingCode = $3b6302b64eccc32c$var$features[type] && $3b6302b64eccc32c$var$features[type][setting];\n    else var settingCode = setting;\n    return [\n        typeCode,\n        settingCode\n    ];\n}\nfunction $3b6302b64eccc32c$export$bd6df347a4f391c4(features2) {\n    let res = {};\n    if (Array.isArray(features2)) for(let k = 0; k < features2.length; k++){\n        let r;\n        let f = $3b6302b64eccc32c$var$mapFeatureStrings(features2[k]);\n        if (r = $3b6302b64eccc32c$var$AATMapping[f[0]] && $3b6302b64eccc32c$var$AATMapping[f[0]][f[1]]) res[r] = true;\n    }\n    else if (typeof features2 === \"object\") for(let type in features2){\n        let feature1 = features2[type];\n        for(let setting in feature1){\n            let r;\n            let f = $3b6302b64eccc32c$var$mapFeatureStrings([\n                type,\n                setting\n            ]);\n            if (feature1[setting] && (r = $3b6302b64eccc32c$var$AATMapping[f[0]] && $3b6302b64eccc32c$var$AATMapping[f[0]][f[1]])) res[r] = true;\n        }\n    }\n    return Object.keys(res);\n}\nclass $ff5ce077dae0f144$export$2e2bcd8739ae039 {\n    lookup(glyph) {\n        switch(this.table.version){\n            case 0:\n                return this.table.values.getItem(glyph);\n            case 2:\n            case 4:\n                {\n                    let min = 0;\n                    let max = this.table.binarySearchHeader.nUnits - 1;\n                    while(min <= max){\n                        var mid = min + max >> 1;\n                        var seg = this.table.segments[mid];\n                        // special end of search value\n                        if (seg.firstGlyph === 0xffff) return null;\n                        if (glyph < seg.firstGlyph) max = mid - 1;\n                        else if (glyph > seg.lastGlyph) min = mid + 1;\n                        else {\n                            if (this.table.version === 2) return seg.value;\n                            else return seg.values[glyph - seg.firstGlyph];\n                        }\n                    }\n                    return null;\n                }\n            case 6:\n                {\n                    let min = 0;\n                    let max = this.table.binarySearchHeader.nUnits - 1;\n                    while(min <= max){\n                        var mid = min + max >> 1;\n                        var seg = this.table.segments[mid];\n                        // special end of search value\n                        if (seg.glyph === 0xffff) return null;\n                        if (glyph < seg.glyph) max = mid - 1;\n                        else if (glyph > seg.glyph) min = mid + 1;\n                        else return seg.value;\n                    }\n                    return null;\n                }\n            case 8:\n                return this.table.values[glyph - this.table.firstGlyph];\n            default:\n                throw new Error(`Unknown lookup table format: ${this.table.version}`);\n        }\n    }\n    glyphsForValue(classValue) {\n        let res = [];\n        switch(this.table.version){\n            case 2:\n            case 4:\n                for (let segment of this.table.segments)if (this.table.version === 2 && segment.value === classValue) res.push(...(0, $12727730ddfc8bfe$export$d02631cccf789723)(segment.firstGlyph, segment.lastGlyph + 1));\n                else {\n                    for(let index = 0; index < segment.values.length; index++)if (segment.values[index] === classValue) res.push(segment.firstGlyph + index);\n                }\n                break;\n            case 6:\n                for (let segment1 of this.table.segments)if (segment1.value === classValue) res.push(segment1.glyph);\n                break;\n            case 8:\n                for(let i = 0; i < this.table.values.length; i++)if (this.table.values[i] === classValue) res.push(this.table.firstGlyph + i);\n                break;\n            default:\n                throw new Error(`Unknown lookup table format: ${this.table.version}`);\n        }\n        return res;\n    }\n    constructor(table){\n        this.table = table;\n    }\n}\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $ff5ce077dae0f144$export$2e2bcd8739ae039.prototype, \"glyphsForValue\", null);\nconst $50c7aac9316f2948$var$START_OF_TEXT_STATE = 0;\nconst $50c7aac9316f2948$var$START_OF_LINE_STATE = 1;\nconst $50c7aac9316f2948$var$END_OF_TEXT_CLASS = 0;\nconst $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS = 1;\nconst $50c7aac9316f2948$var$DELETED_GLYPH_CLASS = 2;\nconst $50c7aac9316f2948$var$END_OF_LINE_CLASS = 3;\nconst $50c7aac9316f2948$var$DONT_ADVANCE = 0x4000;\nclass $50c7aac9316f2948$export$2e2bcd8739ae039 {\n    process(glyphs, reverse, processEntry) {\n        let currentState = $50c7aac9316f2948$var$START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n        let index = reverse ? glyphs.length - 1 : 0;\n        let dir = reverse ? -1 : 1;\n        while(dir === 1 && index <= glyphs.length || dir === -1 && index >= -1){\n            let glyph = null;\n            let classCode = $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS;\n            let shouldAdvance = true;\n            if (index === glyphs.length || index === -1) classCode = $50c7aac9316f2948$var$END_OF_TEXT_CLASS;\n            else {\n                glyph = glyphs[index];\n                if (glyph.id === 0xffff) classCode = $50c7aac9316f2948$var$DELETED_GLYPH_CLASS;\n                else {\n                    classCode = this.lookupTable.lookup(glyph.id);\n                    if (classCode == null) classCode = $50c7aac9316f2948$var$OUT_OF_BOUNDS_CLASS;\n                }\n            }\n            let row = this.stateTable.stateArray.getItem(currentState);\n            let entryIndex = row[classCode];\n            let entry = this.stateTable.entryTable.getItem(entryIndex);\n            if (classCode !== $50c7aac9316f2948$var$END_OF_TEXT_CLASS && classCode !== $50c7aac9316f2948$var$DELETED_GLYPH_CLASS) {\n                processEntry(glyph, entry, index);\n                shouldAdvance = !(entry.flags & $50c7aac9316f2948$var$DONT_ADVANCE);\n            }\n            currentState = entry.newState;\n            if (shouldAdvance) index += dir;\n        }\n        return glyphs;\n    }\n    /**\n   * Performs a depth-first traversal of the glyph strings\n   * represented by the state machine.\n   */ traverse(opts, state = 0, visited = new Set) {\n        if (visited.has(state)) return;\n        visited.add(state);\n        let { nClasses: nClasses, stateArray: stateArray, entryTable: entryTable } = this.stateTable;\n        let row = stateArray.getItem(state);\n        // Skip predefined classes\n        for(let classCode = 4; classCode < nClasses; classCode++){\n            let entryIndex = row[classCode];\n            let entry = entryTable.getItem(entryIndex);\n            // Try all glyphs in the class\n            for (let glyph of this.lookupTable.glyphsForValue(classCode)){\n                if (opts.enter) opts.enter(glyph, entry);\n                if (entry.newState !== 0) this.traverse(opts, entry.newState, visited);\n                if (opts.exit) opts.exit(glyph, entry);\n            }\n        }\n    }\n    constructor(stateTable){\n        this.stateTable = stateTable;\n        this.lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(stateTable.classTable);\n    }\n}\n// indic replacement flags\nconst $55f71433a605c87d$var$MARK_FIRST = 0x8000;\nconst $55f71433a605c87d$var$MARK_LAST = 0x2000;\nconst $55f71433a605c87d$var$VERB = 0x000F;\n// contextual substitution and glyph insertion flag\nconst $55f71433a605c87d$var$SET_MARK = 0x8000;\n// ligature entry flags\nconst $55f71433a605c87d$var$SET_COMPONENT = 0x8000;\nconst $55f71433a605c87d$var$PERFORM_ACTION = 0x2000;\n// ligature action masks\nconst $55f71433a605c87d$var$LAST_MASK = 0x80000000;\nconst $55f71433a605c87d$var$STORE_MASK = 0x40000000;\nconst $55f71433a605c87d$var$OFFSET_MASK = 0x3FFFFFFF;\nconst $55f71433a605c87d$var$VERTICAL_ONLY = 0x800000;\nconst $55f71433a605c87d$var$REVERSE_DIRECTION = 0x400000;\nconst $55f71433a605c87d$var$HORIZONTAL_AND_VERTICAL = 0x200000;\n// glyph insertion flags\nconst $55f71433a605c87d$var$CURRENT_IS_KASHIDA_LIKE = 0x2000;\nconst $55f71433a605c87d$var$MARKED_IS_KASHIDA_LIKE = 0x1000;\nconst $55f71433a605c87d$var$CURRENT_INSERT_BEFORE = 0x0800;\nconst $55f71433a605c87d$var$MARKED_INSERT_BEFORE = 0x0400;\nconst $55f71433a605c87d$var$CURRENT_INSERT_COUNT = 0x03E0;\nconst $55f71433a605c87d$var$MARKED_INSERT_COUNT = 0x001F;\nclass $55f71433a605c87d$export$2e2bcd8739ae039 {\n    // Processes an array of glyphs and applies the specified features\n    // Features should be in the form of {featureType:{featureSetting:boolean}}\n    process(glyphs, features = {}) {\n        for (let chain of this.morx.chains){\n            let flags = chain.defaultFlags;\n            // enable/disable the requested features\n            for (let feature of chain.features){\n                let f;\n                if (f = features[feature.featureType]) {\n                    if (f[feature.featureSetting]) {\n                        flags &= feature.disableFlags;\n                        flags |= feature.enableFlags;\n                    } else if (f[feature.featureSetting] === false) {\n                        flags |= ~feature.disableFlags;\n                        flags &= ~feature.enableFlags;\n                    }\n                }\n            }\n            for (let subtable of chain.subtables)if (subtable.subFeatureFlags & flags) this.processSubtable(subtable, glyphs);\n        }\n        // remove deleted glyphs\n        let index = glyphs.length - 1;\n        while(index >= 0){\n            if (glyphs[index].id === 0xffff) glyphs.splice(index, 1);\n            index--;\n        }\n        return glyphs;\n    }\n    processSubtable(subtable, glyphs) {\n        this.subtable = subtable;\n        this.glyphs = glyphs;\n        if (this.subtable.type === 4) {\n            this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n            return;\n        }\n        this.ligatureStack = [];\n        this.markedGlyph = null;\n        this.firstGlyph = null;\n        this.lastGlyph = null;\n        this.markedIndex = null;\n        let stateMachine = this.getStateMachine(subtable);\n        let process = this.getProcessor();\n        let reverse = !!(this.subtable.coverage & $55f71433a605c87d$var$REVERSE_DIRECTION);\n        return stateMachine.process(this.glyphs, reverse, process);\n    }\n    getStateMachine(subtable) {\n        return new (0, $50c7aac9316f2948$export$2e2bcd8739ae039)(subtable.table.stateTable);\n    }\n    getProcessor() {\n        switch(this.subtable.type){\n            case 0:\n                return this.processIndicRearragement;\n            case 1:\n                return this.processContextualSubstitution;\n            case 2:\n                return this.processLigature;\n            case 4:\n                return this.processNoncontextualSubstitutions;\n            case 5:\n                return this.processGlyphInsertion;\n            default:\n                throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);\n        }\n    }\n    processIndicRearragement(glyph, entry, index) {\n        if (entry.flags & $55f71433a605c87d$var$MARK_FIRST) this.firstGlyph = index;\n        if (entry.flags & $55f71433a605c87d$var$MARK_LAST) this.lastGlyph = index;\n        $55f71433a605c87d$var$reorderGlyphs(this.glyphs, entry.flags & $55f71433a605c87d$var$VERB, this.firstGlyph, this.lastGlyph);\n    }\n    processContextualSubstitution(glyph, entry, index) {\n        let subsitutions = this.subtable.table.substitutionTable.items;\n        if (entry.markIndex !== 0xffff) {\n            let lookup = subsitutions.getItem(entry.markIndex);\n            let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(lookup);\n            glyph = this.glyphs[this.markedGlyph];\n            var gid = lookupTable.lookup(glyph.id);\n            if (gid) this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n        if (entry.currentIndex !== 0xffff) {\n            let lookup = subsitutions.getItem(entry.currentIndex);\n            let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(lookup);\n            glyph = this.glyphs[index];\n            var gid = lookupTable.lookup(glyph.id);\n            if (gid) this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n        if (entry.flags & $55f71433a605c87d$var$SET_MARK) this.markedGlyph = index;\n    }\n    processLigature(glyph, entry, index) {\n        if (entry.flags & $55f71433a605c87d$var$SET_COMPONENT) this.ligatureStack.push(index);\n        if (entry.flags & $55f71433a605c87d$var$PERFORM_ACTION) {\n            let actions = this.subtable.table.ligatureActions;\n            let components = this.subtable.table.components;\n            let ligatureList = this.subtable.table.ligatureList;\n            let actionIndex = entry.action;\n            let last = false;\n            let ligatureIndex = 0;\n            let codePoints = [];\n            let ligatureGlyphs = [];\n            while(!last){\n                let componentGlyph = this.ligatureStack.pop();\n                codePoints.unshift(...this.glyphs[componentGlyph].codePoints);\n                let action = actions.getItem(actionIndex++);\n                last = !!(action & $55f71433a605c87d$var$LAST_MASK);\n                let store = !!(action & $55f71433a605c87d$var$STORE_MASK);\n                let offset = (action & $55f71433a605c87d$var$OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n                offset += this.glyphs[componentGlyph].id;\n                let component = components.getItem(offset);\n                ligatureIndex += component;\n                if (last || store) {\n                    let ligatureEntry = ligatureList.getItem(ligatureIndex);\n                    this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n                    ligatureGlyphs.push(componentGlyph);\n                    ligatureIndex = 0;\n                    codePoints = [];\n                } else this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n            }\n            // Put ligature glyph indexes back on the stack\n            this.ligatureStack.push(...ligatureGlyphs);\n        }\n    }\n    processNoncontextualSubstitutions(subtable, glyphs, index) {\n        let lookupTable = new (0, $ff5ce077dae0f144$export$2e2bcd8739ae039)(subtable.table.lookupTable);\n        for(index = 0; index < glyphs.length; index++){\n            let glyph = glyphs[index];\n            if (glyph.id !== 0xffff) {\n                let gid = lookupTable.lookup(glyph.id);\n                if (gid) glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n            }\n        }\n    }\n    _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n        let insertions = [];\n        while(count--){\n            let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n            insertions.push(this.font.getGlyph(gid));\n        }\n        if (!isBefore) glyphIndex++;\n        this.glyphs.splice(glyphIndex, 0, ...insertions);\n    }\n    processGlyphInsertion(glyph, entry, index) {\n        if (entry.flags & $55f71433a605c87d$var$SET_MARK) this.markedIndex = index;\n        if (entry.markedInsertIndex !== 0xffff) {\n            let count = (entry.flags & $55f71433a605c87d$var$MARKED_INSERT_COUNT) >>> 5;\n            let isBefore = !!(entry.flags & $55f71433a605c87d$var$MARKED_INSERT_BEFORE);\n            this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n        }\n        if (entry.currentInsertIndex !== 0xffff) {\n            let count = (entry.flags & $55f71433a605c87d$var$CURRENT_INSERT_COUNT) >>> 5;\n            let isBefore = !!(entry.flags & $55f71433a605c87d$var$CURRENT_INSERT_BEFORE);\n            this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);\n        }\n    }\n    getSupportedFeatures() {\n        let features = [];\n        for (let chain of this.morx.chains)for (let feature of chain.features)features.push([\n            feature.featureType,\n            feature.featureSetting\n        ]);\n        return features;\n    }\n    generateInputs(gid) {\n        if (!this.inputCache) this.generateInputCache();\n        return this.inputCache[gid] || [];\n    }\n    generateInputCache() {\n        this.inputCache = {};\n        for (let chain of this.morx.chains){\n            let flags = chain.defaultFlags;\n            for (let subtable of chain.subtables)if (subtable.subFeatureFlags & flags) this.generateInputsForSubtable(subtable);\n        }\n    }\n    generateInputsForSubtable(subtable) {\n        // Currently, only supporting ligature subtables.\n        if (subtable.type !== 2) return;\n        let reverse = !!(subtable.coverage & $55f71433a605c87d$var$REVERSE_DIRECTION);\n        if (reverse) throw new Error(\"Reverse subtable, not supported.\");\n        this.subtable = subtable;\n        this.ligatureStack = [];\n        let stateMachine = this.getStateMachine(subtable);\n        let process = this.getProcessor();\n        let input = [];\n        let stack = [];\n        this.glyphs = [];\n        stateMachine.traverse({\n            enter: (glyph, entry)=>{\n                let glyphs = this.glyphs;\n                stack.push({\n                    glyphs: glyphs.slice(),\n                    ligatureStack: this.ligatureStack.slice()\n                });\n                // Add glyph to input and glyphs to process.\n                let g1 = this.font.getGlyph(glyph);\n                input.push(g1);\n                glyphs.push(input[input.length - 1]);\n                // Process ligature substitution\n                process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);\n                // Add input to result if only one matching (non-deleted) glyph remains.\n                let count = 0;\n                let found = 0;\n                for(let i = 0; i < glyphs.length && count <= 1; i++)if (glyphs[i].id !== 0xffff) {\n                    count++;\n                    found = glyphs[i].id;\n                }\n                if (count === 1) {\n                    let result = input.map((g)=>g.id);\n                    let cache1 = this.inputCache[found];\n                    if (cache1) cache1.push(result);\n                    else this.inputCache[found] = [\n                        result\n                    ];\n                }\n            },\n            exit: ()=>{\n                ({ glyphs: this.glyphs, ligatureStack: this.ligatureStack } = stack.pop());\n                input.pop();\n            }\n        });\n    }\n    constructor(font){\n        this.processIndicRearragement = this.processIndicRearragement.bind(this);\n        this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n        this.processLigature = this.processLigature.bind(this);\n        this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n        this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n        this.font = font;\n        this.morx = font.morx;\n        this.inputCache = null;\n    }\n}\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $55f71433a605c87d$export$2e2bcd8739ae039.prototype, \"getStateMachine\", null);\n// swaps the glyphs in rangeA with those in rangeB\n// reverse the glyphs inside those ranges if specified\n// ranges are in [offset, length] format\nfunction $55f71433a605c87d$var$swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {\n    let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n    if (reverseB) end.reverse();\n    let start = glyphs.splice(rangeA[0], rangeA[1], ...end);\n    if (reverseA) start.reverse();\n    glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);\n    return glyphs;\n}\nfunction $55f71433a605c87d$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n    let length = lastGlyph - firstGlyph + 1;\n    switch(verb){\n        case 0:\n            return glyphs;\n        case 1:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                0\n            ]);\n        case 2:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                0\n            ], [\n                lastGlyph,\n                1\n            ]);\n        case 3:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                1\n            ]);\n        case 4:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                0\n            ]);\n        case 5:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                0\n            ], true, false);\n        case 6:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                0\n            ], [\n                lastGlyph,\n                2\n            ]);\n        case 7:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                0\n            ], [\n                lastGlyph,\n                2\n            ], false, true);\n        case 8:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                2\n            ]);\n        case 9:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                1\n            ], [\n                lastGlyph,\n                2\n            ], false, true);\n        case 10:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                1\n            ]);\n        case 11:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                1\n            ], true, false);\n        case 12:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ]);\n        case 13:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ], true, false);\n        case 14:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ], false, true);\n        case 15:\n            return $55f71433a605c87d$var$swap(glyphs, [\n                firstGlyph,\n                2\n            ], [\n                lastGlyph,\n                2\n            ], true, true);\n        default:\n            throw new Error(`Unknown verb: ${verb}`);\n    }\n}\nclass $ba6dd74203be8728$export$2e2bcd8739ae039 {\n    substitute(glyphRun) {\n        // AAT expects the glyphs to be in visual order prior to morx processing,\n        // so reverse the glyphs if the script is right-to-left.\n        if (glyphRun.direction === \"rtl\") glyphRun.glyphs.reverse();\n        this.morxProcessor.process(glyphRun.glyphs, $3b6302b64eccc32c$export$b813f7d2a1677c16(glyphRun.features));\n    }\n    getAvailableFeatures(script, language) {\n        return $3b6302b64eccc32c$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());\n    }\n    stringsForGlyph(gid) {\n        let glyphStrings = this.morxProcessor.generateInputs(gid);\n        let result = new Set;\n        for (let glyphs of glyphStrings)this._addStrings(glyphs, 0, result, \"\");\n        return result;\n    }\n    _addStrings(glyphs, index, strings, string) {\n        let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n        for (let codePoint of codePoints){\n            let s = string + String.fromCodePoint(codePoint);\n            if (index < glyphs.length - 1) this._addStrings(glyphs, index + 1, strings, s);\n            else strings.add(s);\n        }\n    }\n    constructor(font){\n        this.font = font;\n        this.morxProcessor = new (0, $55f71433a605c87d$export$2e2bcd8739ae039)(font);\n        this.fallbackPosition = false;\n    }\n}\nclass $94d7a73bd2edfc9a$export$2e2bcd8739ae039 {\n    /**\n   * Adds the given features to the last stage.\n   * Ignores features that have already been applied.\n   */ _addFeatures(features, global) {\n        let stageIndex = this.stages.length - 1;\n        let stage = this.stages[stageIndex];\n        for (let feature of features)if (this.allFeatures[feature] == null) {\n            stage.push(feature);\n            this.allFeatures[feature] = stageIndex;\n            if (global) this.globalFeatures[feature] = true;\n        }\n    }\n    /**\n   * Add features to the last stage\n   */ add(arg, global = true) {\n        if (this.stages.length === 0) this.stages.push([]);\n        if (typeof arg === \"string\") arg = [\n            arg\n        ];\n        if (Array.isArray(arg)) this._addFeatures(arg, global);\n        else if (typeof arg === \"object\") {\n            this._addFeatures(arg.global || [], true);\n            this._addFeatures(arg.local || [], false);\n        } else throw new Error(\"Unsupported argument to ShapingPlan#add\");\n    }\n    /**\n   * Add a new stage\n   */ addStage(arg, global) {\n        if (typeof arg === \"function\") this.stages.push(arg, []);\n        else {\n            this.stages.push([]);\n            this.add(arg, global);\n        }\n    }\n    setFeatureOverrides(features) {\n        if (Array.isArray(features)) this.add(features);\n        else if (typeof features === \"object\") for(let tag in features){\n            if (features[tag]) this.add(tag);\n            else if (this.allFeatures[tag] != null) {\n                let stage = this.stages[this.allFeatures[tag]];\n                stage.splice(stage.indexOf(tag), 1);\n                delete this.allFeatures[tag];\n                delete this.globalFeatures[tag];\n            }\n        }\n    }\n    /**\n   * Assigns the global features to the given glyphs\n   */ assignGlobalFeatures(glyphs) {\n        for (let glyph of glyphs)for(let feature in this.globalFeatures)glyph.features[feature] = true;\n    }\n    /**\n   * Executes the planned stages using the given OTProcessor\n   */ process(processor, glyphs, positions) {\n        for (let stage of this.stages){\n            if (typeof stage === \"function\") {\n                if (!positions) stage(this.font, glyphs, this);\n            } else if (stage.length > 0) processor.applyFeatures(stage, glyphs, positions);\n        }\n    }\n    constructor(font, script, direction){\n        this.font = font;\n        this.script = script;\n        this.direction = direction;\n        this.stages = [];\n        this.globalFeatures = {};\n        this.allFeatures = {};\n    }\n}\nconst $649970d87335b30f$var$VARIATION_FEATURES = [\n    \"rvrn\"\n];\nconst $649970d87335b30f$var$COMMON_FEATURES = [\n    \"ccmp\",\n    \"locl\",\n    \"rlig\",\n    \"mark\",\n    \"mkmk\"\n];\nconst $649970d87335b30f$var$FRACTIONAL_FEATURES = [\n    \"frac\",\n    \"numr\",\n    \"dnom\"\n];\nconst $649970d87335b30f$var$HORIZONTAL_FEATURES = [\n    \"calt\",\n    \"clig\",\n    \"liga\",\n    \"rclt\",\n    \"curs\",\n    \"kern\"\n];\nconst $649970d87335b30f$var$VERTICAL_FEATURES = [\n    \"vert\"\n];\nconst $649970d87335b30f$var$DIRECTIONAL_FEATURES = {\n    ltr: [\n        \"ltra\",\n        \"ltrm\"\n    ],\n    rtl: [\n        \"rtla\",\n        \"rtlm\"\n    ]\n};\nclass $649970d87335b30f$export$2e2bcd8739ae039 {\n    static plan(plan, glyphs, features) {\n        // Plan the features we want to apply\n        this.planPreprocessing(plan);\n        this.planFeatures(plan);\n        this.planPostprocessing(plan, features);\n        // Assign the global features to all the glyphs\n        plan.assignGlobalFeatures(glyphs);\n        // Assign local features to glyphs\n        this.assignFeatures(plan, glyphs);\n    }\n    static planPreprocessing(plan) {\n        plan.add({\n            global: [\n                ...$649970d87335b30f$var$VARIATION_FEATURES,\n                ...$649970d87335b30f$var$DIRECTIONAL_FEATURES[plan.direction]\n            ],\n            local: $649970d87335b30f$var$FRACTIONAL_FEATURES\n        });\n    }\n    static planFeatures(plan) {\n    // Do nothing by default. Let subclasses override this.\n    }\n    static planPostprocessing(plan, userFeatures) {\n        plan.add([\n            ...$649970d87335b30f$var$COMMON_FEATURES,\n            ...$649970d87335b30f$var$HORIZONTAL_FEATURES\n        ]);\n        plan.setFeatureOverrides(userFeatures);\n    }\n    static assignFeatures(plan, glyphs) {\n        // Enable contextual fractions\n        for(let i = 0; i < glyphs.length; i++){\n            let glyph = glyphs[i];\n            if (glyph.codePoints[0] === 0x2044) {\n                let start = i;\n                let end = i + 1;\n                // Apply numerator\n                while(start > 0 && (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.isDigit)(glyphs[start - 1].codePoints[0])){\n                    glyphs[start - 1].features.numr = true;\n                    glyphs[start - 1].features.frac = true;\n                    start--;\n                }\n                // Apply denominator\n                while(end < glyphs.length && (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.isDigit)(glyphs[end].codePoints[0])){\n                    glyphs[end].features.dnom = true;\n                    glyphs[end].features.frac = true;\n                    end++;\n                }\n                // Apply fraction slash\n                glyph.features.frac = true;\n                i = end - 1;\n            }\n        }\n    }\n}\n(0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)($649970d87335b30f$export$2e2bcd8739ae039, \"zeroMarkWidths\", \"AFTER_GPOS\");\nconst $764eb544bbe1ccf0$var$trie = new (0, unicode_trie__WEBPACK_IMPORTED_MODULE_4__)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"ABABAAAAAACgMQAAAZUBav7t2CtPA0EUBeDZB00pin9AJZIEgyUEj0QhweDAgQOJxCBRBElQSBwSicLgkOAwnNKZ5GaY2c7uzj4o5yZfZrrbefbuIx2nSq3CGmzAWH/+K+UO7MIe7MMhHMMpnMMFXMIVXIt2t3CnP088iPqjqNN8e4Ij7Rle4LUH82rLm6i/92A+RERERERERERNmfz/89GDeRARERERzbN8ceps2Iwt9H0C9/AJ6yOlDkbTczcot5VSm8Pm1vcFWfb7+BKOLTuOd2UlTX4wGP85Eg953lWPFbnuN7PkjtLmalOWbNenkHOSa7T3KmR9MVTZ2zZkVj1kHa68MueVKH0R4zqQ44WEXLM8VjcWHP0PtKLfPzQnMtGn3W4QYf6qxFxceVI394r2xnV+1rih0fV1Vzf3fO1n3evL5J78ruvZ5ptX2Rwy92Tfb1wlEqut3U+sZ3HXOeJ7/zDrbyuP6+Zz0fqa6Nv3vhY7Yu1xWnGevmsvsUpTT/RYIe8waUH/rvHMWKFzLfN8L+rTfp645mfX7ftlnfDtYxN59w0=\"));\nconst $764eb544bbe1ccf0$var$FEATURES = [\n    \"isol\",\n    \"fina\",\n    \"fin2\",\n    \"fin3\",\n    \"medi\",\n    \"med2\",\n    \"init\"\n];\nconst $764eb544bbe1ccf0$var$ShapingClasses = {\n    Non_Joining: 0,\n    Left_Joining: 1,\n    Right_Joining: 2,\n    Dual_Joining: 3,\n    Join_Causing: 3,\n    ALAPH: 4,\n    \"DALATH RISH\": 5,\n    Transparent: 6\n};\nconst $764eb544bbe1ccf0$var$ISOL = \"isol\";\nconst $764eb544bbe1ccf0$var$FINA = \"fina\";\nconst $764eb544bbe1ccf0$var$FIN2 = \"fin2\";\nconst $764eb544bbe1ccf0$var$FIN3 = \"fin3\";\nconst $764eb544bbe1ccf0$var$MEDI = \"medi\";\nconst $764eb544bbe1ccf0$var$MED2 = \"med2\";\nconst $764eb544bbe1ccf0$var$INIT = \"init\";\nconst $764eb544bbe1ccf0$var$NONE = null;\n// Each entry is [prevAction, curAction, nextState]\nconst $764eb544bbe1ccf0$var$STATE_TABLE = [\n    //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n    // State 0: prev was U,  not willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            6\n        ]\n    ],\n    // State 1: prev was R or ISOL/ALAPH,  not willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$FIN2,\n            5\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            6\n        ]\n    ],\n    // State 2: prev was D/L in ISOL form,  willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$INIT,\n            $764eb544bbe1ccf0$var$FINA,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$INIT,\n            $764eb544bbe1ccf0$var$FINA,\n            3\n        ],\n        [\n            $764eb544bbe1ccf0$var$INIT,\n            $764eb544bbe1ccf0$var$FINA,\n            4\n        ],\n        [\n            $764eb544bbe1ccf0$var$INIT,\n            $764eb544bbe1ccf0$var$FINA,\n            6\n        ]\n    ],\n    // State 3: prev was D in FINA form,  willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$MEDI,\n            $764eb544bbe1ccf0$var$FINA,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$MEDI,\n            $764eb544bbe1ccf0$var$FINA,\n            3\n        ],\n        [\n            $764eb544bbe1ccf0$var$MEDI,\n            $764eb544bbe1ccf0$var$FINA,\n            4\n        ],\n        [\n            $764eb544bbe1ccf0$var$MEDI,\n            $764eb544bbe1ccf0$var$FINA,\n            6\n        ]\n    ],\n    // State 4: prev was FINA ALAPH,  not willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$MED2,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$MED2,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$MED2,\n            $764eb544bbe1ccf0$var$FIN2,\n            5\n        ],\n        [\n            $764eb544bbe1ccf0$var$MED2,\n            $764eb544bbe1ccf0$var$ISOL,\n            6\n        ]\n    ],\n    // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$ISOL,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$ISOL,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$ISOL,\n            $764eb544bbe1ccf0$var$FIN2,\n            5\n        ],\n        [\n            $764eb544bbe1ccf0$var$ISOL,\n            $764eb544bbe1ccf0$var$ISOL,\n            6\n        ]\n    ],\n    // State 6: prev was DALATH/RISH,  not willing to join.\n    [\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$NONE,\n            0\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            1\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            2\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$FIN3,\n            5\n        ],\n        [\n            $764eb544bbe1ccf0$var$NONE,\n            $764eb544bbe1ccf0$var$ISOL,\n            6\n        ]\n    ]\n];\nclass $764eb544bbe1ccf0$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n    static planFeatures(plan) {\n        plan.add([\n            \"ccmp\",\n            \"locl\"\n        ]);\n        for(let i = 0; i < $764eb544bbe1ccf0$var$FEATURES.length; i++){\n            let feature = $764eb544bbe1ccf0$var$FEATURES[i];\n            plan.addStage(feature, false);\n        }\n        plan.addStage(\"mset\");\n    }\n    static assignFeatures(plan, glyphs) {\n        super.assignFeatures(plan, glyphs);\n        let prev = -1;\n        let state = 0;\n        let actions = [];\n        // Apply the state machine to map glyphs to features\n        for(let i = 0; i < glyphs.length; i++){\n            let curAction, prevAction;\n            var glyph = glyphs[i];\n            let type = $764eb544bbe1ccf0$var$getShapingClass(glyph.codePoints[0]);\n            if (type === $764eb544bbe1ccf0$var$ShapingClasses.Transparent) {\n                actions[i] = $764eb544bbe1ccf0$var$NONE;\n                continue;\n            }\n            [prevAction, curAction, state] = $764eb544bbe1ccf0$var$STATE_TABLE[state][type];\n            if (prevAction !== $764eb544bbe1ccf0$var$NONE && prev !== -1) actions[prev] = prevAction;\n            actions[i] = curAction;\n            prev = i;\n        }\n        // Apply the chosen features to their respective glyphs\n        for(let index = 0; index < glyphs.length; index++){\n            let feature;\n            var glyph = glyphs[index];\n            if (feature = actions[index]) glyph.features[feature] = true;\n        }\n    }\n}\nfunction $764eb544bbe1ccf0$var$getShapingClass(codePoint) {\n    let res = $764eb544bbe1ccf0$var$trie.get(codePoint);\n    if (res) return res - 1;\n    let category = (0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.getCategory)(codePoint);\n    if (category === \"Mn\" || category === \"Me\" || category === \"Cf\") return $764eb544bbe1ccf0$var$ShapingClasses.Transparent;\n    return $764eb544bbe1ccf0$var$ShapingClasses.Non_Joining;\n}\nclass $85d408632270248b$export$2e2bcd8739ae039 {\n    reset(options = {}, index = 0) {\n        this.options = options;\n        this.flags = options.flags || {};\n        this.markAttachmentType = options.markAttachmentType || 0;\n        this.index = index;\n    }\n    get cur() {\n        return this.glyphs[this.index] || null;\n    }\n    shouldIgnore(glyph) {\n        return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;\n    }\n    move(dir) {\n        this.index += dir;\n        while(0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index]))this.index += dir;\n        if (0 > this.index || this.index >= this.glyphs.length) return null;\n        return this.glyphs[this.index];\n    }\n    next() {\n        return this.move(1);\n    }\n    prev() {\n        return this.move(-1);\n    }\n    peek(count = 1) {\n        let idx = this.index;\n        let res = this.increment(count);\n        this.index = idx;\n        return res;\n    }\n    peekIndex(count = 1) {\n        let idx = this.index;\n        this.increment(count);\n        let res = this.index;\n        this.index = idx;\n        return res;\n    }\n    increment(count = 1) {\n        let dir = count < 0 ? -1 : 1;\n        count = Math.abs(count);\n        while(count--)this.move(dir);\n        return this.glyphs[this.index];\n    }\n    constructor(glyphs, options){\n        this.glyphs = glyphs;\n        this.reset(options);\n    }\n}\nconst $a83b9c36aaa94fd3$var$DEFAULT_SCRIPTS = [\n    \"DFLT\",\n    \"dflt\",\n    \"latn\"\n];\nclass $a83b9c36aaa94fd3$export$2e2bcd8739ae039 {\n    findScript(script) {\n        if (this.table.scriptList == null) return null;\n        if (!Array.isArray(script)) script = [\n            script\n        ];\n        for (let s of script)for (let entry of this.table.scriptList){\n            if (entry.tag === s) return entry;\n        }\n        return null;\n    }\n    selectScript(script, language, direction) {\n        let changed = false;\n        let entry;\n        if (!this.script || script !== this.scriptTag) {\n            entry = this.findScript(script);\n            if (!entry) entry = this.findScript($a83b9c36aaa94fd3$var$DEFAULT_SCRIPTS);\n            if (!entry) return this.scriptTag;\n            this.scriptTag = entry.tag;\n            this.script = entry.script;\n            this.language = null;\n            this.languageTag = null;\n            changed = true;\n        }\n        if (!direction || direction !== this.direction) this.direction = direction || $130d1a642ebcd2b7$export$9fddb9d0dd7d8a54(script);\n        if (language && language.length < 4) language += \" \".repeat(4 - language.length);\n        if (!language || language !== this.languageTag) {\n            this.language = null;\n            for (let lang of this.script.langSysRecords)if (lang.tag === language) {\n                this.language = lang.langSys;\n                this.languageTag = lang.tag;\n                break;\n            }\n            if (!this.language) {\n                this.language = this.script.defaultLangSys;\n                this.languageTag = null;\n            }\n            changed = true;\n        }\n        // Build a feature lookup table\n        if (changed) {\n            this.features = {};\n            if (this.language) for (let featureIndex of this.language.featureIndexes){\n                let record = this.table.featureList[featureIndex];\n                let substituteFeature = this.substituteFeatureForVariations(featureIndex);\n                this.features[record.tag] = substituteFeature || record.feature;\n            }\n        }\n        return this.scriptTag;\n    }\n    lookupsForFeatures(userFeatures = [], exclude) {\n        let lookups = [];\n        for (let tag of userFeatures){\n            let feature = this.features[tag];\n            if (!feature) continue;\n            for (let lookupIndex of feature.lookupListIndexes){\n                if (exclude && exclude.indexOf(lookupIndex) !== -1) continue;\n                lookups.push({\n                    feature: tag,\n                    index: lookupIndex,\n                    lookup: this.table.lookupList.get(lookupIndex)\n                });\n            }\n        }\n        lookups.sort((a, b)=>a.index - b.index);\n        return lookups;\n    }\n    substituteFeatureForVariations(featureIndex) {\n        if (this.variationsIndex === -1) return null;\n        let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n        let substitutions = record.featureTableSubstitution.substitutions;\n        for (let substitution of substitutions){\n            if (substitution.featureIndex === featureIndex) return substitution.alternateFeatureTable;\n        }\n        return null;\n    }\n    findVariationsIndex(coords) {\n        let variations = this.table.featureVariations;\n        if (!variations) return -1;\n        let records = variations.featureVariationRecords;\n        for(let i = 0; i < records.length; i++){\n            let conditions = records[i].conditionSet.conditionTable;\n            if (this.variationConditionsMatch(conditions, coords)) return i;\n        }\n        return -1;\n    }\n    variationConditionsMatch(conditions, coords) {\n        return conditions.every((condition)=>{\n            let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n            return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n        });\n    }\n    applyFeatures(userFeatures, glyphs, advances) {\n        let lookups = this.lookupsForFeatures(userFeatures);\n        this.applyLookups(lookups, glyphs, advances);\n    }\n    applyLookups(lookups, glyphs, positions) {\n        this.glyphs = glyphs;\n        this.positions = positions;\n        this.glyphIterator = new (0, $85d408632270248b$export$2e2bcd8739ae039)(glyphs);\n        for (let { feature: feature, lookup: lookup } of lookups){\n            this.currentFeature = feature;\n            this.glyphIterator.reset(lookup.flags);\n            while(this.glyphIterator.index < glyphs.length){\n                if (!(feature in this.glyphIterator.cur.features)) {\n                    this.glyphIterator.next();\n                    continue;\n                }\n                for (let table of lookup.subTables){\n                    let res = this.applyLookup(lookup.lookupType, table);\n                    if (res) break;\n                }\n                this.glyphIterator.next();\n            }\n        }\n    }\n    applyLookup(lookup, table) {\n        throw new Error(\"applyLookup must be implemented by subclasses\");\n    }\n    applyLookupList(lookupRecords) {\n        let options = this.glyphIterator.options;\n        let glyphIndex = this.glyphIterator.index;\n        for (let lookupRecord of lookupRecords){\n            // Reset flags and find glyph index for this lookup record\n            this.glyphIterator.reset(options, glyphIndex);\n            this.glyphIterator.increment(lookupRecord.sequenceIndex);\n            // Get the lookup and setup flags for subtables\n            let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n            this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);\n            // Apply lookup subtables until one matches\n            for (let table of lookup.subTables){\n                if (this.applyLookup(lookup.lookupType, table)) break;\n            }\n        }\n        this.glyphIterator.reset(options, glyphIndex);\n        return true;\n    }\n    coverageIndex(coverage, glyph) {\n        if (glyph == null) glyph = this.glyphIterator.cur.id;\n        switch(coverage.version){\n            case 1:\n                return coverage.glyphs.indexOf(glyph);\n            case 2:\n                for (let range of coverage.rangeRecords){\n                    if (range.start <= glyph && glyph <= range.end) return range.startCoverageIndex + glyph - range.start;\n                }\n                break;\n        }\n        return -1;\n    }\n    match(sequenceIndex, sequence, fn, matched) {\n        let pos = this.glyphIterator.index;\n        let glyph = this.glyphIterator.increment(sequenceIndex);\n        let idx = 0;\n        while(idx < sequence.length && glyph && fn(sequence[idx], glyph)){\n            if (matched) matched.push(this.glyphIterator.index);\n            idx++;\n            glyph = this.glyphIterator.next();\n        }\n        this.glyphIterator.index = pos;\n        if (idx < sequence.length) return false;\n        return matched || true;\n    }\n    sequenceMatches(sequenceIndex, sequence) {\n        return this.match(sequenceIndex, sequence, (component, glyph)=>component === glyph.id);\n    }\n    sequenceMatchIndices(sequenceIndex, sequence) {\n        return this.match(sequenceIndex, sequence, (component, glyph)=>{\n            // If the current feature doesn't apply to this glyph,\n            if (!(this.currentFeature in glyph.features)) return false;\n            return component === glyph.id;\n        }, []);\n    }\n    coverageSequenceMatches(sequenceIndex, sequence) {\n        return this.match(sequenceIndex, sequence, (coverage, glyph)=>this.coverageIndex(coverage, glyph.id) >= 0);\n    }\n    getClassID(glyph, classDef) {\n        switch(classDef.version){\n            case 1:\n                let i = glyph - classDef.startGlyph;\n                if (i >= 0 && i < classDef.classValueArray.length) return classDef.classValueArray[i];\n                break;\n            case 2:\n                for (let range of classDef.classRangeRecord){\n                    if (range.start <= glyph && glyph <= range.end) return range.class;\n                }\n                break;\n        }\n        return 0;\n    }\n    classSequenceMatches(sequenceIndex, sequence, classDef) {\n        return this.match(sequenceIndex, sequence, (classID, glyph)=>classID === this.getClassID(glyph.id, classDef));\n    }\n    applyContext(table) {\n        let index, set;\n        switch(table.version){\n            case 1:\n                index = this.coverageIndex(table.coverage);\n                if (index === -1) return false;\n                set = table.ruleSets[index];\n                for (let rule of set){\n                    if (this.sequenceMatches(1, rule.input)) return this.applyLookupList(rule.lookupRecords);\n                }\n                break;\n            case 2:\n                if (this.coverageIndex(table.coverage) === -1) return false;\n                index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n                if (index === -1) return false;\n                set = table.classSet[index];\n                for (let rule1 of set){\n                    if (this.classSequenceMatches(1, rule1.classes, table.classDef)) return this.applyLookupList(rule1.lookupRecords);\n                }\n                break;\n            case 3:\n                if (this.coverageSequenceMatches(0, table.coverages)) return this.applyLookupList(table.lookupRecords);\n                break;\n        }\n        return false;\n    }\n    applyChainingContext(table) {\n        let index;\n        switch(table.version){\n            case 1:\n                index = this.coverageIndex(table.coverage);\n                if (index === -1) return false;\n                let set = table.chainRuleSets[index];\n                for (let rule of set){\n                    if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) return this.applyLookupList(rule.lookupRecords);\n                }\n                break;\n            case 2:\n                if (this.coverageIndex(table.coverage) === -1) return false;\n                index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n                let rules = table.chainClassSet[index];\n                if (!rules) return false;\n                for (let rule2 of rules){\n                    if (this.classSequenceMatches(-rule2.backtrack.length, rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + rule2.input.length, rule2.lookahead, table.lookaheadClassDef)) return this.applyLookupList(rule2.lookupRecords);\n                }\n                break;\n            case 3:\n                if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) return this.applyLookupList(table.lookupRecords);\n                break;\n        }\n        return false;\n    }\n    constructor(font, table){\n        this.font = font;\n        this.table = table;\n        this.script = null;\n        this.scriptTag = null;\n        this.language = null;\n        this.languageTag = null;\n        this.features = {};\n        this.lookups = {};\n        // Setup variation substitutions\n        this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;\n        // initialize to default script + language\n        this.selectScript();\n        // current context (set by applyFeatures)\n        this.glyphs = [];\n        this.positions = []; // only used by GPOS\n        this.ligatureID = 1;\n        this.currentFeature = null;\n    }\n}\nclass $10e7b257e1a9a756$export$2e2bcd8739ae039 {\n    get id() {\n        return this._id;\n    }\n    set id(id) {\n        this._id = id;\n        this.substituted = true;\n        let GDEF = this._font.GDEF;\n        if (GDEF && GDEF.glyphClassDef) {\n            // TODO: clean this up\n            let classID = (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.glyphClassDef);\n            this.isBase = classID === 1;\n            this.isLigature = classID === 2;\n            this.isMark = classID === 3;\n            this.markAttachmentType = GDEF.markAttachClassDef ? (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n        } else {\n            this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.isMark));\n            this.isBase = !this.isMark;\n            this.isLigature = this.codePoints.length > 1;\n            this.markAttachmentType = 0;\n        }\n    }\n    copy() {\n        return new $10e7b257e1a9a756$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);\n    }\n    constructor(font, id, codePoints = [], features){\n        this._font = font;\n        this.codePoints = codePoints;\n        this.id = id;\n        this.features = {};\n        if (Array.isArray(features)) for(let i = 0; i < features.length; i++){\n            let feature = features[i];\n            this.features[feature] = true;\n        }\n        else if (typeof features === \"object\") Object.assign(this.features, features);\n        this.ligatureID = null;\n        this.ligatureComponent = null;\n        this.isLigated = false;\n        this.cursiveAttachment = null;\n        this.markAttachment = null;\n        this.shaperInfo = null;\n        this.substituted = false;\n        this.isMultiplied = false;\n    }\n}\nclass $e1c6bbc8cb416f8c$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n    static planFeatures(plan) {\n        plan.add([\n            \"ljmo\",\n            \"vjmo\",\n            \"tjmo\"\n        ], false);\n    }\n    static assignFeatures(plan, glyphs) {\n        let state = 0;\n        let i = 0;\n        while(i < glyphs.length){\n            let action;\n            let glyph = glyphs[i];\n            let code = glyph.codePoints[0];\n            let type = $e1c6bbc8cb416f8c$var$getType(code);\n            [action, state] = $e1c6bbc8cb416f8c$var$STATE_TABLE[state][type];\n            switch(action){\n                case $e1c6bbc8cb416f8c$var$DECOMPOSE:\n                    // Decompose the composed syllable if it is not supported by the font.\n                    if (!plan.font.hasGlyphForCodePoint(code)) i = $e1c6bbc8cb416f8c$var$decompose(glyphs, i, plan.font);\n                    break;\n                case $e1c6bbc8cb416f8c$var$COMPOSE:\n                    // Found a decomposed syllable. Try to compose if supported by the font.\n                    i = $e1c6bbc8cb416f8c$var$compose(glyphs, i, plan.font);\n                    break;\n                case $e1c6bbc8cb416f8c$var$TONE_MARK:\n                    // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n                    $e1c6bbc8cb416f8c$var$reorderToneMark(glyphs, i, plan.font);\n                    break;\n                case $e1c6bbc8cb416f8c$var$INVALID:\n                    // Tone mark has no valid syllable to attach to, so insert a dotted circle\n                    i = $e1c6bbc8cb416f8c$var$insertDottedCircle(glyphs, i, plan.font);\n                    break;\n            }\n            i++;\n        }\n    }\n}\n(0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)($e1c6bbc8cb416f8c$export$2e2bcd8739ae039, \"zeroMarkWidths\", \"NONE\");\nconst $e1c6bbc8cb416f8c$var$HANGUL_BASE = 0xac00;\nconst $e1c6bbc8cb416f8c$var$HANGUL_END = 0xd7a4;\nconst $e1c6bbc8cb416f8c$var$HANGUL_COUNT = $e1c6bbc8cb416f8c$var$HANGUL_END - $e1c6bbc8cb416f8c$var$HANGUL_BASE + 1;\nconst $e1c6bbc8cb416f8c$var$L_BASE = 0x1100; // lead\nconst $e1c6bbc8cb416f8c$var$V_BASE = 0x1161; // vowel\nconst $e1c6bbc8cb416f8c$var$T_BASE = 0x11a7; // trail\nconst $e1c6bbc8cb416f8c$var$L_COUNT = 19;\nconst $e1c6bbc8cb416f8c$var$V_COUNT = 21;\nconst $e1c6bbc8cb416f8c$var$T_COUNT = 28;\nconst $e1c6bbc8cb416f8c$var$L_END = $e1c6bbc8cb416f8c$var$L_BASE + $e1c6bbc8cb416f8c$var$L_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$V_END = $e1c6bbc8cb416f8c$var$V_BASE + $e1c6bbc8cb416f8c$var$V_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$T_END = $e1c6bbc8cb416f8c$var$T_BASE + $e1c6bbc8cb416f8c$var$T_COUNT - 1;\nconst $e1c6bbc8cb416f8c$var$DOTTED_CIRCLE = 0x25cc;\nconst $e1c6bbc8cb416f8c$var$isL = (code)=>0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\nconst $e1c6bbc8cb416f8c$var$isV = (code)=>0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\nconst $e1c6bbc8cb416f8c$var$isT = (code)=>0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\nconst $e1c6bbc8cb416f8c$var$isTone = (code)=>0x302e <= code && code <= 0x302f;\nconst $e1c6bbc8cb416f8c$var$isLVT = (code)=>$e1c6bbc8cb416f8c$var$HANGUL_BASE <= code && code <= $e1c6bbc8cb416f8c$var$HANGUL_END;\nconst $e1c6bbc8cb416f8c$var$isLV = (code)=>code - $e1c6bbc8cb416f8c$var$HANGUL_BASE < $e1c6bbc8cb416f8c$var$HANGUL_COUNT && (code - $e1c6bbc8cb416f8c$var$HANGUL_BASE) % $e1c6bbc8cb416f8c$var$T_COUNT === 0;\nconst $e1c6bbc8cb416f8c$var$isCombiningL = (code)=>$e1c6bbc8cb416f8c$var$L_BASE <= code && code <= $e1c6bbc8cb416f8c$var$L_END;\nconst $e1c6bbc8cb416f8c$var$isCombiningV = (code)=>$e1c6bbc8cb416f8c$var$V_BASE <= code && code <= $e1c6bbc8cb416f8c$var$V_END;\nconst $e1c6bbc8cb416f8c$var$isCombiningT = (code)=>$e1c6bbc8cb416f8c$var$T_BASE + 1 && 1 <= code && code <= $e1c6bbc8cb416f8c$var$T_END;\n// Character categories\nconst $e1c6bbc8cb416f8c$var$X = 0; // Other character\nconst $e1c6bbc8cb416f8c$var$L = 1; // Leading consonant\nconst $e1c6bbc8cb416f8c$var$V = 2; // Medial vowel\nconst $e1c6bbc8cb416f8c$var$T = 3; // Trailing consonant\nconst $e1c6bbc8cb416f8c$var$LV = 4; // Composed <LV> syllable\nconst $e1c6bbc8cb416f8c$var$LVT = 5; // Composed <LVT> syllable\nconst $e1c6bbc8cb416f8c$var$M = 6; // Tone mark\n// This function classifies a character using the above categories.\nfunction $e1c6bbc8cb416f8c$var$getType(code) {\n    if ($e1c6bbc8cb416f8c$var$isL(code)) return $e1c6bbc8cb416f8c$var$L;\n    if ($e1c6bbc8cb416f8c$var$isV(code)) return $e1c6bbc8cb416f8c$var$V;\n    if ($e1c6bbc8cb416f8c$var$isT(code)) return $e1c6bbc8cb416f8c$var$T;\n    if ($e1c6bbc8cb416f8c$var$isLV(code)) return $e1c6bbc8cb416f8c$var$LV;\n    if ($e1c6bbc8cb416f8c$var$isLVT(code)) return $e1c6bbc8cb416f8c$var$LVT;\n    if ($e1c6bbc8cb416f8c$var$isTone(code)) return $e1c6bbc8cb416f8c$var$M;\n    return $e1c6bbc8cb416f8c$var$X;\n}\n// State machine actions\nconst $e1c6bbc8cb416f8c$var$NO_ACTION = 0;\nconst $e1c6bbc8cb416f8c$var$DECOMPOSE = 1;\nconst $e1c6bbc8cb416f8c$var$COMPOSE = 2;\nconst $e1c6bbc8cb416f8c$var$TONE_MARK = 4;\nconst $e1c6bbc8cb416f8c$var$INVALID = 5;\n// Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\nconst $e1c6bbc8cb416f8c$var$STATE_TABLE = [\n    //       X                 L                 V                T                  LV                LVT               M\n    // State 0: start state\n    [\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            1\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$INVALID,\n            0\n        ]\n    ],\n    // State 1: <L>\n    [\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            1\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$COMPOSE,\n            2\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$INVALID,\n            0\n        ]\n    ],\n    // State 2: <L,V> or <LV>\n    [\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            1\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$COMPOSE,\n            3\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$TONE_MARK,\n            0\n        ]\n    ],\n    // State 3: <L,V,T> or <LVT>\n    [\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            1\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$NO_ACTION,\n            0\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            2\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$DECOMPOSE,\n            3\n        ],\n        [\n            $e1c6bbc8cb416f8c$var$TONE_MARK,\n            0\n        ]\n    ]\n];\nfunction $e1c6bbc8cb416f8c$var$getGlyph(font, code, features) {\n    return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, font.glyphForCodePoint(code).id, [\n        code\n    ], features);\n}\nfunction $e1c6bbc8cb416f8c$var$decompose(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyph.codePoints[0];\n    let s = code - $e1c6bbc8cb416f8c$var$HANGUL_BASE;\n    let t = $e1c6bbc8cb416f8c$var$T_BASE + s % $e1c6bbc8cb416f8c$var$T_COUNT;\n    s = s / $e1c6bbc8cb416f8c$var$T_COUNT | 0;\n    let l = $e1c6bbc8cb416f8c$var$L_BASE + s / $e1c6bbc8cb416f8c$var$V_COUNT | 0;\n    let v = $e1c6bbc8cb416f8c$var$V_BASE + s % $e1c6bbc8cb416f8c$var$V_COUNT;\n    // Don't decompose if all of the components are not available\n    if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== $e1c6bbc8cb416f8c$var$T_BASE && !font.hasGlyphForCodePoint(t)) return i;\n    // Replace the current glyph with decomposed L, V, and T glyphs,\n    // and apply the proper OpenType features to each component.\n    let ljmo = $e1c6bbc8cb416f8c$var$getGlyph(font, l, glyph.features);\n    ljmo.features.ljmo = true;\n    let vjmo = $e1c6bbc8cb416f8c$var$getGlyph(font, v, glyph.features);\n    vjmo.features.vjmo = true;\n    let insert = [\n        ljmo,\n        vjmo\n    ];\n    if (t > $e1c6bbc8cb416f8c$var$T_BASE) {\n        let tjmo = $e1c6bbc8cb416f8c$var$getGlyph(font, t, glyph.features);\n        tjmo.features.tjmo = true;\n        insert.push(tjmo);\n    }\n    glyphs.splice(i, 1, ...insert);\n    return i + insert.length - 1;\n}\nfunction $e1c6bbc8cb416f8c$var$compose(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyphs[i].codePoints[0];\n    let type = $e1c6bbc8cb416f8c$var$getType(code);\n    let prev = glyphs[i - 1].codePoints[0];\n    let prevType = $e1c6bbc8cb416f8c$var$getType(prev);\n    // Figure out what type of syllable we're dealing with\n    let lv, ljmo, vjmo, tjmo;\n    if (prevType === $e1c6bbc8cb416f8c$var$LV && type === $e1c6bbc8cb416f8c$var$T) {\n        // <LV,T>\n        lv = prev;\n        tjmo = glyph;\n    } else {\n        if (type === $e1c6bbc8cb416f8c$var$V) {\n            // <L,V>\n            ljmo = glyphs[i - 1];\n            vjmo = glyph;\n        } else {\n            // <L,V,T>\n            ljmo = glyphs[i - 2];\n            vjmo = glyphs[i - 1];\n            tjmo = glyph;\n        }\n        let l = ljmo.codePoints[0];\n        let v = vjmo.codePoints[0];\n        // Make sure L and V are combining characters\n        if ($e1c6bbc8cb416f8c$var$isCombiningL(l) && $e1c6bbc8cb416f8c$var$isCombiningV(v)) lv = $e1c6bbc8cb416f8c$var$HANGUL_BASE + ((l - $e1c6bbc8cb416f8c$var$L_BASE) * $e1c6bbc8cb416f8c$var$V_COUNT + (v - $e1c6bbc8cb416f8c$var$V_BASE)) * $e1c6bbc8cb416f8c$var$T_COUNT;\n    }\n    let t = tjmo && tjmo.codePoints[0] || $e1c6bbc8cb416f8c$var$T_BASE;\n    if (lv != null && (t === $e1c6bbc8cb416f8c$var$T_BASE || $e1c6bbc8cb416f8c$var$isCombiningT(t))) {\n        let s = lv + (t - $e1c6bbc8cb416f8c$var$T_BASE);\n        // Replace with a composed glyph if supported by the font,\n        // otherwise apply the proper OpenType features to each component.\n        if (font.hasGlyphForCodePoint(s)) {\n            let del = prevType === $e1c6bbc8cb416f8c$var$V ? 3 : 2;\n            glyphs.splice(i - del + 1, del, $e1c6bbc8cb416f8c$var$getGlyph(font, s, glyph.features));\n            return i - del + 1;\n        }\n    }\n    // Didn't compose (either a non-combining component or unsupported by font).\n    if (ljmo) ljmo.features.ljmo = true;\n    if (vjmo) vjmo.features.vjmo = true;\n    if (tjmo) tjmo.features.tjmo = true;\n    if (prevType === $e1c6bbc8cb416f8c$var$LV) {\n        // Sequence was originally <L,V>, which got combined earlier.\n        // Either the T was non-combining, or the LVT glyph wasn't supported.\n        // Decompose the glyph again and apply OT features.\n        $e1c6bbc8cb416f8c$var$decompose(glyphs, i - 1, font);\n        return i + 1;\n    }\n    return i;\n}\nfunction $e1c6bbc8cb416f8c$var$getLength(code) {\n    switch($e1c6bbc8cb416f8c$var$getType(code)){\n        case $e1c6bbc8cb416f8c$var$LV:\n        case $e1c6bbc8cb416f8c$var$LVT:\n            return 1;\n        case $e1c6bbc8cb416f8c$var$V:\n            return 2;\n        case $e1c6bbc8cb416f8c$var$T:\n            return 3;\n    }\n}\nfunction $e1c6bbc8cb416f8c$var$reorderToneMark(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyphs[i].codePoints[0];\n    // Move tone mark to the beginning of the previous syllable, unless it is zero width\n    if (font.glyphForCodePoint(code).advanceWidth === 0) return;\n    let prev = glyphs[i - 1].codePoints[0];\n    let len = $e1c6bbc8cb416f8c$var$getLength(prev);\n    glyphs.splice(i, 1);\n    return glyphs.splice(i - len, 0, glyph);\n}\nfunction $e1c6bbc8cb416f8c$var$insertDottedCircle(glyphs, i, font) {\n    let glyph = glyphs[i];\n    let code = glyphs[i].codePoints[0];\n    if (font.hasGlyphForCodePoint($e1c6bbc8cb416f8c$var$DOTTED_CIRCLE)) {\n        let dottedCircle = $e1c6bbc8cb416f8c$var$getGlyph(font, $e1c6bbc8cb416f8c$var$DOTTED_CIRCLE, glyph.features);\n        // If the tone mark is zero width, insert the dotted circle before, otherwise after\n        let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n        glyphs.splice(idx, 0, dottedCircle);\n        i++;\n    }\n    return i;\n}\nvar $4b0735ca6c692ea5$exports = {};\n$4b0735ca6c692ea5$exports = JSON.parse('{\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],\"accepting\":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"symbol_cluster\"],[],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"standalone_cluster\"]]}');\nvar $aa333a9607471296$exports = {};\n$aa333a9607471296$exports = JSON.parse('{\"categories\":[\"O\",\"IND\",\"S\",\"GB\",\"B\",\"FM\",\"CGJ\",\"VMAbv\",\"VMPst\",\"VAbv\",\"VPst\",\"CMBlw\",\"VPre\",\"VBlw\",\"H\",\"VMBlw\",\"CMAbv\",\"MBlw\",\"CS\",\"R\",\"SUB\",\"MPst\",\"MPre\",\"FAbv\",\"FPst\",\"FBlw\",\"SMAbv\",\"SMBlw\",\"VMPre\",\"ZWNJ\",\"ZWJ\",\"WJ\",\"VS\",\"N\",\"HN\",\"MAbv\"],\"decompositions\":{\"2507\":[2503,2494],\"2508\":[2503,2519],\"2888\":[2887,2902],\"2891\":[2887,2878],\"2892\":[2887,2903],\"3018\":[3014,3006],\"3019\":[3015,3006],\"3020\":[3014,3031],\"3144\":[3142,3158],\"3264\":[3263,3285],\"3271\":[3270,3285],\"3272\":[3270,3286],\"3274\":[3270,3266],\"3275\":[3270,3266,3285],\"3402\":[3398,3390],\"3403\":[3399,3390],\"3404\":[3398,3415],\"3546\":[3545,3530],\"3548\":[3545,3535],\"3549\":[3545,3535,3530],\"3550\":[3545,3551],\"3635\":[3661,3634],\"3763\":[3789,3762],\"3955\":[3953,3954],\"3957\":[3953,3956],\"3958\":[4018,3968],\"3959\":[4018,3953,3968],\"3960\":[4019,3968],\"3961\":[4019,3953,3968],\"3969\":[3953,3968],\"6971\":[6970,6965],\"6973\":[6972,6965],\"6976\":[6974,6965],\"6977\":[6975,6965],\"6979\":[6978,6965],\"69934\":[69937,69927],\"69935\":[69938,69927],\"70475\":[70471,70462],\"70476\":[70471,70487],\"70843\":[70841,70842],\"70844\":[70841,70832],\"70846\":[70841,70845],\"71098\":[71096,71087],\"71099\":[71097,71087]},\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,23,0,0,2,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],\"accepting\":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"virama_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"number_joiner_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"numeral_cluster\"]]}');\nconst $90a9d3398ee54fe5$export$a513ea61a7bee91c = {\n    X: 1,\n    C: 2,\n    V: 4,\n    N: 8,\n    H: 16,\n    ZWNJ: 32,\n    ZWJ: 64,\n    M: 128,\n    SM: 256,\n    VD: 512,\n    A: 1024,\n    Placeholder: 2048,\n    Dotted_Circle: 4096,\n    RS: 8192,\n    Coeng: 16384,\n    Repha: 32768,\n    Ra: 65536,\n    CM: 131072,\n    Symbol: 262144 // Avagraha, etc that take marks (SM,A,VD).\n};\nconst $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0 = {\n    Start: 1,\n    Ra_To_Become_Reph: 2,\n    Pre_M: 4,\n    Pre_C: 8,\n    Base_C: 16,\n    After_Main: 32,\n    Above_C: 64,\n    Before_Sub: 128,\n    Below_C: 256,\n    After_Sub: 512,\n    Before_Post: 1024,\n    Post_C: 2048,\n    After_Post: 4096,\n    Final_C: 8192,\n    SMVD: 16384,\n    End: 32768\n};\nconst $90a9d3398ee54fe5$export$8519deaa7de2b07 = $90a9d3398ee54fe5$export$a513ea61a7bee91c.C | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Ra | $90a9d3398ee54fe5$export$a513ea61a7bee91c.CM | $90a9d3398ee54fe5$export$a513ea61a7bee91c.V | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Placeholder | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Dotted_Circle;\nconst $90a9d3398ee54fe5$export$bbcd928767338e0d = $90a9d3398ee54fe5$export$a513ea61a7bee91c.ZWJ | $90a9d3398ee54fe5$export$a513ea61a7bee91c.ZWNJ;\nconst $90a9d3398ee54fe5$export$ca9599b2a300afc = $90a9d3398ee54fe5$export$a513ea61a7bee91c.H | $90a9d3398ee54fe5$export$a513ea61a7bee91c.Coeng;\nconst $90a9d3398ee54fe5$export$e99d119da76a0fc5 = {\n    Default: {\n        hasOldSpec: false,\n        virama: 0,\n        basePos: \"Last\",\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Devanagari: {\n        hasOldSpec: true,\n        virama: 0x094D,\n        basePos: \"Last\",\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Bengali: {\n        hasOldSpec: true,\n        virama: 0x09CD,\n        basePos: \"Last\",\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Sub,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Gurmukhi: {\n        hasOldSpec: true,\n        virama: 0x0A4D,\n        basePos: \"Last\",\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Sub,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Gujarati: {\n        hasOldSpec: true,\n        virama: 0x0ACD,\n        basePos: \"Last\",\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Before_Post,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Oriya: {\n        hasOldSpec: true,\n        virama: 0x0B4D,\n        basePos: \"Last\",\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Main,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Tamil: {\n        hasOldSpec: true,\n        virama: 0x0BCD,\n        basePos: \"Last\",\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n        rephMode: \"Implicit\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    Telugu: {\n        hasOldSpec: true,\n        virama: 0x0C4D,\n        basePos: \"Last\",\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n        rephMode: \"Explicit\",\n        blwfMode: \"Post_Only\"\n    },\n    Kannada: {\n        hasOldSpec: true,\n        virama: 0x0CCD,\n        basePos: \"Last\",\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Post,\n        rephMode: \"Implicit\",\n        blwfMode: \"Post_Only\"\n    },\n    Malayalam: {\n        hasOldSpec: true,\n        virama: 0x0D4D,\n        basePos: \"Last\",\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.After_Main,\n        rephMode: \"Log_Repha\",\n        blwfMode: \"Pre_And_Post\"\n    },\n    // Handled by UniversalShaper\n    // Sinhala: {\n    //   hasOldSpec: false,\n    //   virama: 0x0DCA,\n    //   basePos: 'Last_Sinhala',\n    //   rephPos: POSITIONS.After_Main,\n    //   rephMode: 'Explicit',\n    //   blwfMode: 'Pre_And_Post'\n    // },\n    Khmer: {\n        hasOldSpec: false,\n        virama: 0x17D2,\n        basePos: \"First\",\n        rephPos: $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,\n        rephMode: \"Vis_Repha\",\n        blwfMode: \"Pre_And_Post\"\n    }\n};\nconst $90a9d3398ee54fe5$export$f647c9cfdd77d95a = {\n    // Khmer\n    0x17BE: [\n        0x17C1,\n        0x17BE\n    ],\n    0x17BF: [\n        0x17C1,\n        0x17BF\n    ],\n    0x17C0: [\n        0x17C1,\n        0x17C0\n    ],\n    0x17C4: [\n        0x17C1,\n        0x17C4\n    ],\n    0x17C5: [\n        0x17C1,\n        0x17C5\n    ]\n};\nconst { decompositions: $7826f90f6f0cecc9$var$decompositions } = (0, /*@__PURE__*/ $parcel$interopDefault($aa333a9607471296$exports));\nconst $7826f90f6f0cecc9$var$trie = new (0, unicode_trie__WEBPACK_IMPORTED_MODULE_4__)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"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\"));\nconst $7826f90f6f0cecc9$var$stateMachine = new (0, dfa__WEBPACK_IMPORTED_MODULE_5__)((0, /*@__PURE__*/ $parcel$interopDefault($4b0735ca6c692ea5$exports)));\nclass $7826f90f6f0cecc9$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n    static planFeatures(plan) {\n        plan.addStage($7826f90f6f0cecc9$var$setupSyllables);\n        plan.addStage([\n            \"locl\",\n            \"ccmp\"\n        ]);\n        plan.addStage($7826f90f6f0cecc9$var$initialReordering);\n        plan.addStage(\"nukt\");\n        plan.addStage(\"akhn\");\n        plan.addStage(\"rphf\", false);\n        plan.addStage(\"rkrf\");\n        plan.addStage(\"pref\", false);\n        plan.addStage(\"blwf\", false);\n        plan.addStage(\"abvf\", false);\n        plan.addStage(\"half\", false);\n        plan.addStage(\"pstf\", false);\n        plan.addStage(\"vatu\");\n        plan.addStage(\"cjct\");\n        plan.addStage(\"cfar\", false);\n        plan.addStage($7826f90f6f0cecc9$var$finalReordering);\n        plan.addStage({\n            local: [\n                \"init\"\n            ],\n            global: [\n                \"pres\",\n                \"abvs\",\n                \"blws\",\n                \"psts\",\n                \"haln\",\n                \"dist\",\n                \"abvm\",\n                \"blwm\",\n                \"calt\",\n                \"clig\"\n            ]\n        });\n        // Setup the indic config for the selected script\n        plan.unicodeScript = $130d1a642ebcd2b7$export$ce50e82f12a827a4(plan.script);\n        plan.indicConfig = (0, $90a9d3398ee54fe5$export$e99d119da76a0fc5)[plan.unicodeScript] || (0, $90a9d3398ee54fe5$export$e99d119da76a0fc5).Default;\n        plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== \"2\";\n    // TODO: turn off kern (Khmer) and liga features.\n    }\n    static assignFeatures(plan, glyphs) {\n        // Decompose split matras\n        // TODO: do this in a more general unicode normalizer\n        for(let i = glyphs.length - 1; i >= 0; i--){\n            let codepoint = glyphs[i].codePoints[0];\n            let d = (0, $90a9d3398ee54fe5$export$f647c9cfdd77d95a)[codepoint] || $7826f90f6f0cecc9$var$decompositions[codepoint];\n            if (d) {\n                let decomposed = d.map((c)=>{\n                    let g = plan.font.glyphForCodePoint(c);\n                    return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(plan.font, g.id, [\n                        c\n                    ], glyphs[i].features);\n                });\n                glyphs.splice(i, 1, ...decomposed);\n            }\n        }\n    }\n}\n(0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)($7826f90f6f0cecc9$export$2e2bcd8739ae039, \"zeroMarkWidths\", \"NONE\");\nfunction $7826f90f6f0cecc9$var$indicCategory(glyph) {\n    return $7826f90f6f0cecc9$var$trie.get(glyph.codePoints[0]) >> 8;\n}\nfunction $7826f90f6f0cecc9$var$indicPosition(glyph) {\n    return 1 << ($7826f90f6f0cecc9$var$trie.get(glyph.codePoints[0]) & 0xff);\n}\nclass $7826f90f6f0cecc9$var$IndicInfo {\n    constructor(category, position, syllableType, syllable){\n        this.category = category;\n        this.position = position;\n        this.syllableType = syllableType;\n        this.syllable = syllable;\n    }\n}\nfunction $7826f90f6f0cecc9$var$setupSyllables(font, glyphs) {\n    let syllable = 0;\n    let last = 0;\n    for (let [start, end, tags] of $7826f90f6f0cecc9$var$stateMachine.match(glyphs.map($7826f90f6f0cecc9$var$indicCategory))){\n        if (start > last) {\n            ++syllable;\n            for(let i = last; i < start; i++)glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).X, (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).End, \"non_indic_cluster\", syllable);\n        }\n        ++syllable;\n        // Create shaper info\n        for(let i = start; i <= end; i++)glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo(1 << $7826f90f6f0cecc9$var$indicCategory(glyphs[i]), $7826f90f6f0cecc9$var$indicPosition(glyphs[i]), tags[0], syllable);\n        last = end + 1;\n    }\n    if (last < glyphs.length) {\n        ++syllable;\n        for(let i = last; i < glyphs.length; i++)glyphs[i].shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).X, (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).End, \"non_indic_cluster\", syllable);\n    }\n}\nfunction $7826f90f6f0cecc9$var$isConsonant(glyph) {\n    return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$8519deaa7de2b07);\n}\nfunction $7826f90f6f0cecc9$var$isJoiner(glyph) {\n    return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$bbcd928767338e0d);\n}\nfunction $7826f90f6f0cecc9$var$isHalantOrCoeng(glyph) {\n    return glyph.shaperInfo.category & (0, $90a9d3398ee54fe5$export$ca9599b2a300afc);\n}\nfunction $7826f90f6f0cecc9$var$wouldSubstitute(glyphs, feature) {\n    for (let glyph of glyphs)glyph.features = {\n        [feature]: true\n    };\n    let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n    GSUB.applyFeatures([\n        feature\n    ], glyphs);\n    return glyphs.length === 1;\n}\nfunction $7826f90f6f0cecc9$var$consonantPosition(font, consonant, virama) {\n    let glyphs = [\n        virama,\n        consonant,\n        virama\n    ];\n    if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), \"blwf\") || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), \"blwf\")) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C;\n    else if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), \"pstf\") || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), \"pstf\")) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C;\n    else if ($7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(0, 2), \"pref\") || $7826f90f6f0cecc9$var$wouldSubstitute(glyphs.slice(1, 3), \"pref\")) return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C;\n    return (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C;\n}\nfunction $7826f90f6f0cecc9$var$initialReordering(font, glyphs, plan) {\n    let indicConfig = plan.indicConfig;\n    let features = font._layoutEngine.engine.GSUBProcessor.features;\n    let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n    let virama = font.glyphForCodePoint(indicConfig.virama).id;\n    if (virama) {\n        let info = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, virama, [\n            indicConfig.virama\n        ]);\n        for(let i = 0; i < glyphs.length; i++)if (glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) glyphs[i].shaperInfo.position = $7826f90f6f0cecc9$var$consonantPosition(font, glyphs[i].copy(), info);\n    }\n    for(let start = 0, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, start)){\n        let { category: category, syllableType: syllableType } = glyphs[start].shaperInfo;\n        if (syllableType === \"symbol_cluster\" || syllableType === \"non_indic_cluster\") continue;\n        if (syllableType === \"broken_cluster\" && dottedCircle) {\n            let g = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, dottedCircle, [\n                0x25cc\n            ]);\n            g.shaperInfo = new $7826f90f6f0cecc9$var$IndicInfo(1 << $7826f90f6f0cecc9$var$indicCategory(g), $7826f90f6f0cecc9$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);\n            // Insert after possible Repha.\n            let i = start;\n            while(i < end && glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha)i++;\n            glyphs.splice(i++, 0, g);\n            end++;\n        }\n        // 1. Find base consonant:\n        //\n        // The shaping engine finds the base consonant of the syllable, using the\n        // following algorithm: starting from the end of the syllable, move backwards\n        // until a consonant is found that does not have a below-base or post-base\n        // form (post-base forms have to follow below-base forms), or that is not a\n        // pre-base reordering Ra, or arrive at the first consonant. The consonant\n        // stopped at will be the base.\n        let base = end;\n        let limit = start;\n        let hasReph = false;\n        // If the syllable starts with Ra + Halant (in a script that has Reph)\n        // and has more than one consonant, Ra is excluded from candidates for\n        // base consonants.\n        if (indicConfig.rephPos !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === \"Implicit\" && !$7826f90f6f0cecc9$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === \"Explicit\" && glyphs[start + 2].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ)) {\n            // See if it matches the 'rphf' feature.\n            let g = [\n                glyphs[start].copy(),\n                glyphs[start + 1].copy(),\n                glyphs[start + 2].copy()\n            ];\n            if ($7826f90f6f0cecc9$var$wouldSubstitute(g.slice(0, 2), \"rphf\") || indicConfig.rephMode === \"Explicit\" && $7826f90f6f0cecc9$var$wouldSubstitute(g, \"rphf\")) {\n                limit += 2;\n                while(limit < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[limit]))limit++;\n                base = start;\n                hasReph = true;\n            }\n        } else if (indicConfig.rephMode === \"Log_Repha\" && glyphs[start].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha) {\n            limit++;\n            while(limit < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[limit]))limit++;\n            base = start;\n            hasReph = true;\n        }\n        switch(indicConfig.basePos){\n            case \"Last\":\n                {\n                    // starting from the end of the syllable, move backwards\n                    let i = end;\n                    let seenBelow = false;\n                    do {\n                        let info = glyphs[--i].shaperInfo;\n                        // until a consonant is found\n                        if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i])) {\n                            // that does not have a below-base or post-base form\n                            // (post-base forms have to follow below-base forms),\n                            if (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C && (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C || seenBelow)) {\n                                base = i;\n                                break;\n                            }\n                            // or that is not a pre-base reordering Ra,\n                            //\n                            // IMPLEMENTATION NOTES:\n                            //\n                            // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n                            // by the logic above already.\n                            //\n                            // or arrive at the first consonant. The consonant stopped at will\n                            // be the base.\n                            if (info.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C) seenBelow = true;\n                            base = i;\n                        } else if (start < i && info.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ && glyphs[i - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) break;\n                    }while (i > limit);\n                    break;\n                }\n            case \"First\":\n                // The first consonant is always the base.\n                base = start;\n                // Mark all subsequent consonants as below.\n                for(let i = base + 1; i < end; i++)if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i])) glyphs[i].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C;\n        }\n        // If the syllable starts with Ra + Halant (in a script that has Reph)\n        // and has more than one consonant, Ra is excluded from candidates for\n        // base consonants.\n        //\n        //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n        if (hasReph && base === start && limit - base <= 2) hasReph = false;\n        // 2. Decompose and reorder Matras:\n        //\n        // Each matra and any syllable modifier sign in the cluster are moved to the\n        // appropriate position relative to the consonant(s) in the cluster. The\n        // shaping engine decomposes two- or three-part matras into their constituent\n        // parts before any repositioning. Matra characters are classified by which\n        // consonant in a conjunct they have affinity for and are reordered to the\n        // following positions:\n        //\n        //   o Before first half form in the syllable\n        //   o After subjoined consonants\n        //   o After post-form consonant\n        //   o After main consonant (for above marks)\n        //\n        // IMPLEMENTATION NOTES:\n        //\n        // The normalize() routine has already decomposed matras for us, so we don't\n        // need to worry about that.\n        // 3.  Reorder marks to canonical order:\n        //\n        // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n        // if necessary, so that the nukta is first.\n        //\n        // IMPLEMENTATION NOTES:\n        //\n        // We don't need to do this: the normalize() routine already did this for us.\n        // Reorder characters\n        for(let i1 = start; i1 < base; i1++){\n            let info = glyphs[i1].shaperInfo;\n            info.position = Math.min((0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_C, info.position);\n        }\n        if (base < end) glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C;\n        // Mark final consonants.  A final consonant is one appearing after a matra,\n        // like in Khmer.\n        for(let i2 = base + 1; i2 < end; i2++)if (glyphs[i2].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n            for(let j = i2 + 1; j < end; j++)if ($7826f90f6f0cecc9$var$isConsonant(glyphs[j])) {\n                glyphs[j].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Final_C;\n                break;\n            }\n            break;\n        }\n        // Handle beginning Ra\n        if (hasReph) glyphs[start].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph;\n        // For old-style Indic script tags, move the first post-base Halant after\n        // last consonant.\n        //\n        // Reports suggest that in some scripts Uniscribe does this only if there\n        // is *not* a Halant after last consonant already (eg. Kannada), while it\n        // does it unconditionally in other scripts (eg. Malayalam).  We don't\n        // currently know about other scripts, so we single out Malayalam for now.\n        //\n        // Kannada test case:\n        // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n        // With some versions of Lohit Kannada.\n        // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n        //\n        // Malayalam test case:\n        // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n        // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n        if (plan.isOldSpec) {\n            let disallowDoubleHalants = plan.unicodeScript !== \"Malayalam\";\n            for(let i = base + 1; i < end; i++)if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) {\n                let j;\n                for(j = end - 1; j > i; j--){\n                    if ($7826f90f6f0cecc9$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H) break;\n                }\n                if (glyphs[j].shaperInfo.category !== (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && j > i) {\n                    // Move Halant to after last consonant.\n                    let t = glyphs[i];\n                    glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));\n                    glyphs[j] = t;\n                }\n                break;\n            }\n        }\n        // Attach misc marks to previous char to move with them.\n        let lastPos = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Start;\n        for(let i3 = start; i3 < end; i3++){\n            let info = glyphs[i3].shaperInfo;\n            if (info.category & ((0, $90a9d3398ee54fe5$export$bbcd928767338e0d) | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).N | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).RS | (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).CM | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc) & info.category)) {\n                info.position = lastPos;\n                if (info.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && info.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n                    // Uniscribe doesn't move the Halant with Left Matra.\n                    // TEST: U+092B,U+093F,U+094DE\n                    // We follow.  This is important for the Sinhala\n                    // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n                    // where U+0DD9 is a left matra and U+0DCA is the virama.\n                    // We don't want to move the virama with the left matra.\n                    // TEST: U+0D9A,U+0DDA\n                    for(let j = i3; j > start; j--)if (glyphs[j - 1].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n                        info.position = glyphs[j - 1].shaperInfo.position;\n                        break;\n                    }\n                }\n            } else if (info.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD) lastPos = info.position;\n        }\n        // For post-base consonants let them own anything before them\n        // since the last consonant or matra.\n        let last = base;\n        for(let i4 = base + 1; i4 < end; i4++){\n            if ($7826f90f6f0cecc9$var$isConsonant(glyphs[i4])) {\n                for(let j = last + 1; j < i4; j++)if (glyphs[j].shaperInfo.position < (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD) glyphs[j].shaperInfo.position = glyphs[i4].shaperInfo.position;\n                last = i4;\n            } else if (glyphs[i4].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) last = i4;\n        }\n        let arr = glyphs.slice(start, end);\n        arr.sort((a, b)=>a.shaperInfo.position - b.shaperInfo.position);\n        glyphs.splice(start, arr.length, ...arr);\n        // Find base again\n        for(let i5 = start; i5 < end; i5++)if (glyphs[i5].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) {\n            base = i5;\n            break;\n        }\n        // Setup features now\n        // Reph\n        for(let i6 = start; i6 < end && glyphs[i6].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph; i6++)glyphs[i6].features.rphf = true;\n        // Pre-base\n        let blwf = !plan.isOldSpec && indicConfig.blwfMode === \"Pre_And_Post\";\n        for(let i7 = start; i7 < base; i7++){\n            glyphs[i7].features.half = true;\n            if (blwf) glyphs[i7].features.blwf = true;\n        }\n        // Post-base\n        for(let i8 = base + 1; i8 < end; i8++){\n            glyphs[i8].features.abvf = true;\n            glyphs[i8].features.pstf = true;\n            glyphs[i8].features.blwf = true;\n        }\n        if (plan.isOldSpec && plan.unicodeScript === \"Devanagari\") {\n            // Old-spec eye-lash Ra needs special handling.  From the\n            // spec:\n            //\n            // \"The feature 'below-base form' is applied to consonants\n            // having below-base forms and following the base consonant.\n            // The exception is vattu, which may appear below half forms\n            // as well as below the base glyph. The feature 'below-base\n            // form' will be applied to all such occurrences of Ra as well.\"\n            //\n            // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n            // with Sanskrit 2003 font.\n            //\n            // However, note that Ra,Halant,ZWJ is the correct way to\n            // request eyelash form of Ra, so we wouldbn't inhibit it\n            // in that sequence.\n            //\n            // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n            for(let i = start; i + 1 < base; i++)if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Ra && glyphs[i + 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).H && (i + 1 === base || glyphs[i + 2].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ)) {\n                glyphs[i].features.blwf = true;\n                glyphs[i + 1].features.blwf = true;\n            }\n        }\n        let prefLen = 2;\n        if (features.pref && base + prefLen < end) for(let i9 = base + 1; i9 + prefLen - 1 < end; i9++){\n            let g = [\n                glyphs[i9].copy(),\n                glyphs[i9 + 1].copy()\n            ];\n            if ($7826f90f6f0cecc9$var$wouldSubstitute(g, \"pref\")) {\n                for(let j = 0; j < prefLen; j++)glyphs[i9++].features.pref = true;\n                // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n                // Read the feature spec.\n                // This allows distinguishing the following cases with MS Khmer fonts:\n                // U+1784,U+17D2,U+179A,U+17D2,U+1782\n                // U+1784,U+17D2,U+1782,U+17D2,U+179A\n                if (features.cfar) for(; i9 < end; i9++)glyphs[i9].features.cfar = true;\n                break;\n            }\n        }\n        // Apply ZWJ/ZWNJ effects\n        for(let i10 = start + 1; i10 < end; i10++)if ($7826f90f6f0cecc9$var$isJoiner(glyphs[i10])) {\n            let nonJoiner = glyphs[i10].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWNJ;\n            let j = i10;\n            do {\n                j--;\n                // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n                // being there, since we don't skip them for the CJCT\n                // feature (ie. F_MANUAL_ZWJ)\n                // A ZWNJ disables HALF.\n                if (nonJoiner) delete glyphs[j].features.half;\n            }while (j > start && !$7826f90f6f0cecc9$var$isConsonant(glyphs[j]));\n        }\n    }\n}\nfunction $7826f90f6f0cecc9$var$finalReordering(font, glyphs, plan) {\n    let indicConfig = plan.indicConfig;\n    let features = font._layoutEngine.engine.GSUBProcessor.features;\n    for(let start = 0, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7826f90f6f0cecc9$var$nextSyllable(glyphs, start)){\n        // 4. Final reordering:\n        //\n        // After the localized forms and basic shaping forms GSUB features have been\n        // applied (see below), the shaping engine performs some final glyph\n        // reordering before applying all the remaining font features to the entire\n        // cluster.\n        let tryPref = !!features.pref;\n        // Find base again\n        let base = start;\n        for(; base < end; base++)if (glyphs[base].shaperInfo.position >= (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) {\n            if (tryPref && base + 1 < end) {\n                for(let i = base + 1; i < end; i++)if (glyphs[i].features.pref) {\n                    if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n                        // Ok, this was a 'pref' candidate but didn't form any.\n                        // Base is around here...\n                        base = i;\n                        while(base < end && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[base]))base++;\n                        glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).BASE_C;\n                        tryPref = false;\n                    }\n                    break;\n                }\n            }\n            // For Malayalam, skip over unformed below- (but NOT post-) forms.\n            if (plan.unicodeScript === \"Malayalam\") for(let i = base + 1; i < end; i++){\n                while(i < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[i]))i++;\n                if (i === end || !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[i])) break;\n                i++; // Skip halant.\n                while(i < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[i]))i++;\n                if (i < end && $7826f90f6f0cecc9$var$isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Below_C) {\n                    base = i;\n                    glyphs[base].shaperInfo.position = (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C;\n                }\n            }\n            if (start < base && glyphs[base].shaperInfo.position > (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Base_C) base--;\n            break;\n        }\n        if (base === end && start < base && glyphs[base - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).ZWJ) base--;\n        if (base < end) while(start < base && glyphs[base].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).N | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc)))base--;\n        // o Reorder matras:\n        //\n        // If a pre-base matra character had been reordered before applying basic\n        // features, the glyph can be moved closer to the main consonant based on\n        // whether half-forms had been formed. Actual position for the matra is\n        // defined as “after last standalone halant glyph, after initial matra\n        // position and before the main consonant”. If ZWJ or ZWNJ follow this\n        // halant, position is moved after it.\n        //\n        if (start + 1 < end && start < base) {\n            // If we lost track of base, alas, position before last thingy.\n            let newPos = base === end ? base - 2 : base - 1;\n            // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n            // We want to position matra after them.\n            if (plan.unicodeScript !== \"Malayalam\" && plan.unicodeScript !== \"Tamil\") {\n                while(newPos > start && !(glyphs[newPos].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc))))newPos--;\n                // If we found no Halant we are done.\n                // Otherwise only proceed if the Halant does\n                // not belong to the Matra itself!\n                if ($7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n                    if (newPos + 1 < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[newPos + 1])) newPos++;\n                } else newPos = start; // No move.\n            }\n            if (start < newPos && glyphs[newPos].shaperInfo.position !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n                // Now go see if there's actually any matras...\n                for(let i = newPos; i > start; i--)if (glyphs[i - 1].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M) {\n                    let oldPos = i - 1;\n                    if (oldPos < base && base <= newPos) base--;\n                    let tmp = glyphs[oldPos];\n                    glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));\n                    glyphs[newPos] = tmp;\n                    newPos--;\n                }\n            }\n        }\n        // o Reorder reph:\n        //\n        // Reph’s original position is always at the beginning of the syllable,\n        // (i.e. it is not reordered at the character reordering stage). However,\n        // it will be reordered according to the basic-forms shaping results.\n        // Possible positions for reph, depending on the script, are; after main,\n        // before post-base consonant forms, and after post-base consonant forms.\n        // Two cases:\n        //\n        // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n        //   we should only move it if the sequence ligated to the repha form.\n        //\n        // - If repha is encoded separately and in the logical position, we should only\n        //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n        //   to make it work without the reordering.\n        if (start + 1 < end && glyphs[start].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && glyphs[start].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {\n            let newRephPos;\n            let rephPos = indicConfig.rephPos;\n            let found = false;\n            // 1. If reph should be positioned after post-base consonant forms,\n            //    proceed to step 5.\n            if (rephPos !== (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Post) {\n                //  2. If the reph repositioning class is not after post-base: target\n                //     position is after the first explicit halant glyph between the\n                //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n                //     are following this halant, position is moved after it. If such\n                //     position is found, this is the target position. Otherwise,\n                //     proceed to the next step.\n                //\n                //     Note: in old-implementation fonts, where classifications were\n                //     fixed in shaping engine, there was no case where reph position\n                //     will be found on this step.\n                newRephPos = start + 1;\n                while(newRephPos < base && !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos]))newRephPos++;\n                if (newRephPos < base && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n                    // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n                    if (newRephPos + 1 < base && $7826f90f6f0cecc9$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n                    found = true;\n                }\n                // 3. If reph should be repositioned after the main consonant: find the\n                //    first consonant not ligated with main, or find the first\n                //    consonant that is not a potential pre-base reordering Ra.\n                if (!found && rephPos === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Main) {\n                    newRephPos = base;\n                    while(newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Main)newRephPos++;\n                    found = newRephPos < end;\n                }\n                // 4. If reph should be positioned before post-base consonant, find\n                //    first post-base classified consonant not ligated with main. If no\n                //    consonant is found, the target position should be before the\n                //    first matra, syllable modifier sign or vedic sign.\n                //\n                // This is our take on what step 4 is trying to say (and failing, BADLY).\n                if (!found && rephPos === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Sub) {\n                    newRephPos = base;\n                    while(newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ((0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Post_C | (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).After_Post | (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD)))newRephPos++;\n                    found = newRephPos < end;\n                }\n            }\n            //  5. If no consonant is found in steps 3 or 4, move reph to a position\n            //     immediately before the first post-base matra, syllable modifier\n            //     sign or vedic sign that has a reordering class after the intended\n            //     reph position. For example, if the reordering position for reph\n            //     is post-main, it will skip above-base matras that also have a\n            //     post-main position.\n            if (!found) {\n                // Copied from step 2.\n                newRephPos = start + 1;\n                while(newRephPos < base && !$7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos]))newRephPos++;\n                if (newRephPos < base && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n                    // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n                    if (newRephPos + 1 < base && $7826f90f6f0cecc9$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n                    found = true;\n                }\n            }\n            // 6. Otherwise, reorder reph to the end of the syllable.\n            if (!found) {\n                newRephPos = end - 1;\n                while(newRephPos > start && glyphs[newRephPos].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).SMVD)newRephPos--;\n                // If the Reph is to be ending up after a Matra,Halant sequence,\n                // position it before that Halant so it can interact with the Matra.\n                // However, if it's a plain Consonant,Halant we shouldn't do that.\n                // Uniscribe doesn't do this.\n                // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n                if ($7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newRephPos])) {\n                    for(let i = base + 1; i < newRephPos; i++)if (glyphs[i].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) newRephPos--;\n                }\n            }\n            let reph = glyphs[start];\n            glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));\n            glyphs[newRephPos] = reph;\n            if (start < base && base <= newRephPos) base--;\n        }\n        // o Reorder pre-base reordering consonants:\n        //\n        // If a pre-base reordering consonant is found, reorder it according to\n        // the following rules:\n        if (tryPref && base + 1 < end) {\n            for(let i = base + 1; i < end; i++)if (glyphs[i].features.pref) {\n                // 1. Only reorder a glyph produced by substitution during application\n                //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n                //    the feature generally but block it in certain contexts.)\n                // Note: We just check that something got substituted.  We don't check that\n                // the <pref> feature actually did it...\n                //\n                // Reorder pref only if it ligated.\n                if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {\n                    // 2. Try to find a target position the same way as for pre-base matra.\n                    //    If it is found, reorder pre-base consonant glyph.\n                    //\n                    // 3. If position is not found, reorder immediately before main\n                    //    consonant.\n                    let newPos = base;\n                    // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n                    // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n                    // We want to position matra after them.\n                    if (plan.unicodeScript !== \"Malayalam\" && plan.unicodeScript !== \"Tamil\") {\n                        while(newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ((0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M | (0, $90a9d3398ee54fe5$export$ca9599b2a300afc))))newPos--;\n                        // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n                        // split matra, it should be reordered to *before* the left part of such matra.\n                        if (newPos > start && glyphs[newPos - 1].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n                            let oldPos = i;\n                            for(let j = base + 1; j < oldPos; j++)if (glyphs[j].shaperInfo.category === (0, $90a9d3398ee54fe5$export$a513ea61a7bee91c).M) {\n                                newPos--;\n                                break;\n                            }\n                        }\n                    }\n                    if (newPos > start && $7826f90f6f0cecc9$var$isHalantOrCoeng(glyphs[newPos - 1])) {\n                        if (newPos < end && $7826f90f6f0cecc9$var$isJoiner(glyphs[newPos])) newPos++;\n                    }\n                    let oldPos = i;\n                    let tmp = glyphs[oldPos];\n                    glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));\n                    glyphs[newPos] = tmp;\n                    if (newPos <= base && base < oldPos) base++;\n                }\n                break;\n            }\n        }\n        // Apply 'init' to the Left Matra if it's a word start.\n        if (glyphs[start].shaperInfo.position === (0, $90a9d3398ee54fe5$export$1a1f61c9c4dd9df0).Pre_M && (!start || !/Cf|Mn/.test((0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.getCategory)(glyphs[start - 1].codePoints[0])))) glyphs[start].features.init = true;\n    }\n}\nfunction $7826f90f6f0cecc9$var$nextSyllable(glyphs, start) {\n    if (start >= glyphs.length) return start;\n    let syllable = glyphs[start].shaperInfo.syllable;\n    while(++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n    return start;\n}\nconst { categories: $7ab494fe977143c6$var$categories, decompositions: $7ab494fe977143c6$var$decompositions } = (0, /*@__PURE__*/ $parcel$interopDefault($aa333a9607471296$exports));\nconst $7ab494fe977143c6$var$trie = new (0, unicode_trie__WEBPACK_IMPORTED_MODULE_4__)((0, $12727730ddfc8bfe$export$94fdf11bafc8de6b)(\"AAACAAAAAADQqQAAAVEMrvPtnH+oHUcVx+fd99799W5e8mx+9NkYm7YUI2KtimkVDG3FWgVTFY1Fqa2VJirYB0IaUFLBaKGJViXir6oxKCSBoi0UTKtg2yA26h+milYNtMH+0WK1VQyvtBS/487hnncyMzuzu7N7n7kHPszu7OzMmTNzdmdmfzzfUmpiUqkemAMbwSZwKbjcxM1XEL4VvB28G3zAk+56cLMlfgdYADvBbvBF8GWwH9xl+CFLfwj8BPwU/MKS38/AMfA86v9ro9ucQcdR+CjCP4CT4EnwDPg3eAFMTik1A+bAPNgINoFLwGawZSpLfzXCrWAb+AjYDm4BO8FusAfsA/vBXeAgOALuNfv3g4fAcXACPAaeAE+B58Bp8NJUpnN7WqlZsHY629+A8GLwWvAG8BZwJXinOf5ehB8EN4AdYGE6q7dmF9uugs8hvz0V58nZK/L+Kva/BX4ADoN7prP6HgUPgkfA73L0eQzHnwBPgX+Y80+DF8FUW6lBO4tbjXA9uAi8pj3sS2/E9mawBVwNtoJt5pzrTXgzwk+B7awP7sT+7nY6WxFfQBlfAl8H3wU/Anezcu/D9s/BMRN3HOEJ8EdwMkC/J5HmmXZmq2fBIjgEVEepbieLX4Fw0MnSrzRxmrVsm7MB8ReDV4vjr3ekJy7rZGVPMb196Xm6oug83oRyt4CrwDVgK9gGPtzxn3uTOD6YPDPNJ5Hm0+AznazffJ7Z4KSnXncg3VfAN8EBhx42/z/UGdbrx52sr9yH8AFTrt5+2GzfnWPbKuw7ZszZyNh/xowZM2bMmDFjxsQyZ5lPNs3h9nBNYHuAfr9ic9ffiHnsJzznU91/j3P+2snWYf6G8O/gn+A0eMnEt7vQp5ulX4NwHmwEm7rZ8UsRXg6uMPvXIHwPuK7rLl+nu9FzfMyYMWPGpGVuslmarv+YMWPSkNq/d2D8uNDNngvdivA2y3jy9m72bF9v3ymOf2MExp8fG2TsAcfA2wJYBJetWBq3i+0fwPafwLmzSl0LFmZNPMLHZ4fpnsX2AdjgcXB+T6kPge+AG7D/vXYW/tLsc9r9M+MkVyLNR1m6g9g+ZfYvmMExcHCm+ftP0+T5y/e17Uw/PYLwHnC0m80TH+zG30/3mjSDnPS2/B4pUJ4rX3n+b5H3o92l6UjfvZ7y/oJzToGnu8O66XTPYf8/Jr8XWL6TPXf9bPnHtmVs+89AnxVgDVgPLgKvAg+Y/F6H7c1gC7jKHH8XeJ/x15vAjt4wvwVs7wKfBXvAPvA18G1wsJevj36f5gjS3etIq+ft9+PYQ73h/nFsn2D7f+5l75bo/VPYftpTblFb2/Jo2pdjfL0uXOX/qxfnp8vZVk2Xv9hbmu+LxvYt3A/7/WZsPoptPkr9bdCv1ya+d4TuMO8Tre5n4XkILwSbzP4l/WHazX1//r2O/z7cFHnvSYW8R/Vm02ZXIHxHze1Xdf9bbn7p0z2kDroNr2X9WL+7937sX9fP+v9h9n6jTrfI3jG9EfsfN3G35PR/G4uRfY3eMTwdkFa/C3hrf2kcfy/xYTOmprrfZsLbEe7rDPW/U9Rrv9k/ahmTL0cWWxP/YxRkgtES+zwNhZPs+FQgMj/liEsto2HxsZBQX2pZoLZqWc5riXDaQBLSt1L3hcnE+Vct7aYVKCEhbXk2+b7NZ84mmXAwCiL14Ne85S62MYPcXi5StM/YxlJF2lfabznZsC6/C807xvZV+yFve9d1KY//d3HNO8pKUXuTDh0Gpp7B852q6QFMgdWM2dfbAxOuEPQEfcEsO5fquJLZrMfyCtWP0heZF6oSdiH9u4aQvJRIJ/eL6BBynItLp5D2JRkY5L5u3xAf6lviXHWSZcfaKO/+5zvO/c9Xtq8uRXSObd+8bS0zJrS1rxTyX7k/a0nrk5D+mHeOC90uq1Q216X57lykfqHt62uTGJ2rat+i/kttyq/RSi29PlclZf2Xxq55ZeSV34T96d5X5PqZJ9I3ZX2lnkXt3xL1Kyrav/LutbZ6uGxuS6ss6V3pXOXY4kP7EBfyJT7+4TJQS9uf74f6n+3+6ZIi9bCtieatFfCxUMx4KMYfy/pzrB30vm88q9SZ11K+n9eeNN612UFKWX8uI9TmRca7TbWvKy2JvF6naF+b/0uRupZp35cZikhZvyniY2R/CbdB3vXynIC6hbRBHf4l1xps6w4x/lVEtxRtGZMuRA8uNh/jfYV8kdpsBUszcODrD7E2JT2KrB3V6XMhbdNjcXItxzaOJWkpf976/I5glQn1sbLP86U9FQvz4l0S28/lcWUJbbrE2l+Z/TlHvi4/kvZXLMyrmy1PW7x8hl6UFgvlmNM1Jq3aJ3Se0yJcpdwS6mOp/ZgLX5N1rdFKaIzH9ztquMbqq+/qCFRk+hRoyZvrTHuO8fNd/djmEzZJ3TdisN1bNQNl7y96DV/3mVkTtwasVdk1ai6ybGlDek8nT1fXc4M5tVSPvhqOsWQeXQs8L1n3IradU8OxCeVjK7dr7Dpl0cMHnUvt18TzfVsfb/pZY56fV2GnVPVIYaOi9xcZJ8cmKcu3wcuPsVHV5cdKFfZXNZefp5sWft+wzR1cczKCxh99NRx76HvwOpWNv6YZtAajt6WPyPswtVVs/VOJ7xpYx3VR31er7gMxNuV9Q443CDlW43KuYSXblsybfKYt58trfez7A1X7Tdm+V7TcoudL+LpVGf2khN63U5OyD5Af0NoUv06l7Jc0Rte+so4xL9Ayy3Rz+SufY5Jf267xcm7J4dd3kumIOrmk7Pl549bUY1puI91Gdb8Tpu+9tjmhXFdwtfVsTv5SQvXKW0cK4eXgPBO6iJ07NNVOHH7/tF1jyJdnWbrU/Uau3VNI156QZ2ZaZFu76i6vQXy9YJ2H9QZ97aF3p1xlx1yfuYRcd0Kl7NyaX190+pUOKI0tvus5j7/nSWKLo3FER8R3LHEx8gqwge1POgi1l1yfirV3zHpISHxs3vLeFXOellcG1DFGbGP00PPkeKEOaXIsqhzbruOh9Qk5L08nW2grJ0avsvWocv0zRh/fGCG0TV35hB4v0rds5Vddjm/sFCKx+aXSt2yalPZsolxXW46CDnXp0YQ0rdso9OUYPSYT6+yzuxxzlrVfFfavQ/LKqsP+dbVzE/0qRb8pKin6V9U6Fnn24pqHufLMWy90nV+0DkXmcrb0Uq+6pU7/qcs/67SHTeTaaBk9ipyXQvLqW1U7uPKpux/ESlP9umydR8H3UjzHoXxj0/J1Yr5ubHsPrWOJqxK+hk5r+EVtH3pe1XWIXa+1vQ9YJ/oZre1bGReh3xKWeX7BxfYstwh5errGJi59be8482cSsfUPQT4Xlc9K+XMmatcY0fo2+SxYQs/4XO8M03Ng/TxujYH+FRELSdH+6mtveu8itb1Cy7C9X8GfsVOcfN86RHg56wJ0ob5qOz/E/rIdq7YhF34/0cfoeWKVftJjIbWDbDfXeXR/prBOKWJ/3dd43+sr+32TvgEIEZ6/7Zt5/l7ghMm77u+ey4gcz5xfktA5vE9C5vy2Y3lpXeX40tHcLMX42qZHS/ltZluXiSlDxillt3VdIvufbc0j75wy5aWaOxWRUZmfl5nDSh3LzoWbXJOg8uumKkndp1PnH2IPfe+U33z7vjWhdPQuWMh4raqxWMh9X89RZtSZ7/JpyXs3NWQcETN3CZHU/lmVnstZB1+ZfM5A/1VJ2V9t8wTXN1S+f27mzaulbCxJHePwC1Tz/0K1/VdPvtOsba+vL7ZxM1/jakJ/V9/yfdtNx+i7bhVRRll/rrK+sk3qLt/3T0afH+tzz1HDfxzZ/HlGDduK1y/GL21zvKptQGWFSpVlFm0z+ZxD/vdAt9EqQ971NkRHW7qytog53+cfVfeFGLStfddfYka5x6dl+yi//4z6/559aUn4/+/k2pv8BqfM/0qVCnu+If2OJPRZUcyzJF/5RQm5xtM9ln+LRN+8U9+iMQS1Veg9q2z/TlV3Ett3/rLOIXOookidy/5X3GYD+S8a1z2e0vH695T9vhEqdbY//0dU3jWZ2rYq/cvCRT8r08/NLlT5/zySdSurv1ybLiup5tAp5+NNzfPJ5r61warapajItfTQNeK610/rWEMPyb+uOo/ierRNbGU01Z+rqneIPWNsT9t1rD+OYr8rm0eKvp/Ch1P4Yepyy+hWVD/f+VWXX5X+TZdfZZ+KLb9J+S8=\"));\nconst $7ab494fe977143c6$var$stateMachine = new (0, dfa__WEBPACK_IMPORTED_MODULE_5__)((0, /*@__PURE__*/ $parcel$interopDefault($aa333a9607471296$exports)));\nclass $7ab494fe977143c6$export$2e2bcd8739ae039 extends (0, $649970d87335b30f$export$2e2bcd8739ae039) {\n    static planFeatures(plan) {\n        plan.addStage($7ab494fe977143c6$var$setupSyllables);\n        // Default glyph pre-processing group\n        plan.addStage([\n            \"locl\",\n            \"ccmp\",\n            \"nukt\",\n            \"akhn\"\n        ]);\n        // Reordering group\n        plan.addStage($7ab494fe977143c6$var$clearSubstitutionFlags);\n        plan.addStage([\n            \"rphf\"\n        ], false);\n        plan.addStage($7ab494fe977143c6$var$recordRphf);\n        plan.addStage($7ab494fe977143c6$var$clearSubstitutionFlags);\n        plan.addStage([\n            \"pref\"\n        ]);\n        plan.addStage($7ab494fe977143c6$var$recordPref);\n        // Orthographic unit shaping group\n        plan.addStage([\n            \"rkrf\",\n            \"abvf\",\n            \"blwf\",\n            \"half\",\n            \"pstf\",\n            \"vatu\",\n            \"cjct\"\n        ]);\n        plan.addStage($7ab494fe977143c6$var$reorder);\n        // Topographical features\n        // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n        // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n        // Standard topographic presentation and positional feature application\n        plan.addStage([\n            \"abvs\",\n            \"blws\",\n            \"pres\",\n            \"psts\",\n            \"dist\",\n            \"abvm\",\n            \"blwm\"\n        ]);\n    }\n    static assignFeatures(plan, glyphs) {\n        // Decompose split vowels\n        // TODO: do this in a more general unicode normalizer\n        for(let i = glyphs.length - 1; i >= 0; i--){\n            let codepoint = glyphs[i].codePoints[0];\n            if ($7ab494fe977143c6$var$decompositions[codepoint]) {\n                let decomposed = $7ab494fe977143c6$var$decompositions[codepoint].map((c)=>{\n                    let g = plan.font.glyphForCodePoint(c);\n                    return new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(plan.font, g.id, [\n                        c\n                    ], glyphs[i].features);\n                });\n                glyphs.splice(i, 1, ...decomposed);\n            }\n        }\n    }\n}\n(0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)($7ab494fe977143c6$export$2e2bcd8739ae039, \"zeroMarkWidths\", \"BEFORE_GPOS\");\nfunction $7ab494fe977143c6$var$useCategory(glyph) {\n    return $7ab494fe977143c6$var$trie.get(glyph.codePoints[0]);\n}\nclass $7ab494fe977143c6$var$USEInfo {\n    constructor(category, syllableType, syllable){\n        this.category = category;\n        this.syllableType = syllableType;\n        this.syllable = syllable;\n    }\n}\nfunction $7ab494fe977143c6$var$setupSyllables(font, glyphs) {\n    let syllable = 0;\n    for (let [start, end, tags] of $7ab494fe977143c6$var$stateMachine.match(glyphs.map($7ab494fe977143c6$var$useCategory))){\n        ++syllable;\n        // Create shaper info\n        for(let i = start; i <= end; i++)glyphs[i].shaperInfo = new $7ab494fe977143c6$var$USEInfo($7ab494fe977143c6$var$categories[$7ab494fe977143c6$var$useCategory(glyphs[i])], tags[0], syllable);\n        // Assign rphf feature\n        let limit = glyphs[start].shaperInfo.category === \"R\" ? 1 : Math.min(3, end - start);\n        for(let i1 = start; i1 < start + limit; i1++)glyphs[i1].features.rphf = true;\n    }\n}\nfunction $7ab494fe977143c6$var$clearSubstitutionFlags(font, glyphs) {\n    for (let glyph of glyphs)glyph.substituted = false;\n}\nfunction $7ab494fe977143c6$var$recordRphf(font, glyphs) {\n    for (let glyph of glyphs)if (glyph.substituted && glyph.features.rphf) glyph.shaperInfo.category = \"R\";\n}\nfunction $7ab494fe977143c6$var$recordPref(font, glyphs) {\n    for (let glyph of glyphs)if (glyph.substituted) glyph.shaperInfo.category = \"VPre\";\n}\nfunction $7ab494fe977143c6$var$reorder(font, glyphs) {\n    let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n    for(let start = 0, end = $7ab494fe977143c6$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7ab494fe977143c6$var$nextSyllable(glyphs, start)){\n        let i, j;\n        let info = glyphs[start].shaperInfo;\n        let type = info.syllableType;\n        // Only a few syllable types need reordering.\n        if (type !== \"virama_terminated_cluster\" && type !== \"standard_cluster\" && type !== \"broken_cluster\") continue;\n        // Insert a dotted circle glyph in broken clusters.\n        if (type === \"broken_cluster\" && dottedCircle) {\n            let g = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(font, dottedCircle, [\n                0x25cc\n            ]);\n            g.shaperInfo = info;\n            // Insert after possible Repha.\n            for(i = start; i < end && glyphs[i].shaperInfo.category === \"R\"; i++);\n            glyphs.splice(++i, 0, g);\n            end++;\n        }\n        // Move things forward.\n        if (info.category === \"R\" && end - start > 1) for(i = start + 1; i < end; i++){\n            info = glyphs[i].shaperInfo;\n            if ($7ab494fe977143c6$var$isBase(info) || $7ab494fe977143c6$var$isHalant(glyphs[i])) {\n                // If we hit a halant, move before it; otherwise it's a base: move to it's\n                // place, and shift things in between backward.\n                if ($7ab494fe977143c6$var$isHalant(glyphs[i])) i--;\n                glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);\n                break;\n            }\n        }\n        // Move things back.\n        for(i = start, j = end; i < end; i++){\n            info = glyphs[i].shaperInfo;\n            if ($7ab494fe977143c6$var$isBase(info) || $7ab494fe977143c6$var$isHalant(glyphs[i])) // place, and shift things in between backward.\n            j = $7ab494fe977143c6$var$isHalant(glyphs[i]) ? i + 1 : i;\n            else if ((info.category === \"VPre\" || info.category === \"VMPre\") && j < i) glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));\n        }\n    }\n}\nfunction $7ab494fe977143c6$var$nextSyllable(glyphs, start) {\n    if (start >= glyphs.length) return start;\n    let syllable = glyphs[start].shaperInfo.syllable;\n    while(++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n    return start;\n}\nfunction $7ab494fe977143c6$var$isHalant(glyph) {\n    return glyph.shaperInfo.category === \"H\" && !glyph.isLigated;\n}\nfunction $7ab494fe977143c6$var$isBase(info) {\n    return info.category === \"B\" || info.category === \"GB\";\n}\nconst $102b6fe50f1d50b4$var$SHAPERS = {\n    arab: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    mong: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    syrc: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    \"nko \": (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    phag: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    mand: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    mani: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    phlp: (0, $764eb544bbe1ccf0$export$2e2bcd8739ae039),\n    hang: (0, $e1c6bbc8cb416f8c$export$2e2bcd8739ae039),\n    bng2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    beng: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    dev2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    deva: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    gjr2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    gujr: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    guru: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    gur2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    knda: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    knd2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    mlm2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    mlym: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    ory2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    orya: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    taml: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    tml2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    telu: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    tel2: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    khmr: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    bali: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    batk: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    brah: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    bugi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    buhd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    cakm: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    cham: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    dupl: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    egyp: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    gran: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    hano: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    java: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    kthi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    kali: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    khar: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    khoj: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    sind: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    lepc: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    limb: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    mahj: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    // mand: UniversalShaper, // Mandaic\n    // mani: UniversalShaper, // Manichaean\n    mtei: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    modi: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    // mong: UniversalShaper, // Mongolian\n    // 'nko ': UniversalShaper, // N’Ko\n    hmng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    // phag: UniversalShaper, // Phags-pa\n    // phlp: UniversalShaper, // Psalter Pahlavi\n    rjng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    saur: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    shrd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    sidd: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    sinh: (0, $7826f90f6f0cecc9$export$2e2bcd8739ae039),\n    sund: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    sylo: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tglg: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tagb: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tale: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    lana: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tavt: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    takr: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tibt: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tfng: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    tirh: (0, $7ab494fe977143c6$export$2e2bcd8739ae039),\n    latn: (0, $649970d87335b30f$export$2e2bcd8739ae039),\n    DFLT: (0, $649970d87335b30f$export$2e2bcd8739ae039 // Default\n    )\n};\nfunction $102b6fe50f1d50b4$export$7877a478dd30fd3d(script) {\n    if (!Array.isArray(script)) script = [\n        script\n    ];\n    for (let s of script){\n        let shaper = $102b6fe50f1d50b4$var$SHAPERS[s];\n        if (shaper) return shaper;\n    }\n    return 0, $649970d87335b30f$export$2e2bcd8739ae039;\n}\nclass $0a876c45f1f7c41c$export$2e2bcd8739ae039 extends (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039) {\n    applyLookup(lookupType, table) {\n        switch(lookupType){\n            case 1:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    let glyph = this.glyphIterator.cur;\n                    switch(table.version){\n                        case 1:\n                            glyph.id = glyph.id + table.deltaGlyphID & 0xffff;\n                            break;\n                        case 2:\n                            glyph.id = table.substitute.get(index);\n                            break;\n                    }\n                    return true;\n                }\n            case 2:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index !== -1) {\n                        let sequence = table.sequences.get(index);\n                        if (sequence.length === 0) {\n                            // If the sequence length is zero, delete the glyph.\n                            // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.\n                            this.glyphs.splice(this.glyphIterator.index, 1);\n                            return true;\n                        }\n                        this.glyphIterator.cur.id = sequence[0];\n                        this.glyphIterator.cur.ligatureComponent = 0;\n                        let features = this.glyphIterator.cur.features;\n                        let curGlyph = this.glyphIterator.cur;\n                        let replacement = sequence.slice(1).map((gid, i)=>{\n                            let glyph = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, gid, undefined, features);\n                            glyph.shaperInfo = curGlyph.shaperInfo;\n                            glyph.isLigated = curGlyph.isLigated;\n                            glyph.ligatureComponent = i + 1;\n                            glyph.substituted = true;\n                            glyph.isMultiplied = true;\n                            return glyph;\n                        });\n                        this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);\n                        return true;\n                    }\n                    return false;\n                }\n            case 3:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index !== -1) {\n                        let USER_INDEX = 0; // TODO\n                        this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];\n                        return true;\n                    }\n                    return false;\n                }\n            case 4:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    for (let ligature of table.ligatureSets.get(index)){\n                        let matched = this.sequenceMatchIndices(1, ligature.components);\n                        if (!matched) continue;\n                        let curGlyph = this.glyphIterator.cur;\n                        // Concatenate all of the characters the new ligature will represent\n                        let characters = curGlyph.codePoints.slice();\n                        for (let index of matched)characters.push(...this.glyphs[index].codePoints);\n                        // Create the replacement ligature glyph\n                        let ligatureGlyph = new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, ligature.glyph, characters, curGlyph.features);\n                        ligatureGlyph.shaperInfo = curGlyph.shaperInfo;\n                        ligatureGlyph.isLigated = true;\n                        ligatureGlyph.substituted = true;\n                        // From Harfbuzz:\n                        // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n                        //   the ligature to keep its old ligature id.  This will allow it to attach to\n                        //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n                        //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n                        //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n                        //   later, we don't want them to lose their ligature id/component, otherwise\n                        //   GPOS will fail to correctly position the mark ligature on top of the\n                        //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n                        //\n                        // - If a ligature is formed of components that some of which are also ligatures\n                        //   themselves, and those ligature components had marks attached to *their*\n                        //   components, we have to attach the marks to the new ligature component\n                        //   positions!  Now *that*'s tricky!  And these marks may be following the\n                        //   last component of the whole sequence, so we should loop forward looking\n                        //   for them and update them.\n                        //\n                        //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n                        //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n                        //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n                        //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n                        //   the new ligature with a component value of 2.\n                        //\n                        //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n                        let isMarkLigature = curGlyph.isMark;\n                        for(let i = 0; i < matched.length && isMarkLigature; i++)isMarkLigature = this.glyphs[matched[i]].isMark;\n                        ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n                        let lastLigID = curGlyph.ligatureID;\n                        let lastNumComps = curGlyph.codePoints.length;\n                        let curComps = lastNumComps;\n                        let idx = this.glyphIterator.index + 1;\n                        // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n                        // This allows GPOS to attach marks to the correct ligature components.\n                        for (let matchIndex of matched){\n                            // Don't assign new ligature components for mark ligatures (see above)\n                            if (isMarkLigature) idx = matchIndex;\n                            else while(idx < matchIndex){\n                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                                this.glyphs[idx].ligatureComponent = ligatureComponent;\n                                idx++;\n                            }\n                            lastLigID = this.glyphs[idx].ligatureID;\n                            lastNumComps = this.glyphs[idx].codePoints.length;\n                            curComps += lastNumComps;\n                            idx++; // skip base glyph\n                        }\n                        // Adjust ligature components for any marks following\n                        if (lastLigID && !isMarkLigature) for(let i1 = idx; i1 < this.glyphs.length; i1++){\n                            if (this.glyphs[i1].ligatureID === lastLigID) {\n                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i1].ligatureComponent || 1, lastNumComps);\n                                this.glyphs[i1].ligatureComponent = ligatureComponent;\n                            } else break;\n                        }\n                        // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n                        for(let i2 = matched.length - 1; i2 >= 0; i2--)this.glyphs.splice(matched[i2], 1);\n                        this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n                        return true;\n                    }\n                    return false;\n                }\n            case 5:\n                return this.applyContext(table);\n            case 6:\n                return this.applyChainingContext(table);\n            case 7:\n                return this.applyLookup(table.lookupType, table.extension);\n            default:\n                throw new Error(`GSUB lookupType ${lookupType} is not supported`);\n        }\n    }\n}\nclass $c96c93587d49c14d$export$2e2bcd8739ae039 extends (0, $a83b9c36aaa94fd3$export$2e2bcd8739ae039) {\n    applyPositionValue(sequenceIndex, value) {\n        let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n        if (value.xAdvance != null) position.xAdvance += value.xAdvance;\n        if (value.yAdvance != null) position.yAdvance += value.yAdvance;\n        if (value.xPlacement != null) position.xOffset += value.xPlacement;\n        if (value.yPlacement != null) position.yOffset += value.yPlacement;\n        // Adjustments for font variations\n        let variationProcessor = this.font._variationProcessor;\n        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n        if (variationProcessor && variationStore) {\n            if (value.xPlaDevice) position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n            if (value.yPlaDevice) position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n            if (value.xAdvDevice) position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n            if (value.yAdvDevice) position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n        }\n    // TODO: device tables\n    }\n    applyLookup(lookupType, table) {\n        switch(lookupType){\n            case 1:\n                {\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    switch(table.version){\n                        case 1:\n                            this.applyPositionValue(0, table.value);\n                            break;\n                        case 2:\n                            this.applyPositionValue(0, table.values.get(index));\n                            break;\n                    }\n                    return true;\n                }\n            case 2:\n                {\n                    let nextGlyph = this.glyphIterator.peek();\n                    if (!nextGlyph) return false;\n                    let index = this.coverageIndex(table.coverage);\n                    if (index === -1) return false;\n                    switch(table.version){\n                        case 1:\n                            let set = table.pairSets.get(index);\n                            for (let pair of set)if (pair.secondGlyph === nextGlyph.id) {\n                                this.applyPositionValue(0, pair.value1);\n                                this.applyPositionValue(1, pair.value2);\n                                return true;\n                            }\n                            return false;\n                        case 2:\n                            let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n                            let class2 = this.getClassID(nextGlyph.id, table.classDef2);\n                            if (class1 === -1 || class2 === -1) return false;\n                            var pair1 = table.classRecords.get(class1).get(class2);\n                            this.applyPositionValue(0, pair1.value1);\n                            this.applyPositionValue(1, pair1.value2);\n                            return true;\n                    }\n                }\n            case 3:\n                {\n                    let nextIndex = this.glyphIterator.peekIndex();\n                    let nextGlyph = this.glyphs[nextIndex];\n                    if (!nextGlyph) return false;\n                    let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n                    if (!curRecord || !curRecord.exitAnchor) return false;\n                    let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];\n                    if (!nextRecord || !nextRecord.entryAnchor) return false;\n                    let entry = this.getAnchor(nextRecord.entryAnchor);\n                    let exit = this.getAnchor(curRecord.exitAnchor);\n                    let cur = this.positions[this.glyphIterator.index];\n                    let next = this.positions[nextIndex];\n                    let d;\n                    switch(this.direction){\n                        case \"ltr\":\n                            cur.xAdvance = exit.x + cur.xOffset;\n                            d = entry.x + next.xOffset;\n                            next.xAdvance -= d;\n                            next.xOffset -= d;\n                            break;\n                        case \"rtl\":\n                            d = exit.x + cur.xOffset;\n                            cur.xAdvance -= d;\n                            cur.xOffset -= d;\n                            next.xAdvance = entry.x + next.xOffset;\n                            break;\n                    }\n                    if (this.glyphIterator.flags.rightToLeft) {\n                        this.glyphIterator.cur.cursiveAttachment = nextIndex;\n                        cur.yOffset = entry.y - exit.y;\n                    } else {\n                        nextGlyph.cursiveAttachment = this.glyphIterator.index;\n                        cur.yOffset = exit.y - entry.y;\n                    }\n                    return true;\n                }\n            case 4:\n                {\n                    let markIndex = this.coverageIndex(table.markCoverage);\n                    if (markIndex === -1) return false;\n                    // search backward for a base glyph\n                    let baseGlyphIndex = this.glyphIterator.index;\n                    while(--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0));\n                    if (baseGlyphIndex < 0) return false;\n                    let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n                    if (baseIndex === -1) return false;\n                    let markRecord = table.markArray[markIndex];\n                    let baseAnchor = table.baseArray[baseIndex][markRecord.class];\n                    this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n                    return true;\n                }\n            case 5:\n                {\n                    let markIndex = this.coverageIndex(table.markCoverage);\n                    if (markIndex === -1) return false;\n                    // search backward for a base glyph\n                    let baseGlyphIndex = this.glyphIterator.index;\n                    while(--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark);\n                    if (baseGlyphIndex < 0) return false;\n                    let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);\n                    if (ligIndex === -1) return false;\n                    let ligAttach = table.ligatureArray[ligIndex];\n                    let markGlyph = this.glyphIterator.cur;\n                    let ligGlyph = this.glyphs[baseGlyphIndex];\n                    let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;\n                    let markRecord = table.markArray[markIndex];\n                    let baseAnchor = ligAttach[compIndex][markRecord.class];\n                    this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n                    return true;\n                }\n            case 6:\n                {\n                    let mark1Index = this.coverageIndex(table.mark1Coverage);\n                    if (mark1Index === -1) return false;\n                    // get the previous mark to attach to\n                    let prevIndex = this.glyphIterator.peekIndex(-1);\n                    let prev = this.glyphs[prevIndex];\n                    if (!prev || !prev.isMark) return false;\n                    let cur = this.glyphIterator.cur;\n                    // The following logic was borrowed from Harfbuzz\n                    let good = false;\n                    if (cur.ligatureID === prev.ligatureID) {\n                        if (!cur.ligatureID) good = true;\n                        else if (cur.ligatureComponent === prev.ligatureComponent) good = true;\n                    } else // itself is a ligature, in which case match.\n                    if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) good = true;\n                    if (!good) return false;\n                    let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n                    if (mark2Index === -1) return false;\n                    let markRecord = table.mark1Array[mark1Index];\n                    let baseAnchor = table.mark2Array[mark2Index][markRecord.class];\n                    this.applyAnchor(markRecord, baseAnchor, prevIndex);\n                    return true;\n                }\n            case 7:\n                return this.applyContext(table);\n            case 8:\n                return this.applyChainingContext(table);\n            case 9:\n                return this.applyLookup(table.lookupType, table.extension);\n            default:\n                throw new Error(`Unsupported GPOS table: ${lookupType}`);\n        }\n    }\n    applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n        let baseCoords = this.getAnchor(baseAnchor);\n        let markCoords = this.getAnchor(markRecord.markAnchor);\n        let basePos = this.positions[baseGlyphIndex];\n        let markPos = this.positions[this.glyphIterator.index];\n        markPos.xOffset = baseCoords.x - markCoords.x;\n        markPos.yOffset = baseCoords.y - markCoords.y;\n        this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n    }\n    getAnchor(anchor) {\n        // TODO: contour point, device tables\n        let x = anchor.xCoordinate;\n        let y = anchor.yCoordinate;\n        // Adjustments for font variations\n        let variationProcessor = this.font._variationProcessor;\n        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n        if (variationProcessor && variationStore) {\n            if (anchor.xDeviceTable) x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n            if (anchor.yDeviceTable) y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n        }\n        return {\n            x: x,\n            y: y\n        };\n    }\n    applyFeatures(userFeatures, glyphs, advances) {\n        super.applyFeatures(userFeatures, glyphs, advances);\n        for(var i = 0; i < this.glyphs.length; i++)this.fixCursiveAttachment(i);\n        this.fixMarkAttachment();\n    }\n    fixCursiveAttachment(i) {\n        let glyph = this.glyphs[i];\n        if (glyph.cursiveAttachment != null) {\n            let j = glyph.cursiveAttachment;\n            glyph.cursiveAttachment = null;\n            this.fixCursiveAttachment(j);\n            this.positions[i].yOffset += this.positions[j].yOffset;\n        }\n    }\n    fixMarkAttachment() {\n        for(let i = 0; i < this.glyphs.length; i++){\n            let glyph = this.glyphs[i];\n            if (glyph.markAttachment != null) {\n                let j = glyph.markAttachment;\n                this.positions[i].xOffset += this.positions[j].xOffset;\n                this.positions[i].yOffset += this.positions[j].yOffset;\n                if (this.direction === \"ltr\") for(let k = j; k < i; k++){\n                    this.positions[i].xOffset -= this.positions[k].xAdvance;\n                    this.positions[i].yOffset -= this.positions[k].yAdvance;\n                }\n                else for(let k1 = j + 1; k1 < i + 1; k1++){\n                    this.positions[i].xOffset += this.positions[k1].xAdvance;\n                    this.positions[i].yOffset += this.positions[k1].yAdvance;\n                }\n            }\n        }\n    }\n}\nclass $a62492810de27e3d$export$2e2bcd8739ae039 {\n    setup(glyphRun) {\n        // Map glyphs to GlyphInfo objects so data can be passed between\n        // GSUB and GPOS without mutating the real (shared) Glyph objects.\n        this.glyphInfos = glyphRun.glyphs.map((glyph)=>new (0, $10e7b257e1a9a756$export$2e2bcd8739ae039)(this.font, glyph.id, [\n                ...glyph.codePoints\n            ]));\n        // Select a script based on what is available in GSUB/GPOS.\n        let script = null;\n        if (this.GPOSProcessor) script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n        if (this.GSUBProcessor) script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n        // Choose a shaper based on the script, and setup a shaping plan.\n        // This determines which features to apply to which glyphs.\n        this.shaper = $102b6fe50f1d50b4$export$7877a478dd30fd3d(script);\n        this.plan = new (0, $94d7a73bd2edfc9a$export$2e2bcd8739ae039)(this.font, script, glyphRun.direction);\n        this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);\n        // Assign chosen features to output glyph run\n        for(let key in this.plan.allFeatures)glyphRun.features[key] = true;\n    }\n    substitute(glyphRun) {\n        if (this.GSUBProcessor) {\n            this.plan.process(this.GSUBProcessor, this.glyphInfos);\n            // Map glyph infos back to normal Glyph objects\n            glyphRun.glyphs = this.glyphInfos.map((glyphInfo)=>this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));\n        }\n    }\n    position(glyphRun) {\n        if (this.shaper.zeroMarkWidths === \"BEFORE_GPOS\") this.zeroMarkAdvances(glyphRun.positions);\n        if (this.GPOSProcessor) this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);\n        if (this.shaper.zeroMarkWidths === \"AFTER_GPOS\") this.zeroMarkAdvances(glyphRun.positions);\n        // Reverse the glyphs and positions if the script is right-to-left\n        if (glyphRun.direction === \"rtl\") {\n            glyphRun.glyphs.reverse();\n            glyphRun.positions.reverse();\n        }\n        return this.GPOSProcessor && this.GPOSProcessor.features;\n    }\n    zeroMarkAdvances(positions) {\n        for(let i = 0; i < this.glyphInfos.length; i++)if (this.glyphInfos[i].isMark) {\n            positions[i].xAdvance = 0;\n            positions[i].yAdvance = 0;\n        }\n    }\n    cleanup() {\n        this.glyphInfos = null;\n        this.plan = null;\n        this.shaper = null;\n    }\n    getAvailableFeatures(script, language) {\n        let features = [];\n        if (this.GSUBProcessor) {\n            this.GSUBProcessor.selectScript(script, language);\n            features.push(...Object.keys(this.GSUBProcessor.features));\n        }\n        if (this.GPOSProcessor) {\n            this.GPOSProcessor.selectScript(script, language);\n            features.push(...Object.keys(this.GPOSProcessor.features));\n        }\n        return features;\n    }\n    constructor(font){\n        this.font = font;\n        this.glyphInfos = null;\n        this.plan = null;\n        this.GSUBProcessor = null;\n        this.GPOSProcessor = null;\n        this.fallbackPosition = true;\n        if (font.GSUB) this.GSUBProcessor = new (0, $0a876c45f1f7c41c$export$2e2bcd8739ae039)(font, font.GSUB);\n        if (font.GPOS) this.GPOSProcessor = new (0, $c96c93587d49c14d$export$2e2bcd8739ae039)(font, font.GPOS);\n    }\n}\nclass $4c0a7fa5df7a9ab1$export$2e2bcd8739ae039 {\n    layout(string, features, script, language, direction) {\n        // Make the features parameter optional\n        if (typeof features === \"string\") {\n            direction = language;\n            language = script;\n            script = features;\n            features = [];\n        }\n        // Map string to glyphs if needed\n        if (typeof string === \"string\") {\n            // Attempt to detect the script from the string if not provided.\n            if (script == null) script = $130d1a642ebcd2b7$export$e5cb25e204fb8450(string);\n            var glyphs = this.font.glyphsForString(string);\n        } else {\n            // Attempt to detect the script from the glyph code points if not provided.\n            if (script == null) {\n                let codePoints = [];\n                for (let glyph of string)codePoints.push(...glyph.codePoints);\n                script = $130d1a642ebcd2b7$export$16fab0757cfc223d(codePoints);\n            }\n            var glyphs = string;\n        }\n        let glyphRun = new (0, $be07b3e97a42687a$export$2e2bcd8739ae039)(glyphs, features, script, language, direction);\n        // Return early if there are no glyphs\n        if (glyphs.length === 0) {\n            glyphRun.positions = [];\n            return glyphRun;\n        }\n        // Setup the advanced layout engine\n        if (this.engine && this.engine.setup) this.engine.setup(glyphRun);\n        // Substitute and position the glyphs\n        this.substitute(glyphRun);\n        this.position(glyphRun);\n        this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);\n        // Let the layout engine clean up any state it might have\n        if (this.engine && this.engine.cleanup) this.engine.cleanup();\n        return glyphRun;\n    }\n    substitute(glyphRun) {\n        // Call the advanced layout engine to make substitutions\n        if (this.engine && this.engine.substitute) this.engine.substitute(glyphRun);\n    }\n    position(glyphRun) {\n        // Get initial glyph positions\n        glyphRun.positions = glyphRun.glyphs.map((glyph)=>new (0, $1ac75d9a55b67f01$export$2e2bcd8739ae039)(glyph.advanceWidth));\n        let positioned = null;\n        // Call the advanced layout engine. Returns the features applied.\n        if (this.engine && this.engine.position) positioned = this.engine.position(glyphRun);\n        // if there is no GPOS table, use unicode properties to position marks.\n        if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n            if (!this.unicodeLayoutEngine) this.unicodeLayoutEngine = new (0, $0a4bdfeb6dfd6f5e$export$2e2bcd8739ae039)(this.font);\n            this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n        }\n        // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n        if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n            if (!this.kernProcessor) this.kernProcessor = new (0, $0bba3a9db57637f3$export$2e2bcd8739ae039)(this.font);\n            this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n            glyphRun.features.kern = true;\n        }\n    }\n    hideDefaultIgnorables(glyphs, positions) {\n        let space = this.font.glyphForCodePoint(0x20);\n        for(let i = 0; i < glyphs.length; i++)if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n            glyphs[i] = space;\n            positions[i].xAdvance = 0;\n            positions[i].yAdvance = 0;\n        }\n    }\n    isDefaultIgnorable(ch) {\n        // From DerivedCoreProperties.txt in the Unicode database,\n        // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n        // Harfbuzz and Uniscribe do.\n        let plane = ch >> 16;\n        if (plane === 0) switch(ch >> 8){\n            case 0x00:\n                return ch === 0x00AD;\n            case 0x03:\n                return ch === 0x034F;\n            case 0x06:\n                return ch === 0x061C;\n            case 0x17:\n                return 0x17B4 <= ch && ch <= 0x17B5;\n            case 0x18:\n                return 0x180B <= ch && ch <= 0x180E;\n            case 0x20:\n                return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;\n            case 0xFE:\n                return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;\n            case 0xFF:\n                return 0xFFF0 <= ch && ch <= 0xFFF8;\n            default:\n                return false;\n        }\n        else switch(plane){\n            case 0x01:\n                return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;\n            case 0x0E:\n                return 0xE0000 <= ch && ch <= 0xE0FFF;\n            default:\n                return false;\n        }\n    }\n    getAvailableFeatures(script, language) {\n        let features = [];\n        if (this.engine) features.push(...this.engine.getAvailableFeatures(script, language));\n        if (this.font.kern && features.indexOf(\"kern\") === -1) features.push(\"kern\");\n        return features;\n    }\n    stringsForGlyph(gid) {\n        let result = new Set;\n        let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n        for (let codePoint of codePoints)result.add(String.fromCodePoint(codePoint));\n        if (this.engine && this.engine.stringsForGlyph) for (let string of this.engine.stringsForGlyph(gid))result.add(string);\n        return Array.from(result);\n    }\n    constructor(font){\n        this.font = font;\n        this.unicodeLayoutEngine = null;\n        this.kernProcessor = null;\n        // Choose an advanced layout engine. We try the AAT morx table first since more\n        // scripts are currently supported because the shaping logic is built into the font.\n        if (this.font.morx) this.engine = new (0, $ba6dd74203be8728$export$2e2bcd8739ae039)(this.font);\n        else if (this.font.GSUB || this.font.GPOS) this.engine = new (0, $a62492810de27e3d$export$2e2bcd8739ae039)(this.font);\n    }\n}\nconst $f43aec954cdfdf21$var$SVG_COMMANDS = {\n    moveTo: \"M\",\n    lineTo: \"L\",\n    quadraticCurveTo: \"Q\",\n    bezierCurveTo: \"C\",\n    closePath: \"Z\"\n};\nclass $f43aec954cdfdf21$export$2e2bcd8739ae039 {\n    /**\n   * Compiles the path to a JavaScript function that can be applied with\n   * a graphics context in order to render the path.\n   * @return {string}\n   */ toFunction() {\n        return (ctx)=>{\n            this.commands.forEach((c)=>{\n                return ctx[c.command].apply(ctx, c.args);\n            });\n        };\n    }\n    /**\n   * Converts the path to an SVG path data string\n   * @return {string}\n   */ toSVG() {\n        let cmds = this.commands.map((c)=>{\n            let args = c.args.map((arg)=>Math.round(arg * 100) / 100);\n            return `${$f43aec954cdfdf21$var$SVG_COMMANDS[c.command]}${args.join(\" \")}`;\n        });\n        return cmds.join(\"\");\n    }\n    /**\n   * Gets the \"control box\" of a path.\n   * This is like the bounding box, but it includes all points including\n   * control points of bezier segments and is much faster to compute than\n   * the real bounding box.\n   * @type {BBox}\n   */ get cbox() {\n        if (!this._cbox) {\n            let cbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039);\n            for (let command1 of this.commands)for(let i = 0; i < command1.args.length; i += 2)cbox.addPoint(command1.args[i], command1.args[i + 1]);\n            this._cbox = Object.freeze(cbox);\n        }\n        return this._cbox;\n    }\n    /**\n   * Gets the exact bounding box of the path by evaluating curve segments.\n   * Slower to compute than the control box, but more accurate.\n   * @type {BBox}\n   */ get bbox() {\n        if (this._bbox) return this._bbox;\n        let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039);\n        let cx = 0, cy = 0;\n        let f = (t)=>Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n        for (let c of this.commands)switch(c.command){\n            case \"moveTo\":\n            case \"lineTo\":\n                let [x, y] = c.args;\n                bbox.addPoint(x, y);\n                cx = x;\n                cy = y;\n                break;\n            case \"quadraticCurveTo\":\n            case \"bezierCurveTo\":\n                if (c.command === \"quadraticCurveTo\") {\n                    // http://fontforge.org/bezier.html\n                    var [qp1x, qp1y, p3x, p3y] = c.args;\n                    var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)\n                    var cp1y = cy + 2 / 3 * (qp1y - cy);\n                    var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)\n                    var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n                } else var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;\n                // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n                bbox.addPoint(p3x, p3y);\n                var p0 = [\n                    cx,\n                    cy\n                ];\n                var p1 = [\n                    cp1x,\n                    cp1y\n                ];\n                var p2 = [\n                    cp2x,\n                    cp2y\n                ];\n                var p3 = [\n                    p3x,\n                    p3y\n                ];\n                for(var i = 0; i <= 1; i++){\n                    let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n                    let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n                    c = 3 * p1[i] - 3 * p0[i];\n                    if (a === 0) {\n                        if (b === 0) continue;\n                        let t = -c / b;\n                        if (0 < t && t < 1) {\n                            if (i === 0) bbox.addPoint(f(t), bbox.maxY);\n                            else if (i === 1) bbox.addPoint(bbox.maxX, f(t));\n                        }\n                        continue;\n                    }\n                    let b2ac = Math.pow(b, 2) - 4 * c * a;\n                    if (b2ac < 0) continue;\n                    let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n                    if (0 < t1 && t1 < 1) {\n                        if (i === 0) bbox.addPoint(f(t1), bbox.maxY);\n                        else if (i === 1) bbox.addPoint(bbox.maxX, f(t1));\n                    }\n                    let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n                    if (0 < t2 && t2 < 1) {\n                        if (i === 0) bbox.addPoint(f(t2), bbox.maxY);\n                        else if (i === 1) bbox.addPoint(bbox.maxX, f(t2));\n                    }\n                }\n                cx = p3x;\n                cy = p3y;\n                break;\n        }\n        return this._bbox = Object.freeze(bbox);\n    }\n    /**\n   * Applies a mapping function to each point in the path.\n   * @param {function} fn\n   * @return {Path}\n   */ mapPoints(fn) {\n        let path = new $f43aec954cdfdf21$export$2e2bcd8739ae039;\n        for (let c of this.commands){\n            let args = [];\n            for(let i = 0; i < c.args.length; i += 2){\n                let [x, y] = fn(c.args[i], c.args[i + 1]);\n                args.push(x, y);\n            }\n            path[c.command](...args);\n        }\n        return path;\n    }\n    /**\n   * Transforms the path by the given matrix.\n   */ transform(m0, m1, m2, m3, m4, m5) {\n        return this.mapPoints((x, y)=>{\n            const tx = m0 * x + m2 * y + m4;\n            const ty = m1 * x + m3 * y + m5;\n            return [\n                tx,\n                ty\n            ];\n        });\n    }\n    /**\n   * Translates the path by the given offset.\n   */ translate(x, y) {\n        return this.transform(1, 0, 0, 1, x, y);\n    }\n    /**\n   * Rotates the path by the given angle (in radians).\n   */ rotate(angle) {\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        return this.transform(cos, sin, -sin, cos, 0, 0);\n    }\n    /**\n   * Scales the path.\n   */ scale(scaleX, scaleY = scaleX) {\n        return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n    }\n    constructor(){\n        this.commands = [];\n        this._bbox = null;\n        this._cbox = null;\n    }\n}\nfor (let command of [\n    \"moveTo\",\n    \"lineTo\",\n    \"quadraticCurveTo\",\n    \"bezierCurveTo\",\n    \"closePath\"\n])$f43aec954cdfdf21$export$2e2bcd8739ae039.prototype[command] = function(...args) {\n    this._bbox = this._cbox = null;\n    this.commands.push({\n        command: command,\n        args: args\n    });\n    return this;\n};\nvar $7713b9b7b438dff8$export$2e2bcd8739ae039 = [\n    \".notdef\",\n    \".null\",\n    \"nonmarkingreturn\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quotesingle\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"grave\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"Adieresis\",\n    \"Aring\",\n    \"Ccedilla\",\n    \"Eacute\",\n    \"Ntilde\",\n    \"Odieresis\",\n    \"Udieresis\",\n    \"aacute\",\n    \"agrave\",\n    \"acircumflex\",\n    \"adieresis\",\n    \"atilde\",\n    \"aring\",\n    \"ccedilla\",\n    \"eacute\",\n    \"egrave\",\n    \"ecircumflex\",\n    \"edieresis\",\n    \"iacute\",\n    \"igrave\",\n    \"icircumflex\",\n    \"idieresis\",\n    \"ntilde\",\n    \"oacute\",\n    \"ograve\",\n    \"ocircumflex\",\n    \"odieresis\",\n    \"otilde\",\n    \"uacute\",\n    \"ugrave\",\n    \"ucircumflex\",\n    \"udieresis\",\n    \"dagger\",\n    \"degree\",\n    \"cent\",\n    \"sterling\",\n    \"section\",\n    \"bullet\",\n    \"paragraph\",\n    \"germandbls\",\n    \"registered\",\n    \"copyright\",\n    \"trademark\",\n    \"acute\",\n    \"dieresis\",\n    \"notequal\",\n    \"AE\",\n    \"Oslash\",\n    \"infinity\",\n    \"plusminus\",\n    \"lessequal\",\n    \"greaterequal\",\n    \"yen\",\n    \"mu\",\n    \"partialdiff\",\n    \"summation\",\n    \"product\",\n    \"pi\",\n    \"integral\",\n    \"ordfeminine\",\n    \"ordmasculine\",\n    \"Omega\",\n    \"ae\",\n    \"oslash\",\n    \"questiondown\",\n    \"exclamdown\",\n    \"logicalnot\",\n    \"radical\",\n    \"florin\",\n    \"approxequal\",\n    \"Delta\",\n    \"guillemotleft\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"nonbreakingspace\",\n    \"Agrave\",\n    \"Atilde\",\n    \"Otilde\",\n    \"OE\",\n    \"oe\",\n    \"endash\",\n    \"emdash\",\n    \"quotedblleft\",\n    \"quotedblright\",\n    \"quoteleft\",\n    \"quoteright\",\n    \"divide\",\n    \"lozenge\",\n    \"ydieresis\",\n    \"Ydieresis\",\n    \"fraction\",\n    \"currency\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"perthousand\",\n    \"Acircumflex\",\n    \"Ecircumflex\",\n    \"Aacute\",\n    \"Edieresis\",\n    \"Egrave\",\n    \"Iacute\",\n    \"Icircumflex\",\n    \"Idieresis\",\n    \"Igrave\",\n    \"Oacute\",\n    \"Ocircumflex\",\n    \"apple\",\n    \"Ograve\",\n    \"Uacute\",\n    \"Ucircumflex\",\n    \"Ugrave\",\n    \"dotlessi\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"ring\",\n    \"cedilla\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"Lslash\",\n    \"lslash\",\n    \"Scaron\",\n    \"scaron\",\n    \"Zcaron\",\n    \"zcaron\",\n    \"brokenbar\",\n    \"Eth\",\n    \"eth\",\n    \"Yacute\",\n    \"yacute\",\n    \"Thorn\",\n    \"thorn\",\n    \"minus\",\n    \"multiply\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"onehalf\",\n    \"onequarter\",\n    \"threequarters\",\n    \"franc\",\n    \"Gbreve\",\n    \"gbreve\",\n    \"Idotaccent\",\n    \"Scedilla\",\n    \"scedilla\",\n    \"Cacute\",\n    \"cacute\",\n    \"Ccaron\",\n    \"ccaron\",\n    \"dcroat\"\n];\nclass $f92906be28e61769$export$2e2bcd8739ae039 {\n    _getPath() {\n        return new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039)();\n    }\n    _getCBox() {\n        return this.path.cbox;\n    }\n    _getBBox() {\n        return this.path.bbox;\n    }\n    _getTableMetrics(table) {\n        if (this.id < table.metrics.length) return table.metrics.get(this.id);\n        let metric = table.metrics.get(table.metrics.length - 1);\n        let res = {\n            advance: metric ? metric.advance : 0,\n            bearing: table.bearings.get(this.id - table.metrics.length) || 0\n        };\n        return res;\n    }\n    _getMetrics(cbox) {\n        if (this._metrics) return this._metrics;\n        let { advance: advanceWidth, bearing: leftBearing } = this._getTableMetrics(this._font.hmtx);\n        // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n        if (this._font.vmtx) var { advance: advanceHeight, bearing: topBearing } = this._getTableMetrics(this._font.vmtx);\n        else {\n            let os2;\n            if (typeof cbox === \"undefined\" || cbox === null) ({ cbox: cbox } = this);\n            if ((os2 = this._font[\"OS/2\"]) && os2.version > 0) {\n                var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n                var topBearing = os2.typoAscender - cbox.maxY;\n            } else {\n                let { hhea: hhea } = this._font;\n                var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n                var topBearing = hhea.ascent - cbox.maxY;\n            }\n        }\n        if (this._font._variationProcessor && this._font.HVAR) advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n        return this._metrics = {\n            advanceWidth: advanceWidth,\n            advanceHeight: advanceHeight,\n            leftBearing: leftBearing,\n            topBearing: topBearing\n        };\n    }\n    /**\n   * The glyph’s control box.\n   * This is often the same as the bounding box, but is faster to compute.\n   * Because of the way bezier curves are defined, some of the control points\n   * can be outside of the bounding box. Where `bbox` takes this into account,\n   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n   * for a more detailed description.\n   *\n   * @type {BBox}\n   */ get cbox() {\n        return this._getCBox();\n    }\n    /**\n   * The glyph’s bounding box, i.e. the rectangle that encloses the\n   * glyph outline as tightly as possible.\n   * @type {BBox}\n   */ get bbox() {\n        return this._getBBox();\n    }\n    /**\n   * A vector Path object representing the glyph outline.\n   * @type {Path}\n   */ get path() {\n        // Cache the path so we only decode it once\n        // Decoding is actually performed by subclasses\n        return this._getPath();\n    }\n    /**\n   * Returns a path scaled to the given font size.\n   * @param {number} size\n   * @return {Path}\n   */ getScaledPath(size) {\n        let scale = 1 / this._font.unitsPerEm * size;\n        return this.path.scale(scale);\n    }\n    /**\n   * The glyph's advance width.\n   * @type {number}\n   */ get advanceWidth() {\n        return this._getMetrics().advanceWidth;\n    }\n    /**\n   * The glyph's advance height.\n   * @type {number}\n   */ get advanceHeight() {\n        return this._getMetrics().advanceHeight;\n    }\n    get ligatureCaretPositions() {}\n    _getName() {\n        let { post: post } = this._font;\n        if (!post) return null;\n        switch(post.version){\n            case 1:\n                return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[this.id];\n            case 2:\n                let id = post.glyphNameIndex[this.id];\n                if (id < (0, $7713b9b7b438dff8$export$2e2bcd8739ae039).length) return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[id];\n                return post.names[id - (0, $7713b9b7b438dff8$export$2e2bcd8739ae039).length];\n            case 2.5:\n                return (0, $7713b9b7b438dff8$export$2e2bcd8739ae039)[this.id + post.offsets[this.id]];\n            case 4:\n                return String.fromCharCode(post.map[this.id]);\n        }\n    }\n    /**\n   * The glyph's name\n   * @type {string}\n   */ get name() {\n        return this._getName();\n    }\n    /**\n   * Renders the glyph to the given graphics context, at the specified font size.\n   * @param {CanvasRenderingContext2d} ctx\n   * @param {number} size\n   */ render(ctx, size) {\n        ctx.save();\n        let scale = 1 / this._font.head.unitsPerEm * size;\n        ctx.scale(scale, scale);\n        let fn = this.path.toFunction();\n        fn(ctx);\n        ctx.fill();\n        ctx.restore();\n    }\n    constructor(id, codePoints, font){\n        /**\n     * The glyph id in the font\n     * @type {number}\n     */ this.id = id;\n        /**\n     * An array of unicode code points that are represented by this glyph.\n     * There can be multiple code points in the case of ligatures and other glyphs\n     * that represent multiple visual characters.\n     * @type {number[]}\n     */ this.codePoints = codePoints;\n        this._font = font;\n        // TODO: get this info from GDEF if available\n        this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, unicode_properties__WEBPACK_IMPORTED_MODULE_3__.isMark));\n        this.isLigature = this.codePoints.length > 1;\n    }\n}\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"cbox\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"bbox\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"path\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"advanceWidth\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"advanceHeight\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $f92906be28e61769$export$2e2bcd8739ae039.prototype, \"name\", null);\n// The header for both simple and composite glyphs\nlet $69aac16029968692$var$GlyfHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    numberOfContours: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16\n});\n// Flags for simple glyphs\nconst $69aac16029968692$var$ON_CURVE = 1;\nconst $69aac16029968692$var$X_SHORT_VECTOR = 2;\nconst $69aac16029968692$var$Y_SHORT_VECTOR = 4;\nconst $69aac16029968692$var$REPEAT = 8;\nconst $69aac16029968692$var$SAME_X = 16;\nconst $69aac16029968692$var$SAME_Y = 32;\n// Flags for composite glyphs\nconst $69aac16029968692$var$ARG_1_AND_2_ARE_WORDS = 1;\nconst $69aac16029968692$var$ARGS_ARE_XY_VALUES = 2;\nconst $69aac16029968692$var$ROUND_XY_TO_GRID = 4;\nconst $69aac16029968692$var$WE_HAVE_A_SCALE = 8;\nconst $69aac16029968692$var$MORE_COMPONENTS = 32;\nconst $69aac16029968692$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;\nconst $69aac16029968692$var$WE_HAVE_A_TWO_BY_TWO = 128;\nconst $69aac16029968692$var$WE_HAVE_INSTRUCTIONS = 256;\nconst $69aac16029968692$var$USE_MY_METRICS = 512;\nconst $69aac16029968692$var$OVERLAP_COMPOUND = 1024;\nconst $69aac16029968692$var$SCALED_COMPONENT_OFFSET = 2048;\nconst $69aac16029968692$var$UNSCALED_COMPONENT_OFFSET = 4096;\nclass $69aac16029968692$export$baf26146a414f24a {\n    copy() {\n        return new $69aac16029968692$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);\n    }\n    constructor(onCurve, endContour, x = 0, y = 0){\n        this.onCurve = onCurve;\n        this.endContour = endContour;\n        this.x = x;\n        this.y = y;\n    }\n}\n// Represents a component in a composite glyph\nclass $69aac16029968692$var$Component {\n    constructor(glyphID, dx, dy){\n        this.glyphID = glyphID;\n        this.dx = dx;\n        this.dy = dy;\n        this.pos = 0;\n        this.scaleX = this.scaleY = 1;\n        this.scale01 = this.scale10 = 0;\n    }\n}\nclass $69aac16029968692$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n    // Parses just the glyph header and returns the bounding box\n    _getCBox(internal) {\n        // We need to decode the glyph if variation processing is requested,\n        // so it's easier just to recompute the path's cbox after decoding.\n        if (this._font._variationProcessor && !internal) return this.path.cbox;\n        let stream = this._font._getTableStream(\"glyf\");\n        stream.pos += this._font.loca.offsets[this.id];\n        let glyph = $69aac16029968692$var$GlyfHeader.decode(stream);\n        let cbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n        return Object.freeze(cbox);\n    }\n    // Parses a single glyph coordinate\n    _parseGlyphCoord(stream, prev, short, same) {\n        if (short) {\n            var val = stream.readUInt8();\n            if (!same) val = -val;\n            val += prev;\n        } else if (same) var val = prev;\n        else var val = prev + stream.readInt16BE();\n        return val;\n    }\n    // Decodes the glyph data into points for simple glyphs,\n    // or components for composite glyphs\n    _decode() {\n        let glyfPos = this._font.loca.offsets[this.id];\n        let nextPos = this._font.loca.offsets[this.id + 1];\n        // Nothing to do if there is no data for this glyph\n        if (glyfPos === nextPos) return null;\n        let stream = this._font._getTableStream(\"glyf\");\n        stream.pos += glyfPos;\n        let startPos = stream.pos;\n        let glyph = $69aac16029968692$var$GlyfHeader.decode(stream);\n        if (glyph.numberOfContours > 0) this._decodeSimple(glyph, stream);\n        else if (glyph.numberOfContours < 0) this._decodeComposite(glyph, stream, startPos);\n        return glyph;\n    }\n    _decodeSimple(glyph, stream) {\n        // this is a simple glyph\n        glyph.points = [];\n        let endPtsOfContours = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, glyph.numberOfContours).decode(stream);\n        glyph.instructions = new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16).decode(stream);\n        let flags = [];\n        let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n        while(flags.length < numCoords){\n            var flag = stream.readUInt8();\n            flags.push(flag);\n            // check for repeat flag\n            if (flag & $69aac16029968692$var$REPEAT) {\n                let count = stream.readUInt8();\n                for(let j = 0; j < count; j++)flags.push(flag);\n            }\n        }\n        for(var i = 0; i < flags.length; i++){\n            var flag = flags[i];\n            let point = new $69aac16029968692$export$baf26146a414f24a(!!(flag & $69aac16029968692$var$ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n            glyph.points.push(point);\n        }\n        let px = 0;\n        for(var i = 0; i < flags.length; i++){\n            var flag = flags[i];\n            glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & $69aac16029968692$var$X_SHORT_VECTOR, flag & $69aac16029968692$var$SAME_X);\n        }\n        let py = 0;\n        for(var i = 0; i < flags.length; i++){\n            var flag = flags[i];\n            glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & $69aac16029968692$var$Y_SHORT_VECTOR, flag & $69aac16029968692$var$SAME_Y);\n        }\n        if (this._font._variationProcessor) {\n            let points = glyph.points.slice();\n            points.push(...this._getPhantomPoints(glyph));\n            this._font._variationProcessor.transformPoints(this.id, points);\n            glyph.phantomPoints = points.slice(-4);\n        }\n        return;\n    }\n    _decodeComposite(glyph, stream, offset = 0) {\n        // this is a composite glyph\n        glyph.components = [];\n        let haveInstructions = false;\n        let flags = $69aac16029968692$var$MORE_COMPONENTS;\n        while(flags & $69aac16029968692$var$MORE_COMPONENTS){\n            flags = stream.readUInt16BE();\n            let gPos = stream.pos - offset;\n            let glyphID = stream.readUInt16BE();\n            if (!haveInstructions) haveInstructions = (flags & $69aac16029968692$var$WE_HAVE_INSTRUCTIONS) !== 0;\n            if (flags & $69aac16029968692$var$ARG_1_AND_2_ARE_WORDS) {\n                var dx = stream.readInt16BE();\n                var dy = stream.readInt16BE();\n            } else {\n                var dx = stream.readInt8();\n                var dy = stream.readInt8();\n            }\n            var component = new $69aac16029968692$var$Component(glyphID, dx, dy);\n            component.pos = gPos;\n            if (flags & $69aac16029968692$var$WE_HAVE_A_SCALE) component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n            else if (flags & $69aac16029968692$var$WE_HAVE_AN_X_AND_Y_SCALE) {\n                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n            } else if (flags & $69aac16029968692$var$WE_HAVE_A_TWO_BY_TWO) {\n                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n            }\n            glyph.components.push(component);\n        }\n        if (this._font._variationProcessor) {\n            let points = [];\n            for(let j = 0; j < glyph.components.length; j++){\n                var component = glyph.components[j];\n                points.push(new $69aac16029968692$export$baf26146a414f24a(true, true, component.dx, component.dy));\n            }\n            points.push(...this._getPhantomPoints(glyph));\n            this._font._variationProcessor.transformPoints(this.id, points);\n            glyph.phantomPoints = points.splice(-4, 4);\n            for(let i = 0; i < points.length; i++){\n                let point = points[i];\n                glyph.components[i].dx = point.x;\n                glyph.components[i].dy = point.y;\n            }\n        }\n        return haveInstructions;\n    }\n    _getPhantomPoints(glyph) {\n        let cbox = this._getCBox(true);\n        if (this._metrics == null) this._metrics = (0, $f92906be28e61769$export$2e2bcd8739ae039).prototype._getMetrics.call(this, cbox);\n        let { advanceWidth: advanceWidth, advanceHeight: advanceHeight, leftBearing: leftBearing, topBearing: topBearing } = this._metrics;\n        return [\n            new $69aac16029968692$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0),\n            new $69aac16029968692$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0),\n            new $69aac16029968692$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing),\n            new $69aac16029968692$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)\n        ];\n    }\n    // Decodes font data, resolves composite glyphs, and returns an array of contours\n    _getContours() {\n        let glyph = this._decode();\n        if (!glyph) return [];\n        let points = [];\n        if (glyph.numberOfContours < 0) for (let component of glyph.components){\n            let contours = this._font.getGlyph(component.glyphID)._getContours();\n            for(let i = 0; i < contours.length; i++){\n                let contour = contours[i];\n                for(let j = 0; j < contour.length; j++){\n                    let point = contour[j];\n                    let x = point.x * component.scaleX + point.y * component.scale01 + component.dx;\n                    let y = point.y * component.scaleY + point.x * component.scale10 + component.dy;\n                    points.push(new $69aac16029968692$export$baf26146a414f24a(point.onCurve, point.endContour, x, y));\n                }\n            }\n        }\n        else points = glyph.points || [];\n        // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n        if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n            this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n            this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n            this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;\n            this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;\n        }\n        let contours = [];\n        let cur = [];\n        for(let k = 0; k < points.length; k++){\n            var point = points[k];\n            cur.push(point);\n            if (point.endContour) {\n                contours.push(cur);\n                cur = [];\n            }\n        }\n        return contours;\n    }\n    _getMetrics() {\n        if (this._metrics) return this._metrics;\n        let cbox = this._getCBox(true);\n        super._getMetrics(cbox);\n        if (this._font._variationProcessor && !this._font.HVAR) this.path;\n        return this._metrics;\n    }\n    // Converts contours to a Path object that can be rendered\n    _getPath() {\n        let contours = this._getContours();\n        let path = new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039);\n        for(let i = 0; i < contours.length; i++){\n            let contour = contours[i];\n            let firstPt = contour[0];\n            let lastPt = contour[contour.length - 1];\n            let start = 0;\n            if (firstPt.onCurve) {\n                // The first point will be consumed by the moveTo command, so skip in the loop\n                var curvePt = null;\n                start = 1;\n            } else {\n                if (lastPt.onCurve) firstPt = lastPt;\n                else firstPt = new $69aac16029968692$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n                var curvePt = firstPt;\n            }\n            path.moveTo(firstPt.x, firstPt.y);\n            for(let j = start; j < contour.length; j++){\n                let pt = contour[j];\n                let prevPt = j === 0 ? firstPt : contour[j - 1];\n                if (prevPt.onCurve && pt.onCurve) path.lineTo(pt.x, pt.y);\n                else if (prevPt.onCurve && !pt.onCurve) var curvePt = pt;\n                else if (!prevPt.onCurve && !pt.onCurve) {\n                    let midX = (prevPt.x + pt.x) / 2;\n                    let midY = (prevPt.y + pt.y) / 2;\n                    path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n                    var curvePt = pt;\n                } else if (!prevPt.onCurve && pt.onCurve) {\n                    path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n                    var curvePt = null;\n                } else throw new Error(\"Unknown TTF path state\");\n            }\n            // Connect the first and last points\n            if (curvePt) path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n            path.closePath();\n        }\n        return path;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", \"TTF\");\n    }\n}\nclass $62cc5109c6101893$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n    _getName() {\n        if (this._font.CFF2) return super._getName();\n        return this._font[\"CFF \"].getGlyphName(this.id);\n    }\n    bias(s) {\n        if (s.length < 1240) return 107;\n        else if (s.length < 33900) return 1131;\n        else return 32768;\n    }\n    _getPath() {\n        let cff = this._font.CFF2 || this._font[\"CFF \"];\n        let { stream: stream } = cff;\n        let str = cff.topDict.CharStrings[this.id];\n        let end = str.offset + str.length;\n        stream.pos = str.offset;\n        let path = new (0, $f43aec954cdfdf21$export$2e2bcd8739ae039);\n        let stack = [];\n        let trans = [];\n        let width = null;\n        let nStems = 0;\n        let x1 = 0, y1 = 0;\n        let usedGsubrs;\n        let usedSubrs;\n        let open = false;\n        this._usedGsubrs = usedGsubrs = {};\n        this._usedSubrs = usedSubrs = {};\n        let gsubrs = cff.globalSubrIndex || [];\n        let gsubrsBias = this.bias(gsubrs);\n        let privateDict = cff.privateDictForGlyph(this.id) || {};\n        let subrs = privateDict.Subrs || [];\n        let subrsBias = this.bias(subrs);\n        let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n        let vsindex = privateDict.vsindex;\n        let variationProcessor = this._font._variationProcessor;\n        function checkWidth() {\n            if (width == null) width = stack.shift() + privateDict.nominalWidthX;\n        }\n        function parseStems() {\n            if (stack.length % 2 !== 0) checkWidth();\n            nStems += stack.length >> 1;\n            return stack.length = 0;\n        }\n        function moveTo(x, y) {\n            if (open) path.closePath();\n            path.moveTo(x, y);\n            open = true;\n        }\n        let parse = function() {\n            while(stream.pos < end){\n                let op = stream.readUInt8();\n                if (op < 32) {\n                    let index, subr, phase;\n                    switch(op){\n                        case 1:\n                        case 3:\n                        case 18:\n                        case 23:\n                            parseStems();\n                            break;\n                        case 4:\n                            if (stack.length > 1) checkWidth();\n                            y1 += stack.shift();\n                            moveTo(x1, y1);\n                            break;\n                        case 5:\n                            while(stack.length >= 2){\n                                x1 += stack.shift();\n                                y1 += stack.shift();\n                                path.lineTo(x1, y1);\n                            }\n                            break;\n                        case 6:\n                        case 7:\n                            phase = op === 6;\n                            while(stack.length >= 1){\n                                if (phase) x1 += stack.shift();\n                                else y1 += stack.shift();\n                                path.lineTo(x1, y1);\n                                phase = !phase;\n                            }\n                            break;\n                        case 8:\n                            while(stack.length > 0){\n                                var c1x = x1 + stack.shift();\n                                var c1y = y1 + stack.shift();\n                                var c2x = c1x + stack.shift();\n                                var c2y = c1y + stack.shift();\n                                x1 = c2x + stack.shift();\n                                y1 = c2y + stack.shift();\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                            }\n                            break;\n                        case 10:\n                            index = stack.pop() + subrsBias;\n                            subr = subrs[index];\n                            if (subr) {\n                                usedSubrs[index] = true;\n                                var p = stream.pos;\n                                var e = end;\n                                stream.pos = subr.offset;\n                                end = subr.offset + subr.length;\n                                parse();\n                                stream.pos = p;\n                                end = e;\n                            }\n                            break;\n                        case 11:\n                            if (cff.version >= 2) break;\n                            return;\n                        case 14:\n                            if (cff.version >= 2) break;\n                            if (stack.length > 0) checkWidth();\n                            if (open) {\n                                path.closePath();\n                                open = false;\n                            }\n                            break;\n                        case 15:\n                            if (cff.version < 2) throw new Error(\"vsindex operator not supported in CFF v1\");\n                            vsindex = stack.pop();\n                            break;\n                        case 16:\n                            {\n                                if (cff.version < 2) throw new Error(\"blend operator not supported in CFF v1\");\n                                if (!variationProcessor) throw new Error(\"blend operator in non-variation font\");\n                                let blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n                                let numBlends = stack.pop();\n                                let numOperands = numBlends * blendVector.length;\n                                let delta = stack.length - numOperands;\n                                let base = delta - numBlends;\n                                for(let i = 0; i < numBlends; i++){\n                                    let sum = stack[base + i];\n                                    for(let j = 0; j < blendVector.length; j++)sum += blendVector[j] * stack[delta++];\n                                    stack[base + i] = sum;\n                                }\n                                while(numOperands--)stack.pop();\n                                break;\n                            }\n                        case 19:\n                        case 20:\n                            parseStems();\n                            stream.pos += nStems + 7 >> 3;\n                            break;\n                        case 21:\n                            if (stack.length > 2) checkWidth();\n                            x1 += stack.shift();\n                            y1 += stack.shift();\n                            moveTo(x1, y1);\n                            break;\n                        case 22:\n                            if (stack.length > 1) checkWidth();\n                            x1 += stack.shift();\n                            moveTo(x1, y1);\n                            break;\n                        case 24:\n                            while(stack.length >= 8){\n                                var c1x = x1 + stack.shift();\n                                var c1y = y1 + stack.shift();\n                                var c2x = c1x + stack.shift();\n                                var c2y = c1y + stack.shift();\n                                x1 = c2x + stack.shift();\n                                y1 = c2y + stack.shift();\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                            }\n                            x1 += stack.shift();\n                            y1 += stack.shift();\n                            path.lineTo(x1, y1);\n                            break;\n                        case 25:\n                            while(stack.length >= 8){\n                                x1 += stack.shift();\n                                y1 += stack.shift();\n                                path.lineTo(x1, y1);\n                            }\n                            var c1x = x1 + stack.shift();\n                            var c1y = y1 + stack.shift();\n                            var c2x = c1x + stack.shift();\n                            var c2y = c1y + stack.shift();\n                            x1 = c2x + stack.shift();\n                            y1 = c2y + stack.shift();\n                            path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                            break;\n                        case 26:\n                            if (stack.length % 2) x1 += stack.shift();\n                            while(stack.length >= 4){\n                                c1x = x1;\n                                c1y = y1 + stack.shift();\n                                c2x = c1x + stack.shift();\n                                c2y = c1y + stack.shift();\n                                x1 = c2x;\n                                y1 = c2y + stack.shift();\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                            }\n                            break;\n                        case 27:\n                            if (stack.length % 2) y1 += stack.shift();\n                            while(stack.length >= 4){\n                                c1x = x1 + stack.shift();\n                                c1y = y1;\n                                c2x = c1x + stack.shift();\n                                c2y = c1y + stack.shift();\n                                x1 = c2x + stack.shift();\n                                y1 = c2y;\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                            }\n                            break;\n                        case 28:\n                            stack.push(stream.readInt16BE());\n                            break;\n                        case 29:\n                            index = stack.pop() + gsubrsBias;\n                            subr = gsubrs[index];\n                            if (subr) {\n                                usedGsubrs[index] = true;\n                                var p = stream.pos;\n                                var e = end;\n                                stream.pos = subr.offset;\n                                end = subr.offset + subr.length;\n                                parse();\n                                stream.pos = p;\n                                end = e;\n                            }\n                            break;\n                        case 30:\n                        case 31:\n                            phase = op === 31;\n                            while(stack.length >= 4){\n                                if (phase) {\n                                    c1x = x1 + stack.shift();\n                                    c1y = y1;\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    y1 = c2y + stack.shift();\n                                    x1 = c2x + (stack.length === 1 ? stack.shift() : 0);\n                                } else {\n                                    c1x = x1;\n                                    c1y = y1 + stack.shift();\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    x1 = c2x + stack.shift();\n                                    y1 = c2y + (stack.length === 1 ? stack.shift() : 0);\n                                }\n                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                                phase = !phase;\n                            }\n                            break;\n                        case 12:\n                            op = stream.readUInt8();\n                            switch(op){\n                                case 3:\n                                    let a = stack.pop();\n                                    let b = stack.pop();\n                                    stack.push(a && b ? 1 : 0);\n                                    break;\n                                case 4:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a || b ? 1 : 0);\n                                    break;\n                                case 5:\n                                    a = stack.pop();\n                                    stack.push(a ? 0 : 1);\n                                    break;\n                                case 9:\n                                    a = stack.pop();\n                                    stack.push(Math.abs(a));\n                                    break;\n                                case 10:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a + b);\n                                    break;\n                                case 11:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a - b);\n                                    break;\n                                case 12:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a / b);\n                                    break;\n                                case 14:\n                                    a = stack.pop();\n                                    stack.push(-a);\n                                    break;\n                                case 15:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a === b ? 1 : 0);\n                                    break;\n                                case 18:\n                                    stack.pop();\n                                    break;\n                                case 20:\n                                    let val = stack.pop();\n                                    let idx = stack.pop();\n                                    trans[idx] = val;\n                                    break;\n                                case 21:\n                                    idx = stack.pop();\n                                    stack.push(trans[idx] || 0);\n                                    break;\n                                case 22:\n                                    let s1 = stack.pop();\n                                    let s2 = stack.pop();\n                                    let v1 = stack.pop();\n                                    let v2 = stack.pop();\n                                    stack.push(v1 <= v2 ? s1 : s2);\n                                    break;\n                                case 23:\n                                    stack.push(Math.random());\n                                    break;\n                                case 24:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(a * b);\n                                    break;\n                                case 26:\n                                    a = stack.pop();\n                                    stack.push(Math.sqrt(a));\n                                    break;\n                                case 27:\n                                    a = stack.pop();\n                                    stack.push(a, a);\n                                    break;\n                                case 28:\n                                    a = stack.pop();\n                                    b = stack.pop();\n                                    stack.push(b, a);\n                                    break;\n                                case 29:\n                                    idx = stack.pop();\n                                    if (idx < 0) idx = 0;\n                                    else if (idx > stack.length - 1) idx = stack.length - 1;\n                                    stack.push(stack[idx]);\n                                    break;\n                                case 30:\n                                    let n = stack.pop();\n                                    let j = stack.pop();\n                                    if (j >= 0) while(j > 0){\n                                        var t = stack[n - 1];\n                                        for(let i = n - 2; i >= 0; i--)stack[i + 1] = stack[i];\n                                        stack[0] = t;\n                                        j--;\n                                    }\n                                    else while(j < 0){\n                                        var t = stack[0];\n                                        for(let i = 0; i <= n; i++)stack[i] = stack[i + 1];\n                                        stack[n - 1] = t;\n                                        j++;\n                                    }\n                                    break;\n                                case 34:\n                                    c1x = x1 + stack.shift();\n                                    c1y = y1;\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    let c3x = c2x + stack.shift();\n                                    let c3y = c2y;\n                                    let c4x = c3x + stack.shift();\n                                    let c4y = c3y;\n                                    let c5x = c4x + stack.shift();\n                                    let c5y = c4y;\n                                    let c6x = c5x + stack.shift();\n                                    let c6y = c5y;\n                                    x1 = c6x;\n                                    y1 = c6y;\n                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                                    break;\n                                case 35:\n                                    let pts = [];\n                                    for(let i = 0; i <= 5; i++){\n                                        x1 += stack.shift();\n                                        y1 += stack.shift();\n                                        pts.push(x1, y1);\n                                    }\n                                    path.bezierCurveTo(...pts.slice(0, 6));\n                                    path.bezierCurveTo(...pts.slice(6));\n                                    stack.shift(); // fd\n                                    break;\n                                case 36:\n                                    c1x = x1 + stack.shift();\n                                    c1y = y1 + stack.shift();\n                                    c2x = c1x + stack.shift();\n                                    c2y = c1y + stack.shift();\n                                    c3x = c2x + stack.shift();\n                                    c3y = c2y;\n                                    c4x = c3x + stack.shift();\n                                    c4y = c3y;\n                                    c5x = c4x + stack.shift();\n                                    c5y = c4y + stack.shift();\n                                    c6x = c5x + stack.shift();\n                                    c6y = c5y;\n                                    x1 = c6x;\n                                    y1 = c6y;\n                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                                    break;\n                                case 37:\n                                    let startx = x1;\n                                    let starty = y1;\n                                    pts = [];\n                                    for(let i1 = 0; i1 <= 4; i1++){\n                                        x1 += stack.shift();\n                                        y1 += stack.shift();\n                                        pts.push(x1, y1);\n                                    }\n                                    if (Math.abs(x1 - startx) > Math.abs(y1 - starty)) {\n                                        x1 += stack.shift();\n                                        y1 = starty;\n                                    } else {\n                                        x1 = startx;\n                                        y1 += stack.shift();\n                                    }\n                                    pts.push(x1, y1);\n                                    path.bezierCurveTo(...pts.slice(0, 6));\n                                    path.bezierCurveTo(...pts.slice(6));\n                                    break;\n                                default:\n                                    throw new Error(`Unknown op: 12 ${op}`);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Unknown op: ${op}`);\n                    }\n                } else if (op < 247) stack.push(op - 139);\n                else if (op < 251) {\n                    var b1 = stream.readUInt8();\n                    stack.push((op - 247) * 256 + b1 + 108);\n                } else if (op < 255) {\n                    var b1 = stream.readUInt8();\n                    stack.push(-(op - 251) * 256 - b1 - 108);\n                } else stack.push(stream.readInt32BE() / 65536);\n            }\n        };\n        parse();\n        if (open) path.closePath();\n        return path;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", \"CFF\");\n    }\n}\nlet $25d8f049c222084c$var$SBIXImage = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    originX: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    originY: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    type: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    data: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer((t)=>t.parent.buflen - t._currentOffset)\n});\nclass $25d8f049c222084c$export$2e2bcd8739ae039 extends (0, $69aac16029968692$export$2e2bcd8739ae039) {\n    /**\n   * Returns an object representing a glyph image at the given point size.\n   * The object has a data property with a Buffer containing the actual image data,\n   * along with the image type, and origin.\n   *\n   * @param {number} size\n   * @return {object}\n   */ getImageForSize(size) {\n        for(let i = 0; i < this._font.sbix.imageTables.length; i++){\n            var table = this._font.sbix.imageTables[i];\n            if (table.ppem >= size) break;\n        }\n        let offsets = table.imageOffsets;\n        let start = offsets[this.id];\n        let end = offsets[this.id + 1];\n        if (start === end) return null;\n        this._font.stream.pos = start;\n        return $25d8f049c222084c$var$SBIXImage.decode(this._font.stream, {\n            buflen: end - start\n        });\n    }\n    render(ctx, size) {\n        let img = this.getImageForSize(size);\n        if (img != null) {\n            let scale = size / this._font.unitsPerEm;\n            ctx.image(img.data, {\n                height: size,\n                x: img.originX,\n                y: (this.bbox.minY - img.originY) * scale\n            });\n        }\n        if (this._font.sbix.flags.renderOutlines) super.render(ctx, size);\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", \"SBIX\");\n    }\n}\nclass $0d411f0165859681$var$COLRLayer {\n    constructor(glyph, color){\n        this.glyph = glyph;\n        this.color = color;\n    }\n}\nclass $0d411f0165859681$export$2e2bcd8739ae039 extends (0, $f92906be28e61769$export$2e2bcd8739ae039) {\n    _getBBox() {\n        let bbox = new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039);\n        for(let i = 0; i < this.layers.length; i++){\n            let layer = this.layers[i];\n            let b = layer.glyph.bbox;\n            bbox.addPoint(b.minX, b.minY);\n            bbox.addPoint(b.maxX, b.maxY);\n        }\n        return bbox;\n    }\n    /**\n   * Returns an array of objects containing the glyph and color for\n   * each layer in the composite color glyph.\n   * @type {object[]}\n   */ get layers() {\n        let cpal = this._font.CPAL;\n        let colr = this._font.COLR;\n        let low = 0;\n        let high = colr.baseGlyphRecord.length - 1;\n        while(low <= high){\n            let mid = low + high >> 1;\n            var rec = colr.baseGlyphRecord[mid];\n            if (this.id < rec.gid) high = mid - 1;\n            else if (this.id > rec.gid) low = mid + 1;\n            else {\n                var baseLayer = rec;\n                break;\n            }\n        }\n        // if base glyph not found in COLR table,\n        // default to normal glyph from glyf or CFF\n        if (baseLayer == null) {\n            var g = this._font._getBaseGlyph(this.id);\n            var color = {\n                red: 0,\n                green: 0,\n                blue: 0,\n                alpha: 255\n            };\n            return [\n                new $0d411f0165859681$var$COLRLayer(g, color)\n            ];\n        }\n        // otherwise, return an array of all the layers\n        let layers = [];\n        for(let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++){\n            var rec = colr.layerRecords[i];\n            var color = cpal.colorRecords[rec.paletteIndex];\n            var g = this._font._getBaseGlyph(rec.gid);\n            layers.push(new $0d411f0165859681$var$COLRLayer(g, color));\n        }\n        return layers;\n    }\n    render(ctx, size) {\n        for (let { glyph: glyph, color: color } of this.layers){\n            ctx.fillColor([\n                color.red,\n                color.green,\n                color.blue\n            ], color.alpha / 255 * 100);\n            glyph.render(ctx, size);\n        }\n        return;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", \"COLR\");\n    }\n}\nconst $0bb840cac04e911b$var$TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nconst $0bb840cac04e911b$var$TUPLE_COUNT_MASK = 0x0fff;\nconst $0bb840cac04e911b$var$EMBEDDED_TUPLE_COORD = 0x8000;\nconst $0bb840cac04e911b$var$INTERMEDIATE_TUPLE = 0x4000;\nconst $0bb840cac04e911b$var$PRIVATE_POINT_NUMBERS = 0x2000;\nconst $0bb840cac04e911b$var$TUPLE_INDEX_MASK = 0x0fff;\nconst $0bb840cac04e911b$var$POINTS_ARE_WORDS = 0x80;\nconst $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK = 0x7f;\nconst $0bb840cac04e911b$var$DELTAS_ARE_ZERO = 0x80;\nconst $0bb840cac04e911b$var$DELTAS_ARE_WORDS = 0x40;\nconst $0bb840cac04e911b$var$DELTA_RUN_COUNT_MASK = 0x3f;\nclass $0bb840cac04e911b$export$2e2bcd8739ae039 {\n    normalizeCoords(coords) {\n        // the default mapping is linear along each axis, in two segments:\n        // from the minValue to defaultValue, and from defaultValue to maxValue.\n        let normalized = [];\n        for(var i = 0; i < this.font.fvar.axis.length; i++){\n            let axis = this.font.fvar.axis[i];\n            if (coords[i] < axis.defaultValue) normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));\n            else normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n        }\n        // if there is an avar table, the normalized value is calculated\n        // by interpolating between the two nearest mapped values.\n        if (this.font.avar) for(var i = 0; i < this.font.avar.segment.length; i++){\n            let segment = this.font.avar.segment[i];\n            for(let j = 0; j < segment.correspondence.length; j++){\n                let pair = segment.correspondence[j];\n                if (j >= 1 && normalized[i] < pair.fromCoord) {\n                    let prev = segment.correspondence[j - 1];\n                    normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;\n                    break;\n                }\n            }\n        }\n        return normalized;\n    }\n    transformPoints(gid, glyphPoints) {\n        if (!this.font.fvar || !this.font.gvar) return;\n        let { gvar: gvar } = this.font;\n        if (gid >= gvar.glyphCount) return;\n        let offset = gvar.offsets[gid];\n        if (offset === gvar.offsets[gid + 1]) return;\n        // Read the gvar data for this glyph\n        let { stream: stream } = this.font;\n        stream.pos = offset;\n        if (stream.pos >= stream.length) return;\n        let tupleCount = stream.readUInt16BE();\n        let offsetToData = offset + stream.readUInt16BE();\n        if (tupleCount & $0bb840cac04e911b$var$TUPLES_SHARE_POINT_NUMBERS) {\n            var here = stream.pos;\n            stream.pos = offsetToData;\n            var sharedPoints = this.decodePoints();\n            offsetToData = stream.pos;\n            stream.pos = here;\n        }\n        let origPoints = glyphPoints.map((pt)=>pt.copy());\n        tupleCount &= $0bb840cac04e911b$var$TUPLE_COUNT_MASK;\n        for(let i = 0; i < tupleCount; i++){\n            let tupleDataSize = stream.readUInt16BE();\n            let tupleIndex = stream.readUInt16BE();\n            if (tupleIndex & $0bb840cac04e911b$var$EMBEDDED_TUPLE_COORD) {\n                var tupleCoords = [];\n                for(let a = 0; a < gvar.axisCount; a++)tupleCoords.push(stream.readInt16BE() / 16384);\n            } else {\n                if ((tupleIndex & $0bb840cac04e911b$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount) throw new Error(\"Invalid gvar table\");\n                var tupleCoords = gvar.globalCoords[tupleIndex & $0bb840cac04e911b$var$TUPLE_INDEX_MASK];\n            }\n            if (tupleIndex & $0bb840cac04e911b$var$INTERMEDIATE_TUPLE) {\n                var startCoords = [];\n                for(let a = 0; a < gvar.axisCount; a++)startCoords.push(stream.readInt16BE() / 16384);\n                var endCoords = [];\n                for(let a1 = 0; a1 < gvar.axisCount; a1++)endCoords.push(stream.readInt16BE() / 16384);\n            }\n            // Get the factor at which to apply this tuple\n            let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n            if (factor === 0) {\n                offsetToData += tupleDataSize;\n                continue;\n            }\n            var here = stream.pos;\n            stream.pos = offsetToData;\n            if (tupleIndex & $0bb840cac04e911b$var$PRIVATE_POINT_NUMBERS) var points = this.decodePoints();\n            else var points = sharedPoints;\n            // points.length = 0 means there are deltas for all points\n            let nPoints = points.length === 0 ? glyphPoints.length : points.length;\n            let xDeltas = this.decodeDeltas(nPoints);\n            let yDeltas = this.decodeDeltas(nPoints);\n            if (points.length === 0) for(let i = 0; i < glyphPoints.length; i++){\n                var point = glyphPoints[i];\n                point.x += Math.round(xDeltas[i] * factor);\n                point.y += Math.round(yDeltas[i] * factor);\n            }\n            else {\n                let outPoints = origPoints.map((pt)=>pt.copy());\n                let hasDelta = glyphPoints.map(()=>false);\n                for(let i = 0; i < points.length; i++){\n                    let idx = points[i];\n                    if (idx < glyphPoints.length) {\n                        let point = outPoints[idx];\n                        hasDelta[idx] = true;\n                        point.x += Math.round(xDeltas[i] * factor);\n                        point.y += Math.round(yDeltas[i] * factor);\n                    }\n                }\n                this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n                for(let i1 = 0; i1 < glyphPoints.length; i1++){\n                    let deltaX = outPoints[i1].x - origPoints[i1].x;\n                    let deltaY = outPoints[i1].y - origPoints[i1].y;\n                    glyphPoints[i1].x += deltaX;\n                    glyphPoints[i1].y += deltaY;\n                }\n            }\n            offsetToData += tupleDataSize;\n            stream.pos = here;\n        }\n    }\n    decodePoints() {\n        let stream = this.font.stream;\n        let count = stream.readUInt8();\n        if (count & $0bb840cac04e911b$var$POINTS_ARE_WORDS) count = (count & $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n        let points = new Uint16Array(count);\n        let i = 0;\n        let point = 0;\n        while(i < count){\n            let run = stream.readUInt8();\n            let runCount = (run & $0bb840cac04e911b$var$POINT_RUN_COUNT_MASK) + 1;\n            let fn = run & $0bb840cac04e911b$var$POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n            for(let j = 0; j < runCount && i < count; j++){\n                point += fn.call(stream);\n                points[i++] = point;\n            }\n        }\n        return points;\n    }\n    decodeDeltas(count) {\n        let stream = this.font.stream;\n        let i = 0;\n        let deltas = new Int16Array(count);\n        while(i < count){\n            let run = stream.readUInt8();\n            let runCount = (run & $0bb840cac04e911b$var$DELTA_RUN_COUNT_MASK) + 1;\n            if (run & $0bb840cac04e911b$var$DELTAS_ARE_ZERO) i += runCount;\n            else {\n                let fn = run & $0bb840cac04e911b$var$DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n                for(let j = 0; j < runCount && i < count; j++)deltas[i++] = fn.call(stream);\n            }\n        }\n        return deltas;\n    }\n    tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n        let normalized = this.normalizedCoords;\n        let { gvar: gvar } = this.font;\n        let factor = 1;\n        for(let i = 0; i < gvar.axisCount; i++){\n            if (tupleCoords[i] === 0) continue;\n            if (normalized[i] === 0) return 0;\n            if ((tupleIndex & $0bb840cac04e911b$var$INTERMEDIATE_TUPLE) === 0) {\n                if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) return 0;\n                factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n            } else {\n                if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) return 0;\n                else if (normalized[i] < tupleCoords[i]) factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);\n                else factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n            }\n        }\n        return factor;\n    }\n    // Interpolates points without delta values.\n    // Needed for the Ø and Q glyphs in Skia.\n    // Algorithm from Freetype.\n    interpolateMissingDeltas(points, inPoints, hasDelta) {\n        if (points.length === 0) return;\n        let point = 0;\n        while(point < points.length){\n            let firstPoint = point;\n            // find the end point of the contour\n            let endPoint = point;\n            let pt = points[endPoint];\n            while(!pt.endContour)pt = points[++endPoint];\n            // find the first point that has a delta\n            while(point <= endPoint && !hasDelta[point])point++;\n            if (point > endPoint) continue;\n            let firstDelta = point;\n            let curDelta = point;\n            point++;\n            while(point <= endPoint){\n                // find the next point with a delta, and interpolate intermediate points\n                if (hasDelta[point]) {\n                    this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n                    curDelta = point;\n                }\n                point++;\n            }\n            // shift contour if we only have a single delta\n            if (curDelta === firstDelta) this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);\n            else {\n                // otherwise, handle the remaining points at the end and beginning of the contour\n                this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n                if (firstDelta > 0) this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n            }\n            point = endPoint + 1;\n        }\n    }\n    deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n        if (p1 > p2) return;\n        let iterable = [\n            \"x\",\n            \"y\"\n        ];\n        for(let i = 0; i < iterable.length; i++){\n            let k = iterable[i];\n            if (inPoints[ref1][k] > inPoints[ref2][k]) {\n                var p = ref1;\n                ref1 = ref2;\n                ref2 = p;\n            }\n            let in1 = inPoints[ref1][k];\n            let in2 = inPoints[ref2][k];\n            let out1 = outPoints[ref1][k];\n            let out2 = outPoints[ref2][k];\n            // If the reference points have the same coordinate but different\n            // delta, inferred delta is zero.  Otherwise interpolate.\n            if (in1 !== in2 || out1 === out2) {\n                let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n                for(let p = p1; p <= p2; p++){\n                    let out = inPoints[p][k];\n                    if (out <= in1) out += out1 - in1;\n                    else if (out >= in2) out += out2 - in2;\n                    else out = out1 + (out - in1) * scale;\n                    outPoints[p][k] = out;\n                }\n            }\n        }\n    }\n    deltaShift(p1, p2, ref, inPoints, outPoints) {\n        let deltaX = outPoints[ref].x - inPoints[ref].x;\n        let deltaY = outPoints[ref].y - inPoints[ref].y;\n        if (deltaX === 0 && deltaY === 0) return;\n        for(let p = p1; p <= p2; p++)if (p !== ref) {\n            outPoints[p].x += deltaX;\n            outPoints[p].y += deltaY;\n        }\n    }\n    getAdvanceAdjustment(gid, table) {\n        let outerIndex, innerIndex;\n        if (table.advanceWidthMapping) {\n            let idx = gid;\n            if (idx >= table.advanceWidthMapping.mapCount) idx = table.advanceWidthMapping.mapCount - 1;\n            let entryFormat = table.advanceWidthMapping.entryFormat;\n            ({ outerIndex: outerIndex, innerIndex: innerIndex } = table.advanceWidthMapping.mapData[idx]);\n        } else {\n            outerIndex = 0;\n            innerIndex = gid;\n        }\n        return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n    }\n    // See pseudo code from `Font Variations Overview'\n    // in the OpenType specification.\n    getDelta(itemStore, outerIndex, innerIndex) {\n        if (outerIndex >= itemStore.itemVariationData.length) return 0;\n        let varData = itemStore.itemVariationData[outerIndex];\n        if (innerIndex >= varData.deltaSets.length) return 0;\n        let deltaSet = varData.deltaSets[innerIndex];\n        let blendVector = this.getBlendVector(itemStore, outerIndex);\n        let netAdjustment = 0;\n        for(let master = 0; master < varData.regionIndexCount; master++)netAdjustment += deltaSet.deltas[master] * blendVector[master];\n        return netAdjustment;\n    }\n    getBlendVector(itemStore, outerIndex) {\n        let varData = itemStore.itemVariationData[outerIndex];\n        if (this.blendVectors.has(varData)) return this.blendVectors.get(varData);\n        let normalizedCoords = this.normalizedCoords;\n        let blendVector = [];\n        // outer loop steps through master designs to be blended\n        for(let master = 0; master < varData.regionIndexCount; master++){\n            let scalar = 1;\n            let regionIndex = varData.regionIndexes[master];\n            let axes = itemStore.variationRegionList.variationRegions[regionIndex];\n            // inner loop steps through axes in this region\n            for(let j = 0; j < axes.length; j++){\n                let axis = axes[j];\n                let axisScalar;\n                // compute the scalar contribution of this axis\n                // ignore invalid ranges\n                if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) axisScalar = 1;\n                else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) axisScalar = 1;\n                else if (axis.peakCoord === 0) axisScalar = 1;\n                else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) axisScalar = 0;\n                else {\n                    if (normalizedCoords[j] === axis.peakCoord) axisScalar = 1;\n                    else if (normalizedCoords[j] < axis.peakCoord) axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);\n                    else axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);\n                }\n                // take product of all the axis scalars\n                scalar *= axisScalar;\n            }\n            blendVector[master] = scalar;\n        }\n        this.blendVectors.set(varData, blendVector);\n        return blendVector;\n    }\n    constructor(font, coords){\n        this.font = font;\n        this.normalizedCoords = this.normalizeCoords(coords);\n        this.blendVectors = new Map;\n    }\n}\nconst $5cc7476da92df375$var$resolved = Promise.resolve();\nclass $5cc7476da92df375$export$2e2bcd8739ae039 {\n    includeGlyph(glyph) {\n        if (typeof glyph === \"object\") glyph = glyph.id;\n        if (this.mapping[glyph] == null) {\n            this.glyphs.push(glyph);\n            this.mapping[glyph] = this.glyphs.length - 1;\n        }\n        return this.mapping[glyph];\n    }\n    constructor(font){\n        this.font = font;\n        this.glyphs = [];\n        this.mapping = {};\n        // always include the missing glyph\n        this.includeGlyph(0);\n    }\n}\n// Flags for simple glyphs\nconst $807e58506be70005$var$ON_CURVE = 1;\nconst $807e58506be70005$var$X_SHORT_VECTOR = 2;\nconst $807e58506be70005$var$Y_SHORT_VECTOR = 4;\nconst $807e58506be70005$var$REPEAT = 8;\nconst $807e58506be70005$var$SAME_X = 16;\nconst $807e58506be70005$var$SAME_Y = 32;\nclass $807e58506be70005$var$Point {\n    static size(val) {\n        return val >= 0 && val <= 255 ? 1 : 2;\n    }\n    static encode(stream, value) {\n        if (value >= 0 && value <= 255) stream.writeUInt8(value);\n        else stream.writeInt16BE(value);\n    }\n}\nlet $807e58506be70005$var$Glyf = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    numberOfContours: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMin: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    xMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    yMax: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    endPtsOfContours: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"numberOfContours\"),\n    instructions: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    flags: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 0),\n    xPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($807e58506be70005$var$Point, 0),\n    yPoints: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($807e58506be70005$var$Point, 0)\n});\nclass $807e58506be70005$export$2e2bcd8739ae039 {\n    encodeSimple(path, instructions = []) {\n        let endPtsOfContours = [];\n        let xPoints = [];\n        let yPoints = [];\n        let flags = [];\n        let same = 0;\n        let lastX = 0, lastY = 0, lastFlag = 0;\n        let pointCount = 0;\n        for(let i = 0; i < path.commands.length; i++){\n            let c = path.commands[i];\n            for(let j = 0; j < c.args.length; j += 2){\n                let x = c.args[j];\n                let y = c.args[j + 1];\n                let flag = 0;\n                // If the ending point of a quadratic curve is the midpoint\n                // between the control point and the control point of the next\n                // quadratic curve, we can omit the ending point.\n                if (c.command === \"quadraticCurveTo\" && j === 2) {\n                    let next = path.commands[i + 1];\n                    if (next && next.command === \"quadraticCurveTo\") {\n                        let midX = (lastX + next.args[0]) / 2;\n                        let midY = (lastY + next.args[1]) / 2;\n                        if (x === midX && y === midY) continue;\n                    }\n                }\n                // All points except control points are on curve.\n                if (!(c.command === \"quadraticCurveTo\" && j === 0)) flag |= $807e58506be70005$var$ON_CURVE;\n                flag = this._encodePoint(x, lastX, xPoints, flag, $807e58506be70005$var$X_SHORT_VECTOR, $807e58506be70005$var$SAME_X);\n                flag = this._encodePoint(y, lastY, yPoints, flag, $807e58506be70005$var$Y_SHORT_VECTOR, $807e58506be70005$var$SAME_Y);\n                if (flag === lastFlag && same < 255) {\n                    flags[flags.length - 1] |= $807e58506be70005$var$REPEAT;\n                    same++;\n                } else {\n                    if (same > 0) {\n                        flags.push(same);\n                        same = 0;\n                    }\n                    flags.push(flag);\n                    lastFlag = flag;\n                }\n                lastX = x;\n                lastY = y;\n                pointCount++;\n            }\n            if (c.command === \"closePath\") endPtsOfContours.push(pointCount - 1);\n        }\n        // Close the path if the last command didn't already\n        if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== \"closePath\") endPtsOfContours.push(pointCount - 1);\n        let bbox = path.bbox;\n        let glyf = {\n            numberOfContours: endPtsOfContours.length,\n            xMin: bbox.minX,\n            yMin: bbox.minY,\n            xMax: bbox.maxX,\n            yMax: bbox.maxY,\n            endPtsOfContours: endPtsOfContours,\n            instructions: instructions,\n            flags: flags,\n            xPoints: xPoints,\n            yPoints: yPoints\n        };\n        let size = $807e58506be70005$var$Glyf.size(glyf);\n        let tail = 4 - size % 4;\n        let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.EncodeStream(size + tail);\n        $807e58506be70005$var$Glyf.encode(stream, glyf);\n        // Align to 4-byte length\n        if (tail !== 0) stream.fill(0, tail);\n        return stream.buffer;\n    }\n    _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n        let diff = value - last;\n        if (value === last) flag |= sameFlag;\n        else {\n            if (-255 <= diff && diff <= 255) {\n                flag |= shortFlag;\n                if (diff < 0) diff = -diff;\n                else flag |= sameFlag;\n            }\n            points.push(diff);\n        }\n        return flag;\n    }\n}\nclass $4abbb6a5dbdc441a$export$2e2bcd8739ae039 extends (0, $5cc7476da92df375$export$2e2bcd8739ae039) {\n    _addGlyph(gid) {\n        let glyph = this.font.getGlyph(gid);\n        let glyf = glyph._decode();\n        // get the offset to the glyph from the loca table\n        let curOffset = this.font.loca.offsets[gid];\n        let nextOffset = this.font.loca.offsets[gid + 1];\n        let stream = this.font._getTableStream(\"glyf\");\n        stream.pos += curOffset;\n        let buffer = stream.readBuffer(nextOffset - curOffset);\n        // if it is a compound glyph, include its components\n        if (glyf && glyf.numberOfContours < 0) {\n            buffer = new Uint8Array(buffer);\n            let view = new DataView(buffer.buffer);\n            for (let component of glyf.components){\n                gid = this.includeGlyph(component.glyphID);\n                view.setUint16(component.pos, gid);\n            }\n        } else if (glyf && this.font._variationProcessor) buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n        this.glyf.push(buffer);\n        this.loca.offsets.push(this.offset);\n        this.hmtx.metrics.push({\n            advance: glyph.advanceWidth,\n            bearing: glyph._getMetrics().leftBearing\n        });\n        this.offset += buffer.length;\n        return this.glyf.length - 1;\n    }\n    encode() {\n        // tables required by PDF spec:\n        //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n        //\n        // additional tables required for standalone fonts:\n        //   name, cmap, OS/2, post\n        this.glyf = [];\n        this.offset = 0;\n        this.loca = {\n            offsets: [],\n            version: this.font.loca.version\n        };\n        this.hmtx = {\n            metrics: [],\n            bearings: []\n        };\n        // include all the glyphs\n        // not using a for loop because we need to support adding more\n        // glyphs to the array as we go, and CoffeeScript caches the length.\n        let i = 0;\n        while(i < this.glyphs.length)this._addGlyph(this.glyphs[i++]);\n        let maxp = (0, clone__WEBPACK_IMPORTED_MODULE_6__)(this.font.maxp);\n        maxp.numGlyphs = this.glyf.length;\n        this.loca.offsets.push(this.offset);\n        let head = (0, clone__WEBPACK_IMPORTED_MODULE_6__)(this.font.head);\n        head.indexToLocFormat = this.loca.version;\n        let hhea = (0, clone__WEBPACK_IMPORTED_MODULE_6__)(this.font.hhea);\n        hhea.numberOfMetrics = this.hmtx.metrics.length;\n        // map = []\n        // for index in [0...256]\n        //     if index < @numGlyphs\n        //         map[index] = index\n        //     else\n        //         map[index] = 0\n        //\n        // cmapTable =\n        //     version: 0\n        //     length: 262\n        //     language: 0\n        //     codeMap: map\n        //\n        // cmap =\n        //     version: 0\n        //     numSubtables: 1\n        //     tables: [\n        //         platformID: 1\n        //         encodingID: 0\n        //         table: cmapTable\n        //     ]\n        // TODO: subset prep, cvt, fpgm?\n        return (0, $816c07a04b6dba87$export$2e2bcd8739ae039).toBuffer({\n            tables: {\n                head: head,\n                hhea: hhea,\n                loca: this.loca,\n                maxp: maxp,\n                \"cvt \": this.font[\"cvt \"],\n                prep: this.font.prep,\n                glyf: this.glyf,\n                hmtx: this.hmtx,\n                fpgm: this.font.fpgm\n            }\n        });\n    }\n    constructor(font){\n        super(font);\n        this.glyphEncoder = new (0, $807e58506be70005$export$2e2bcd8739ae039);\n    }\n}\nclass $001d739428a71d5a$export$2e2bcd8739ae039 extends (0, $5cc7476da92df375$export$2e2bcd8739ae039) {\n    subsetCharstrings() {\n        this.charstrings = [];\n        let gsubrs = {};\n        for (let gid of this.glyphs){\n            this.charstrings.push(this.cff.getCharString(gid));\n            let glyph = this.font.getGlyph(gid);\n            let path = glyph.path; // this causes the glyph to be parsed\n            for(let subr in glyph._usedGsubrs)gsubrs[subr] = true;\n        }\n        this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n    }\n    subsetSubrs(subrs, used) {\n        let res = [];\n        for(let i = 0; i < subrs.length; i++){\n            let subr = subrs[i];\n            if (used[i]) {\n                this.cff.stream.pos = subr.offset;\n                res.push(this.cff.stream.readBuffer(subr.length));\n            } else res.push(new Uint8Array([\n                11\n            ])); // return\n        }\n        return res;\n    }\n    subsetFontdict(topDict) {\n        topDict.FDArray = [];\n        topDict.FDSelect = {\n            version: 0,\n            fds: []\n        };\n        let used_fds = {};\n        let used_subrs = [];\n        let fd_select = {};\n        for (let gid of this.glyphs){\n            let fd = this.cff.fdForGlyph(gid);\n            if (fd == null) continue;\n            if (!used_fds[fd]) {\n                topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n                used_subrs.push({});\n                fd_select[fd] = topDict.FDArray.length - 1;\n            }\n            used_fds[fd] = true;\n            topDict.FDSelect.fds.push(fd_select[fd]);\n            let glyph = this.font.getGlyph(gid);\n            let path = glyph.path; // this causes the glyph to be parsed\n            for(let subr in glyph._usedSubrs)used_subrs[fd_select[fd]][subr] = true;\n        }\n        for(let i = 0; i < topDict.FDArray.length; i++){\n            let dict = topDict.FDArray[i];\n            delete dict.FontName;\n            if (dict.Private && dict.Private.Subrs) {\n                dict.Private = Object.assign({}, dict.Private);\n                dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n            }\n        }\n        return;\n    }\n    createCIDFontdict(topDict) {\n        let used_subrs = {};\n        for (let gid of this.glyphs){\n            let glyph = this.font.getGlyph(gid);\n            let path = glyph.path; // this causes the glyph to be parsed\n            for(let subr in glyph._usedSubrs)used_subrs[subr] = true;\n        }\n        let privateDict = Object.assign({}, this.cff.topDict.Private);\n        if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n        topDict.FDArray = [\n            {\n                Private: privateDict\n            }\n        ];\n        return topDict.FDSelect = {\n            version: 3,\n            nRanges: 1,\n            ranges: [\n                {\n                    first: 0,\n                    fd: 0\n                }\n            ],\n            sentinel: this.charstrings.length\n        };\n    }\n    addString(string) {\n        if (!string) return null;\n        if (!this.strings) this.strings = [];\n        this.strings.push(string);\n        return (0, $229224aec43783c5$export$2e2bcd8739ae039).length + this.strings.length - 1;\n    }\n    encode() {\n        this.subsetCharstrings();\n        let charset = {\n            version: this.charstrings.length > 255 ? 2 : 1,\n            ranges: [\n                {\n                    first: 1,\n                    nLeft: this.charstrings.length - 2\n                }\n            ]\n        };\n        let topDict = Object.assign({}, this.cff.topDict);\n        topDict.Private = null;\n        topDict.charset = charset;\n        topDict.Encoding = null;\n        topDict.CharStrings = this.charstrings;\n        for (let key of [\n            \"version\",\n            \"Notice\",\n            \"Copyright\",\n            \"FullName\",\n            \"FamilyName\",\n            \"Weight\",\n            \"PostScript\",\n            \"BaseFontName\",\n            \"FontName\"\n        ])topDict[key] = this.addString(this.cff.string(topDict[key]));\n        topDict.ROS = [\n            this.addString(\"Adobe\"),\n            this.addString(\"Identity\"),\n            0\n        ];\n        topDict.CIDCount = this.charstrings.length;\n        if (this.cff.isCIDFont) this.subsetFontdict(topDict);\n        else this.createCIDFontdict(topDict);\n        let top = {\n            version: 1,\n            hdrSize: this.cff.hdrSize,\n            offSize: 4,\n            header: this.cff.header,\n            nameIndex: [\n                this.cff.postscriptName\n            ],\n            topDictIndex: [\n                topDict\n            ],\n            stringIndex: this.strings,\n            globalSubrIndex: this.gsubrs\n        };\n        return (0, $b84fd3dd9d8eddb2$export$2e2bcd8739ae039).toBuffer(top);\n    }\n    constructor(font){\n        super(font);\n        this.cff = this.font[\"CFF \"];\n        if (!this.cff) throw new Error(\"Not a CFF Font\");\n    }\n}\nclass $4c1709dee528ea76$export$2e2bcd8739ae039 {\n    static probe(buffer) {\n        let format = (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4));\n        return format === \"true\" || format === \"OTTO\" || format === String.fromCharCode(0, 1, 0, 0);\n    }\n    setDefaultLanguage(lang = null) {\n        this.defaultLanguage = lang;\n    }\n    _getTable(table) {\n        if (!(table.tag in this._tables)) try {\n            this._tables[table.tag] = this._decodeTable(table);\n        } catch (e) {\n            if ($d636bc798e7178db$export$bd5c5d8b8dcafd78) {\n                console.error(`Error decoding table ${table.tag}`);\n                console.error(e.stack);\n            }\n        }\n        return this._tables[table.tag];\n    }\n    _getTableStream(tag) {\n        let table = this.directory.tables[tag];\n        if (table) {\n            this.stream.pos = table.offset;\n            return this.stream;\n        }\n        return null;\n    }\n    _decodeDirectory() {\n        return this.directory = (0, $816c07a04b6dba87$export$2e2bcd8739ae039).decode(this.stream, {\n            _startOffset: 0\n        });\n    }\n    _decodeTable(table) {\n        let pos = this.stream.pos;\n        let stream = this._getTableStream(table.tag);\n        let result = (0, $c3395722bea751e2$export$2e2bcd8739ae039)[table.tag].decode(stream, this, table.length);\n        this.stream.pos = pos;\n        return result;\n    }\n    /**\n   * Gets a string from the font's `name` table\n   * `lang` is a BCP-47 language code.\n   * @return {string}\n   */ getName(key, lang = this.defaultLanguage || $d636bc798e7178db$export$42940898df819940) {\n        let record = this.name && this.name.records[key];\n        if (record) return record[lang] || record[this.defaultLanguage] || record[$d636bc798e7178db$export$42940898df819940] || record[\"en\"] || record[Object.keys(record)[0]] // Seriously, ANY language would be fine\n         || null;\n        return null;\n    }\n    /**\n   * The unique PostScript name for this font, e.g. \"Helvetica-Bold\"\n   * @type {string}\n   */ get postscriptName() {\n        return this.getName(\"postscriptName\");\n    }\n    /**\n   * The font's full name, e.g. \"Helvetica Bold\"\n   * @type {string}\n   */ get fullName() {\n        return this.getName(\"fullName\");\n    }\n    /**\n   * The font's family name, e.g. \"Helvetica\"\n   * @type {string}\n   */ get familyName() {\n        return this.getName(\"fontFamily\");\n    }\n    /**\n   * The font's sub-family, e.g. \"Bold\".\n   * @type {string}\n   */ get subfamilyName() {\n        return this.getName(\"fontSubfamily\");\n    }\n    /**\n   * The font's copyright information\n   * @type {string}\n   */ get copyright() {\n        return this.getName(\"copyright\");\n    }\n    /**\n   * The font's version number\n   * @type {string}\n   */ get version() {\n        return this.getName(\"version\");\n    }\n    /**\n   * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n   * @type {number}\n   */ get ascent() {\n        return this.hhea.ascent;\n    }\n    /**\n   * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n   * @type {number}\n   */ get descent() {\n        return this.hhea.descent;\n    }\n    /**\n   * The amount of space that should be included between lines\n   * @type {number}\n   */ get lineGap() {\n        return this.hhea.lineGap;\n    }\n    /**\n   * The offset from the normal underline position that should be used\n   * @type {number}\n   */ get underlinePosition() {\n        return this.post.underlinePosition;\n    }\n    /**\n   * The weight of the underline that should be used\n   * @type {number}\n   */ get underlineThickness() {\n        return this.post.underlineThickness;\n    }\n    /**\n   * If this is an italic font, the angle the cursor should be drawn at to match the font design\n   * @type {number}\n   */ get italicAngle() {\n        return this.post.italicAngle;\n    }\n    /**\n   * The height of capital letters above the baseline.\n   * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n   * @type {number}\n   */ get capHeight() {\n        let os2 = this[\"OS/2\"];\n        return os2 ? os2.capHeight : this.ascent;\n    }\n    /**\n   * The height of lower case letters in the font.\n   * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n   * @type {number}\n   */ get xHeight() {\n        let os2 = this[\"OS/2\"];\n        return os2 ? os2.xHeight : 0;\n    }\n    /**\n   * The number of glyphs in the font.\n   * @type {number}\n   */ get numGlyphs() {\n        return this.maxp.numGlyphs;\n    }\n    /**\n   * The size of the font’s internal coordinate grid\n   * @type {number}\n   */ get unitsPerEm() {\n        return this.head.unitsPerEm;\n    }\n    /**\n   * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n   * @type {BBox}\n   */ get bbox() {\n        return Object.freeze(new (0, $f34600ab9d7f70d8$export$2e2bcd8739ae039)(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n    }\n    get _cmapProcessor() {\n        return new (0, $f08dd41ef10b694c$export$2e2bcd8739ae039)(this.cmap);\n    }\n    /**\n   * An array of all of the unicode code points supported by the font.\n   * @type {number[]}\n   */ get characterSet() {\n        return this._cmapProcessor.getCharacterSet();\n    }\n    /**\n   * Returns whether there is glyph in the font for the given unicode code point.\n   *\n   * @param {number} codePoint\n   * @return {boolean}\n   */ hasGlyphForCodePoint(codePoint) {\n        return !!this._cmapProcessor.lookup(codePoint);\n    }\n    /**\n   * Maps a single unicode code point to a Glyph object.\n   * Does not perform any advanced substitutions (there is no context to do so).\n   *\n   * @param {number} codePoint\n   * @return {Glyph}\n   */ glyphForCodePoint(codePoint) {\n        return this.getGlyph(this._cmapProcessor.lookup(codePoint), [\n            codePoint\n        ]);\n    }\n    /**\n   * Returns an array of Glyph objects for the given string.\n   * This is only a one-to-one mapping from characters to glyphs.\n   * For most uses, you should use font.layout (described below), which\n   * provides a much more advanced mapping supporting AAT and OpenType shaping.\n   *\n   * @param {string} string\n   * @return {Glyph[]}\n   */ glyphsForString(string) {\n        let glyphs = [];\n        let len = string.length;\n        let idx = 0;\n        let last = -1;\n        let state = -1;\n        while(idx <= len){\n            let code = 0;\n            let nextState = 0;\n            if (idx < len) {\n                // Decode the next codepoint from UTF 16\n                code = string.charCodeAt(idx++);\n                if (0xd800 <= code && code <= 0xdbff && idx < len) {\n                    let next = string.charCodeAt(idx);\n                    if (0xdc00 <= next && next <= 0xdfff) {\n                        idx++;\n                        code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n                    }\n                }\n                // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n                nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n            } else idx++;\n            if (state === 0 && nextState === 1) glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [\n                last,\n                code\n            ]));\n            else if (state === 0 && nextState === 0) glyphs.push(this.glyphForCodePoint(last));\n            last = code;\n            state = nextState;\n        }\n        return glyphs;\n    }\n    get _layoutEngine() {\n        return new (0, $4c0a7fa5df7a9ab1$export$2e2bcd8739ae039)(this);\n    }\n    /**\n   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n   *\n   * @param {string} string\n   * @param {string[]} [userFeatures]\n   * @param {string} [script]\n   * @param {string} [language]\n   * @param {string} [direction]\n   * @return {GlyphRun}\n   */ layout(string, userFeatures, script, language, direction) {\n        return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n    }\n    /**\n   * Returns an array of strings that map to the given glyph id.\n   * @param {number} gid - glyph id\n   */ stringsForGlyph(gid) {\n        return this._layoutEngine.stringsForGlyph(gid);\n    }\n    /**\n   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n   * (or mapped AAT tags) supported by the font.\n   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n   *\n   * @type {string[]}\n   */ get availableFeatures() {\n        return this._layoutEngine.getAvailableFeatures();\n    }\n    getAvailableFeatures(script, language) {\n        return this._layoutEngine.getAvailableFeatures(script, language);\n    }\n    _getBaseGlyph(glyph, characters = []) {\n        if (!this._glyphs[glyph]) {\n            if (this.directory.tables.glyf) this._glyphs[glyph] = new (0, $69aac16029968692$export$2e2bcd8739ae039)(glyph, characters, this);\n            else if (this.directory.tables[\"CFF \"] || this.directory.tables.CFF2) this._glyphs[glyph] = new (0, $62cc5109c6101893$export$2e2bcd8739ae039)(glyph, characters, this);\n        }\n        return this._glyphs[glyph] || null;\n    }\n    /**\n   * Returns a glyph object for the given glyph id.\n   * You can pass the array of code points this glyph represents for\n   * your use later, and it will be stored in the glyph object.\n   *\n   * @param {number} glyph\n   * @param {number[]} characters\n   * @return {Glyph}\n   */ getGlyph(glyph, characters = []) {\n        if (!this._glyphs[glyph]) {\n            if (this.directory.tables.sbix) this._glyphs[glyph] = new (0, $25d8f049c222084c$export$2e2bcd8739ae039)(glyph, characters, this);\n            else if (this.directory.tables.COLR && this.directory.tables.CPAL) this._glyphs[glyph] = new (0, $0d411f0165859681$export$2e2bcd8739ae039)(glyph, characters, this);\n            else this._getBaseGlyph(glyph, characters);\n        }\n        return this._glyphs[glyph] || null;\n    }\n    /**\n   * Returns a Subset for this font.\n   * @return {Subset}\n   */ createSubset() {\n        if (this.directory.tables[\"CFF \"]) return new (0, $001d739428a71d5a$export$2e2bcd8739ae039)(this);\n        return new (0, $4abbb6a5dbdc441a$export$2e2bcd8739ae039)(this);\n    }\n    /**\n   * Returns an object describing the available variation axes\n   * that this font supports. Keys are setting tags, and values\n   * contain the axis name, range, and default value.\n   *\n   * @type {object}\n   */ get variationAxes() {\n        let res = {};\n        if (!this.fvar) return res;\n        for (let axis of this.fvar.axis)res[axis.axisTag.trim()] = {\n            name: axis.name.en,\n            min: axis.minValue,\n            default: axis.defaultValue,\n            max: axis.maxValue\n        };\n        return res;\n    }\n    /**\n   * Returns an object describing the named variation instances\n   * that the font designer has specified. Keys are variation names\n   * and values are the variation settings for this instance.\n   *\n   * @type {object}\n   */ get namedVariations() {\n        let res = {};\n        if (!this.fvar) return res;\n        for (let instance of this.fvar.instance){\n            let settings = {};\n            for(let i = 0; i < this.fvar.axis.length; i++){\n                let axis = this.fvar.axis[i];\n                settings[axis.axisTag.trim()] = instance.coord[i];\n            }\n            res[instance.name.en] = settings;\n        }\n        return res;\n    }\n    /**\n   * Returns a new font with the given variation settings applied.\n   * Settings can either be an instance name, or an object containing\n   * variation tags as specified by the `variationAxes` property.\n   *\n   * @param {object} settings\n   * @return {TTFFont}\n   */ getVariation(settings) {\n        if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) throw new Error(\"Variations require a font with the fvar, gvar and glyf, or CFF2 tables.\");\n        if (typeof settings === \"string\") settings = this.namedVariations[settings];\n        if (typeof settings !== \"object\") throw new Error(\"Variation settings must be either a variation name or settings object.\");\n        // normalize the coordinates\n        let coords = this.fvar.axis.map((axis, i)=>{\n            let axisTag = axis.axisTag.trim();\n            if (axisTag in settings) return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));\n            else return axis.defaultValue;\n        });\n        let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer);\n        stream.pos = this._directoryPos;\n        let font = new $4c1709dee528ea76$export$2e2bcd8739ae039(stream, coords);\n        font._tables = this._tables;\n        return font;\n    }\n    get _variationProcessor() {\n        if (!this.fvar) return null;\n        let variationCoords = this.variationCoords;\n        // Ignore if no variation coords and not CFF2\n        if (!variationCoords && !this.CFF2) return null;\n        if (!variationCoords) variationCoords = this.fvar.axis.map((axis)=>axis.defaultValue);\n        return new (0, $0bb840cac04e911b$export$2e2bcd8739ae039)(this, variationCoords);\n    }\n    // Standardized format plugin API\n    getFont(name) {\n        return this.getVariation(name);\n    }\n    constructor(stream, variationCoords = null){\n        (0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", \"TTF\");\n        this.defaultLanguage = null;\n        this.stream = stream;\n        this.variationCoords = variationCoords;\n        this._directoryPos = this.stream.pos;\n        this._tables = {};\n        this._glyphs = {};\n        this._decodeDirectory();\n        // define properties for each table to lazily parse\n        for(let tag in this.directory.tables){\n            let table = this.directory.tables[tag];\n            if ((0, $c3395722bea751e2$export$2e2bcd8739ae039)[tag] && table.length > 0) Object.defineProperty(this, tag, {\n                get: this._getTable.bind(this, table)\n            });\n        }\n    }\n}\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"bbox\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_cmapProcessor\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"characterSet\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_layoutEngine\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"variationAxes\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"namedVariations\", null);\n(0, _swc_helpers_src_ts_decorate_mjs__WEBPACK_IMPORTED_MODULE_9__.__decorate)([\n    (0, $e71565f2ce09cb6b$export$69a3209f1a06c04d)\n], $4c1709dee528ea76$export$2e2bcd8739ae039.prototype, \"_variationProcessor\", null);\nlet $c1726355ecc5b889$var$WOFFDirectoryEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    offset: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"void\", {\n        type: \"global\"\n    }),\n    compLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    origChecksum: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $c1726355ecc5b889$var$WOFFDirectory = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    flavor: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    totalSfntSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    metaOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaOrigLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($c1726355ecc5b889$var$WOFFDirectoryEntry, \"numTables\")\n});\n$c1726355ecc5b889$var$WOFFDirectory.process = function() {\n    let tables1 = {};\n    for (let table of this.tables)tables1[table.tag] = table;\n    this.tables = tables1;\n};\nvar $c1726355ecc5b889$export$2e2bcd8739ae039 = $c1726355ecc5b889$var$WOFFDirectory;\nclass $760785214b9fc52c$export$2e2bcd8739ae039 extends (0, $4c1709dee528ea76$export$2e2bcd8739ae039) {\n    static probe(buffer) {\n        return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === \"wOFF\";\n    }\n    _decodeDirectory() {\n        this.directory = (0, $c1726355ecc5b889$export$2e2bcd8739ae039).decode(this.stream, {\n            _startOffset: 0\n        });\n    }\n    _getTableStream(tag) {\n        let table = this.directory.tables[tag];\n        if (table) {\n            this.stream.pos = table.offset;\n            if (table.compLength < table.length) {\n                this.stream.pos += 2; // skip deflate header\n                let outBuffer = new Uint8Array(table.length);\n                let buf = (0, tiny_inflate__WEBPACK_IMPORTED_MODULE_7__)(this.stream.readBuffer(table.compLength - 2), outBuffer);\n                return new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(buf);\n            } else return this.stream;\n        }\n        return null;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", \"WOFF\");\n    }\n}\nclass $8046190c9f1ad19e$export$2e2bcd8739ae039 extends (0, $69aac16029968692$export$2e2bcd8739ae039) {\n    _decode() {\n        // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.\n        return this._font._transformedGlyphs[this.id];\n    }\n    _getCBox() {\n        return this.path.bbox;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", \"WOFF2\");\n    }\n}\nconst $c28ec7bbb3b8de3a$var$Base128 = {\n    decode (stream) {\n        let result = 0;\n        let iterable = [\n            0,\n            1,\n            2,\n            3,\n            4\n        ];\n        for(let j = 0; j < iterable.length; j++){\n            let i = iterable[j];\n            let code = stream.readUInt8();\n            // If any of the top seven bits are set then we're about to overflow.\n            if (result & 0xe0000000) throw new Error(\"Overflow\");\n            result = result << 7 | code & 0x7f;\n            if ((code & 0x80) === 0) return result;\n        }\n        throw new Error(\"Bad base 128 number\");\n    }\n};\nlet $c28ec7bbb3b8de3a$var$knownTags = [\n    \"cmap\",\n    \"head\",\n    \"hhea\",\n    \"hmtx\",\n    \"maxp\",\n    \"name\",\n    \"OS/2\",\n    \"post\",\n    \"cvt \",\n    \"fpgm\",\n    \"glyf\",\n    \"loca\",\n    \"prep\",\n    \"CFF \",\n    \"VORG\",\n    \"EBDT\",\n    \"EBLC\",\n    \"gasp\",\n    \"hdmx\",\n    \"kern\",\n    \"LTSH\",\n    \"PCLT\",\n    \"VDMX\",\n    \"vhea\",\n    \"vmtx\",\n    \"BASE\",\n    \"GDEF\",\n    \"GPOS\",\n    \"GSUB\",\n    \"EBSC\",\n    \"JSTF\",\n    \"MATH\",\n    \"CBDT\",\n    \"CBLC\",\n    \"COLR\",\n    \"CPAL\",\n    \"SVG \",\n    \"sbix\",\n    \"acnt\",\n    \"avar\",\n    \"bdat\",\n    \"bloc\",\n    \"bsln\",\n    \"cvar\",\n    \"fdsc\",\n    \"feat\",\n    \"fmtx\",\n    \"fvar\",\n    \"gvar\",\n    \"hsty\",\n    \"just\",\n    \"lcar\",\n    \"mort\",\n    \"morx\",\n    \"opbd\",\n    \"prop\",\n    \"trak\",\n    \"Zapf\",\n    \"Silf\",\n    \"Glat\",\n    \"Gloc\",\n    \"Feat\",\n    \"Sill\"\n];\nlet $c28ec7bbb3b8de3a$var$WOFF2DirectoryEntry = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    flags: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    customTag: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional(new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4), (t)=>(t.flags & 0x3f) === 0x3f),\n    tag: (t)=>t.customTag || $c28ec7bbb3b8de3a$var$knownTags[t.flags & 0x3f],\n    length: $c28ec7bbb3b8de3a$var$Base128,\n    transformVersion: (t)=>t.flags >>> 6 & 0x03,\n    transformed: (t)=>t.tag === \"glyf\" || t.tag === \"loca\" ? t.transformVersion === 0 : t.transformVersion !== 0,\n    transformLength: new restructure__WEBPACK_IMPORTED_MODULE_0__.Optional($c28ec7bbb3b8de3a$var$Base128, (t)=>t.transformed)\n});\nlet $c28ec7bbb3b8de3a$var$WOFF2Directory = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    tag: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    flavor: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numTables: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16),\n    totalSfntSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    totalCompressedSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    majorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    minorVersion: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    metaOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    metaOrigLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    privLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    tables: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($c28ec7bbb3b8de3a$var$WOFF2DirectoryEntry, \"numTables\")\n});\n$c28ec7bbb3b8de3a$var$WOFF2Directory.process = function() {\n    let tables = {};\n    for(let i = 0; i < this.tables.length; i++){\n        let table = this.tables[i];\n        tables[table.tag] = table;\n    }\n    return this.tables = tables;\n};\nvar $c28ec7bbb3b8de3a$export$2e2bcd8739ae039 = $c28ec7bbb3b8de3a$var$WOFF2Directory;\nclass $21ee218f84ac7f32$export$2e2bcd8739ae039 extends (0, $4c1709dee528ea76$export$2e2bcd8739ae039) {\n    static probe(buffer) {\n        return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === \"wOF2\";\n    }\n    _decodeDirectory() {\n        this.directory = (0, $c28ec7bbb3b8de3a$export$2e2bcd8739ae039).decode(this.stream);\n        this._dataPos = this.stream.pos;\n    }\n    _decompress() {\n        // decompress data and setup table offsets if we haven't already\n        if (!this._decompressed) {\n            this.stream.pos = this._dataPos;\n            let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);\n            let decompressedSize = 0;\n            for(let tag in this.directory.tables){\n                let entry = this.directory.tables[tag];\n                entry.offset = decompressedSize;\n                decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;\n            }\n            let decompressed = (0, brotli_decompress_js__WEBPACK_IMPORTED_MODULE_8__)(buffer, decompressedSize);\n            if (!decompressed) throw new Error(\"Error decoding compressed data in WOFF2\");\n            this.stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(decompressed);\n            this._decompressed = true;\n        }\n    }\n    _decodeTable(table) {\n        this._decompress();\n        return super._decodeTable(table);\n    }\n    // Override this method to get a glyph and return our\n    // custom subclass if there is a glyf table.\n    _getBaseGlyph(glyph, characters = []) {\n        if (!this._glyphs[glyph]) {\n            if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {\n                if (!this._transformedGlyphs) this._transformGlyfTable();\n                return this._glyphs[glyph] = new (0, $8046190c9f1ad19e$export$2e2bcd8739ae039)(glyph, characters, this);\n            } else return super._getBaseGlyph(glyph, characters);\n        }\n    }\n    _transformGlyfTable() {\n        this._decompress();\n        this.stream.pos = this.directory.tables.glyf.offset;\n        let table = $21ee218f84ac7f32$var$GlyfTable.decode(this.stream);\n        let glyphs = [];\n        for(let index = 0; index < table.numGlyphs; index++){\n            let glyph = {};\n            let nContours = table.nContours.readInt16BE();\n            glyph.numberOfContours = nContours;\n            if (nContours > 0) {\n                let nPoints = [];\n                let totalPoints = 0;\n                for(let i = 0; i < nContours; i++){\n                    let r1 = $21ee218f84ac7f32$var$read255UInt16(table.nPoints);\n                    totalPoints += r1;\n                    nPoints.push(totalPoints);\n                }\n                glyph.points = $21ee218f84ac7f32$var$decodeTriplet(table.flags, table.glyphs, totalPoints);\n                for(let i1 = 0; i1 < nContours; i1++)glyph.points[nPoints[i1] - 1].endContour = true;\n                var instructionSize = $21ee218f84ac7f32$var$read255UInt16(table.glyphs);\n            } else if (nContours < 0) {\n                let haveInstructions = (0, $69aac16029968692$export$2e2bcd8739ae039).prototype._decodeComposite.call({\n                    _font: this\n                }, glyph, table.composites);\n                if (haveInstructions) var instructionSize = $21ee218f84ac7f32$var$read255UInt16(table.glyphs);\n            }\n            glyphs.push(glyph);\n        }\n        this._transformedGlyphs = glyphs;\n    }\n    constructor(...args){\n        super(...args);\n        (0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", \"WOFF2\");\n    }\n}\n// Special class that accepts a length and returns a sub-stream for that data\nclass $21ee218f84ac7f32$var$Substream {\n    decode(stream, parent) {\n        return new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this._buf.decode(stream, parent));\n    }\n    constructor(length){\n        this.length = length;\n        this._buf = new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(length);\n    }\n}\n// This struct represents the entire glyf table\nlet $21ee218f84ac7f32$var$GlyfTable = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    version: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    numGlyphs: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    indexFormat: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nContourStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nPointsStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    flagStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    glyphStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    compositeStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    bboxStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    instructionStreamSize: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    nContours: new $21ee218f84ac7f32$var$Substream(\"nContourStreamSize\"),\n    nPoints: new $21ee218f84ac7f32$var$Substream(\"nPointsStreamSize\"),\n    flags: new $21ee218f84ac7f32$var$Substream(\"flagStreamSize\"),\n    glyphs: new $21ee218f84ac7f32$var$Substream(\"glyphStreamSize\"),\n    composites: new $21ee218f84ac7f32$var$Substream(\"compositeStreamSize\"),\n    bboxes: new $21ee218f84ac7f32$var$Substream(\"bboxStreamSize\"),\n    instructions: new $21ee218f84ac7f32$var$Substream(\"instructionStreamSize\")\n});\nconst $21ee218f84ac7f32$var$WORD_CODE = 253;\nconst $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE2 = 254;\nconst $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE1 = 255;\nconst $21ee218f84ac7f32$var$LOWEST_U_CODE = 253;\nfunction $21ee218f84ac7f32$var$read255UInt16(stream) {\n    let code = stream.readUInt8();\n    if (code === $21ee218f84ac7f32$var$WORD_CODE) return stream.readUInt16BE();\n    if (code === $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE1) return stream.readUInt8() + $21ee218f84ac7f32$var$LOWEST_U_CODE;\n    if (code === $21ee218f84ac7f32$var$ONE_MORE_BYTE_CODE2) return stream.readUInt8() + $21ee218f84ac7f32$var$LOWEST_U_CODE * 2;\n    return code;\n}\nfunction $21ee218f84ac7f32$var$withSign(flag, baseval) {\n    return flag & 1 ? baseval : -baseval;\n}\nfunction $21ee218f84ac7f32$var$decodeTriplet(flags, glyphs, nPoints) {\n    let y;\n    let x = y = 0;\n    let res = [];\n    for(let i = 0; i < nPoints; i++){\n        let dx = 0, dy = 0;\n        let flag = flags.readUInt8();\n        let onCurve = !(flag >> 7);\n        flag &= 0x7f;\n        if (flag < 10) {\n            dx = 0;\n            dy = $21ee218f84ac7f32$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());\n        } else if (flag < 20) {\n            dx = $21ee218f84ac7f32$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());\n            dy = 0;\n        } else if (flag < 84) {\n            var b0 = flag - 20;\n            var b1 = glyphs.readUInt8();\n            dx = $21ee218f84ac7f32$var$withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));\n            dy = $21ee218f84ac7f32$var$withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));\n        } else if (flag < 120) {\n            var b0 = flag - 84;\n            dx = $21ee218f84ac7f32$var$withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());\n            dy = $21ee218f84ac7f32$var$withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());\n        } else if (flag < 124) {\n            var b1 = glyphs.readUInt8();\n            let b2 = glyphs.readUInt8();\n            dx = $21ee218f84ac7f32$var$withSign(flag, (b1 << 4) + (b2 >> 4));\n            dy = $21ee218f84ac7f32$var$withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());\n        } else {\n            dx = $21ee218f84ac7f32$var$withSign(flag, glyphs.readUInt16BE());\n            dy = $21ee218f84ac7f32$var$withSign(flag >> 1, glyphs.readUInt16BE());\n        }\n        x += dx;\n        y += dy;\n        res.push(new (0, $69aac16029968692$export$baf26146a414f24a)(onCurve, false, x, y));\n    }\n    return res;\n}\nlet $cd5853a56c68fec7$var$TTCHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.VersionedStruct(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, {\n    0x00010000: {\n        numFonts: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"numFonts\")\n    },\n    0x00020000: {\n        numFonts: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        offsets: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, \"numFonts\"),\n        dsigTag: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        dsigLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n        dsigOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n    }\n});\nclass $cd5853a56c68fec7$export$2e2bcd8739ae039 {\n    static probe(buffer) {\n        return (0, $12727730ddfc8bfe$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === \"ttcf\";\n    }\n    getFont(name) {\n        for (let offset of this.header.offsets){\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer);\n            stream.pos = offset;\n            let font = new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream);\n            if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i)=>name[i] === v)) return font;\n        }\n        return null;\n    }\n    get fonts() {\n        let fonts = [];\n        for (let offset of this.header.offsets){\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer);\n            stream.pos = offset;\n            fonts.push(new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream));\n        }\n        return fonts;\n    }\n    constructor(stream){\n        (0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", \"TTC\");\n        this.stream = stream;\n        if (stream.readString(4) !== \"ttcf\") throw new Error(\"Not a TrueType collection\");\n        this.header = $cd5853a56c68fec7$var$TTCHeader.decode(stream);\n    }\n}\nlet $05f49f930186144e$var$DFontName = new restructure__WEBPACK_IMPORTED_MODULE_0__.String(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8);\nlet $05f49f930186144e$var$DFontData = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    len: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    buf: new restructure__WEBPACK_IMPORTED_MODULE_0__.Buffer(\"len\")\n});\nlet $05f49f930186144e$var$Ref = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    id: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    nameOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.int16,\n    attr: restructure__WEBPACK_IMPORTED_MODULE_0__.uint8,\n    dataOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint24,\n    handle: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nlet $05f49f930186144e$var$Type = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    name: new restructure__WEBPACK_IMPORTED_MODULE_0__.String(4),\n    maxTypeIndex: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    refList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($05f49f930186144e$var$Ref, (t)=>t.maxTypeIndex + 1), {\n        type: \"parent\"\n    })\n});\nlet $05f49f930186144e$var$TypeList = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    length: restructure__WEBPACK_IMPORTED_MODULE_0__.uint16,\n    types: new restructure__WEBPACK_IMPORTED_MODULE_0__.Array($05f49f930186144e$var$Type, (t)=>t.length + 1)\n});\nlet $05f49f930186144e$var$DFontMap = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    reserved: new restructure__WEBPACK_IMPORTED_MODULE_0__.Reserved(restructure__WEBPACK_IMPORTED_MODULE_0__.uint8, 24),\n    typeList: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, $05f49f930186144e$var$TypeList),\n    nameListOffset: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint16, \"void\")\n});\nlet $05f49f930186144e$var$DFontHeader = new restructure__WEBPACK_IMPORTED_MODULE_0__.Struct({\n    dataOffset: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    map: new restructure__WEBPACK_IMPORTED_MODULE_0__.Pointer(restructure__WEBPACK_IMPORTED_MODULE_0__.uint32, $05f49f930186144e$var$DFontMap),\n    dataLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32,\n    mapLength: restructure__WEBPACK_IMPORTED_MODULE_0__.uint32\n});\nclass $05f49f930186144e$export$2e2bcd8739ae039 {\n    static probe(buffer) {\n        let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(buffer);\n        try {\n            var header = $05f49f930186144e$var$DFontHeader.decode(stream);\n        } catch (e) {\n            return false;\n        }\n        for (let type of header.map.typeList.types){\n            if (type.name === \"sfnt\") return true;\n        }\n        return false;\n    }\n    getFont(name) {\n        if (!this.sfnt) return null;\n        for (let ref of this.sfnt.refList){\n            let pos = this.header.dataOffset + ref.dataOffset + 4;\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer.slice(pos));\n            let font = new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream);\n            if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i)=>name[i] === v)) return font;\n        }\n        return null;\n    }\n    get fonts() {\n        let fonts = [];\n        for (let ref of this.sfnt.refList){\n            let pos = this.header.dataOffset + ref.dataOffset + 4;\n            let stream = new restructure__WEBPACK_IMPORTED_MODULE_0__.DecodeStream(this.stream.buffer.slice(pos));\n            fonts.push(new (0, $4c1709dee528ea76$export$2e2bcd8739ae039)(stream));\n        }\n        return fonts;\n    }\n    constructor(stream){\n        (0, _swc_helpers_src_define_property_mjs__WEBPACK_IMPORTED_MODULE_10__._)(this, \"type\", \"DFont\");\n        this.stream = stream;\n        this.header = $05f49f930186144e$var$DFontHeader.decode(this.stream);\n        for (let type of this.header.map.typeList.types){\n            for (let ref of type.refList)if (ref.nameOffset >= 0) {\n                this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n                ref.name = $05f49f930186144e$var$DFontName.decode(this.stream);\n            } else ref.name = null;\n            if (type.name === \"sfnt\") this.sfnt = type;\n        }\n    }\n}\n// Register font formats\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $4c1709dee528ea76$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $760785214b9fc52c$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $21ee218f84ac7f32$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $cd5853a56c68fec7$export$2e2bcd8739ae039));\n(0, $d636bc798e7178db$export$36b2f24e97d43be)((0, $05f49f930186144e$export$2e2bcd8739ae039));\n //# sourceMappingURL=module.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZm9udGtpdC9kaXN0L21vZHVsZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXl3QjtBQUM5dUI7QUFDaUU7QUFDUjtBQUNqQztBQUNvSjtBQUN6SjtBQUNqQjtBQUNJO0FBQ2E7QUFDZTtBQUU3RCxTQUFTdUUsZUFBZUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUNoQ0MsT0FBT0MsY0FBYyxDQUFDTCxHQUFHQyxHQUFHO1FBQUNLLEtBQUtKO1FBQUdLLEtBQUtKO1FBQUdLLFlBQVk7UUFBTUMsY0FBYztJQUFJO0FBQ25GO0FBQ0EsU0FBU0MsdUJBQXVCQyxDQUFDO0lBQy9CLE9BQU9BLEtBQUtBLEVBQUVDLFVBQVUsR0FBR0QsRUFBRUUsT0FBTyxHQUFHRjtBQUN6QztBQUNBLElBQUlHLDRCQUE0QixDQUFDO0FBRWpDZixlQUFlZSwyQkFBMkIsYUFBYSxJQUFNQztBQUM3RGhCLGVBQWVlLDJCQUEyQixrQkFBa0IsSUFBTUU7QUFDbEVqQixlQUFlZSwyQkFBMkIsVUFBVSxJQUFNRztBQUMxRGxCLGVBQWVlLDJCQUEyQixtQkFBbUIsSUFBTUk7QUFDbkVuQixlQUFlZSwyQkFBMkIsc0JBQXNCLElBQU1LO0FBRXRFLElBQUlKLDRDQUE0QztBQUNoRCxJQUFJSyxnQ0FBZ0MsRUFBRTtBQUN0QyxTQUFTSix5Q0FBeUNLLE1BQU07SUFDcERELDhCQUE4QkUsSUFBSSxDQUFDRDtBQUN2QztBQUNBLFNBQVNKLDBDQUEwQ00sTUFBTSxFQUFFQyxjQUFjO0lBQ3JFLElBQUksSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCw4QkFBOEJNLE1BQU0sRUFBRUQsSUFBSTtRQUN6RCxJQUFJSixTQUFTRCw2QkFBNkIsQ0FBQ0ssRUFBRTtRQUM3QyxJQUFJSixPQUFPTSxLQUFLLENBQUNKLFNBQVM7WUFDdEIsSUFBSUssT0FBTyxJQUFJUCxPQUFPLElBQUssSUFBRzVGLHFEQUFrQixFQUFHOEY7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SUFBSTtRQUNKLElBQUk7UUFDSixJQUFJO1FBQ0osR0FBRztRQUNILElBQUk7UUFDSixJQUFJO1FBQ0osS0FBSztRQUNMLEdBQUc7UUFDSCxJQUFJO1FBQ0osSUFBSTtRQUNKLEtBQUs7UUFDTCxHQUFHO1FBQ0gsSUFBSTtRQUNKLElBQUk7UUFDSixLQUFLO1FBQ0wsR0FBRztRQUNILElBQUk7UUFDSixJQUFJO1FBQ0osS0FBSztRQUNMLEdBQUc7UUFDSCxJQUFJO1FBQ0osSUFBSTtRQUNKLEtBQUs7UUFDTCxJQUFJO1FBQ0osSUFBSTtRQUNKLElBQUk7UUFDSixLQUFLO1FBQ0wsSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJO1FBQ0osS0FBSztRQUNMLElBQUk7UUFDSixJQUFJO1FBQ0osSUFBSTtRQUNKLEtBQUs7UUFDTCxJQUFJO1FBQ0osSUFBSTtRQUNKLElBQUk7UUFDSixLQUFLO1FBQ0wsSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJO1FBQ0osS0FBSztRQUNMLElBQUk7UUFDSixJQUFJO1FBQ0osSUFBSTtRQUNKLEtBQUs7UUFDTCxJQUFJO1FBQ0osSUFBSTtRQUNKLElBQUk7UUFDSixLQUFLO1FBQ0wsSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJO1FBQ0osS0FBSztRQUNMLElBQUk7UUFDSixJQUFJO1FBQ0osSUFBSTtRQUNKLEtBQUs7UUFDTCxJQUFJO1FBQ0osSUFBSTtRQUNKLElBQUk7UUFDSixLQUFLO1FBQ0wsSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJO1FBQ0osS0FBSztRQUNMLElBQUk7UUFDSixJQUFJO1FBQ0osSUFBSTtRQUNKLEtBQUs7UUFDTCxJQUFJO1FBQ0osSUFBSTtRQUNKLElBQUk7UUFDSixLQUFLO1FBQ0wsSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJO1FBQ0osS0FBSztRQUNMLElBQUk7UUFDSixJQUFJO1FBQ0osSUFBSTtRQUNKLEtBQUs7UUFDTCxJQUFJO1FBQ0osSUFBSTtRQUNKLElBQUk7UUFDSixLQUFLO1FBQ0wsSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJO1FBQ0osS0FBSztRQUNMLElBQUk7UUFDSixJQUFJO1FBQ0osSUFBSTtRQUNKLEtBQUs7UUFDTCxJQUFJO1FBQ0osSUFBSTtRQUNKLElBQUk7UUFDSixLQUFLO1FBQ0wsSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJO0lBQ1I7SUFDQSxtQkFBbUI7SUFDbkIsRUFBRTtJQUNGO1FBQ0ksUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBQ1IsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FB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SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFHRCxJQUFJQyw0Q0FBNEM7SUFDNUM7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRCxJQUFJQyw0Q0FBNEM7SUFDNUM7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFHRCxJQUFJQyw0Q0FBNEM7SUFDNUM7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNELElBQUlDLDRDQUE0QztJQUM1QztJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsSUFBSUMsNENBQTRDO0lBQzVDO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7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Q0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lB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Q2xFLEtBQUssSUFBSWhJLFFBQVEsSUFBSSxDQUFDMEksTUFBTSxDQUFDbUQsR0FBRyxDQUFDa3pFLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDO1lBQzVDLEtBQUssSUFBSXBLLE9BQU96MEUsS0FBSzIrRSxPQUFPLENBQUMsSUFBSWxLLElBQUk0SixVQUFVLElBQUksR0FBRztnQkFDbEQsSUFBSSxDQUFDcjJFLE1BQU0sQ0FBQ2dGLEdBQUcsR0FBR3luRSxJQUFJNEosVUFBVSxHQUFHLElBQUksQ0FBQzMxRSxNQUFNLENBQUNtRCxHQUFHLENBQUNtekUsY0FBYztnQkFDakV2SyxJQUFJMWdELElBQUksR0FBR21xRCxnQ0FBZ0N0M0UsTUFBTSxDQUFDLElBQUksQ0FBQ29CLE1BQU07WUFDakUsT0FBT3lzRSxJQUFJMWdELElBQUksR0FBRztZQUNsQixJQUFJL3pCLEtBQUsrekIsSUFBSSxLQUFLLFFBQVEsSUFBSSxDQUFDc3JELElBQUksR0FBR3IvRTtRQUMxQztJQUNKO0FBQ0o7QUFLQSx3QkFBd0I7QUFDdkIsSUFBRzFELHdDQUF1QyxFQUFJLElBQUc4N0Usd0NBQXVDO0FBQ3hGLElBQUc5N0Usd0NBQXVDLEVBQUksSUFBR20rRSx3Q0FBdUM7QUFDeEYsSUFBR24rRSx3Q0FBdUMsRUFBSSxJQUFHay9FLHdDQUF1QztBQUN4RixJQUFHbC9FLHdDQUF1QyxFQUFJLElBQUd5aEYsd0NBQXVDO0FBQ3hGLElBQUd6aEYsd0NBQXVDLEVBQUksSUFBRzhpRix3Q0FBdUM7QUFHaVUsQ0FDMVosbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZvbnRraXQvZGlzdC9tb2R1bGUubWpzPzU2NWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEZWNvZGVTdHJlYW0gYXMgJDUyWklmJERlY29kZVN0cmVhbSwgU3RydWN0IGFzICQ1MlpJZiRTdHJ1Y3QsIFN0cmluZyBhcyAkNTJaSWYkU3RyaW5nLCB1aW50MzIgYXMgJDUyWklmJHVpbnQzMiwgUG9pbnRlciBhcyAkNTJaSWYkUG9pbnRlciwgdWludDE2IGFzICQ1MlpJZiR1aW50MTYsIEFycmF5IGFzICQ1MlpJZiRBcnJheSwgVm9pZFBvaW50ZXIgYXMgJDUyWklmJFZvaWRQb2ludGVyLCBpbnQxNiBhcyAkNTJaSWYkaW50MTYsIHVpbnQyNCBhcyAkNTJaSWYkdWludDI0LCB1aW50OCBhcyAkNTJaSWYkdWludDgsIFZlcnNpb25lZFN0cnVjdCBhcyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0LCBMYXp5QXJyYXkgYXMgJDUyWklmJExhenlBcnJheSwgUmVzZXJ2ZWQgYXMgJDUyWklmJFJlc2VydmVkLCBpbnQzMiBhcyAkNTJaSWYkaW50MzIsIEJpdGZpZWxkIGFzICQ1MlpJZiRCaXRmaWVsZCwgZml4ZWQzMiBhcyAkNTJaSWYkZml4ZWQzMiwgQnVmZmVyIGFzICQ1MlpJZiRCdWZmZXIsIE51bWJlciBhcyAkNTJaSWYkTnVtYmVyLCByZXNvbHZlTGVuZ3RoIGFzICQ1MlpJZiRyZXNvbHZlTGVuZ3RoLCBmaXhlZDE2IGFzICQ1MlpJZiRmaXhlZDE2LCBQcm9wZXJ0eURlc2NyaXB0b3IgYXMgJDUyWklmJFByb3BlcnR5RGVzY3JpcHRvciwgRml4ZWQgYXMgJDUyWklmJEZpeGVkLCBpbnQ4IGFzICQ1MlpJZiRpbnQ4LCBPcHRpb25hbCBhcyAkNTJaSWYkT3B0aW9uYWwsIEVuY29kZVN0cmVhbSBhcyAkNTJaSWYkRW5jb2RlU3RyZWFtfSBmcm9tIFwicmVzdHJ1Y3R1cmVcIjtcbmltcG9ydCAkNTJaSWYkZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgJDUyWklmJHN3Y2hlbHBlcnNzcmNfZGVmaW5lX3Byb3BlcnR5bWpzIGZyb20gXCJAc3djL2hlbHBlcnMvc3JjL19kZWZpbmVfcHJvcGVydHkubWpzXCI7XG5pbXBvcnQgJDUyWklmJHN3Y2hlbHBlcnNzcmNfdHNfZGVjb3JhdGVtanMgZnJvbSBcIkBzd2MvaGVscGVycy9zcmMvX3RzX2RlY29yYXRlLm1qc1wiO1xuaW1wb3J0ICQ1MlpJZiRmYXN0ZGVlcGVxdWFsIGZyb20gXCJmYXN0LWRlZXAtZXF1YWxcIjtcbmltcG9ydCB7Z2V0Q29tYmluaW5nQ2xhc3MgYXMgJDUyWklmJGdldENvbWJpbmluZ0NsYXNzLCBnZXRTY3JpcHQgYXMgJDUyWklmJGdldFNjcmlwdCwgaXNEaWdpdCBhcyAkNTJaSWYkaXNEaWdpdCwgZ2V0Q2F0ZWdvcnkgYXMgJDUyWklmJGdldENhdGVnb3J5LCBpc01hcmsgYXMgJDUyWklmJGlzTWFya30gZnJvbSBcInVuaWNvZGUtcHJvcGVydGllc1wiO1xuaW1wb3J0ICQ1MlpJZiR1bmljb2RldHJpZSBmcm9tIFwidW5pY29kZS10cmllXCI7XG5pbXBvcnQgJDUyWklmJGRmYSBmcm9tIFwiZGZhXCI7XG5pbXBvcnQgJDUyWklmJGNsb25lIGZyb20gXCJjbG9uZVwiO1xuaW1wb3J0ICQ1MlpJZiR0aW55aW5mbGF0ZSBmcm9tIFwidGlueS1pbmZsYXRlXCI7XG5pbXBvcnQgJDUyWklmJGJyb3RsaWRlY29tcHJlc3NqcyBmcm9tIFwiYnJvdGxpL2RlY29tcHJlc3MuanNcIjtcblxuZnVuY3Rpb24gJHBhcmNlbCRleHBvcnQoZSwgbiwgdiwgcykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgbiwge2dldDogdiwgc2V0OiBzLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTtcbn1cbmZ1bmN0aW9uICRwYXJjZWwkaW50ZXJvcERlZmF1bHQoYSkge1xuICByZXR1cm4gYSAmJiBhLl9fZXNNb2R1bGUgPyBhLmRlZmF1bHQgOiBhO1xufVxudmFyICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydHMgPSB7fTtcblxuJHBhcmNlbCRleHBvcnQoJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0cywgXCJsb2dFcnJvcnNcIiwgKCkgPT4gJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JGJkNWM1ZDhiOGRjYWZkNzgpO1xuJHBhcmNlbCRleHBvcnQoJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0cywgXCJyZWdpc3RlckZvcm1hdFwiLCAoKSA9PiAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkMzZiMmYyNGU5N2Q0M2JlKTtcbiRwYXJjZWwkZXhwb3J0KCRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydHMsIFwiY3JlYXRlXCIsICgpID0+ICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQxODU4MDJmZDY5NGVlMWY1KTtcbiRwYXJjZWwkZXhwb3J0KCRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydHMsIFwiZGVmYXVsdExhbmd1YWdlXCIsICgpID0+ICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQ0Mjk0MDg5OGRmODE5OTQwKTtcbiRwYXJjZWwkZXhwb3J0KCRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydHMsIFwic2V0RGVmYXVsdExhbmd1YWdlXCIsICgpID0+ICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQ1MTU3ZTc3ODBkNDRjYzM2KTtcblxubGV0ICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCRiZDVjNWQ4YjhkY2FmZDc4ID0gZmFsc2U7XG5sZXQgJGQ2MzZiYzc5OGU3MTc4ZGIkdmFyJGZvcm1hdHMgPSBbXTtcbmZ1bmN0aW9uICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQzNmIyZjI0ZTk3ZDQzYmUoZm9ybWF0KSB7XG4gICAgJGQ2MzZiYzc5OGU3MTc4ZGIkdmFyJGZvcm1hdHMucHVzaChmb3JtYXQpO1xufVxuZnVuY3Rpb24gJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDE4NTgwMmZkNjk0ZWUxZjUoYnVmZmVyLCBwb3N0c2NyaXB0TmFtZSkge1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCAkZDYzNmJjNzk4ZTcxNzhkYiR2YXIkZm9ybWF0cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGxldCBmb3JtYXQgPSAkZDYzNmJjNzk4ZTcxNzhkYiR2YXIkZm9ybWF0c1tpXTtcbiAgICAgICAgaWYgKGZvcm1hdC5wcm9iZShidWZmZXIpKSB7XG4gICAgICAgICAgICBsZXQgZm9udCA9IG5ldyBmb3JtYXQobmV3ICgwLCAkNTJaSWYkRGVjb2RlU3RyZWFtKShidWZmZXIpKTtcbiAgICAgICAgICAgIGlmIChwb3N0c2NyaXB0TmFtZSkgcmV0dXJuIGZvbnQuZ2V0Rm9udChwb3N0c2NyaXB0TmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gZm9udDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGZvbnQgZm9ybWF0XCIpO1xufVxubGV0ICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQ0Mjk0MDg5OGRmODE5OTQwID0gXCJlblwiO1xuZnVuY3Rpb24gJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDUxNTdlNzc4MGQ0NGNjMzYobGFuZyA9IFwiZW5cIikge1xuICAgICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQ0Mjk0MDg5OGRmODE5OTQwID0gbGFuZztcbn1cblxuXG52YXIgJGI0MjJiMWUwMTNjZDYwMTAkZXhwb3J0cyA9IHt9O1xuXG4kcGFyY2VsJGV4cG9ydCgkYjQyMmIxZTAxM2NkNjAxMCRleHBvcnRzLCBcIm9wZW5TeW5jXCIsICgpID0+ICRiNDIyYjFlMDEzY2Q2MDEwJGV4cG9ydCRmYTU0OTllZGIxYWI0MTRhKTtcbiRwYXJjZWwkZXhwb3J0KCRiNDIyYjFlMDEzY2Q2MDEwJGV4cG9ydHMsIFwib3BlblwiLCAoKSA9PiAkYjQyMmIxZTAxM2NkNjAxMCRleHBvcnQkM2NlNjk0OWYyMGNlYTc2NSk7XG5cblxuZnVuY3Rpb24gJGI0MjJiMWUwMTNjZDYwMTAkZXhwb3J0JGZhNTQ5OWVkYjFhYjQxNGEoZmlsZW5hbWUsIHBvc3RzY3JpcHROYW1lKSB7XG4gICAgbGV0IGJ1ZmZlciA9ICgwLCAkNTJaSWYkZnMpLnJlYWRGaWxlU3luYyhmaWxlbmFtZSk7XG4gICAgcmV0dXJuICgwLCAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkMTg1ODAyZmQ2OTRlZTFmNSkoYnVmZmVyLCBwb3N0c2NyaXB0TmFtZSk7XG59XG5hc3luYyBmdW5jdGlvbiAkYjQyMmIxZTAxM2NkNjAxMCRleHBvcnQkM2NlNjk0OWYyMGNlYTc2NShmaWxlbmFtZSwgcG9zdHNjcmlwdE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBwb3N0c2NyaXB0TmFtZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gcG9zdHNjcmlwdE5hbWU7XG4gICAgICAgIHBvc3RzY3JpcHROYW1lID0gbnVsbDtcbiAgICB9XG4gICAgbGV0IGJ1ZmZlciA9IGF3YWl0ICgwLCAkNTJaSWYkZnMpLnByb21pc2VzLnJlYWRGaWxlKGZpbGVuYW1lKTtcbiAgICByZXR1cm4gKDAsICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQxODU4MDJmZDY5NGVlMWY1KShidWZmZXIsIHBvc3RzY3JpcHROYW1lKTtcbn1cblxuXG5cblxuXG5mdW5jdGlvbiAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZCh0YXJnZXQsIGtleTEsIGRlc2NyaXB0b3IpIHtcbiAgICBpZiAoZGVzY3JpcHRvci5nZXQpIHtcbiAgICAgICAgbGV0IGdldCA9IGRlc2NyaXB0b3IuZ2V0O1xuICAgICAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gZ2V0LmNhbGwodGhpcyk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5MSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVzY3JpcHRvci52YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGxldCBmbiA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgICAgIGxldCBjYWNoZTEgPSBuZXcgTWFwO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG1lbW9pemVkKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGtleSA9IGFyZ3MubGVuZ3RoID4gMCA/IGFyZ3NbMF0gOiBcInZhbHVlXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZTEuaGFzKGtleSkpIHJldHVybiBjYWNoZTEuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGUxLnNldChrZXksIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXkxLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtZW1vaXplZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5cblxuXG5cblxubGV0ICQyNmE2MjIwNWFkMDY1NzRlJHZhciRTdWJIZWFkZXIgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZmlyc3RDb2RlOiAkNTJaSWYkdWludDE2LFxuICAgIGVudHJ5Q291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgaWREZWx0YTogJDUyWklmJGludDE2LFxuICAgIGlkUmFuZ2VPZmZzZXQ6ICQ1MlpJZiR1aW50MTZcbn0pO1xubGV0ICQyNmE2MjIwNWFkMDY1NzRlJHZhciRDbWFwR3JvdXAgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgc3RhcnRDaGFyQ29kZTogJDUyWklmJHVpbnQzMixcbiAgICBlbmRDaGFyQ29kZTogJDUyWklmJHVpbnQzMixcbiAgICBnbHlwaElEOiAkNTJaSWYkdWludDMyXG59KTtcbmxldCAkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkVW5pY29kZVZhbHVlUmFuZ2UgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgc3RhcnRVbmljb2RlVmFsdWU6ICQ1MlpJZiR1aW50MjQsXG4gICAgYWRkaXRpb25hbENvdW50OiAkNTJaSWYkdWludDhcbn0pO1xubGV0ICQyNmE2MjIwNWFkMDY1NzRlJHZhciRVVlNNYXBwaW5nID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHVuaWNvZGVWYWx1ZTogJDUyWklmJHVpbnQyNCxcbiAgICBnbHlwaElEOiAkNTJaSWYkdWludDE2XG59KTtcbmxldCAkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkRGVmYXVsdFVWUyA9IG5ldyAkNTJaSWYkQXJyYXkoJDI2YTYyMjA1YWQwNjU3NGUkdmFyJFVuaWNvZGVWYWx1ZVJhbmdlLCAkNTJaSWYkdWludDMyKTtcbmxldCAkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkTm9uRGVmYXVsdFVWUyA9IG5ldyAkNTJaSWYkQXJyYXkoJDI2YTYyMjA1YWQwNjU3NGUkdmFyJFVWU01hcHBpbmcsICQ1MlpJZiR1aW50MzIpO1xubGV0ICQyNmE2MjIwNWFkMDY1NzRlJHZhciRWYXJTZWxlY3RvclJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2YXJTZWxlY3RvcjogJDUyWklmJHVpbnQyNCxcbiAgICBkZWZhdWx0VVZTOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgJDI2YTYyMjA1YWQwNjU3NGUkdmFyJERlZmF1bHRVVlMsIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIlxuICAgIH0pLFxuICAgIG5vbkRlZmF1bHRVVlM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkTm9uRGVmYXVsdFVWUywge1xuICAgICAgICB0eXBlOiBcInBhcmVudFwiXG4gICAgfSlcbn0pO1xubGV0ICQyNmE2MjIwNWFkMDY1NzRlJHZhciRDbWFwU3VidGFibGUgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgMDoge1xuICAgICAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGxhbmd1YWdlOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBjb2RlTWFwOiBuZXcgJDUyWklmJExhenlBcnJheSgkNTJaSWYkdWludDgsIDI1NilcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgbGVuZ3RoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBsYW5ndWFnZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgc3ViSGVhZGVyS2V5czogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAyNTYpLFxuICAgICAgICBzdWJIZWFkZXJDb3VudDogKHQpPT5NYXRoLm1heC5hcHBseShNYXRoLCB0LnN1YkhlYWRlcktleXMpLFxuICAgICAgICBzdWJIZWFkZXJzOiBuZXcgJDUyWklmJExhenlBcnJheSgkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkU3ViSGVhZGVyLCBcInN1YkhlYWRlckNvdW50XCIpLFxuICAgICAgICBnbHlwaEluZGV4QXJyYXk6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiR1aW50MTYsIFwic3ViSGVhZGVyQ291bnRcIilcbiAgICB9LFxuICAgIDQ6IHtcbiAgICAgICAgbGVuZ3RoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBsYW5ndWFnZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgc2VnQ291bnRYMjogJDUyWklmJHVpbnQxNixcbiAgICAgICAgc2VnQ291bnQ6ICh0KT0+dC5zZWdDb3VudFgyID4+IDEsXG4gICAgICAgIHNlYXJjaFJhbmdlOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBlbnRyeVNlbGVjdG9yOiAkNTJaSWYkdWludDE2LFxuICAgICAgICByYW5nZVNoaWZ0OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBlbmRDb2RlOiBuZXcgJDUyWklmJExhenlBcnJheSgkNTJaSWYkdWludDE2LCBcInNlZ0NvdW50XCIpLFxuICAgICAgICByZXNlcnZlZFBhZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDE2KSxcbiAgICAgICAgc3RhcnRDb2RlOiBuZXcgJDUyWklmJExhenlBcnJheSgkNTJaSWYkdWludDE2LCBcInNlZ0NvdW50XCIpLFxuICAgICAgICBpZERlbHRhOiBuZXcgJDUyWklmJExhenlBcnJheSgkNTJaSWYkaW50MTYsIFwic2VnQ291bnRcIiksXG4gICAgICAgIGlkUmFuZ2VPZmZzZXQ6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiR1aW50MTYsIFwic2VnQ291bnRcIiksXG4gICAgICAgIGdseXBoSW5kZXhBcnJheTogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDUyWklmJHVpbnQxNiwgKHQpPT4odC5sZW5ndGggLSB0Ll9jdXJyZW50T2Zmc2V0KSAvIDIpXG4gICAgfSxcbiAgICA2OiB7XG4gICAgICAgIGxlbmd0aDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbGFuZ3VhZ2U6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGZpcnN0Q29kZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZW50cnlDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZ2x5cGhJbmRpY2VzOiBuZXcgJDUyWklmJExhenlBcnJheSgkNTJaSWYkdWludDE2LCBcImVudHJ5Q291bnRcIilcbiAgICB9LFxuICAgIDg6IHtcbiAgICAgICAgcmVzZXJ2ZWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQxNiksXG4gICAgICAgIGxlbmd0aDogJDUyWklmJHVpbnQzMixcbiAgICAgICAgbGFuZ3VhZ2U6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGlzMzI6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiR1aW50OCwgODE5MiksXG4gICAgICAgIG5Hcm91cHM6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIGdyb3VwczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDI2YTYyMjA1YWQwNjU3NGUkdmFyJENtYXBHcm91cCwgXCJuR3JvdXBzXCIpXG4gICAgfSxcbiAgICAxMDoge1xuICAgICAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDE2KSxcbiAgICAgICAgbGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBsYW5ndWFnZTogJDUyWklmJHVpbnQzMixcbiAgICAgICAgZmlyc3RDb2RlOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBlbnRyeUNvdW50OiAkNTJaSWYkdWludDMyLFxuICAgICAgICBnbHlwaEluZGljZXM6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiR1aW50MTYsIFwibnVtQ2hhcnNcIilcbiAgICB9LFxuICAgIDEyOiB7XG4gICAgICAgIHJlc2VydmVkOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50MTYpLFxuICAgICAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIGxhbmd1YWdlOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBuR3JvdXBzOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBncm91cHM6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQyNmE2MjIwNWFkMDY1NzRlJHZhciRDbWFwR3JvdXAsIFwibkdyb3Vwc1wiKVxuICAgIH0sXG4gICAgMTM6IHtcbiAgICAgICAgcmVzZXJ2ZWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQxNiksXG4gICAgICAgIGxlbmd0aDogJDUyWklmJHVpbnQzMixcbiAgICAgICAgbGFuZ3VhZ2U6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIG5Hcm91cHM6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIGdyb3VwczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDI2YTYyMjA1YWQwNjU3NGUkdmFyJENtYXBHcm91cCwgXCJuR3JvdXBzXCIpXG4gICAgfSxcbiAgICAxNDoge1xuICAgICAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIG51bVJlY29yZHM6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIHZhclNlbGVjdG9yczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDI2YTYyMjA1YWQwNjU3NGUkdmFyJFZhclNlbGVjdG9yUmVjb3JkLCBcIm51bVJlY29yZHNcIilcbiAgICB9XG59KTtcbmxldCAkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkQ21hcEVudHJ5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHBsYXRmb3JtSUQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgZW5jb2RpbmdJRDogJDUyWklmJHVpbnQxNixcbiAgICB0YWJsZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICQyNmE2MjIwNWFkMDY1NzRlJHZhciRDbWFwU3VidGFibGUsIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIixcbiAgICAgICAgbGF6eTogdHJ1ZVxuICAgIH0pXG59KTtcbnZhciAvLyBjaGFyYWN0ZXIgdG8gZ2x5cGggbWFwcGluZ1xuJDI2YTYyMjA1YWQwNjU3NGUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIG51bVN1YnRhYmxlczogJDUyWklmJHVpbnQxNixcbiAgICB0YWJsZXM6IG5ldyAkNTJaSWYkQXJyYXkoJDI2YTYyMjA1YWQwNjU3NGUkdmFyJENtYXBFbnRyeSwgXCJudW1TdWJ0YWJsZXNcIilcbn0pO1xuXG5cblxudmFyIC8vIGZvbnQgaGVhZGVyXG4kZjI2MTJhMjlmOTJhYzA2MiRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiRpbnQzMixcbiAgICByZXZpc2lvbjogJDUyWklmJGludDMyLFxuICAgIGNoZWNrU3VtQWRqdXN0bWVudDogJDUyWklmJHVpbnQzMixcbiAgICBtYWdpY051bWJlcjogJDUyWklmJHVpbnQzMixcbiAgICBmbGFnczogJDUyWklmJHVpbnQxNixcbiAgICB1bml0c1BlckVtOiAkNTJaSWYkdWludDE2LFxuICAgIGNyZWF0ZWQ6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJGludDMyLCAyKSxcbiAgICBtb2RpZmllZDogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkaW50MzIsIDIpLFxuICAgIHhNaW46ICQ1MlpJZiRpbnQxNixcbiAgICB5TWluOiAkNTJaSWYkaW50MTYsXG4gICAgeE1heDogJDUyWklmJGludDE2LFxuICAgIHlNYXg6ICQ1MlpJZiRpbnQxNixcbiAgICBtYWNTdHlsZTogbmV3ICQ1MlpJZiRCaXRmaWVsZCgkNTJaSWYkdWludDE2LCBbXG4gICAgICAgIFwiYm9sZFwiLFxuICAgICAgICBcIml0YWxpY1wiLFxuICAgICAgICBcInVuZGVybGluZVwiLFxuICAgICAgICBcIm91dGxpbmVcIixcbiAgICAgICAgXCJzaGFkb3dcIixcbiAgICAgICAgXCJjb25kZW5zZWRcIixcbiAgICAgICAgXCJleHRlbmRlZFwiXG4gICAgXSksXG4gICAgbG93ZXN0UmVjUFBFTTogJDUyWklmJHVpbnQxNixcbiAgICBmb250RGlyZWN0aW9uSGludDogJDUyWklmJGludDE2LFxuICAgIGluZGV4VG9Mb2NGb3JtYXQ6ICQ1MlpJZiRpbnQxNixcbiAgICBnbHlwaERhdGFGb3JtYXQ6ICQ1MlpJZiRpbnQxNiAvLyAwIGZvciBjdXJyZW50IGZvcm1hdFxufSk7XG5cblxuXG52YXIgLy8gaG9yaXpvbnRhbCBoZWFkZXJcbiQyYzE3OWRkNTkzNTgzMDczJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJGludDMyLFxuICAgIGFzY2VudDogJDUyWklmJGludDE2LFxuICAgIGRlc2NlbnQ6ICQ1MlpJZiRpbnQxNixcbiAgICBsaW5lR2FwOiAkNTJaSWYkaW50MTYsXG4gICAgYWR2YW5jZVdpZHRoTWF4OiAkNTJaSWYkdWludDE2LFxuICAgIG1pbkxlZnRTaWRlQmVhcmluZzogJDUyWklmJGludDE2LFxuICAgIG1pblJpZ2h0U2lkZUJlYXJpbmc6ICQ1MlpJZiRpbnQxNixcbiAgICB4TWF4RXh0ZW50OiAkNTJaSWYkaW50MTYsXG4gICAgY2FyZXRTbG9wZVJpc2U6ICQ1MlpJZiRpbnQxNixcbiAgICBjYXJldFNsb3BlUnVuOiAkNTJaSWYkaW50MTYsXG4gICAgY2FyZXRPZmZzZXQ6ICQ1MlpJZiRpbnQxNixcbiAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkaW50MTYsIDQpLFxuICAgIG1ldHJpY0RhdGFGb3JtYXQ6ICQ1MlpJZiRpbnQxNixcbiAgICBudW1iZXJPZk1ldHJpY3M6ICQ1MlpJZiR1aW50MTYgLy8gTnVtYmVyIG9mIGFkdmFuY2Ugd2lkdGhzIGluICdobXR4JyB0YWJsZVxufSk7XG5cblxuXG5sZXQgJGJkYzkwNjA1NDIyNjRiODUkdmFyJEhtdHhFbnRyeSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBhZHZhbmNlOiAkNTJaSWYkdWludDE2LFxuICAgIGJlYXJpbmc6ICQ1MlpJZiRpbnQxNlxufSk7XG52YXIgJGJkYzkwNjA1NDIyNjRiODUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBtZXRyaWNzOiBuZXcgJDUyWklmJExhenlBcnJheSgkYmRjOTA2MDU0MjI2NGI4NSR2YXIkSG10eEVudHJ5LCAodCk9PnQucGFyZW50LmhoZWEubnVtYmVyT2ZNZXRyaWNzKSxcbiAgICBiZWFyaW5nczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDUyWklmJGludDE2LCAodCk9PnQucGFyZW50Lm1heHAubnVtR2x5cGhzIC0gdC5wYXJlbnQuaGhlYS5udW1iZXJPZk1ldHJpY3MpXG59KTtcblxuXG5cbnZhciAvLyBtYXhpdW11bSBwcm9maWxlXG4kZGJmNTFjYjNkM2ZlNDA5ZCRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiRpbnQzMixcbiAgICBudW1HbHlwaHM6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWF4UG9pbnRzOiAkNTJaSWYkdWludDE2LFxuICAgIG1heENvbnRvdXJzOiAkNTJaSWYkdWludDE2LFxuICAgIG1heENvbXBvbmVudFBvaW50czogJDUyWklmJHVpbnQxNixcbiAgICBtYXhDb21wb25lbnRDb250b3VyczogJDUyWklmJHVpbnQxNixcbiAgICBtYXhab25lczogJDUyWklmJHVpbnQxNixcbiAgICBtYXhUd2lsaWdodFBvaW50czogJDUyWklmJHVpbnQxNixcbiAgICBtYXhTdG9yYWdlOiAkNTJaSWYkdWludDE2LFxuICAgIG1heEZ1bmN0aW9uRGVmczogJDUyWklmJHVpbnQxNixcbiAgICBtYXhJbnN0cnVjdGlvbkRlZnM6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWF4U3RhY2tFbGVtZW50czogJDUyWklmJHVpbnQxNixcbiAgICBtYXhTaXplT2ZJbnN0cnVjdGlvbnM6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWF4Q29tcG9uZW50RWxlbWVudHM6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWF4Q29tcG9uZW50RGVwdGg6ICQ1MlpJZiR1aW50MTYgLy8gTWF4aW11bSBsZXZlbHMgb2YgcmVjdXJzaW9uOyAxIGZvciBzaW1wbGUgY29tcG9uZW50c1xufSk7XG5cblxuXG5mdW5jdGlvbiAkZTQ0OWFkNzhkNTA4NDVmZSRleHBvcnQkYmFkYzU0NGUwNjUxYjZiMShwbGF0Zm9ybUlELCBlbmNvZGluZ0lELCBsYW5ndWFnZUlEID0gMCkge1xuICAgIGlmIChwbGF0Zm9ybUlEID09PSAxICYmICRlNDQ5YWQ3OGQ1MDg0NWZlJGV4cG9ydCQ0NzllNjcxOTA3ZjQ4NmQxW2xhbmd1YWdlSURdKSByZXR1cm4gJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDQ3OWU2NzE5MDdmNDg2ZDFbbGFuZ3VhZ2VJRF07XG4gICAgcmV0dXJuICRlNDQ5YWQ3OGQ1MDg0NWZlJGV4cG9ydCQ2ZmVmODdiNzYxOGJkZjBiW3BsYXRmb3JtSURdW2VuY29kaW5nSURdO1xufVxuY29uc3QgJGU0NDlhZDc4ZDUwODQ1ZmUkdmFyJFNJTkdMRV9CWVRFX0VOQ09ESU5HUyA9IG5ldyBTZXQoW1xuICAgIFwieC1tYWMtcm9tYW5cIixcbiAgICBcIngtbWFjLWN5cmlsbGljXCIsXG4gICAgXCJpc28tODg1OS02XCIsXG4gICAgXCJpc28tODg1OS04XCJcbl0pO1xuY29uc3QgJGU0NDlhZDc4ZDUwODQ1ZmUkdmFyJE1BQ19FTkNPRElOR1MgPSB7XG4gICAgXCJ4LW1hYy1jcm9hdGlhblwiOiBcIlxceGM0XFx4YzVcXHhjN1xceGM5XFx4ZDFcXHhkNlxceGRjXFx4ZTFcXHhlMFxceGUyXFx4ZTRcXHhlM1xceGU1XFx4ZTdcXHhlOVxceGU4XFx4ZWFcXHhlYlxceGVkXFx4ZWNcXHhlZVxceGVmXFx4ZjFcXHhmM1xceGYyXFx4ZjRcXHhmNlxceGY1XFx4ZmFcXHhmOVxceGZiXFx4ZmNcXHUyMDIwXFx4YjBcXHhhMlxceGEzXFx4YTdcXHUyMDIyXFx4YjZcXHhkZlxceGFlXFx1MDE2MFxcdTIxMjJcXHhiNFxceGE4XFx1MjI2MFxcdTAxN0RcXHhkOFxcdTIyMUVcXHhiMVxcdTIyNjRcXHUyMjY1XFx1MjIwNlxceGI1XFx1MjIwMlxcdTIyMTFcXHUyMjBGXFx1MDE2MVxcdTIyMkJcXHhhYVxceGJhXFx1MDNBOVxcdTAxN0VcXHhmOFxceGJmXFx4YTFcXHhhY1xcdTIyMUFcXHUwMTkyXFx1MjI0OFxcdTAxMDZcXHhhYlxcdTAxMENcXHUyMDI2IFxceGMwXFx4YzNcXHhkNVxcdTAxNTJcXHUwMTUzXFx1MDExMFxcdTIwMTRcXHUyMDFDXFx1MjAxRFxcdTIwMThcXHUyMDE5XFx4ZjdcXHUyNUNBXFx1RjhGRlxceGE5XFx1MjA0NFxcdTIwQUNcXHUyMDM5XFx1MjAzQVxceGM2XFx4YmJcXHUyMDEzXFx4YjdcXHUyMDFBXFx1MjAxRVxcdTIwMzBcXHhjMlxcdTAxMDdcXHhjMVxcdTAxMERcXHhjOFxceGNkXFx4Y2VcXHhjZlxceGNjXFx4ZDNcXHhkNFxcdTAxMTFcXHhkMlxceGRhXFx4ZGJcXHhkOVxcdTAxMzFcXHUwMkM2XFx1MDJEQ1xceGFmXFx1MDNDMFxceGNiXFx1MDJEQVxceGI4XFx4Y2FcXHhlNlxcdTAyQzdcIixcbiAgICBcIngtbWFjLWdhZWxpY1wiOiBcIlxceGM0XFx4YzVcXHhjN1xceGM5XFx4ZDFcXHhkNlxceGRjXFx4ZTFcXHhlMFxceGUyXFx4ZTRcXHhlM1xceGU1XFx4ZTdcXHhlOVxceGU4XFx4ZWFcXHhlYlxceGVkXFx4ZWNcXHhlZVxceGVmXFx4ZjFcXHhmM1xceGYyXFx4ZjRcXHhmNlxceGY1XFx4ZmFcXHhmOVxceGZiXFx4ZmNcXHUyMDIwXFx4YjBcXHhhMlxceGEzXFx4YTdcXHUyMDIyXFx4YjZcXHhkZlxceGFlXFx4YTlcXHUyMTIyXFx4YjRcXHhhOFxcdTIyNjBcXHhjNlxceGQ4XFx1MUUwMlxceGIxXFx1MjI2NFxcdTIyNjVcXHUxRTAzXFx1MDEwQVxcdTAxMEJcXHUxRTBBXFx1MUUwQlxcdTFFMUVcXHUxRTFGXFx1MDEyMFxcdTAxMjFcXHUxRTQwXFx4ZTZcXHhmOFxcdTFFNDFcXHUxRTU2XFx1MUU1N1xcdTAyN0NcXHUwMTkyXFx1MDE3RlxcdTFFNjBcXHhhYlxceGJiXFx1MjAyNiBcXHhjMFxceGMzXFx4ZDVcXHUwMTUyXFx1MDE1M1xcdTIwMTNcXHUyMDE0XFx1MjAxQ1xcdTIwMURcXHUyMDE4XFx1MjAxOVxcdTFFNjFcXHUxRTlCXFx4ZmZcXHUwMTc4XFx1MUU2QVxcdTIwQUNcXHUyMDM5XFx1MjAzQVxcdTAxNzZcXHUwMTc3XFx1MUU2QlxceGI3XFx1MUVGMlxcdTFFRjNcXHUyMDRBXFx4YzJcXHhjYVxceGMxXFx4Y2JcXHhjOFxceGNkXFx4Y2VcXHhjZlxceGNjXFx4ZDNcXHhkNFxcdTI2NjNcXHhkMlxceGRhXFx4ZGJcXHhkOVxcdTAxMzFcXHhkZFxceGZkXFx1MDE3NFxcdTAxNzVcXHUxRTg0XFx1MUU4NVxcdTFFODBcXHUxRTgxXFx1MUU4MlxcdTFFODNcIixcbiAgICBcIngtbWFjLWdyZWVrXCI6IFwiXFx4YzRcXHhiOVxceGIyXFx4YzlcXHhiM1xceGQ2XFx4ZGNcXHUwMzg1XFx4ZTBcXHhlMlxceGU0XFx1MDM4NFxceGE4XFx4ZTdcXHhlOVxceGU4XFx4ZWFcXHhlYlxceGEzXFx1MjEyMlxceGVlXFx4ZWZcXHUyMDIyXFx4YmRcXHUyMDMwXFx4ZjRcXHhmNlxceGE2XFx1MjBBQ1xceGY5XFx4ZmJcXHhmY1xcdTIwMjBcXHUwMzkzXFx1MDM5NFxcdTAzOThcXHUwMzlCXFx1MDM5RVxcdTAzQTBcXHhkZlxceGFlXFx4YTlcXHUwM0EzXFx1MDNBQVxceGE3XFx1MjI2MFxceGIwXFx4YjdcXHUwMzkxXFx4YjFcXHUyMjY0XFx1MjI2NVxceGE1XFx1MDM5MlxcdTAzOTVcXHUwMzk2XFx1MDM5N1xcdTAzOTlcXHUwMzlBXFx1MDM5Q1xcdTAzQTZcXHUwM0FCXFx1MDNBOFxcdTAzQTlcXHUwM0FDXFx1MDM5RFxceGFjXFx1MDM5RlxcdTAzQTFcXHUyMjQ4XFx1MDNBNFxceGFiXFx4YmJcXHUyMDI2IFxcdTAzQTVcXHUwM0E3XFx1MDM4NlxcdTAzODhcXHUwMTUzXFx1MjAxM1xcdTIwMTVcXHUyMDFDXFx1MjAxRFxcdTIwMThcXHUyMDE5XFx4ZjdcXHUwMzg5XFx1MDM4QVxcdTAzOENcXHUwMzhFXFx1MDNBRFxcdTAzQUVcXHUwM0FGXFx1MDNDQ1xcdTAzOEZcXHUwM0NEXFx1MDNCMVxcdTAzQjJcXHUwM0M4XFx1MDNCNFxcdTAzQjVcXHUwM0M2XFx1MDNCM1xcdTAzQjdcXHUwM0I5XFx1MDNCRVxcdTAzQkFcXHUwM0JCXFx1MDNCQ1xcdTAzQkRcXHUwM0JGXFx1MDNDMFxcdTAzQ0VcXHUwM0MxXFx1MDNDM1xcdTAzQzRcXHUwM0I4XFx1MDNDOVxcdTAzQzJcXHUwM0M3XFx1MDNDNVxcdTAzQjZcXHUwM0NBXFx1MDNDQlxcdTAzOTBcXHUwM0IwXFx4YWRcIixcbiAgICBcIngtbWFjLWljZWxhbmRpY1wiOiBcIlxceGM0XFx4YzVcXHhjN1xceGM5XFx4ZDFcXHhkNlxceGRjXFx4ZTFcXHhlMFxceGUyXFx4ZTRcXHhlM1xceGU1XFx4ZTdcXHhlOVxceGU4XFx4ZWFcXHhlYlxceGVkXFx4ZWNcXHhlZVxceGVmXFx4ZjFcXHhmM1xceGYyXFx4ZjRcXHhmNlxceGY1XFx4ZmFcXHhmOVxceGZiXFx4ZmNcXHhkZFxceGIwXFx4YTJcXHhhM1xceGE3XFx1MjAyMlxceGI2XFx4ZGZcXHhhZVxceGE5XFx1MjEyMlxceGI0XFx4YThcXHUyMjYwXFx4YzZcXHhkOFxcdTIyMUVcXHhiMVxcdTIyNjRcXHUyMjY1XFx4YTVcXHhiNVxcdTIyMDJcXHUyMjExXFx1MjIwRlxcdTAzQzBcXHUyMjJCXFx4YWFcXHhiYVxcdTAzQTlcXHhlNlxceGY4XFx4YmZcXHhhMVxceGFjXFx1MjIxQVxcdTAxOTJcXHUyMjQ4XFx1MjIwNlxceGFiXFx4YmJcXHUyMDI2IFxceGMwXFx4YzNcXHhkNVxcdTAxNTJcXHUwMTUzXFx1MjAxM1xcdTIwMTRcXHUyMDFDXFx1MjAxRFxcdTIwMThcXHUyMDE5XFx4ZjdcXHUyNUNBXFx4ZmZcXHUwMTc4XFx1MjA0NFxcdTIwQUNcXHhkMFxceGYwXFx4ZGVcXHhmZVxceGZkXFx4YjdcXHUyMDFBXFx1MjAxRVxcdTIwMzBcXHhjMlxceGNhXFx4YzFcXHhjYlxceGM4XFx4Y2RcXHhjZVxceGNmXFx4Y2NcXHhkM1xceGQ0XFx1RjhGRlxceGQyXFx4ZGFcXHhkYlxceGQ5XFx1MDEzMVxcdTAyQzZcXHUwMkRDXFx4YWZcXHUwMkQ4XFx1MDJEOVxcdTAyREFcXHhiOFxcdTAyRERcXHUwMkRCXFx1MDJDN1wiLFxuICAgIFwieC1tYWMtaW51aXRcIjogXCJcXHUxNDAzXFx1MTQwNFxcdTE0MDVcXHUxNDA2XFx1MTQwQVxcdTE0MEJcXHUxNDMxXFx1MTQzMlxcdTE0MzNcXHUxNDM0XFx1MTQzOFxcdTE0MzlcXHUxNDQ5XFx1MTQ0RVxcdTE0NEZcXHUxNDUwXFx1MTQ1MVxcdTE0NTVcXHUxNDU2XFx1MTQ2NlxcdTE0NkRcXHUxNDZFXFx1MTQ2RlxcdTE0NzBcXHUxNDcyXFx1MTQ3M1xcdTE0ODNcXHUxNDhCXFx1MTQ4Q1xcdTE0OERcXHUxNDhFXFx1MTQ5MFxcdTE0OTFcXHhiMFxcdTE0QTFcXHUxNEE1XFx1MTRBNlxcdTIwMjJcXHhiNlxcdTE0QTdcXHhhZVxceGE5XFx1MjEyMlxcdTE0QThcXHUxNEFBXFx1MTRBQlxcdTE0QkJcXHUxNEMyXFx1MTRDM1xcdTE0QzRcXHUxNEM1XFx1MTRDN1xcdTE0QzhcXHUxNEQwXFx1MTRFRlxcdTE0RjBcXHUxNEYxXFx1MTRGMlxcdTE0RjRcXHUxNEY1XFx1MTUwNVxcdTE0RDVcXHUxNEQ2XFx1MTREN1xcdTE0RDhcXHUxNERBXFx1MTREQlxcdTE0RUFcXHUxNTI4XFx1MTUyOVxcdTE1MkFcXHUxNTJCXFx1MTUyRFxcdTIwMjYgXFx1MTUyRVxcdTE1M0VcXHUxNTU1XFx1MTU1NlxcdTE1NTdcXHUyMDEzXFx1MjAxNFxcdTIwMUNcXHUyMDFEXFx1MjAxOFxcdTIwMTlcXHUxNTU4XFx1MTU1OVxcdTE1NUFcXHUxNTVEXFx1MTU0NlxcdTE1NDdcXHUxNTQ4XFx1MTU0OVxcdTE1NEJcXHUxNTRDXFx1MTU1MFxcdTE1N0ZcXHUxNTgwXFx1MTU4MVxcdTE1ODJcXHUxNTgzXFx1MTU4NFxcdTE1ODVcXHUxNThGXFx1MTU5MFxcdTE1OTFcXHUxNTkyXFx1MTU5M1xcdTE1OTRcXHUxNTk1XFx1MTY3MVxcdTE2NzJcXHUxNjczXFx1MTY3NFxcdTE2NzVcXHUxNjc2XFx1MTU5NlxcdTE1QTBcXHUxNUExXFx1MTVBMlxcdTE1QTNcXHUxNUE0XFx1MTVBNVxcdTE1QTZcXHUxNTdDXFx1MDE0MVxcdTAxNDJcIixcbiAgICBcIngtbWFjLWNlXCI6IFwiXFx4YzRcXHUwMTAwXFx1MDEwMVxceGM5XFx1MDEwNFxceGQ2XFx4ZGNcXHhlMVxcdTAxMDVcXHUwMTBDXFx4ZTRcXHUwMTBEXFx1MDEwNlxcdTAxMDdcXHhlOVxcdTAxNzlcXHUwMTdBXFx1MDEwRVxceGVkXFx1MDEwRlxcdTAxMTJcXHUwMTEzXFx1MDExNlxceGYzXFx1MDExN1xceGY0XFx4ZjZcXHhmNVxceGZhXFx1MDExQVxcdTAxMUJcXHhmY1xcdTIwMjBcXHhiMFxcdTAxMThcXHhhM1xceGE3XFx1MjAyMlxceGI2XFx4ZGZcXHhhZVxceGE5XFx1MjEyMlxcdTAxMTlcXHhhOFxcdTIyNjBcXHUwMTIzXFx1MDEyRVxcdTAxMkZcXHUwMTJBXFx1MjI2NFxcdTIyNjVcXHUwMTJCXFx1MDEzNlxcdTIyMDJcXHUyMjExXFx1MDE0MlxcdTAxM0JcXHUwMTNDXFx1MDEzRFxcdTAxM0VcXHUwMTM5XFx1MDEzQVxcdTAxNDVcXHUwMTQ2XFx1MDE0M1xceGFjXFx1MjIxQVxcdTAxNDRcXHUwMTQ3XFx1MjIwNlxceGFiXFx4YmJcXHUyMDI2IFxcdTAxNDhcXHUwMTUwXFx4ZDVcXHUwMTUxXFx1MDE0Q1xcdTIwMTNcXHUyMDE0XFx1MjAxQ1xcdTIwMURcXHUyMDE4XFx1MjAxOVxceGY3XFx1MjVDQVxcdTAxNERcXHUwMTU0XFx1MDE1NVxcdTAxNThcXHUyMDM5XFx1MjAzQVxcdTAxNTlcXHUwMTU2XFx1MDE1N1xcdTAxNjBcXHUyMDFBXFx1MjAxRVxcdTAxNjFcXHUwMTVBXFx1MDE1QlxceGMxXFx1MDE2NFxcdTAxNjVcXHhjZFxcdTAxN0RcXHUwMTdFXFx1MDE2QVxceGQzXFx4ZDRcXHUwMTZCXFx1MDE2RVxceGRhXFx1MDE2RlxcdTAxNzBcXHUwMTcxXFx1MDE3MlxcdTAxNzNcXHhkZFxceGZkXFx1MDEzN1xcdTAxN0JcXHUwMTQxXFx1MDE3Q1xcdTAxMjJcXHUwMkM3XCIsXG4gICAgXCJ4LW1hYy1yb21hbmlhblwiOiBcIlxceGM0XFx4YzVcXHhjN1xceGM5XFx4ZDFcXHhkNlxceGRjXFx4ZTFcXHhlMFxceGUyXFx4ZTRcXHhlM1xceGU1XFx4ZTdcXHhlOVxceGU4XFx4ZWFcXHhlYlxceGVkXFx4ZWNcXHhlZVxceGVmXFx4ZjFcXHhmM1xceGYyXFx4ZjRcXHhmNlxceGY1XFx4ZmFcXHhmOVxceGZiXFx4ZmNcXHUyMDIwXFx4YjBcXHhhMlxceGEzXFx4YTdcXHUyMDIyXFx4YjZcXHhkZlxceGFlXFx4YTlcXHUyMTIyXFx4YjRcXHhhOFxcdTIyNjBcXHUwMTAyXFx1MDIxOFxcdTIyMUVcXHhiMVxcdTIyNjRcXHUyMjY1XFx4YTVcXHhiNVxcdTIyMDJcXHUyMjExXFx1MjIwRlxcdTAzQzBcXHUyMjJCXFx4YWFcXHhiYVxcdTAzQTlcXHUwMTAzXFx1MDIxOVxceGJmXFx4YTFcXHhhY1xcdTIyMUFcXHUwMTkyXFx1MjI0OFxcdTIyMDZcXHhhYlxceGJiXFx1MjAyNiBcXHhjMFxceGMzXFx4ZDVcXHUwMTUyXFx1MDE1M1xcdTIwMTNcXHUyMDE0XFx1MjAxQ1xcdTIwMURcXHUyMDE4XFx1MjAxOVxceGY3XFx1MjVDQVxceGZmXFx1MDE3OFxcdTIwNDRcXHUyMEFDXFx1MjAzOVxcdTIwM0FcXHUwMjFBXFx1MDIxQlxcdTIwMjFcXHhiN1xcdTIwMUFcXHUyMDFFXFx1MjAzMFxceGMyXFx4Y2FcXHhjMVxceGNiXFx4YzhcXHhjZFxceGNlXFx4Y2ZcXHhjY1xceGQzXFx4ZDRcXHVGOEZGXFx4ZDJcXHhkYVxceGRiXFx4ZDlcXHUwMTMxXFx1MDJDNlxcdTAyRENcXHhhZlxcdTAyRDhcXHUwMkQ5XFx1MDJEQVxceGI4XFx1MDJERFxcdTAyREJcXHUwMkM3XCIsXG4gICAgXCJ4LW1hYy10dXJraXNoXCI6IFwiXFx4YzRcXHhjNVxceGM3XFx4YzlcXHhkMVxceGQ2XFx4ZGNcXHhlMVxceGUwXFx4ZTJcXHhlNFxceGUzXFx4ZTVcXHhlN1xceGU5XFx4ZThcXHhlYVxceGViXFx4ZWRcXHhlY1xceGVlXFx4ZWZcXHhmMVxceGYzXFx4ZjJcXHhmNFxceGY2XFx4ZjVcXHhmYVxceGY5XFx4ZmJcXHhmY1xcdTIwMjBcXHhiMFxceGEyXFx4YTNcXHhhN1xcdTIwMjJcXHhiNlxceGRmXFx4YWVcXHhhOVxcdTIxMjJcXHhiNFxceGE4XFx1MjI2MFxceGM2XFx4ZDhcXHUyMjFFXFx4YjFcXHUyMjY0XFx1MjI2NVxceGE1XFx4YjVcXHUyMjAyXFx1MjIxMVxcdTIyMEZcXHUwM0MwXFx1MjIyQlxceGFhXFx4YmFcXHUwM0E5XFx4ZTZcXHhmOFxceGJmXFx4YTFcXHhhY1xcdTIyMUFcXHUwMTkyXFx1MjI0OFxcdTIyMDZcXHhhYlxceGJiXFx1MjAyNiBcXHhjMFxceGMzXFx4ZDVcXHUwMTUyXFx1MDE1M1xcdTIwMTNcXHUyMDE0XFx1MjAxQ1xcdTIwMURcXHUyMDE4XFx1MjAxOVxceGY3XFx1MjVDQVxceGZmXFx1MDE3OFxcdTAxMUVcXHUwMTFGXFx1MDEzMFxcdTAxMzFcXHUwMTVFXFx1MDE1RlxcdTIwMjFcXHhiN1xcdTIwMUFcXHUyMDFFXFx1MjAzMFxceGMyXFx4Y2FcXHhjMVxceGNiXFx4YzhcXHhjZFxceGNlXFx4Y2ZcXHhjY1xceGQzXFx4ZDRcXHVGOEZGXFx4ZDJcXHhkYVxceGRiXFx4ZDlcXHVGOEEwXFx1MDJDNlxcdTAyRENcXHhhZlxcdTAyRDhcXHUwMkQ5XFx1MDJEQVxceGI4XFx1MDJERFxcdTAyREJcXHUwMkM3XCJcbn07XG5jb25zdCAkZTQ0OWFkNzhkNTA4NDVmZSR2YXIkZW5jb2RpbmdDYWNoZSA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uICRlNDQ5YWQ3OGQ1MDg0NWZlJGV4cG9ydCQxZGNlYjNjMTRlZDY4YmVlKGVuY29kaW5nKSB7XG4gICAgbGV0IGNhY2hlZCA9ICRlNDQ5YWQ3OGQ1MDg0NWZlJHZhciRlbmNvZGluZ0NhY2hlLmdldChlbmNvZGluZyk7XG4gICAgaWYgKGNhY2hlZCkgcmV0dXJuIGNhY2hlZDtcbiAgICAvLyBUaGVzZSBlbmNvZGluZ3MgYXJlbid0IHN1cHBvcnRlZCBieSBUZXh0RGVjb2Rlci5cbiAgICBsZXQgbWFwcGluZyA9ICRlNDQ5YWQ3OGQ1MDg0NWZlJHZhciRNQUNfRU5DT0RJTkdTW2VuY29kaW5nXTtcbiAgICBpZiAobWFwcGluZykge1xuICAgICAgICBsZXQgcmVzID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbWFwcGluZy5sZW5ndGg7IGkrKylyZXMuc2V0KG1hcHBpbmcuY2hhckNvZGVBdChpKSwgMHg4MCArIGkpO1xuICAgICAgICAkZTQ0OWFkNzhkNTA4NDVmZSR2YXIkZW5jb2RpbmdDYWNoZS5zZXQoZW5jb2RpbmcsIHJlcyk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIC8vIE9ubHkgc2luZ2xlIGJ5dGUgZW5jb2RpbmdzIGNhbiBiZSBtYXBwZWQgMToxLlxuICAgIGlmICgkZTQ0OWFkNzhkNTA4NDVmZSR2YXIkU0lOR0xFX0JZVEVfRU5DT0RJTkdTLmhhcyhlbmNvZGluZykpIHtcbiAgICAgICAgLy8gVGV4dEVuY29kZXIgb25seSBzdXBwb3J0cyB1dGY4LCB3aGVyZWFzIFRleHREZWNvZGVyIHN1cHBvcnRzIGxlZ2FjeSBlbmNvZGluZ3MuXG4gICAgICAgIC8vIFVzZSB0aGlzIHRvIGNyZWF0ZSBhIG1hcHBpbmcgb2YgY29kZSBwb2ludHMuXG4gICAgICAgIGxldCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKGVuY29kaW5nKTtcbiAgICAgICAgbGV0IG1hcHBpbmcgPSBuZXcgVWludDhBcnJheSgweDgwKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDB4ODA7IGkrKyltYXBwaW5nW2ldID0gMHg4MCArIGk7XG4gICAgICAgIGxldCByZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGxldCBzID0gZGVjb2Rlci5kZWNvZGUobWFwcGluZyk7XG4gICAgICAgIGZvcihsZXQgaTEgPSAwOyBpMSA8IDB4ODA7IGkxKyspcmVzLnNldChzLmNoYXJDb2RlQXQoaTEpLCAweDgwICsgaTEpO1xuICAgICAgICAkZTQ0OWFkNzhkNTA4NDVmZSR2YXIkZW5jb2RpbmdDYWNoZS5zZXQoZW5jb2RpbmcsIHJlcyk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufVxuY29uc3QgJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDZmZWY4N2I3NjE4YmRmMGIgPSBbXG4gICAgLy8gdW5pY29kZVxuICAgIFtcbiAgICAgICAgXCJ1dGYxNmJlXCIsXG4gICAgICAgIFwidXRmMTZiZVwiLFxuICAgICAgICBcInV0ZjE2YmVcIixcbiAgICAgICAgXCJ1dGYxNmJlXCIsXG4gICAgICAgIFwidXRmMTZiZVwiLFxuICAgICAgICBcInV0ZjE2YmVcIlxuICAgIF0sXG4gICAgLy8gbWFjaW50b3NoXG4gICAgLy8gTWFwcGluZ3MgYXZhaWxhYmxlIGF0IGh0dHA6Ly91bmljb2RlLm9yZy9QdWJsaWMvTUFQUElOR1MvVkVORE9SUy9BUFBMRS9cbiAgICAvLyAwXHRSb21hbiAgICAgICAgICAgICAgICAgMTdcdE1hbGF5YWxhbVxuICAgIC8vIDFcdEphcGFuZXNlXHQgICAgICAgICAgICAxOFx0U2luaGFsZXNlXG4gICAgLy8gMlx0VHJhZGl0aW9uYWwgQ2hpbmVzZVx0ICAxOVx0QnVybWVzZVxuICAgIC8vIDNcdEtvcmVhblx0ICAgICAgICAgICAgICAyMFx0S2htZXJcbiAgICAvLyA0XHRBcmFiaWNcdCAgICAgICAgICAgICAgMjFcdFRoYWlcbiAgICAvLyA1XHRIZWJyZXdcdCAgICAgICAgICAgICAgMjJcdExhb3RpYW5cbiAgICAvLyA2XHRHcmVla1x0ICAgICAgICAgICAgICAgIDIzXHRHZW9yZ2lhblxuICAgIC8vIDdcdFJ1c3NpYW5cdCAgICAgICAgICAgICAgMjRcdEFybWVuaWFuXG4gICAgLy8gOFx0UlN5bWJvbFx0ICAgICAgICAgICAgICAyNVx0U2ltcGxpZmllZCBDaGluZXNlXG4gICAgLy8gOVx0RGV2YW5hZ2FyaVx0ICAgICAgICAgIDI2XHRUaWJldGFuXG4gICAgLy8gMTBcdEd1cm11a2hpXHQgICAgICAgICAgICAyN1x0TW9uZ29saWFuXG4gICAgLy8gMTFcdEd1amFyYXRpXHQgICAgICAgICAgICAyOFx0R2VlelxuICAgIC8vIDEyXHRPcml5YVx0ICAgICAgICAgICAgICAgIDI5XHRTbGF2aWNcbiAgICAvLyAxM1x0QmVuZ2FsaVx0ICAgICAgICAgICAgICAzMFx0VmlldG5hbWVzZVxuICAgIC8vIDE0XHRUYW1pbFx0ICAgICAgICAgICAgICAgIDMxXHRTaW5kaGlcbiAgICAvLyAxNVx0VGVsdWd1XHQgICAgICAgICAgICAgIDMyXHQoVW5pbnRlcnByZXRlZClcbiAgICAvLyAxNlx0S2FubmFkYVxuICAgIFtcbiAgICAgICAgXCJ4LW1hYy1yb21hblwiLFxuICAgICAgICBcInNoaWZ0LWppc1wiLFxuICAgICAgICBcImJpZzVcIixcbiAgICAgICAgXCJldWMta3JcIixcbiAgICAgICAgXCJpc28tODg1OS02XCIsXG4gICAgICAgIFwiaXNvLTg4NTktOFwiLFxuICAgICAgICBcIngtbWFjLWdyZWVrXCIsXG4gICAgICAgIFwieC1tYWMtY3lyaWxsaWNcIixcbiAgICAgICAgXCJ4LW1hYy1zeW1ib2xcIixcbiAgICAgICAgXCJ4LW1hYy1kZXZhbmFnYXJpXCIsXG4gICAgICAgIFwieC1tYWMtZ3VybXVraGlcIixcbiAgICAgICAgXCJ4LW1hYy1ndWphcmF0aVwiLFxuICAgICAgICBcIk9yaXlhXCIsXG4gICAgICAgIFwiQmVuZ2FsaVwiLFxuICAgICAgICBcIlRhbWlsXCIsXG4gICAgICAgIFwiVGVsdWd1XCIsXG4gICAgICAgIFwiS2FubmFkYVwiLFxuICAgICAgICBcIk1hbGF5YWxhbVwiLFxuICAgICAgICBcIlNpbmhhbGVzZVwiLFxuICAgICAgICBcIkJ1cm1lc2VcIixcbiAgICAgICAgXCJLaG1lclwiLFxuICAgICAgICBcImlzby04ODU5LTExXCIsXG4gICAgICAgIFwiTGFvdGlhblwiLFxuICAgICAgICBcIkdlb3JnaWFuXCIsXG4gICAgICAgIFwiQXJtZW5pYW5cIixcbiAgICAgICAgXCJoei1nYi0yMzEyXCIsXG4gICAgICAgIFwiVGliZXRhblwiLFxuICAgICAgICBcIk1vbmdvbGlhblwiLFxuICAgICAgICBcIkdlZXpcIixcbiAgICAgICAgXCJ4LW1hYy1jZVwiLFxuICAgICAgICBcIlZpZXRuYW1lc2VcIixcbiAgICAgICAgXCJTaW5kaGlcIlxuICAgIF0sXG4gICAgLy8gSVNPIChkZXByZWNhdGVkKVxuICAgIFtcbiAgICAgICAgXCJhc2NpaVwiXG4gICAgXSxcbiAgICAvLyB3aW5kb3dzXG4gICAgLy8gRG9jcyBoZXJlOiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvc3lzdGVtLnRleHQuZW5jb2Rpbmcodj12cy4xMTApLmFzcHhcbiAgICBbXG4gICAgICAgIFwic3ltYm9sXCIsXG4gICAgICAgIFwidXRmMTZiZVwiLFxuICAgICAgICBcInNoaWZ0LWppc1wiLFxuICAgICAgICBcImdiMTgwMzBcIixcbiAgICAgICAgXCJiaWc1XCIsXG4gICAgICAgIFwieC1jcDIwOTQ5XCIsXG4gICAgICAgIFwiam9oYWJcIixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgXCJ1dGYxNmJlXCJcbiAgICBdXG5dO1xuY29uc3QgJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDQ3OWU2NzE5MDdmNDg2ZDEgPSB7XG4gICAgMTU6IFwieC1tYWMtaWNlbGFuZGljXCIsXG4gICAgMTc6IFwieC1tYWMtdHVya2lzaFwiLFxuICAgIDE4OiBcIngtbWFjLWNyb2F0aWFuXCIsXG4gICAgMjQ6IFwieC1tYWMtY2VcIixcbiAgICAyNTogXCJ4LW1hYy1jZVwiLFxuICAgIDI2OiBcIngtbWFjLWNlXCIsXG4gICAgMjc6IFwieC1tYWMtY2VcIixcbiAgICAyODogXCJ4LW1hYy1jZVwiLFxuICAgIDMwOiBcIngtbWFjLWljZWxhbmRpY1wiLFxuICAgIDM3OiBcIngtbWFjLXJvbWFuaWFuXCIsXG4gICAgMzg6IFwieC1tYWMtY2VcIixcbiAgICAzOTogXCJ4LW1hYy1jZVwiLFxuICAgIDQwOiBcIngtbWFjLWNlXCIsXG4gICAgMTQzOiBcIngtbWFjLWludWl0XCIsXG4gICAgMTQ2OiBcIngtbWFjLWdhZWxpY1wiXG59O1xuY29uc3QgJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDIwOTIzNzZmZDAwMmUxMyA9IFtcbiAgICAvLyB1bmljb2RlXG4gICAgW10sXG4gICAge1xuICAgICAgICAwOiBcImVuXCIsXG4gICAgICAgIDMwOiBcImZvXCIsXG4gICAgICAgIDYwOiBcImtzXCIsXG4gICAgICAgIDkwOiBcInJ3XCIsXG4gICAgICAgIDE6IFwiZnJcIixcbiAgICAgICAgMzE6IFwiZmFcIixcbiAgICAgICAgNjE6IFwia3VcIixcbiAgICAgICAgOTE6IFwicm5cIixcbiAgICAgICAgMjogXCJkZVwiLFxuICAgICAgICAzMjogXCJydVwiLFxuICAgICAgICA2MjogXCJzZFwiLFxuICAgICAgICA5MjogXCJueVwiLFxuICAgICAgICAzOiBcIml0XCIsXG4gICAgICAgIDMzOiBcInpoXCIsXG4gICAgICAgIDYzOiBcImJvXCIsXG4gICAgICAgIDkzOiBcIm1nXCIsXG4gICAgICAgIDQ6IFwibmxcIixcbiAgICAgICAgMzQ6IFwibmwtQkVcIixcbiAgICAgICAgNjQ6IFwibmVcIixcbiAgICAgICAgOTQ6IFwiZW9cIixcbiAgICAgICAgNTogXCJzdlwiLFxuICAgICAgICAzNTogXCJnYVwiLFxuICAgICAgICA2NTogXCJzYVwiLFxuICAgICAgICAxMjg6IFwiY3lcIixcbiAgICAgICAgNjogXCJlc1wiLFxuICAgICAgICAzNjogXCJzcVwiLFxuICAgICAgICA2NjogXCJtclwiLFxuICAgICAgICAxMjk6IFwiZXVcIixcbiAgICAgICAgNzogXCJkYVwiLFxuICAgICAgICAzNzogXCJyb1wiLFxuICAgICAgICA2NzogXCJiblwiLFxuICAgICAgICAxMzA6IFwiY2FcIixcbiAgICAgICAgODogXCJwdFwiLFxuICAgICAgICAzODogXCJjelwiLFxuICAgICAgICA2ODogXCJhc1wiLFxuICAgICAgICAxMzE6IFwibGFcIixcbiAgICAgICAgOTogXCJub1wiLFxuICAgICAgICAzOTogXCJza1wiLFxuICAgICAgICA2OTogXCJndVwiLFxuICAgICAgICAxMzI6IFwicXVcIixcbiAgICAgICAgMTA6IFwiaGVcIixcbiAgICAgICAgNDA6IFwic2lcIixcbiAgICAgICAgNzA6IFwicGFcIixcbiAgICAgICAgMTMzOiBcImduXCIsXG4gICAgICAgIDExOiBcImphXCIsXG4gICAgICAgIDQxOiBcInlpXCIsXG4gICAgICAgIDcxOiBcIm9yXCIsXG4gICAgICAgIDEzNDogXCJheVwiLFxuICAgICAgICAxMjogXCJhclwiLFxuICAgICAgICA0MjogXCJzclwiLFxuICAgICAgICA3MjogXCJtbFwiLFxuICAgICAgICAxMzU6IFwidHRcIixcbiAgICAgICAgMTM6IFwiZmlcIixcbiAgICAgICAgNDM6IFwibWtcIixcbiAgICAgICAgNzM6IFwia25cIixcbiAgICAgICAgMTM2OiBcInVnXCIsXG4gICAgICAgIDE0OiBcImVsXCIsXG4gICAgICAgIDQ0OiBcImJnXCIsXG4gICAgICAgIDc0OiBcInRhXCIsXG4gICAgICAgIDEzNzogXCJkelwiLFxuICAgICAgICAxNTogXCJpc1wiLFxuICAgICAgICA0NTogXCJ1a1wiLFxuICAgICAgICA3NTogXCJ0ZVwiLFxuICAgICAgICAxMzg6IFwianZcIixcbiAgICAgICAgMTY6IFwibXRcIixcbiAgICAgICAgNDY6IFwiYmVcIixcbiAgICAgICAgNzY6IFwic2lcIixcbiAgICAgICAgMTM5OiBcInN1XCIsXG4gICAgICAgIDE3OiBcInRyXCIsXG4gICAgICAgIDQ3OiBcInV6XCIsXG4gICAgICAgIDc3OiBcIm15XCIsXG4gICAgICAgIDE0MDogXCJnbFwiLFxuICAgICAgICAxODogXCJoclwiLFxuICAgICAgICA0ODogXCJra1wiLFxuICAgICAgICA3ODogXCJrbVwiLFxuICAgICAgICAxNDE6IFwiYWZcIixcbiAgICAgICAgMTk6IFwiemgtSGFudFwiLFxuICAgICAgICA0OTogXCJhei1DeXJsXCIsXG4gICAgICAgIDc5OiBcImxvXCIsXG4gICAgICAgIDE0MjogXCJiclwiLFxuICAgICAgICAyMDogXCJ1clwiLFxuICAgICAgICA1MDogXCJhei1BcmFiXCIsXG4gICAgICAgIDgwOiBcInZpXCIsXG4gICAgICAgIDE0MzogXCJpdVwiLFxuICAgICAgICAyMTogXCJoaVwiLFxuICAgICAgICA1MTogXCJoeVwiLFxuICAgICAgICA4MTogXCJpZFwiLFxuICAgICAgICAxNDQ6IFwiZ2RcIixcbiAgICAgICAgMjI6IFwidGhcIixcbiAgICAgICAgNTI6IFwia2FcIixcbiAgICAgICAgODI6IFwidGxcIixcbiAgICAgICAgMTQ1OiBcImd2XCIsXG4gICAgICAgIDIzOiBcImtvXCIsXG4gICAgICAgIDUzOiBcIm1vXCIsXG4gICAgICAgIDgzOiBcIm1zXCIsXG4gICAgICAgIDE0NjogXCJnYVwiLFxuICAgICAgICAyNDogXCJsdFwiLFxuICAgICAgICA1NDogXCJreVwiLFxuICAgICAgICA4NDogXCJtcy1BcmFiXCIsXG4gICAgICAgIDE0NzogXCJ0b1wiLFxuICAgICAgICAyNTogXCJwbFwiLFxuICAgICAgICA1NTogXCJ0Z1wiLFxuICAgICAgICA4NTogXCJhbVwiLFxuICAgICAgICAxNDg6IFwiZWwtcG9seXRvblwiLFxuICAgICAgICAyNjogXCJodVwiLFxuICAgICAgICA1NjogXCJ0a1wiLFxuICAgICAgICA4NjogXCJ0aVwiLFxuICAgICAgICAxNDk6IFwia2xcIixcbiAgICAgICAgMjc6IFwiZXNcIixcbiAgICAgICAgNTc6IFwibW4tQ05cIixcbiAgICAgICAgODc6IFwib21cIixcbiAgICAgICAgMTUwOiBcImF6XCIsXG4gICAgICAgIDI4OiBcImx2XCIsXG4gICAgICAgIDU4OiBcIm1uXCIsXG4gICAgICAgIDg4OiBcInNvXCIsXG4gICAgICAgIDE1MTogXCJublwiLFxuICAgICAgICAyOTogXCJzZVwiLFxuICAgICAgICA1OTogXCJwc1wiLFxuICAgICAgICA4OTogXCJzd1wiXG4gICAgfSxcbiAgICAvLyBJU08gKGRlcHJlY2F0ZWQpXG4gICAgW10sXG4gICAge1xuICAgICAgICAweDA0MzY6IFwiYWZcIixcbiAgICAgICAgMHg0MDA5OiBcImVuLUlOXCIsXG4gICAgICAgIDB4MDQ4NzogXCJyd1wiLFxuICAgICAgICAweDA0MzI6IFwidG5cIixcbiAgICAgICAgMHgwNDFDOiBcInNxXCIsXG4gICAgICAgIDB4MTgwOTogXCJlbi1JRVwiLFxuICAgICAgICAweDA0NDE6IFwic3dcIixcbiAgICAgICAgMHgwNDVCOiBcInNpXCIsXG4gICAgICAgIDB4MDQ4NDogXCJnc3dcIixcbiAgICAgICAgMHgyMDA5OiBcImVuLUpNXCIsXG4gICAgICAgIDB4MDQ1NzogXCJrb2tcIixcbiAgICAgICAgMHgwNDFCOiBcInNrXCIsXG4gICAgICAgIDB4MDQ1RTogXCJhbVwiLFxuICAgICAgICAweDQ0MDk6IFwiZW4tTVlcIixcbiAgICAgICAgMHgwNDEyOiBcImtvXCIsXG4gICAgICAgIDB4MDQyNDogXCJzbFwiLFxuICAgICAgICAweDE0MDE6IFwiYXItRFpcIixcbiAgICAgICAgMHgxNDA5OiBcImVuLU5aXCIsXG4gICAgICAgIDB4MDQ0MDogXCJreVwiLFxuICAgICAgICAweDJDMEE6IFwiZXMtQVJcIixcbiAgICAgICAgMHgzQzAxOiBcImFyLUJIXCIsXG4gICAgICAgIDB4MzQwOTogXCJlbi1QSFwiLFxuICAgICAgICAweDA0NTQ6IFwibG9cIixcbiAgICAgICAgMHg0MDBBOiBcImVzLUJPXCIsXG4gICAgICAgIDB4MEMwMTogXCJhclwiLFxuICAgICAgICAweDQ4MDk6IFwiZW4tU0dcIixcbiAgICAgICAgMHgwNDI2OiBcImx2XCIsXG4gICAgICAgIDB4MzQwQTogXCJlcy1DTFwiLFxuICAgICAgICAweDA4MDE6IFwiYXItSVFcIixcbiAgICAgICAgMHgxQzA5OiBcImVuLVpBXCIsXG4gICAgICAgIDB4MDQyNzogXCJsdFwiLFxuICAgICAgICAweDI0MEE6IFwiZXMtQ09cIixcbiAgICAgICAgMHgyQzAxOiBcImFyLUpPXCIsXG4gICAgICAgIDB4MkMwOTogXCJlbi1UVFwiLFxuICAgICAgICAweDA4MkU6IFwiZHNiXCIsXG4gICAgICAgIDB4MTQwQTogXCJlcy1DUlwiLFxuICAgICAgICAweDM0MDE6IFwiYXItS1dcIixcbiAgICAgICAgMHgwODA5OiBcImVuLUdCXCIsXG4gICAgICAgIDB4MDQ2RTogXCJsYlwiLFxuICAgICAgICAweDFDMEE6IFwiZXMtRE9cIixcbiAgICAgICAgMHgzMDAxOiBcImFyLUxCXCIsXG4gICAgICAgIDB4MDQwOTogXCJlblwiLFxuICAgICAgICAweDA0MkY6IFwibWtcIixcbiAgICAgICAgMHgzMDBBOiBcImVzLUVDXCIsXG4gICAgICAgIDB4MTAwMTogXCJhci1MWVwiLFxuICAgICAgICAweDMwMDk6IFwiZW4tWldcIixcbiAgICAgICAgMHgwODNFOiBcIm1zLUJOXCIsXG4gICAgICAgIDB4NDQwQTogXCJlcy1TVlwiLFxuICAgICAgICAweDE4MDE6IFwiYXJ5XCIsXG4gICAgICAgIDB4MDQyNTogXCJldFwiLFxuICAgICAgICAweDA0M0U6IFwibXNcIixcbiAgICAgICAgMHgxMDBBOiBcImVzLUdUXCIsXG4gICAgICAgIDB4MjAwMTogXCJhci1PTVwiLFxuICAgICAgICAweDA0Mzg6IFwiZm9cIixcbiAgICAgICAgMHgwNDRDOiBcIm1sXCIsXG4gICAgICAgIDB4NDgwQTogXCJlcy1ITlwiLFxuICAgICAgICAweDQwMDE6IFwiYXItUUFcIixcbiAgICAgICAgMHgwNDY0OiBcImZpbFwiLFxuICAgICAgICAweDA0M0E6IFwibXRcIixcbiAgICAgICAgMHgwODBBOiBcImVzLU1YXCIsXG4gICAgICAgIDB4MDQwMTogXCJhci1TQVwiLFxuICAgICAgICAweDA0MEI6IFwiZmlcIixcbiAgICAgICAgMHgwNDgxOiBcIm1pXCIsXG4gICAgICAgIDB4NEMwQTogXCJlcy1OSVwiLFxuICAgICAgICAweDI4MDE6IFwiYXItU1lcIixcbiAgICAgICAgMHgwODBDOiBcImZyLUJFXCIsXG4gICAgICAgIDB4MDQ3QTogXCJhcm5cIixcbiAgICAgICAgMHgxODBBOiBcImVzLVBBXCIsXG4gICAgICAgIDB4MUMwMTogXCJhZWJcIixcbiAgICAgICAgMHgwQzBDOiBcImZyLUNBXCIsXG4gICAgICAgIDB4MDQ0RTogXCJtclwiLFxuICAgICAgICAweDNDMEE6IFwiZXMtUFlcIixcbiAgICAgICAgMHgzODAxOiBcImFyLUFFXCIsXG4gICAgICAgIDB4MDQwQzogXCJmclwiLFxuICAgICAgICAweDA0N0M6IFwibW9oXCIsXG4gICAgICAgIDB4MjgwQTogXCJlcy1QRVwiLFxuICAgICAgICAweDI0MDE6IFwiYXItWUVcIixcbiAgICAgICAgMHgxNDBDOiBcImZyLUxVXCIsXG4gICAgICAgIDB4MDQ1MDogXCJtblwiLFxuICAgICAgICAweDUwMEE6IFwiZXMtUFJcIixcbiAgICAgICAgMHgwNDJCOiBcImh5XCIsXG4gICAgICAgIDB4MTgwQzogXCJmci1NQ1wiLFxuICAgICAgICAweDA4NTA6IFwibW4tQ05cIixcbiAgICAgICAgMHgwQzBBOiBcImVzXCIsXG4gICAgICAgIDB4MDQ0RDogXCJhc1wiLFxuICAgICAgICAweDEwMEM6IFwiZnItQ0hcIixcbiAgICAgICAgMHgwNDYxOiBcIm5lXCIsXG4gICAgICAgIDB4MDQwQTogXCJlc1wiLFxuICAgICAgICAweDA4MkM6IFwiYXotQ3lybFwiLFxuICAgICAgICAweDA0NjI6IFwiZnlcIixcbiAgICAgICAgMHgwNDE0OiBcIm5iXCIsXG4gICAgICAgIDB4NTQwQTogXCJlcy1VU1wiLFxuICAgICAgICAweDA0MkM6IFwiYXpcIixcbiAgICAgICAgMHgwNDU2OiBcImdsXCIsXG4gICAgICAgIDB4MDgxNDogXCJublwiLFxuICAgICAgICAweDM4MEE6IFwiZXMtVVlcIixcbiAgICAgICAgMHgwNDZEOiBcImJhXCIsXG4gICAgICAgIDB4MDQzNzogXCJrYVwiLFxuICAgICAgICAweDA0ODI6IFwib2NcIixcbiAgICAgICAgMHgyMDBBOiBcImVzLVZFXCIsXG4gICAgICAgIDB4MDQyRDogXCJldVwiLFxuICAgICAgICAweDBDMDc6IFwiZGUtQVRcIixcbiAgICAgICAgMHgwNDQ4OiBcIm9yXCIsXG4gICAgICAgIDB4MDgxRDogXCJzdi1GSVwiLFxuICAgICAgICAweDA0MjM6IFwiYmVcIixcbiAgICAgICAgMHgwNDA3OiBcImRlXCIsXG4gICAgICAgIDB4MDQ2MzogXCJwc1wiLFxuICAgICAgICAweDA0MUQ6IFwic3ZcIixcbiAgICAgICAgMHgwODQ1OiBcImJuXCIsXG4gICAgICAgIDB4MTQwNzogXCJkZS1MSVwiLFxuICAgICAgICAweDA0MTU6IFwicGxcIixcbiAgICAgICAgMHgwNDVBOiBcInN5clwiLFxuICAgICAgICAweDA0NDU6IFwiYm4tSU5cIixcbiAgICAgICAgMHgxMDA3OiBcImRlLUxVXCIsXG4gICAgICAgIDB4MDQxNjogXCJwdFwiLFxuICAgICAgICAweDA0Mjg6IFwidGdcIixcbiAgICAgICAgMHgyMDFBOiBcImJzLUN5cmxcIixcbiAgICAgICAgMHgwODA3OiBcImRlLUNIXCIsXG4gICAgICAgIDB4MDgxNjogXCJwdC1QVFwiLFxuICAgICAgICAweDA4NUY6IFwidHptXCIsXG4gICAgICAgIDB4MTQxQTogXCJic1wiLFxuICAgICAgICAweDA0MDg6IFwiZWxcIixcbiAgICAgICAgMHgwNDQ2OiBcInBhXCIsXG4gICAgICAgIDB4MDQ0OTogXCJ0YVwiLFxuICAgICAgICAweDA0N0U6IFwiYnJcIixcbiAgICAgICAgMHgwNDZGOiBcImtsXCIsXG4gICAgICAgIDB4MDQ2QjogXCJxdS1CT1wiLFxuICAgICAgICAweDA0NDQ6IFwidHRcIixcbiAgICAgICAgMHgwNDAyOiBcImJnXCIsXG4gICAgICAgIDB4MDQ0NzogXCJndVwiLFxuICAgICAgICAweDA4NkI6IFwicXUtRUNcIixcbiAgICAgICAgMHgwNDRBOiBcInRlXCIsXG4gICAgICAgIDB4MDQwMzogXCJjYVwiLFxuICAgICAgICAweDA0Njg6IFwiaGFcIixcbiAgICAgICAgMHgwQzZCOiBcInF1XCIsXG4gICAgICAgIDB4MDQxRTogXCJ0aFwiLFxuICAgICAgICAweDBDMDQ6IFwiemgtSEtcIixcbiAgICAgICAgMHgwNDBEOiBcImhlXCIsXG4gICAgICAgIDB4MDQxODogXCJyb1wiLFxuICAgICAgICAweDA0NTE6IFwiYm9cIixcbiAgICAgICAgMHgxNDA0OiBcInpoLU1PXCIsXG4gICAgICAgIDB4MDQzOTogXCJoaVwiLFxuICAgICAgICAweDA0MTc6IFwicm1cIixcbiAgICAgICAgMHgwNDFGOiBcInRyXCIsXG4gICAgICAgIDB4MDgwNDogXCJ6aFwiLFxuICAgICAgICAweDA0MEU6IFwiaHVcIixcbiAgICAgICAgMHgwNDE5OiBcInJ1XCIsXG4gICAgICAgIDB4MDQ0MjogXCJ0a1wiLFxuICAgICAgICAweDEwMDQ6IFwiemgtU0dcIixcbiAgICAgICAgMHgwNDBGOiBcImlzXCIsXG4gICAgICAgIDB4MjQzQjogXCJzbW5cIixcbiAgICAgICAgMHgwNDgwOiBcInVnXCIsXG4gICAgICAgIDB4MDQwNDogXCJ6aC1UV1wiLFxuICAgICAgICAweDA0NzA6IFwiaWdcIixcbiAgICAgICAgMHgxMDNCOiBcInNtai1OT1wiLFxuICAgICAgICAweDA0MjI6IFwidWtcIixcbiAgICAgICAgMHgwNDgzOiBcImNvXCIsXG4gICAgICAgIDB4MDQyMTogXCJpZFwiLFxuICAgICAgICAweDE0M0I6IFwic21qXCIsXG4gICAgICAgIDB4MDQyRTogXCJoc2JcIixcbiAgICAgICAgMHgwNDFBOiBcImhyXCIsXG4gICAgICAgIDB4MDQ1RDogXCJpdVwiLFxuICAgICAgICAweDBDM0I6IFwic2UtRklcIixcbiAgICAgICAgMHgwNDIwOiBcInVyXCIsXG4gICAgICAgIDB4MTAxQTogXCJoci1CQVwiLFxuICAgICAgICAweDA4NUQ6IFwiaXUtTGF0blwiLFxuICAgICAgICAweDA0M0I6IFwic2VcIixcbiAgICAgICAgMHgwODQzOiBcInV6LUN5cmxcIixcbiAgICAgICAgMHgwNDA1OiBcImNzXCIsXG4gICAgICAgIDB4MDgzQzogXCJnYVwiLFxuICAgICAgICAweDA4M0I6IFwic2UtU0VcIixcbiAgICAgICAgMHgwNDQzOiBcInV6XCIsXG4gICAgICAgIDB4MDQwNjogXCJkYVwiLFxuICAgICAgICAweDA0MzQ6IFwieGhcIixcbiAgICAgICAgMHgyMDNCOiBcInNtc1wiLFxuICAgICAgICAweDA0MkE6IFwidmlcIixcbiAgICAgICAgMHgwNDhDOiBcInByc1wiLFxuICAgICAgICAweDA0MzU6IFwienVcIixcbiAgICAgICAgMHgxODNCOiBcInNtYS1OT1wiLFxuICAgICAgICAweDA0NTI6IFwiY3lcIixcbiAgICAgICAgMHgwNDY1OiBcImR2XCIsXG4gICAgICAgIDB4MDQxMDogXCJpdFwiLFxuICAgICAgICAweDFDM0I6IFwic21zXCIsXG4gICAgICAgIDB4MDQ4ODogXCJ3b1wiLFxuICAgICAgICAweDA4MTM6IFwibmwtQkVcIixcbiAgICAgICAgMHgwODEwOiBcIml0LUNIXCIsXG4gICAgICAgIDB4MDQ0RjogXCJzYVwiLFxuICAgICAgICAweDA0ODU6IFwic2FoXCIsXG4gICAgICAgIDB4MDQxMzogXCJubFwiLFxuICAgICAgICAweDA0MTE6IFwiamFcIixcbiAgICAgICAgMHgxQzFBOiBcInNyLUN5cmwtQkFcIixcbiAgICAgICAgMHgwNDc4OiBcImlpXCIsXG4gICAgICAgIDB4MEMwOTogXCJlbi1BVVwiLFxuICAgICAgICAweDA0NEI6IFwia25cIixcbiAgICAgICAgMHgwQzFBOiBcInNyXCIsXG4gICAgICAgIDB4MDQ2QTogXCJ5b1wiLFxuICAgICAgICAweDI4MDk6IFwiZW4tQlpcIixcbiAgICAgICAgMHgwNDNGOiBcImtrXCIsXG4gICAgICAgIDB4MTgxQTogXCJzci1MYXRuLUJBXCIsXG4gICAgICAgIDB4MTAwOTogXCJlbi1DQVwiLFxuICAgICAgICAweDA0NTM6IFwia21cIixcbiAgICAgICAgMHgwODFBOiBcInNyLUxhdG5cIixcbiAgICAgICAgMHgyNDA5OiBcImVuLTAyOVwiLFxuICAgICAgICAweDA0ODY6IFwicXVjXCIsXG4gICAgICAgIDB4MDQ2QzogXCJuc29cIlxuICAgIH1cbl07XG5cblxubGV0ICQyYmNmMjIxNzUzZWM4ZTMyJHZhciROYW1lUmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHBsYXRmb3JtSUQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgZW5jb2RpbmdJRDogJDUyWklmJHVpbnQxNixcbiAgICBsYW5ndWFnZUlEOiAkNTJaSWYkdWludDE2LFxuICAgIG5hbWVJRDogJDUyWklmJHVpbnQxNixcbiAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgc3RyaW5nOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgbmV3ICQ1MlpJZiRTdHJpbmcoXCJsZW5ndGhcIiwgKHQpPT4oMCwgJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JGJhZGM1NDRlMDY1MWI2YjEpKHQucGxhdGZvcm1JRCwgdC5lbmNvZGluZ0lELCB0Lmxhbmd1YWdlSUQpKSwge1xuICAgICAgICB0eXBlOiBcInBhcmVudFwiLFxuICAgICAgICByZWxhdGl2ZVRvOiAoY3R4KT0+Y3R4LnBhcmVudC5zdHJpbmdPZmZzZXQsXG4gICAgICAgIGFsbG93TnVsbDogZmFsc2VcbiAgICB9KVxufSk7XG5sZXQgJDJiY2YyMjE3NTNlYzhlMzIkdmFyJExhbmdUYWdSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbGVuZ3RoOiAkNTJaSWYkdWludDE2LFxuICAgIHRhZzogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsIG5ldyAkNTJaSWYkU3RyaW5nKFwibGVuZ3RoXCIsIFwidXRmMTZiZVwiKSwge1xuICAgICAgICB0eXBlOiBcInBhcmVudFwiLFxuICAgICAgICByZWxhdGl2ZVRvOiAoY3R4KT0+Y3R4LnN0cmluZ09mZnNldFxuICAgIH0pXG59KTtcbnZhciAkMmJjZjIyMTc1M2VjOGUzMiR2YXIkTmFtZVRhYmxlID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQxNiwge1xuICAgIDA6IHtcbiAgICAgICAgY291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHN0cmluZ09mZnNldDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgcmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkMmJjZjIyMTc1M2VjOGUzMiR2YXIkTmFtZVJlY29yZCwgXCJjb3VudFwiKVxuICAgIH0sXG4gICAgMToge1xuICAgICAgICBjb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgc3RyaW5nT2Zmc2V0OiAkNTJaSWYkdWludDE2LFxuICAgICAgICByZWNvcmRzOiBuZXcgJDUyWklmJEFycmF5KCQyYmNmMjIxNzUzZWM4ZTMyJHZhciROYW1lUmVjb3JkLCBcImNvdW50XCIpLFxuICAgICAgICBsYW5nVGFnQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGxhbmdUYWdzOiBuZXcgJDUyWklmJEFycmF5KCQyYmNmMjIxNzUzZWM4ZTMyJHZhciRMYW5nVGFnUmVjb3JkLCBcImxhbmdUYWdDb3VudFwiKVxuICAgIH1cbn0pO1xudmFyICQyYmNmMjIxNzUzZWM4ZTMyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSAkMmJjZjIyMTc1M2VjOGUzMiR2YXIkTmFtZVRhYmxlO1xuY29uc3QgJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5BTUVTID0gW1xuICAgIFwiY29weXJpZ2h0XCIsXG4gICAgXCJmb250RmFtaWx5XCIsXG4gICAgXCJmb250U3ViZmFtaWx5XCIsXG4gICAgXCJ1bmlxdWVTdWJmYW1pbHlcIixcbiAgICBcImZ1bGxOYW1lXCIsXG4gICAgXCJ2ZXJzaW9uXCIsXG4gICAgXCJwb3N0c2NyaXB0TmFtZVwiLFxuICAgIFwidHJhZGVtYXJrXCIsXG4gICAgXCJtYW51ZmFjdHVyZXJcIixcbiAgICBcImRlc2lnbmVyXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiLFxuICAgIFwidmVuZG9yVVJMXCIsXG4gICAgXCJkZXNpZ25lclVSTFwiLFxuICAgIFwibGljZW5zZVwiLFxuICAgIFwibGljZW5zZVVSTFwiLFxuICAgIG51bGwsXG4gICAgXCJwcmVmZXJyZWRGYW1pbHlcIixcbiAgICBcInByZWZlcnJlZFN1YmZhbWlseVwiLFxuICAgIFwiY29tcGF0aWJsZUZ1bGxcIixcbiAgICBcInNhbXBsZVRleHRcIixcbiAgICBcInBvc3RzY3JpcHRDSURGb250TmFtZVwiLFxuICAgIFwid3dzRmFtaWx5TmFtZVwiLFxuICAgIFwid3dzU3ViZmFtaWx5TmFtZVwiXG5dO1xuJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5hbWVUYWJsZS5wcm9jZXNzID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIHJlY29yZHMgPSB7fTtcbiAgICBmb3IgKGxldCByZWNvcmQgb2YgdGhpcy5yZWNvcmRzKXtcbiAgICAgICAgLy8gZmluZCBvdXQgd2hhdCBsYW5ndWFnZSB0aGlzIGlzIGZvclxuICAgICAgICBsZXQgbGFuZ3VhZ2UgPSAoMCwgJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDIwOTIzNzZmZDAwMmUxMylbcmVjb3JkLnBsYXRmb3JtSURdW3JlY29yZC5sYW5ndWFnZUlEXTtcbiAgICAgICAgaWYgKGxhbmd1YWdlID09IG51bGwgJiYgdGhpcy5sYW5nVGFncyAhPSBudWxsICYmIHJlY29yZC5sYW5ndWFnZUlEID49IDB4ODAwMCkgbGFuZ3VhZ2UgPSB0aGlzLmxhbmdUYWdzW3JlY29yZC5sYW5ndWFnZUlEIC0gMHg4MDAwXS50YWc7XG4gICAgICAgIGlmIChsYW5ndWFnZSA9PSBudWxsKSBsYW5ndWFnZSA9IHJlY29yZC5wbGF0Zm9ybUlEICsgXCItXCIgKyByZWNvcmQubGFuZ3VhZ2VJRDtcbiAgICAgICAgLy8gaWYgdGhlIG5hbWVJRCBpcyA+PSAyNTYsIGl0IGlzIGEgZm9udCBmZWF0dXJlIHJlY29yZCAoQUFUKVxuICAgICAgICBsZXQga2V5ID0gcmVjb3JkLm5hbWVJRCA+PSAyNTYgPyBcImZvbnRGZWF0dXJlc1wiIDogJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5BTUVTW3JlY29yZC5uYW1lSURdIHx8IHJlY29yZC5uYW1lSUQ7XG4gICAgICAgIGlmIChyZWNvcmRzW2tleV0gPT0gbnVsbCkgcmVjb3Jkc1trZXldID0ge307XG4gICAgICAgIGxldCBvYmogPSByZWNvcmRzW2tleV07XG4gICAgICAgIGlmIChyZWNvcmQubmFtZUlEID49IDI1Nikgb2JqID0gb2JqW3JlY29yZC5uYW1lSURdIHx8IChvYmpbcmVjb3JkLm5hbWVJRF0gPSB7fSk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVjb3JkLnN0cmluZyA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2Ygb2JqW2xhbmd1YWdlXSAhPT0gXCJzdHJpbmdcIikgb2JqW2xhbmd1YWdlXSA9IHJlY29yZC5zdHJpbmc7XG4gICAgfVxuICAgIHRoaXMucmVjb3JkcyA9IHJlY29yZHM7XG59O1xuJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5hbWVUYWJsZS5wcmVFbmNvZGUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnJlY29yZHMpKSByZXR1cm47XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICBsZXQgcmVjb3JkcyA9IFtdO1xuICAgIGZvcihsZXQga2V5IGluIHRoaXMucmVjb3Jkcyl7XG4gICAgICAgIGxldCB2YWwgPSB0aGlzLnJlY29yZHNba2V5XTtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJmb250RmVhdHVyZXNcIikgY29udGludWU7XG4gICAgICAgIHJlY29yZHMucHVzaCh7XG4gICAgICAgICAgICBwbGF0Zm9ybUlEOiAzLFxuICAgICAgICAgICAgZW5jb2RpbmdJRDogMSxcbiAgICAgICAgICAgIGxhbmd1YWdlSUQ6IDB4NDA5LFxuICAgICAgICAgICAgbmFtZUlEOiAkMmJjZjIyMTc1M2VjOGUzMiR2YXIkTkFNRVMuaW5kZXhPZihrZXkpLFxuICAgICAgICAgICAgbGVuZ3RoOiB2YWwuZW4ubGVuZ3RoICogMixcbiAgICAgICAgICAgIHN0cmluZzogdmFsLmVuXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoa2V5ID09PSBcInBvc3RzY3JpcHROYW1lXCIpIHJlY29yZHMucHVzaCh7XG4gICAgICAgICAgICBwbGF0Zm9ybUlEOiAxLFxuICAgICAgICAgICAgZW5jb2RpbmdJRDogMCxcbiAgICAgICAgICAgIGxhbmd1YWdlSUQ6IDAsXG4gICAgICAgICAgICBuYW1lSUQ6ICQyYmNmMjIxNzUzZWM4ZTMyJHZhciROQU1FUy5pbmRleE9mKGtleSksXG4gICAgICAgICAgICBsZW5ndGg6IHZhbC5lbi5sZW5ndGgsXG4gICAgICAgICAgICBzdHJpbmc6IHZhbC5lblxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5yZWNvcmRzID0gcmVjb3JkcztcbiAgICB0aGlzLmNvdW50ID0gcmVjb3Jkcy5sZW5ndGg7XG4gICAgdGhpcy5zdHJpbmdPZmZzZXQgPSAkMmJjZjIyMTc1M2VjOGUzMiR2YXIkTmFtZVRhYmxlLnNpemUodGhpcywgbnVsbCwgZmFsc2UpO1xufTtcblxuXG5cbnZhciAkODRiMjcyYWEzMWI3MDYwNiR2YXIkT1MyID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQxNiwge1xuICAgIGhlYWRlcjoge1xuICAgICAgICB4QXZnQ2hhcldpZHRoOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHVzV2VpZ2h0Q2xhc3M6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHVzV2lkdGhDbGFzczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZnNUeXBlOiBuZXcgJDUyWklmJEJpdGZpZWxkKCQ1MlpJZiR1aW50MTYsIFtcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBcIm5vRW1iZWRkaW5nXCIsXG4gICAgICAgICAgICBcInZpZXdPbmx5XCIsXG4gICAgICAgICAgICBcImVkaXRhYmxlXCIsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgXCJub1N1YnNldHRpbmdcIixcbiAgICAgICAgICAgIFwiYml0bWFwT25seVwiXG4gICAgICAgIF0pLFxuICAgICAgICB5U3Vic2NyaXB0WFNpemU6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgeVN1YnNjcmlwdFlTaXplOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHlTdWJzY3JpcHRYT2Zmc2V0OiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHlTdWJzY3JpcHRZT2Zmc2V0OiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHlTdXBlcnNjcmlwdFhTaXplOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHlTdXBlcnNjcmlwdFlTaXplOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHlTdXBlcnNjcmlwdFhPZmZzZXQ6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgeVN1cGVyc2NyaXB0WU9mZnNldDogJDUyWklmJGludDE2LFxuICAgICAgICB5U3RyaWtlb3V0U2l6ZTogJDUyWklmJGludDE2LFxuICAgICAgICB5U3RyaWtlb3V0UG9zaXRpb246ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgc0ZhbWlseUNsYXNzOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHBhbm9zZTogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgsIDEwKSxcbiAgICAgICAgdWxDaGFyUmFuZ2U6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQzMiwgNCksXG4gICAgICAgIHZlbmRvcklEOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICAgICAgZnNTZWxlY3Rpb246IG5ldyAkNTJaSWYkQml0ZmllbGQoJDUyWklmJHVpbnQxNiwgW1xuICAgICAgICAgICAgXCJpdGFsaWNcIixcbiAgICAgICAgICAgIFwidW5kZXJzY29yZVwiLFxuICAgICAgICAgICAgXCJuZWdhdGl2ZVwiLFxuICAgICAgICAgICAgXCJvdXRsaW5lZFwiLFxuICAgICAgICAgICAgXCJzdHJpa2VvdXRcIixcbiAgICAgICAgICAgIFwiYm9sZFwiLFxuICAgICAgICAgICAgXCJyZWd1bGFyXCIsXG4gICAgICAgICAgICBcInVzZVR5cG9NZXRyaWNzXCIsXG4gICAgICAgICAgICBcInd3c1wiLFxuICAgICAgICAgICAgXCJvYmxpcXVlXCJcbiAgICAgICAgXSksXG4gICAgICAgIHVzRmlyc3RDaGFySW5kZXg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHVzTGFzdENoYXJJbmRleDogJDUyWklmJHVpbnQxNiAvLyBUaGUgbWF4aW11bSBVbmljb2RlIGluZGV4IGluIHRoaXMgZm9udFxuICAgIH0sXG4gICAgLy8gVGhlIEFwcGxlIHZlcnNpb24gb2YgdGhpcyB0YWJsZSBlbmRzIGhlcmUsIGJ1dCB0aGUgTWljcm9zb2Z0IG9uZSBjb250aW51ZXMgb24uLi5cbiAgICAwOiB7fSxcbiAgICAxOiB7XG4gICAgICAgIHR5cG9Bc2NlbmRlcjogJDUyWklmJGludDE2LFxuICAgICAgICB0eXBvRGVzY2VuZGVyOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHR5cG9MaW5lR2FwOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHdpbkFzY2VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgd2luRGVzY2VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY29kZVBhZ2VSYW5nZTogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDMyLCAyKVxuICAgIH0sXG4gICAgMjoge1xuICAgICAgICAvLyB0aGVzZSBzaG91bGQgYmUgY29tbW9uIHdpdGggdmVyc2lvbiAxIHNvbWVob3dcbiAgICAgICAgdHlwb0FzY2VuZGVyOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHR5cG9EZXNjZW5kZXI6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgdHlwb0xpbmVHYXA6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgd2luQXNjZW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICB3aW5EZXNjZW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBjb2RlUGFnZVJhbmdlOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MzIsIDIpLFxuICAgICAgICB4SGVpZ2h0OiAkNTJaSWYkaW50MTYsXG4gICAgICAgIGNhcEhlaWdodDogJDUyWklmJGludDE2LFxuICAgICAgICBkZWZhdWx0Q2hhcjogJDUyWklmJHVpbnQxNixcbiAgICAgICAgYnJlYWtDaGFyOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBtYXhDb250ZW50OiAkNTJaSWYkdWludDE2XG4gICAgfSxcbiAgICA1OiB7XG4gICAgICAgIHR5cG9Bc2NlbmRlcjogJDUyWklmJGludDE2LFxuICAgICAgICB0eXBvRGVzY2VuZGVyOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHR5cG9MaW5lR2FwOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHdpbkFzY2VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgd2luRGVzY2VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY29kZVBhZ2VSYW5nZTogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDMyLCAyKSxcbiAgICAgICAgeEhlaWdodDogJDUyWklmJGludDE2LFxuICAgICAgICBjYXBIZWlnaHQ6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgZGVmYXVsdENoYXI6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGJyZWFrQ2hhcjogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbWF4Q29udGVudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgdXNMb3dlck9wdGljYWxQb2ludFNpemU6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHVzVXBwZXJPcHRpY2FsUG9pbnRTaXplOiAkNTJaSWYkdWludDE2XG4gICAgfVxufSk7XG5sZXQgJDg0YjI3MmFhMzFiNzA2MDYkdmFyJHZlcnNpb25zID0gJDg0YjI3MmFhMzFiNzA2MDYkdmFyJE9TMi52ZXJzaW9ucztcbiQ4NGIyNzJhYTMxYjcwNjA2JHZhciR2ZXJzaW9uc1szXSA9ICQ4NGIyNzJhYTMxYjcwNjA2JHZhciR2ZXJzaW9uc1s0XSA9ICQ4NGIyNzJhYTMxYjcwNjA2JHZhciR2ZXJzaW9uc1syXTtcbnZhciAkODRiMjcyYWEzMWI3MDYwNiRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gJDg0YjI3MmFhMzFiNzA2MDYkdmFyJE9TMjtcblxuXG5cbnZhciAvLyBQb3N0U2NyaXB0IGluZm9ybWF0aW9uXG4kMzJkOWUyZWI5NTY1ZDkzYyRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJGZpeGVkMzIsIHtcbiAgICBoZWFkZXI6IHtcbiAgICAgICAgaXRhbGljQW5nbGU6ICQ1MlpJZiRmaXhlZDMyLFxuICAgICAgICB1bmRlcmxpbmVQb3NpdGlvbjogJDUyWklmJGludDE2LFxuICAgICAgICB1bmRlcmxpbmVUaGlja25lc3M6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgaXNGaXhlZFBpdGNoOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBtaW5NZW1UeXBlNDI6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIG1heE1lbVR5cGU0MjogJDUyWklmJHVpbnQzMixcbiAgICAgICAgbWluTWVtVHlwZTE6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIG1heE1lbVR5cGUxOiAkNTJaSWYkdWludDMyIC8vIE1heGltdW0gbWVtb3J5IHVzYWdlIHdoZW4gYSBUcnVlVHlwZSBmb250IGlzIGRvd25sb2FkZWQgYXMgYSBUeXBlIDEgZm9udFxuICAgIH0sXG4gICAgMToge30sXG4gICAgMjoge1xuICAgICAgICBudW1iZXJPZkdseXBoczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZ2x5cGhOYW1lSW5kZXg6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgXCJudW1iZXJPZkdseXBoc1wiKSxcbiAgICAgICAgbmFtZXM6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRTdHJpbmcoJDUyWklmJHVpbnQ4KSlcbiAgICB9LFxuICAgIDIuNToge1xuICAgICAgICBudW1iZXJPZkdseXBoczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgb2Zmc2V0czogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgsIFwibnVtYmVyT2ZHbHlwaHNcIilcbiAgICB9LFxuICAgIDM6IHt9LFxuICAgIDQ6IHtcbiAgICAgICAgbWFwOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MzIsICh0KT0+dC5wYXJlbnQubWF4cC5udW1HbHlwaHMpXG4gICAgfVxufSk7XG5cblxuXG52YXIgLy8gQW4gYXJyYXkgb2YgcHJlZGVmaW5lZCB2YWx1ZXMgYWNjZXNzaWJsZSBieSBpbnN0cnVjdGlvbnNcbiQ1MjAyYmQ5ZDlhZDhlYWFjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgY29udHJvbFZhbHVlczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkaW50MTYpXG59KTtcblxuXG5cbnZhciAvLyBBIGxpc3Qgb2YgaW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGV4ZWN1dGVkIG9uY2Ugd2hlbiBhIGZvbnQgaXMgZmlyc3QgdXNlZC5cbi8vIFRoZXNlIGluc3RydWN0aW9ucyBhcmUga25vd24gYXMgdGhlIGZvbnQgcHJvZ3JhbS4gVGhlIG1haW4gdXNlIG9mIHRoaXMgdGFibGVcbi8vIGlzIGZvciB0aGUgZGVmaW5pdGlvbiBvZiBmdW5jdGlvbnMgdGhhdCBhcmUgdXNlZCBpbiBtYW55IGRpZmZlcmVudCBnbHlwaCBwcm9ncmFtcy5cbiQ1YzBmMzdjYTVmZmIxODUwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgaW5zdHJ1Y3Rpb25zOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50OClcbn0pO1xuXG5cblxubGV0ICQyYjJiMjYwOTAyYjFjNTdlJHZhciRsb2NhID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoXCJoZWFkLmluZGV4VG9Mb2NGb3JtYXRcIiwge1xuICAgIDA6IHtcbiAgICAgICAgb2Zmc2V0czogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2KVxuICAgIH0sXG4gICAgMToge1xuICAgICAgICBvZmZzZXRzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MzIpXG4gICAgfVxufSk7XG4kMmIyYjI2MDkwMmIxYzU3ZSR2YXIkbG9jYS5wcm9jZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudmVyc2lvbiA9PT0gMCAmJiAhdGhpcy5fcHJvY2Vzc2VkKSB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLm9mZnNldHMubGVuZ3RoOyBpKyspdGhpcy5vZmZzZXRzW2ldIDw8PSAxO1xuICAgICAgICB0aGlzLl9wcm9jZXNzZWQgPSB0cnVlO1xuICAgIH1cbn07XG4kMmIyYjI2MDkwMmIxYzU3ZSR2YXIkbG9jYS5wcmVFbmNvZGUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy52ZXJzaW9uID09PSAwICYmIHRoaXMuX3Byb2Nlc3NlZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMub2Zmc2V0cy5sZW5ndGg7IGkrKyl0aGlzLm9mZnNldHNbaV0gPj4+PSAxO1xuICAgICAgICB0aGlzLl9wcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB9XG59O1xudmFyICQyYjJiMjYwOTAyYjFjNTdlJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSAkMmIyYjI2MDkwMmIxYzU3ZSR2YXIkbG9jYTtcblxuXG5cbnZhciAvLyBTZXQgb2YgaW5zdHJ1Y3Rpb25zIGV4ZWN1dGVkIHdoZW5ldmVyIHRoZSBwb2ludCBzaXplIG9yIGZvbnQgdHJhbnNmb3JtYXRpb24gY2hhbmdlXG4kN2FmYjg3OGM3YmVhNGY2NiRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGNvbnRyb2xWYWx1ZVByb2dyYW06IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQ4KVxufSk7XG5cblxuXG52YXIgLy8gb25seSB1c2VkIGZvciBlbmNvZGluZ1xuJDZjOTJiNjM3MWJjZThiZDkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRCdWZmZXIpO1xuXG5cblxuXG5jbGFzcyAkNDNlOTgyMWVmMzcxN2VlYyRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBnZXRDRkZWZXJzaW9uKGN0eCkge1xuICAgICAgICB3aGlsZShjdHggJiYgIWN0eC5oZHJTaXplKWN0eCA9IGN0eC5wYXJlbnQ7XG4gICAgICAgIHJldHVybiBjdHggPyBjdHgudmVyc2lvbiA6IC0xO1xuICAgIH1cbiAgICBkZWNvZGUoc3RyZWFtLCBwYXJlbnQpIHtcbiAgICAgICAgbGV0IHZlcnNpb24gPSB0aGlzLmdldENGRlZlcnNpb24ocGFyZW50KTtcbiAgICAgICAgbGV0IGNvdW50ID0gdmVyc2lvbiA+PSAyID8gc3RyZWFtLnJlYWRVSW50MzJCRSgpIDogc3RyZWFtLnJlYWRVSW50MTZCRSgpO1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHJldHVybiBbXTtcbiAgICAgICAgbGV0IG9mZlNpemUgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgIGxldCBvZmZzZXRUeXBlO1xuICAgICAgICBpZiAob2ZmU2l6ZSA9PT0gMSkgb2Zmc2V0VHlwZSA9ICQ1MlpJZiR1aW50ODtcbiAgICAgICAgZWxzZSBpZiAob2ZmU2l6ZSA9PT0gMikgb2Zmc2V0VHlwZSA9ICQ1MlpJZiR1aW50MTY7XG4gICAgICAgIGVsc2UgaWYgKG9mZlNpemUgPT09IDMpIG9mZnNldFR5cGUgPSAkNTJaSWYkdWludDI0O1xuICAgICAgICBlbHNlIGlmIChvZmZTaXplID09PSA0KSBvZmZzZXRUeXBlID0gJDUyWklmJHVpbnQzMjtcbiAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBvZmZzZXQgc2l6ZSBpbiBDRkZJbmRleDogJHtvZmZTaXplfSAke3N0cmVhbS5wb3N9YCk7XG4gICAgICAgIGxldCByZXQgPSBbXTtcbiAgICAgICAgbGV0IHN0YXJ0UG9zID0gc3RyZWFtLnBvcyArIChjb3VudCArIDEpICogb2ZmU2l6ZSAtIDE7XG4gICAgICAgIGxldCBzdGFydCA9IG9mZnNldFR5cGUuZGVjb2RlKHN0cmVhbSk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBlbmQgPSBvZmZzZXRUeXBlLmRlY29kZShzdHJlYW0pO1xuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBvcyA9IHN0cmVhbS5wb3M7XG4gICAgICAgICAgICAgICAgc3RyZWFtLnBvcyA9IHN0YXJ0UG9zICsgc3RhcnQ7XG4gICAgICAgICAgICAgICAgcGFyZW50Lmxlbmd0aCA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICAgICAgICAgIHJldC5wdXNoKHRoaXMudHlwZS5kZWNvZGUoc3RyZWFtLCBwYXJlbnQpKTtcbiAgICAgICAgICAgICAgICBzdHJlYW0ucG9zID0gcG9zO1xuICAgICAgICAgICAgfSBlbHNlIHJldC5wdXNoKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHN0YXJ0UG9zICsgc3RhcnQsXG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBlbmQgLSBzdGFydFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdGFydCA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0ucG9zID0gc3RhcnRQb3MgKyBzdGFydDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgc2l6ZShhcnIsIHBhcmVudCkge1xuICAgICAgICBsZXQgc2l6ZSA9IDI7XG4gICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAwKSByZXR1cm4gc2l6ZTtcbiAgICAgICAgbGV0IHR5cGUgPSB0aGlzLnR5cGUgfHwgbmV3ICQ1MlpJZiRCdWZmZXI7XG4gICAgICAgIC8vIGZpbmQgbWF4aW11bSBvZmZzZXQgdG8gZGV0bWluaW5lIG9mZnNldCB0eXBlXG4gICAgICAgIGxldCBvZmZzZXQgPSAxO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBpdGVtID0gYXJyW2ldO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IHR5cGUuc2l6ZShpdGVtLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvZmZzZXRUeXBlO1xuICAgICAgICBpZiAob2Zmc2V0IDw9IDB4ZmYpIG9mZnNldFR5cGUgPSAkNTJaSWYkdWludDg7XG4gICAgICAgIGVsc2UgaWYgKG9mZnNldCA8PSAweGZmZmYpIG9mZnNldFR5cGUgPSAkNTJaSWYkdWludDE2O1xuICAgICAgICBlbHNlIGlmIChvZmZzZXQgPD0gMHhmZmZmZmYpIG9mZnNldFR5cGUgPSAkNTJaSWYkdWludDI0O1xuICAgICAgICBlbHNlIGlmIChvZmZzZXQgPD0gMHhmZmZmZmZmZikgb2Zmc2V0VHlwZSA9ICQ1MlpJZiR1aW50MzI7XG4gICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKFwiQmFkIG9mZnNldCBpbiBDRkZJbmRleFwiKTtcbiAgICAgICAgc2l6ZSArPSAxICsgb2Zmc2V0VHlwZS5zaXplKCkgKiAoYXJyLmxlbmd0aCArIDEpO1xuICAgICAgICBzaXplICs9IG9mZnNldCAtIDE7XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cbiAgICBlbmNvZGUoc3RyZWFtLCBhcnIsIHBhcmVudCkge1xuICAgICAgICBzdHJlYW0ud3JpdGVVSW50MTZCRShhcnIubGVuZ3RoKTtcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgbGV0IHR5cGUgPSB0aGlzLnR5cGUgfHwgbmV3ICQ1MlpJZiRCdWZmZXI7XG4gICAgICAgIC8vIGZpbmQgbWF4aW11bSBvZmZzZXQgdG8gZGV0bWluaW5lIG9mZnNldCB0eXBlXG4gICAgICAgIGxldCBzaXplcyA9IFtdO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMTtcbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBhcnIpe1xuICAgICAgICAgICAgbGV0IHMgPSB0eXBlLnNpemUoaXRlbSwgcGFyZW50KTtcbiAgICAgICAgICAgIHNpemVzLnB1c2gocyk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gcztcbiAgICAgICAgfVxuICAgICAgICBsZXQgb2Zmc2V0VHlwZTtcbiAgICAgICAgaWYgKG9mZnNldCA8PSAweGZmKSBvZmZzZXRUeXBlID0gJDUyWklmJHVpbnQ4O1xuICAgICAgICBlbHNlIGlmIChvZmZzZXQgPD0gMHhmZmZmKSBvZmZzZXRUeXBlID0gJDUyWklmJHVpbnQxNjtcbiAgICAgICAgZWxzZSBpZiAob2Zmc2V0IDw9IDB4ZmZmZmZmKSBvZmZzZXRUeXBlID0gJDUyWklmJHVpbnQyNDtcbiAgICAgICAgZWxzZSBpZiAob2Zmc2V0IDw9IDB4ZmZmZmZmZmYpIG9mZnNldFR5cGUgPSAkNTJaSWYkdWludDMyO1xuICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcihcIkJhZCBvZmZzZXQgaW4gQ0ZGSW5kZXhcIik7XG4gICAgICAgIC8vIHdyaXRlIG9mZnNldCBzaXplXG4gICAgICAgIHN0cmVhbS53cml0ZVVJbnQ4KG9mZnNldFR5cGUuc2l6ZSgpKTtcbiAgICAgICAgLy8gd3JpdGUgZWxlbWVudHNcbiAgICAgICAgb2Zmc2V0ID0gMTtcbiAgICAgICAgb2Zmc2V0VHlwZS5lbmNvZGUoc3RyZWFtLCBvZmZzZXQpO1xuICAgICAgICBmb3IgKGxldCBzaXplIG9mIHNpemVzKXtcbiAgICAgICAgICAgIG9mZnNldCArPSBzaXplO1xuICAgICAgICAgICAgb2Zmc2V0VHlwZS5lbmNvZGUoc3RyZWFtLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGl0ZW0xIG9mIGFycil0eXBlLmVuY29kZShzdHJlYW0sIGl0ZW0xLCBwYXJlbnQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHR5cGUpe1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cbn1cblxuXG5cblxuXG5cbmNvbnN0ICRjMmQyOGU5MjcwOGY5OWRhJHZhciRGTE9BVF9FT0YgPSAweGY7XG5jb25zdCAkYzJkMjhlOTI3MDhmOTlkYSR2YXIkRkxPQVRfTE9PS1VQID0gW1xuICAgIFwiMFwiLFxuICAgIFwiMVwiLFxuICAgIFwiMlwiLFxuICAgIFwiM1wiLFxuICAgIFwiNFwiLFxuICAgIFwiNVwiLFxuICAgIFwiNlwiLFxuICAgIFwiN1wiLFxuICAgIFwiOFwiLFxuICAgIFwiOVwiLFxuICAgIFwiLlwiLFxuICAgIFwiRVwiLFxuICAgIFwiRS1cIixcbiAgICBudWxsLFxuICAgIFwiLVwiXG5dO1xuY29uc3QgJGMyZDI4ZTkyNzA4Zjk5ZGEkdmFyJEZMT0FUX0VOQ09ERV9MT09LVVAgPSB7XG4gICAgXCIuXCI6IDEwLFxuICAgIFwiRVwiOiAxMSxcbiAgICBcIkUtXCI6IDEyLFxuICAgIFwiLVwiOiAxNFxufTtcbmNsYXNzICRjMmQyOGU5MjcwOGY5OWRhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIHN0YXRpYyBkZWNvZGUoc3RyZWFtLCB2YWx1ZSkge1xuICAgICAgICBpZiAoMzIgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMjQ2KSByZXR1cm4gdmFsdWUgLSAxMzk7XG4gICAgICAgIGlmICgyNDcgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMjUwKSByZXR1cm4gKHZhbHVlIC0gMjQ3KSAqIDI1NiArIHN0cmVhbS5yZWFkVUludDgoKSArIDEwODtcbiAgICAgICAgaWYgKDI1MSA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAyNTQpIHJldHVybiAtKHZhbHVlIC0gMjUxKSAqIDI1NiAtIHN0cmVhbS5yZWFkVUludDgoKSAtIDEwODtcbiAgICAgICAgaWYgKHZhbHVlID09PSAyOCkgcmV0dXJuIHN0cmVhbS5yZWFkSW50MTZCRSgpO1xuICAgICAgICBpZiAodmFsdWUgPT09IDI5KSByZXR1cm4gc3RyZWFtLnJlYWRJbnQzMkJFKCk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMzApIHtcbiAgICAgICAgICAgIGxldCBzdHIgPSBcIlwiO1xuICAgICAgICAgICAgd2hpbGUodHJ1ZSl7XG4gICAgICAgICAgICAgICAgbGV0IGIgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICAgICAgbGV0IG4xID0gYiA+PiA0O1xuICAgICAgICAgICAgICAgIGlmIChuMSA9PT0gJGMyZDI4ZTkyNzA4Zjk5ZGEkdmFyJEZMT0FUX0VPRikgYnJlYWs7XG4gICAgICAgICAgICAgICAgc3RyICs9ICRjMmQyOGU5MjcwOGY5OWRhJHZhciRGTE9BVF9MT09LVVBbbjFdO1xuICAgICAgICAgICAgICAgIGxldCBuMiA9IGIgJiAxNTtcbiAgICAgICAgICAgICAgICBpZiAobjIgPT09ICRjMmQyOGU5MjcwOGY5OWRhJHZhciRGTE9BVF9FT0YpIGJyZWFrO1xuICAgICAgICAgICAgICAgIHN0ciArPSAkYzJkMjhlOTI3MDhmOTlkYSR2YXIkRkxPQVRfTE9PS1VQW24yXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHN0cik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0YXRpYyBzaXplKHZhbHVlKSB7XG4gICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBuZWVkcyB0byBiZSBmb3JjZWQgdG8gdGhlIGxhcmdlc3Qgc2l6ZSAoMzIgYml0KVxuICAgICAgICAvLyBlLmcuIGZvciB1bmtub3duIHBvaW50ZXJzLCBzZXQgdG8gMzI3NjhcbiAgICAgICAgaWYgKHZhbHVlLmZvcmNlTGFyZ2UpIHZhbHVlID0gMzI3Njg7XG4gICAgICAgIGlmICgodmFsdWUgfCAwKSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBzdHIgPSBcIlwiICsgdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gMSArIE1hdGguY2VpbCgoc3RyLmxlbmd0aCArIDEpIC8gMik7XG4gICAgICAgIH0gZWxzZSBpZiAoLTEwNyA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAxMDcpIHJldHVybiAxO1xuICAgICAgICBlbHNlIGlmICgxMDggPD0gdmFsdWUgJiYgdmFsdWUgPD0gMTEzMSB8fCAtMTEzMSA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAtMTA4KSByZXR1cm4gMjtcbiAgICAgICAgZWxzZSBpZiAoLTMyNzY4IDw9IHZhbHVlICYmIHZhbHVlIDw9IDMyNzY3KSByZXR1cm4gMztcbiAgICAgICAgZWxzZSByZXR1cm4gNTtcbiAgICB9XG4gICAgc3RhdGljIGVuY29kZShzdHJlYW0sIHZhbHVlKSB7XG4gICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBuZWVkcyB0byBiZSBmb3JjZWQgdG8gdGhlIGxhcmdlc3Qgc2l6ZSAoMzIgYml0KVxuICAgICAgICAvLyBlLmcuIGZvciB1bmtub3duIHBvaW50ZXJzLCBzYXZlIHRoZSBvbGQgdmFsdWUgYW5kIHNldCB0byAzMjc2OFxuICAgICAgICBsZXQgdmFsID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlLmZvcmNlTGFyZ2UpIHtcbiAgICAgICAgICAgIHN0cmVhbS53cml0ZVVJbnQ4KDI5KTtcbiAgICAgICAgICAgIHJldHVybiBzdHJlYW0ud3JpdGVJbnQzMkJFKHZhbCk7XG4gICAgICAgIH0gZWxzZSBpZiAoKHZhbCB8IDApICE9PSB2YWwpIHtcbiAgICAgICAgICAgIHN0cmVhbS53cml0ZVVJbnQ4KDMwKTtcbiAgICAgICAgICAgIGxldCBzdHIgPSBcIlwiICsgdmFsO1xuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gMil7XG4gICAgICAgICAgICAgICAgbGV0IGMxID0gc3RyW2ldO1xuICAgICAgICAgICAgICAgIGxldCBuMSA9ICRjMmQyOGU5MjcwOGY5OWRhJHZhciRGTE9BVF9FTkNPREVfTE9PS1VQW2MxXSB8fCArYzE7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGggLSAxKSB2YXIgbjIgPSAkYzJkMjhlOTI3MDhmOTlkYSR2YXIkRkxPQVRfRU9GO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYzIgPSBzdHJbaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbjIgPSAkYzJkMjhlOTI3MDhmOTlkYSR2YXIkRkxPQVRfRU5DT0RFX0xPT0tVUFtjMl0gfHwgK2MyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJlYW0ud3JpdGVVSW50OChuMSA8PCA0IHwgbjIgJiAxNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobjIgIT09ICRjMmQyOGU5MjcwOGY5OWRhJHZhciRGTE9BVF9FT0YpIHJldHVybiBzdHJlYW0ud3JpdGVVSW50OCgkYzJkMjhlOTI3MDhmOTlkYSR2YXIkRkxPQVRfRU9GIDw8IDQpO1xuICAgICAgICB9IGVsc2UgaWYgKC0xMDcgPD0gdmFsICYmIHZhbCA8PSAxMDcpIHJldHVybiBzdHJlYW0ud3JpdGVVSW50OCh2YWwgKyAxMzkpO1xuICAgICAgICBlbHNlIGlmICgxMDggPD0gdmFsICYmIHZhbCA8PSAxMTMxKSB7XG4gICAgICAgICAgICB2YWwgLT0gMTA4O1xuICAgICAgICAgICAgc3RyZWFtLndyaXRlVUludDgoKHZhbCA+PiA4KSArIDI0Nyk7XG4gICAgICAgICAgICByZXR1cm4gc3RyZWFtLndyaXRlVUludDgodmFsICYgMHhmZik7XG4gICAgICAgIH0gZWxzZSBpZiAoLTExMzEgPD0gdmFsICYmIHZhbCA8PSAtMTA4KSB7XG4gICAgICAgICAgICB2YWwgPSAtdmFsIC0gMTA4O1xuICAgICAgICAgICAgc3RyZWFtLndyaXRlVUludDgoKHZhbCA+PiA4KSArIDI1MSk7XG4gICAgICAgICAgICByZXR1cm4gc3RyZWFtLndyaXRlVUludDgodmFsICYgMHhmZik7XG4gICAgICAgIH0gZWxzZSBpZiAoLTMyNzY4IDw9IHZhbCAmJiB2YWwgPD0gMzI3NjcpIHtcbiAgICAgICAgICAgIHN0cmVhbS53cml0ZVVJbnQ4KDI4KTtcbiAgICAgICAgICAgIHJldHVybiBzdHJlYW0ud3JpdGVJbnQxNkJFKHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJlYW0ud3JpdGVVSW50OCgyOSk7XG4gICAgICAgICAgICByZXR1cm4gc3RyZWFtLndyaXRlSW50MzJCRSh2YWwpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuY2xhc3MgJDYxYWE1NDlmMTZkNThiOWIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgZGVjb2RlT3BlcmFuZHModHlwZSwgc3RyZWFtLCByZXQsIG9wZXJhbmRzKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSByZXR1cm4gb3BlcmFuZHMubWFwKChvcCwgaSk9PnRoaXMuZGVjb2RlT3BlcmFuZHModHlwZVtpXSwgc3RyZWFtLCByZXQsIFtcbiAgICAgICAgICAgICAgICBvcFxuICAgICAgICAgICAgXSkpO1xuICAgICAgICBlbHNlIGlmICh0eXBlLmRlY29kZSAhPSBudWxsKSByZXR1cm4gdHlwZS5kZWNvZGUoc3RyZWFtLCByZXQsIG9wZXJhbmRzKTtcbiAgICAgICAgZWxzZSBzd2l0Y2godHlwZSl7XG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICBjYXNlIFwib2Zmc2V0XCI6XG4gICAgICAgICAgICBjYXNlIFwic2lkXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wZXJhbmRzWzBdO1xuICAgICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gISFvcGVyYW5kc1swXTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wZXJhbmRzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVuY29kZU9wZXJhbmRzKHR5cGUsIHN0cmVhbSwgY3R4LCBvcGVyYW5kcykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSkgcmV0dXJuIG9wZXJhbmRzLm1hcCgob3AsIGkpPT50aGlzLmVuY29kZU9wZXJhbmRzKHR5cGVbaV0sIHN0cmVhbSwgY3R4LCBvcClbMF0pO1xuICAgICAgICBlbHNlIGlmICh0eXBlLmVuY29kZSAhPSBudWxsKSByZXR1cm4gdHlwZS5lbmNvZGUoc3RyZWFtLCBvcGVyYW5kcywgY3R4KTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG9wZXJhbmRzID09PSBcIm51bWJlclwiKSByZXR1cm4gW1xuICAgICAgICAgICAgb3BlcmFuZHNcbiAgICAgICAgXTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG9wZXJhbmRzID09PSBcImJvb2xlYW5cIikgcmV0dXJuIFtcbiAgICAgICAgICAgICtvcGVyYW5kc1xuICAgICAgICBdO1xuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9wZXJhbmRzKSkgcmV0dXJuIG9wZXJhbmRzO1xuICAgICAgICBlbHNlIHJldHVybiBbXG4gICAgICAgICAgICBvcGVyYW5kc1xuICAgICAgICBdO1xuICAgIH1cbiAgICBkZWNvZGUoc3RyZWFtLCBwYXJlbnQpIHtcbiAgICAgICAgbGV0IGVuZCA9IHN0cmVhbS5wb3MgKyBwYXJlbnQubGVuZ3RoO1xuICAgICAgICBsZXQgcmV0ID0ge307XG4gICAgICAgIGxldCBvcGVyYW5kcyA9IFtdO1xuICAgICAgICAvLyBkZWZpbmUgaGlkZGVuIHByb3BlcnRpZXNcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocmV0LCB7XG4gICAgICAgICAgICBwYXJlbnQ6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogcGFyZW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3N0YXJ0T2Zmc2V0OiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHN0cmVhbS5wb3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGZpbGwgaW4gZGVmYXVsdHNcbiAgICAgICAgZm9yKGxldCBrZXkgaW4gdGhpcy5maWVsZHMpe1xuICAgICAgICAgICAgbGV0IGZpZWxkID0gdGhpcy5maWVsZHNba2V5XTtcbiAgICAgICAgICAgIHJldFtmaWVsZFsxXV0gPSBmaWVsZFszXTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZShzdHJlYW0ucG9zIDwgZW5kKXtcbiAgICAgICAgICAgIGxldCBiID0gc3RyZWFtLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgaWYgKGIgPCAyOCkge1xuICAgICAgICAgICAgICAgIGlmIChiID09PSAxMikgYiA9IGIgPDwgOCB8IHN0cmVhbS5yZWFkVUludDgoKTtcbiAgICAgICAgICAgICAgICBsZXQgZmllbGQgPSB0aGlzLmZpZWxkc1tiXTtcbiAgICAgICAgICAgICAgICBpZiAoIWZpZWxkKSB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gb3BlcmF0b3IgJHtifWApO1xuICAgICAgICAgICAgICAgIGxldCB2YWwgPSB0aGlzLmRlY29kZU9wZXJhbmRzKGZpZWxkWzJdLCBzdHJlYW0sIHJldCwgb3BlcmFuZHMpO1xuICAgICAgICAgICAgICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgKDAsICQ1MlpJZiRQcm9wZXJ0eURlc2NyaXB0b3IpKSBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBmaWVsZFsxXSwgdmFsKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXRbZmllbGRbMV1dID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcGVyYW5kcyA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIG9wZXJhbmRzLnB1c2goKDAsICRjMmQyOGU5MjcwOGY5OWRhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLmRlY29kZShzdHJlYW0sIGIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBzaXplKGRpY3QsIHBhcmVudCwgaW5jbHVkZVBvaW50ZXJzID0gdHJ1ZSkge1xuICAgICAgICBsZXQgY3R4ID0ge1xuICAgICAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgICAgICB2YWw6IGRpY3QsXG4gICAgICAgICAgICBwb2ludGVyU2l6ZTogMCxcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBwYXJlbnQuc3RhcnRPZmZzZXQgfHwgMFxuICAgICAgICB9O1xuICAgICAgICBsZXQgbGVuID0gMDtcbiAgICAgICAgZm9yKGxldCBrIGluIHRoaXMuZmllbGRzKXtcbiAgICAgICAgICAgIGxldCBmaWVsZCA9IHRoaXMuZmllbGRzW2tdO1xuICAgICAgICAgICAgbGV0IHZhbCA9IGRpY3RbZmllbGRbMV1dO1xuICAgICAgICAgICAgaWYgKHZhbCA9PSBudWxsIHx8ICgwLCAkNTJaSWYkZmFzdGRlZXBlcXVhbCkodmFsLCBmaWVsZFszXSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGV0IG9wZXJhbmRzID0gdGhpcy5lbmNvZGVPcGVyYW5kcyhmaWVsZFsyXSwgbnVsbCwgY3R4LCB2YWwpO1xuICAgICAgICAgICAgZm9yIChsZXQgb3Agb2Ygb3BlcmFuZHMpbGVuICs9ICgwLCAkYzJkMjhlOTI3MDhmOTlkYSRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5zaXplKG9wKTtcbiAgICAgICAgICAgIGxldCBrZXkgPSBBcnJheS5pc0FycmF5KGZpZWxkWzBdKSA/IGZpZWxkWzBdIDogW1xuICAgICAgICAgICAgICAgIGZpZWxkWzBdXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgbGVuICs9IGtleS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluY2x1ZGVQb2ludGVycykgbGVuICs9IGN0eC5wb2ludGVyU2l6ZTtcbiAgICAgICAgcmV0dXJuIGxlbjtcbiAgICB9XG4gICAgZW5jb2RlKHN0cmVhbSwgZGljdCwgcGFyZW50KSB7XG4gICAgICAgIGxldCBjdHggPSB7XG4gICAgICAgICAgICBwb2ludGVyczogW10sXG4gICAgICAgICAgICBzdGFydE9mZnNldDogc3RyZWFtLnBvcyxcbiAgICAgICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICAgICAgdmFsOiBkaWN0LFxuICAgICAgICAgICAgcG9pbnRlclNpemU6IDBcbiAgICAgICAgfTtcbiAgICAgICAgY3R4LnBvaW50ZXJPZmZzZXQgPSBzdHJlYW0ucG9zICsgdGhpcy5zaXplKGRpY3QsIGN0eCwgZmFsc2UpO1xuICAgICAgICBmb3IgKGxldCBmaWVsZCBvZiB0aGlzLm9wcyl7XG4gICAgICAgICAgICBsZXQgdmFsID0gZGljdFtmaWVsZFsxXV07XG4gICAgICAgICAgICBpZiAodmFsID09IG51bGwgfHwgKDAsICQ1MlpJZiRmYXN0ZGVlcGVxdWFsKSh2YWwsIGZpZWxkWzNdKSkgY29udGludWU7XG4gICAgICAgICAgICBsZXQgb3BlcmFuZHMgPSB0aGlzLmVuY29kZU9wZXJhbmRzKGZpZWxkWzJdLCBzdHJlYW0sIGN0eCwgdmFsKTtcbiAgICAgICAgICAgIGZvciAobGV0IG9wIG9mIG9wZXJhbmRzKSgwLCAkYzJkMjhlOTI3MDhmOTlkYSRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5lbmNvZGUoc3RyZWFtLCBvcCk7XG4gICAgICAgICAgICBsZXQga2V5ID0gQXJyYXkuaXNBcnJheShmaWVsZFswXSkgPyBmaWVsZFswXSA6IFtcbiAgICAgICAgICAgICAgICBmaWVsZFswXVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGZvciAobGV0IG9wMSBvZiBrZXkpc3RyZWFtLndyaXRlVUludDgob3AxKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHdoaWxlKGkgPCBjdHgucG9pbnRlcnMubGVuZ3RoKXtcbiAgICAgICAgICAgIGxldCBwdHIgPSBjdHgucG9pbnRlcnNbaSsrXTtcbiAgICAgICAgICAgIHB0ci50eXBlLmVuY29kZShzdHJlYW0sIHB0ci52YWwsIHB0ci5wYXJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3BzID0gW10pe1xuICAgICAgICB0aGlzLm9wcyA9IG9wcztcbiAgICAgICAgdGhpcy5maWVsZHMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgZmllbGQgb2Ygb3BzKXtcbiAgICAgICAgICAgIGxldCBrZXkgPSBBcnJheS5pc0FycmF5KGZpZWxkWzBdKSA/IGZpZWxkWzBdWzBdIDw8IDggfCBmaWVsZFswXVsxXSA6IGZpZWxkWzBdO1xuICAgICAgICAgICAgdGhpcy5maWVsZHNba2V5XSA9IGZpZWxkO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuXG5jbGFzcyAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5IGV4dGVuZHMgJDUyWklmJFBvaW50ZXIge1xuICAgIGRlY29kZShzdHJlYW0sIHBhcmVudCwgb3BlcmFuZHMpIHtcbiAgICAgICAgdGhpcy5vZmZzZXRUeXBlID0ge1xuICAgICAgICAgICAgZGVjb2RlOiAoKT0+b3BlcmFuZHNbMF1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRlY29kZShzdHJlYW0sIHBhcmVudCwgb3BlcmFuZHMpO1xuICAgIH1cbiAgICBlbmNvZGUoc3RyZWFtLCB2YWx1ZSwgY3R4KSB7XG4gICAgICAgIGlmICghc3RyZWFtKSB7XG4gICAgICAgICAgICAvLyBjb21wdXRlIHRoZSBzaXplIChzbyBjdHgucG9pbnRlclNpemUgaXMgY29ycmVjdClcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0VHlwZSA9IHtcbiAgICAgICAgICAgICAgICBzaXplOiAoKT0+MFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSh2YWx1ZSwgY3R4KTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbmV3ICQwZTM0YTQzZDA1YmRlODJjJHZhciRQdHIoMClcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHB0ciA9IG51bGw7XG4gICAgICAgIHRoaXMub2Zmc2V0VHlwZSA9IHtcbiAgICAgICAgICAgIGVuY29kZTogKHN0cmVhbSwgdmFsKT0+cHRyID0gdmFsXG4gICAgICAgIH07XG4gICAgICAgIHN1cGVyLmVuY29kZShzdHJlYW0sIHZhbHVlLCBjdHgpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbmV3ICQwZTM0YTQzZDA1YmRlODJjJHZhciRQdHIocHRyKVxuICAgICAgICBdO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBvcHRpb25zID0ge30pe1xuICAgICAgICBpZiAob3B0aW9ucy50eXBlID09IG51bGwpIG9wdGlvbnMudHlwZSA9IFwiZ2xvYmFsXCI7XG4gICAgICAgIHN1cGVyKG51bGwsIHR5cGUsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmNsYXNzICQwZTM0YTQzZDA1YmRlODJjJHZhciRQdHIge1xuICAgIHZhbHVlT2YoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IodmFsKXtcbiAgICAgICAgdGhpcy52YWwgPSB2YWw7XG4gICAgICAgIHRoaXMuZm9yY2VMYXJnZSA9IHRydWU7XG4gICAgfVxufVxuXG5cblxuXG5cbmNsYXNzICQ2ZDU5ZGIyZTI5Y2M3N2IzJHZhciRDRkZCbGVuZE9wIHtcbiAgICBzdGF0aWMgZGVjb2RlKHN0cmVhbSwgcGFyZW50LCBvcGVyYW5kcykge1xuICAgICAgICBsZXQgbnVtQmxlbmRzID0gb3BlcmFuZHMucG9wKCk7XG4gICAgICAgIC8vIFRPRE86IGFjdHVhbGx5IGJsZW5kLiBGb3Igbm93IGp1c3QgY29uc3VtZSB0aGUgZGVsdGFzXG4gICAgICAgIC8vIHNpbmNlIHdlIGRvbid0IHVzZSBhbnkgb2YgdGhlIHZhbHVlcyBhbnl3YXkuXG4gICAgICAgIHdoaWxlKG9wZXJhbmRzLmxlbmd0aCA+IG51bUJsZW5kcylvcGVyYW5kcy5wb3AoKTtcbiAgICB9XG59XG52YXIgJDZkNTlkYjJlMjljYzc3YjMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAoMCwgJDYxYWE1NDlmMTZkNThiOWIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoW1xuICAgIC8vIGtleSAgICAgICBuYW1lICAgICAgICAgICAgICAgICAgICB0eXBlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFxuICAgIFtcbiAgICAgICAgNixcbiAgICAgICAgXCJCbHVlVmFsdWVzXCIsXG4gICAgICAgIFwiZGVsdGFcIixcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICA3LFxuICAgICAgICBcIk90aGVyQmx1ZXNcIixcbiAgICAgICAgXCJkZWx0YVwiLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDgsXG4gICAgICAgIFwiRmFtaWx5Qmx1ZXNcIixcbiAgICAgICAgXCJkZWx0YVwiLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDksXG4gICAgICAgIFwiRmFtaWx5T3RoZXJCbHVlc1wiLFxuICAgICAgICBcImRlbHRhXCIsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICA5XG4gICAgICAgIF0sXG4gICAgICAgIFwiQmx1ZVNjYWxlXCIsXG4gICAgICAgIFwibnVtYmVyXCIsXG4gICAgICAgIDAuMDM5NjI1XG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMTBcbiAgICAgICAgXSxcbiAgICAgICAgXCJCbHVlU2hpZnRcIixcbiAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgN1xuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDExXG4gICAgICAgIF0sXG4gICAgICAgIFwiQmx1ZUZ1enpcIixcbiAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgMVxuICAgIF0sXG4gICAgW1xuICAgICAgICAxMCxcbiAgICAgICAgXCJTdGRIV1wiLFxuICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDExLFxuICAgICAgICBcIlN0ZFZXXCIsXG4gICAgICAgIFwibnVtYmVyXCIsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxMlxuICAgICAgICBdLFxuICAgICAgICBcIlN0ZW1TbmFwSFwiLFxuICAgICAgICBcImRlbHRhXCIsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxM1xuICAgICAgICBdLFxuICAgICAgICBcIlN0ZW1TbmFwVlwiLFxuICAgICAgICBcImRlbHRhXCIsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxNFxuICAgICAgICBdLFxuICAgICAgICBcIkZvcmNlQm9sZFwiLFxuICAgICAgICBcImJvb2xlYW5cIixcbiAgICAgICAgZmFsc2VcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxN1xuICAgICAgICBdLFxuICAgICAgICBcIkxhbmd1YWdlR3JvdXBcIixcbiAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgMFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDE4XG4gICAgICAgIF0sXG4gICAgICAgIFwiRXhwYW5zaW9uRmFjdG9yXCIsXG4gICAgICAgIFwibnVtYmVyXCIsXG4gICAgICAgIDAuMDZcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAxOVxuICAgICAgICBdLFxuICAgICAgICBcImluaXRpYWxSYW5kb21TZWVkXCIsXG4gICAgICAgIFwibnVtYmVyXCIsXG4gICAgICAgIDBcbiAgICBdLFxuICAgIFtcbiAgICAgICAgMjAsXG4gICAgICAgIFwiZGVmYXVsdFdpZHRoWFwiLFxuICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICAwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDIxLFxuICAgICAgICBcIm5vbWluYWxXaWR0aFhcIixcbiAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgMFxuICAgIF0sXG4gICAgW1xuICAgICAgICAyMixcbiAgICAgICAgXCJ2c2luZGV4XCIsXG4gICAgICAgIFwibnVtYmVyXCIsXG4gICAgICAgIDBcbiAgICBdLFxuICAgIFtcbiAgICAgICAgMjMsXG4gICAgICAgIFwiYmxlbmRcIixcbiAgICAgICAgJDZkNTlkYjJlMjljYzc3YjMkdmFyJENGRkJsZW5kT3AsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgMTksXG4gICAgICAgIFwiU3VicnNcIixcbiAgICAgICAgbmV3ICgwLCAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KShuZXcgKDAsICQ0M2U5ODIxZWYzNzE3ZWVjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLCB7XG4gICAgICAgICAgICB0eXBlOiBcImxvY2FsXCJcbiAgICAgICAgfSksXG4gICAgICAgIG51bGxcbiAgICBdXG5dKTtcblxuXG52YXIgLy8gQXV0b21hdGljYWxseSBnZW5lcmF0ZWQgZnJvbSBBcHBlbmRpeCBBIG9mIHRoZSBDRkYgc3BlY2lmaWNhdGlvbjsgZG9cbi8vIG5vdCBlZGl0LiBMZW5ndGggc2hvdWxkIGJlIDM5MS5cbiQyMjkyMjRhZWM0Mzc4M2M1JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBbXG4gICAgXCIubm90ZGVmXCIsXG4gICAgXCJzcGFjZVwiLFxuICAgIFwiZXhjbGFtXCIsXG4gICAgXCJxdW90ZWRibFwiLFxuICAgIFwibnVtYmVyc2lnblwiLFxuICAgIFwiZG9sbGFyXCIsXG4gICAgXCJwZXJjZW50XCIsXG4gICAgXCJhbXBlcnNhbmRcIixcbiAgICBcInF1b3RlcmlnaHRcIixcbiAgICBcInBhcmVubGVmdFwiLFxuICAgIFwicGFyZW5yaWdodFwiLFxuICAgIFwiYXN0ZXJpc2tcIixcbiAgICBcInBsdXNcIixcbiAgICBcImNvbW1hXCIsXG4gICAgXCJoeXBoZW5cIixcbiAgICBcInBlcmlvZFwiLFxuICAgIFwic2xhc2hcIixcbiAgICBcInplcm9cIixcbiAgICBcIm9uZVwiLFxuICAgIFwidHdvXCIsXG4gICAgXCJ0aHJlZVwiLFxuICAgIFwiZm91clwiLFxuICAgIFwiZml2ZVwiLFxuICAgIFwic2l4XCIsXG4gICAgXCJzZXZlblwiLFxuICAgIFwiZWlnaHRcIixcbiAgICBcIm5pbmVcIixcbiAgICBcImNvbG9uXCIsXG4gICAgXCJzZW1pY29sb25cIixcbiAgICBcImxlc3NcIixcbiAgICBcImVxdWFsXCIsXG4gICAgXCJncmVhdGVyXCIsXG4gICAgXCJxdWVzdGlvblwiLFxuICAgIFwiYXRcIixcbiAgICBcIkFcIixcbiAgICBcIkJcIixcbiAgICBcIkNcIixcbiAgICBcIkRcIixcbiAgICBcIkVcIixcbiAgICBcIkZcIixcbiAgICBcIkdcIixcbiAgICBcIkhcIixcbiAgICBcIklcIixcbiAgICBcIkpcIixcbiAgICBcIktcIixcbiAgICBcIkxcIixcbiAgICBcIk1cIixcbiAgICBcIk5cIixcbiAgICBcIk9cIixcbiAgICBcIlBcIixcbiAgICBcIlFcIixcbiAgICBcIlJcIixcbiAgICBcIlNcIixcbiAgICBcIlRcIixcbiAgICBcIlVcIixcbiAgICBcIlZcIixcbiAgICBcIldcIixcbiAgICBcIlhcIixcbiAgICBcIllcIixcbiAgICBcIlpcIixcbiAgICBcImJyYWNrZXRsZWZ0XCIsXG4gICAgXCJiYWNrc2xhc2hcIixcbiAgICBcImJyYWNrZXRyaWdodFwiLFxuICAgIFwiYXNjaWljaXJjdW1cIixcbiAgICBcInVuZGVyc2NvcmVcIixcbiAgICBcInF1b3RlbGVmdFwiLFxuICAgIFwiYVwiLFxuICAgIFwiYlwiLFxuICAgIFwiY1wiLFxuICAgIFwiZFwiLFxuICAgIFwiZVwiLFxuICAgIFwiZlwiLFxuICAgIFwiZ1wiLFxuICAgIFwiaFwiLFxuICAgIFwiaVwiLFxuICAgIFwialwiLFxuICAgIFwia1wiLFxuICAgIFwibFwiLFxuICAgIFwibVwiLFxuICAgIFwiblwiLFxuICAgIFwib1wiLFxuICAgIFwicFwiLFxuICAgIFwicVwiLFxuICAgIFwiclwiLFxuICAgIFwic1wiLFxuICAgIFwidFwiLFxuICAgIFwidVwiLFxuICAgIFwidlwiLFxuICAgIFwid1wiLFxuICAgIFwieFwiLFxuICAgIFwieVwiLFxuICAgIFwielwiLFxuICAgIFwiYnJhY2VsZWZ0XCIsXG4gICAgXCJiYXJcIixcbiAgICBcImJyYWNlcmlnaHRcIixcbiAgICBcImFzY2lpdGlsZGVcIixcbiAgICBcImV4Y2xhbWRvd25cIixcbiAgICBcImNlbnRcIixcbiAgICBcInN0ZXJsaW5nXCIsXG4gICAgXCJmcmFjdGlvblwiLFxuICAgIFwieWVuXCIsXG4gICAgXCJmbG9yaW5cIixcbiAgICBcInNlY3Rpb25cIixcbiAgICBcImN1cnJlbmN5XCIsXG4gICAgXCJxdW90ZXNpbmdsZVwiLFxuICAgIFwicXVvdGVkYmxsZWZ0XCIsXG4gICAgXCJndWlsbGVtb3RsZWZ0XCIsXG4gICAgXCJndWlsc2luZ2xsZWZ0XCIsXG4gICAgXCJndWlsc2luZ2xyaWdodFwiLFxuICAgIFwiZmlcIixcbiAgICBcImZsXCIsXG4gICAgXCJlbmRhc2hcIixcbiAgICBcImRhZ2dlclwiLFxuICAgIFwiZGFnZ2VyZGJsXCIsXG4gICAgXCJwZXJpb2RjZW50ZXJlZFwiLFxuICAgIFwicGFyYWdyYXBoXCIsXG4gICAgXCJidWxsZXRcIixcbiAgICBcInF1b3Rlc2luZ2xiYXNlXCIsXG4gICAgXCJxdW90ZWRibGJhc2VcIixcbiAgICBcInF1b3RlZGJscmlnaHRcIixcbiAgICBcImd1aWxsZW1vdHJpZ2h0XCIsXG4gICAgXCJlbGxpcHNpc1wiLFxuICAgIFwicGVydGhvdXNhbmRcIixcbiAgICBcInF1ZXN0aW9uZG93blwiLFxuICAgIFwiZ3JhdmVcIixcbiAgICBcImFjdXRlXCIsXG4gICAgXCJjaXJjdW1mbGV4XCIsXG4gICAgXCJ0aWxkZVwiLFxuICAgIFwibWFjcm9uXCIsXG4gICAgXCJicmV2ZVwiLFxuICAgIFwiZG90YWNjZW50XCIsXG4gICAgXCJkaWVyZXNpc1wiLFxuICAgIFwicmluZ1wiLFxuICAgIFwiY2VkaWxsYVwiLFxuICAgIFwiaHVuZ2FydW1sYXV0XCIsXG4gICAgXCJvZ29uZWtcIixcbiAgICBcImNhcm9uXCIsXG4gICAgXCJlbWRhc2hcIixcbiAgICBcIkFFXCIsXG4gICAgXCJvcmRmZW1pbmluZVwiLFxuICAgIFwiTHNsYXNoXCIsXG4gICAgXCJPc2xhc2hcIixcbiAgICBcIk9FXCIsXG4gICAgXCJvcmRtYXNjdWxpbmVcIixcbiAgICBcImFlXCIsXG4gICAgXCJkb3RsZXNzaVwiLFxuICAgIFwibHNsYXNoXCIsXG4gICAgXCJvc2xhc2hcIixcbiAgICBcIm9lXCIsXG4gICAgXCJnZXJtYW5kYmxzXCIsXG4gICAgXCJvbmVzdXBlcmlvclwiLFxuICAgIFwibG9naWNhbG5vdFwiLFxuICAgIFwibXVcIixcbiAgICBcInRyYWRlbWFya1wiLFxuICAgIFwiRXRoXCIsXG4gICAgXCJvbmVoYWxmXCIsXG4gICAgXCJwbHVzbWludXNcIixcbiAgICBcIlRob3JuXCIsXG4gICAgXCJvbmVxdWFydGVyXCIsXG4gICAgXCJkaXZpZGVcIixcbiAgICBcImJyb2tlbmJhclwiLFxuICAgIFwiZGVncmVlXCIsXG4gICAgXCJ0aG9yblwiLFxuICAgIFwidGhyZWVxdWFydGVyc1wiLFxuICAgIFwidHdvc3VwZXJpb3JcIixcbiAgICBcInJlZ2lzdGVyZWRcIixcbiAgICBcIm1pbnVzXCIsXG4gICAgXCJldGhcIixcbiAgICBcIm11bHRpcGx5XCIsXG4gICAgXCJ0aHJlZXN1cGVyaW9yXCIsXG4gICAgXCJjb3B5cmlnaHRcIixcbiAgICBcIkFhY3V0ZVwiLFxuICAgIFwiQWNpcmN1bWZsZXhcIixcbiAgICBcIkFkaWVyZXNpc1wiLFxuICAgIFwiQWdyYXZlXCIsXG4gICAgXCJBcmluZ1wiLFxuICAgIFwiQXRpbGRlXCIsXG4gICAgXCJDY2VkaWxsYVwiLFxuICAgIFwiRWFjdXRlXCIsXG4gICAgXCJFY2lyY3VtZmxleFwiLFxuICAgIFwiRWRpZXJlc2lzXCIsXG4gICAgXCJFZ3JhdmVcIixcbiAgICBcIklhY3V0ZVwiLFxuICAgIFwiSWNpcmN1bWZsZXhcIixcbiAgICBcIklkaWVyZXNpc1wiLFxuICAgIFwiSWdyYXZlXCIsXG4gICAgXCJOdGlsZGVcIixcbiAgICBcIk9hY3V0ZVwiLFxuICAgIFwiT2NpcmN1bWZsZXhcIixcbiAgICBcIk9kaWVyZXNpc1wiLFxuICAgIFwiT2dyYXZlXCIsXG4gICAgXCJPdGlsZGVcIixcbiAgICBcIlNjYXJvblwiLFxuICAgIFwiVWFjdXRlXCIsXG4gICAgXCJVY2lyY3VtZmxleFwiLFxuICAgIFwiVWRpZXJlc2lzXCIsXG4gICAgXCJVZ3JhdmVcIixcbiAgICBcIllhY3V0ZVwiLFxuICAgIFwiWWRpZXJlc2lzXCIsXG4gICAgXCJaY2Fyb25cIixcbiAgICBcImFhY3V0ZVwiLFxuICAgIFwiYWNpcmN1bWZsZXhcIixcbiAgICBcImFkaWVyZXNpc1wiLFxuICAgIFwiYWdyYXZlXCIsXG4gICAgXCJhcmluZ1wiLFxuICAgIFwiYXRpbGRlXCIsXG4gICAgXCJjY2VkaWxsYVwiLFxuICAgIFwiZWFjdXRlXCIsXG4gICAgXCJlY2lyY3VtZmxleFwiLFxuICAgIFwiZWRpZXJlc2lzXCIsXG4gICAgXCJlZ3JhdmVcIixcbiAgICBcImlhY3V0ZVwiLFxuICAgIFwiaWNpcmN1bWZsZXhcIixcbiAgICBcImlkaWVyZXNpc1wiLFxuICAgIFwiaWdyYXZlXCIsXG4gICAgXCJudGlsZGVcIixcbiAgICBcIm9hY3V0ZVwiLFxuICAgIFwib2NpcmN1bWZsZXhcIixcbiAgICBcIm9kaWVyZXNpc1wiLFxuICAgIFwib2dyYXZlXCIsXG4gICAgXCJvdGlsZGVcIixcbiAgICBcInNjYXJvblwiLFxuICAgIFwidWFjdXRlXCIsXG4gICAgXCJ1Y2lyY3VtZmxleFwiLFxuICAgIFwidWRpZXJlc2lzXCIsXG4gICAgXCJ1Z3JhdmVcIixcbiAgICBcInlhY3V0ZVwiLFxuICAgIFwieWRpZXJlc2lzXCIsXG4gICAgXCJ6Y2Fyb25cIixcbiAgICBcImV4Y2xhbXNtYWxsXCIsXG4gICAgXCJIdW5nYXJ1bWxhdXRzbWFsbFwiLFxuICAgIFwiZG9sbGFyb2xkc3R5bGVcIixcbiAgICBcImRvbGxhcnN1cGVyaW9yXCIsXG4gICAgXCJhbXBlcnNhbmRzbWFsbFwiLFxuICAgIFwiQWN1dGVzbWFsbFwiLFxuICAgIFwicGFyZW5sZWZ0c3VwZXJpb3JcIixcbiAgICBcInBhcmVucmlnaHRzdXBlcmlvclwiLFxuICAgIFwidHdvZG90ZW5sZWFkZXJcIixcbiAgICBcIm9uZWRvdGVubGVhZGVyXCIsXG4gICAgXCJ6ZXJvb2xkc3R5bGVcIixcbiAgICBcIm9uZW9sZHN0eWxlXCIsXG4gICAgXCJ0d29vbGRzdHlsZVwiLFxuICAgIFwidGhyZWVvbGRzdHlsZVwiLFxuICAgIFwiZm91cm9sZHN0eWxlXCIsXG4gICAgXCJmaXZlb2xkc3R5bGVcIixcbiAgICBcInNpeG9sZHN0eWxlXCIsXG4gICAgXCJzZXZlbm9sZHN0eWxlXCIsXG4gICAgXCJlaWdodG9sZHN0eWxlXCIsXG4gICAgXCJuaW5lb2xkc3R5bGVcIixcbiAgICBcImNvbW1hc3VwZXJpb3JcIixcbiAgICBcInRocmVlcXVhcnRlcnNlbWRhc2hcIixcbiAgICBcInBlcmlvZHN1cGVyaW9yXCIsXG4gICAgXCJxdWVzdGlvbnNtYWxsXCIsXG4gICAgXCJhc3VwZXJpb3JcIixcbiAgICBcImJzdXBlcmlvclwiLFxuICAgIFwiY2VudHN1cGVyaW9yXCIsXG4gICAgXCJkc3VwZXJpb3JcIixcbiAgICBcImVzdXBlcmlvclwiLFxuICAgIFwiaXN1cGVyaW9yXCIsXG4gICAgXCJsc3VwZXJpb3JcIixcbiAgICBcIm1zdXBlcmlvclwiLFxuICAgIFwibnN1cGVyaW9yXCIsXG4gICAgXCJvc3VwZXJpb3JcIixcbiAgICBcInJzdXBlcmlvclwiLFxuICAgIFwic3N1cGVyaW9yXCIsXG4gICAgXCJ0c3VwZXJpb3JcIixcbiAgICBcImZmXCIsXG4gICAgXCJmZmlcIixcbiAgICBcImZmbFwiLFxuICAgIFwicGFyZW5sZWZ0aW5mZXJpb3JcIixcbiAgICBcInBhcmVucmlnaHRpbmZlcmlvclwiLFxuICAgIFwiQ2lyY3VtZmxleHNtYWxsXCIsXG4gICAgXCJoeXBoZW5zdXBlcmlvclwiLFxuICAgIFwiR3JhdmVzbWFsbFwiLFxuICAgIFwiQXNtYWxsXCIsXG4gICAgXCJCc21hbGxcIixcbiAgICBcIkNzbWFsbFwiLFxuICAgIFwiRHNtYWxsXCIsXG4gICAgXCJFc21hbGxcIixcbiAgICBcIkZzbWFsbFwiLFxuICAgIFwiR3NtYWxsXCIsXG4gICAgXCJIc21hbGxcIixcbiAgICBcIklzbWFsbFwiLFxuICAgIFwiSnNtYWxsXCIsXG4gICAgXCJLc21hbGxcIixcbiAgICBcIkxzbWFsbFwiLFxuICAgIFwiTXNtYWxsXCIsXG4gICAgXCJOc21hbGxcIixcbiAgICBcIk9zbWFsbFwiLFxuICAgIFwiUHNtYWxsXCIsXG4gICAgXCJRc21hbGxcIixcbiAgICBcIlJzbWFsbFwiLFxuICAgIFwiU3NtYWxsXCIsXG4gICAgXCJUc21hbGxcIixcbiAgICBcIlVzbWFsbFwiLFxuICAgIFwiVnNtYWxsXCIsXG4gICAgXCJXc21hbGxcIixcbiAgICBcIlhzbWFsbFwiLFxuICAgIFwiWXNtYWxsXCIsXG4gICAgXCJac21hbGxcIixcbiAgICBcImNvbG9ubW9uZXRhcnlcIixcbiAgICBcIm9uZWZpdHRlZFwiLFxuICAgIFwicnVwaWFoXCIsXG4gICAgXCJUaWxkZXNtYWxsXCIsXG4gICAgXCJleGNsYW1kb3duc21hbGxcIixcbiAgICBcImNlbnRvbGRzdHlsZVwiLFxuICAgIFwiTHNsYXNoc21hbGxcIixcbiAgICBcIlNjYXJvbnNtYWxsXCIsXG4gICAgXCJaY2Fyb25zbWFsbFwiLFxuICAgIFwiRGllcmVzaXNzbWFsbFwiLFxuICAgIFwiQnJldmVzbWFsbFwiLFxuICAgIFwiQ2Fyb25zbWFsbFwiLFxuICAgIFwiRG90YWNjZW50c21hbGxcIixcbiAgICBcIk1hY3JvbnNtYWxsXCIsXG4gICAgXCJmaWd1cmVkYXNoXCIsXG4gICAgXCJoeXBoZW5pbmZlcmlvclwiLFxuICAgIFwiT2dvbmVrc21hbGxcIixcbiAgICBcIlJpbmdzbWFsbFwiLFxuICAgIFwiQ2VkaWxsYXNtYWxsXCIsXG4gICAgXCJxdWVzdGlvbmRvd25zbWFsbFwiLFxuICAgIFwib25lZWlnaHRoXCIsXG4gICAgXCJ0aHJlZWVpZ2h0aHNcIixcbiAgICBcImZpdmVlaWdodGhzXCIsXG4gICAgXCJzZXZlbmVpZ2h0aHNcIixcbiAgICBcIm9uZXRoaXJkXCIsXG4gICAgXCJ0d290aGlyZHNcIixcbiAgICBcInplcm9zdXBlcmlvclwiLFxuICAgIFwiZm91cnN1cGVyaW9yXCIsXG4gICAgXCJmaXZlc3VwZXJpb3JcIixcbiAgICBcInNpeHN1cGVyaW9yXCIsXG4gICAgXCJzZXZlbnN1cGVyaW9yXCIsXG4gICAgXCJlaWdodHN1cGVyaW9yXCIsXG4gICAgXCJuaW5lc3VwZXJpb3JcIixcbiAgICBcInplcm9pbmZlcmlvclwiLFxuICAgIFwib25laW5mZXJpb3JcIixcbiAgICBcInR3b2luZmVyaW9yXCIsXG4gICAgXCJ0aHJlZWluZmVyaW9yXCIsXG4gICAgXCJmb3VyaW5mZXJpb3JcIixcbiAgICBcImZpdmVpbmZlcmlvclwiLFxuICAgIFwic2l4aW5mZXJpb3JcIixcbiAgICBcInNldmVuaW5mZXJpb3JcIixcbiAgICBcImVpZ2h0aW5mZXJpb3JcIixcbiAgICBcIm5pbmVpbmZlcmlvclwiLFxuICAgIFwiY2VudGluZmVyaW9yXCIsXG4gICAgXCJkb2xsYXJpbmZlcmlvclwiLFxuICAgIFwicGVyaW9kaW5mZXJpb3JcIixcbiAgICBcImNvbW1haW5mZXJpb3JcIixcbiAgICBcIkFncmF2ZXNtYWxsXCIsXG4gICAgXCJBYWN1dGVzbWFsbFwiLFxuICAgIFwiQWNpcmN1bWZsZXhzbWFsbFwiLFxuICAgIFwiQXRpbGRlc21hbGxcIixcbiAgICBcIkFkaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJBcmluZ3NtYWxsXCIsXG4gICAgXCJBRXNtYWxsXCIsXG4gICAgXCJDY2VkaWxsYXNtYWxsXCIsXG4gICAgXCJFZ3JhdmVzbWFsbFwiLFxuICAgIFwiRWFjdXRlc21hbGxcIixcbiAgICBcIkVjaXJjdW1mbGV4c21hbGxcIixcbiAgICBcIkVkaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJJZ3JhdmVzbWFsbFwiLFxuICAgIFwiSWFjdXRlc21hbGxcIixcbiAgICBcIkljaXJjdW1mbGV4c21hbGxcIixcbiAgICBcIklkaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJFdGhzbWFsbFwiLFxuICAgIFwiTnRpbGRlc21hbGxcIixcbiAgICBcIk9ncmF2ZXNtYWxsXCIsXG4gICAgXCJPYWN1dGVzbWFsbFwiLFxuICAgIFwiT2NpcmN1bWZsZXhzbWFsbFwiLFxuICAgIFwiT3RpbGRlc21hbGxcIixcbiAgICBcIk9kaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJPRXNtYWxsXCIsXG4gICAgXCJPc2xhc2hzbWFsbFwiLFxuICAgIFwiVWdyYXZlc21hbGxcIixcbiAgICBcIlVhY3V0ZXNtYWxsXCIsXG4gICAgXCJVY2lyY3VtZmxleHNtYWxsXCIsXG4gICAgXCJVZGllcmVzaXNzbWFsbFwiLFxuICAgIFwiWWFjdXRlc21hbGxcIixcbiAgICBcIlRob3Juc21hbGxcIixcbiAgICBcIllkaWVyZXNpc3NtYWxsXCIsXG4gICAgXCIwMDEuMDAwXCIsXG4gICAgXCIwMDEuMDAxXCIsXG4gICAgXCIwMDEuMDAyXCIsXG4gICAgXCIwMDEuMDAzXCIsXG4gICAgXCJCbGFja1wiLFxuICAgIFwiQm9sZFwiLFxuICAgIFwiQm9va1wiLFxuICAgIFwiTGlnaHRcIixcbiAgICBcIk1lZGl1bVwiLFxuICAgIFwiUmVndWxhclwiLFxuICAgIFwiUm9tYW5cIixcbiAgICBcIlNlbWlib2xkXCJcbl07XG5cblxubGV0ICRiYzA0MzNkOWI3ZTQxZjVmJGV4cG9ydCRkZWUwMDI3MDYwZmExM2JkID0gW1xuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcInNwYWNlXCIsXG4gICAgXCJleGNsYW1cIixcbiAgICBcInF1b3RlZGJsXCIsXG4gICAgXCJudW1iZXJzaWduXCIsXG4gICAgXCJkb2xsYXJcIixcbiAgICBcInBlcmNlbnRcIixcbiAgICBcImFtcGVyc2FuZFwiLFxuICAgIFwicXVvdGVyaWdodFwiLFxuICAgIFwicGFyZW5sZWZ0XCIsXG4gICAgXCJwYXJlbnJpZ2h0XCIsXG4gICAgXCJhc3Rlcmlza1wiLFxuICAgIFwicGx1c1wiLFxuICAgIFwiY29tbWFcIixcbiAgICBcImh5cGhlblwiLFxuICAgIFwicGVyaW9kXCIsXG4gICAgXCJzbGFzaFwiLFxuICAgIFwiemVyb1wiLFxuICAgIFwib25lXCIsXG4gICAgXCJ0d29cIixcbiAgICBcInRocmVlXCIsXG4gICAgXCJmb3VyXCIsXG4gICAgXCJmaXZlXCIsXG4gICAgXCJzaXhcIixcbiAgICBcInNldmVuXCIsXG4gICAgXCJlaWdodFwiLFxuICAgIFwibmluZVwiLFxuICAgIFwiY29sb25cIixcbiAgICBcInNlbWljb2xvblwiLFxuICAgIFwibGVzc1wiLFxuICAgIFwiZXF1YWxcIixcbiAgICBcImdyZWF0ZXJcIixcbiAgICBcInF1ZXN0aW9uXCIsXG4gICAgXCJhdFwiLFxuICAgIFwiQVwiLFxuICAgIFwiQlwiLFxuICAgIFwiQ1wiLFxuICAgIFwiRFwiLFxuICAgIFwiRVwiLFxuICAgIFwiRlwiLFxuICAgIFwiR1wiLFxuICAgIFwiSFwiLFxuICAgIFwiSVwiLFxuICAgIFwiSlwiLFxuICAgIFwiS1wiLFxuICAgIFwiTFwiLFxuICAgIFwiTVwiLFxuICAgIFwiTlwiLFxuICAgIFwiT1wiLFxuICAgIFwiUFwiLFxuICAgIFwiUVwiLFxuICAgIFwiUlwiLFxuICAgIFwiU1wiLFxuICAgIFwiVFwiLFxuICAgIFwiVVwiLFxuICAgIFwiVlwiLFxuICAgIFwiV1wiLFxuICAgIFwiWFwiLFxuICAgIFwiWVwiLFxuICAgIFwiWlwiLFxuICAgIFwiYnJhY2tldGxlZnRcIixcbiAgICBcImJhY2tzbGFzaFwiLFxuICAgIFwiYnJhY2tldHJpZ2h0XCIsXG4gICAgXCJhc2NpaWNpcmN1bVwiLFxuICAgIFwidW5kZXJzY29yZVwiLFxuICAgIFwicXVvdGVsZWZ0XCIsXG4gICAgXCJhXCIsXG4gICAgXCJiXCIsXG4gICAgXCJjXCIsXG4gICAgXCJkXCIsXG4gICAgXCJlXCIsXG4gICAgXCJmXCIsXG4gICAgXCJnXCIsXG4gICAgXCJoXCIsXG4gICAgXCJpXCIsXG4gICAgXCJqXCIsXG4gICAgXCJrXCIsXG4gICAgXCJsXCIsXG4gICAgXCJtXCIsXG4gICAgXCJuXCIsXG4gICAgXCJvXCIsXG4gICAgXCJwXCIsXG4gICAgXCJxXCIsXG4gICAgXCJyXCIsXG4gICAgXCJzXCIsXG4gICAgXCJ0XCIsXG4gICAgXCJ1XCIsXG4gICAgXCJ2XCIsXG4gICAgXCJ3XCIsXG4gICAgXCJ4XCIsXG4gICAgXCJ5XCIsXG4gICAgXCJ6XCIsXG4gICAgXCJicmFjZWxlZnRcIixcbiAgICBcImJhclwiLFxuICAgIFwiYnJhY2VyaWdodFwiLFxuICAgIFwiYXNjaWl0aWxkZVwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJleGNsYW1kb3duXCIsXG4gICAgXCJjZW50XCIsXG4gICAgXCJzdGVybGluZ1wiLFxuICAgIFwiZnJhY3Rpb25cIixcbiAgICBcInllblwiLFxuICAgIFwiZmxvcmluXCIsXG4gICAgXCJzZWN0aW9uXCIsXG4gICAgXCJjdXJyZW5jeVwiLFxuICAgIFwicXVvdGVzaW5nbGVcIixcbiAgICBcInF1b3RlZGJsbGVmdFwiLFxuICAgIFwiZ3VpbGxlbW90bGVmdFwiLFxuICAgIFwiZ3VpbHNpbmdsbGVmdFwiLFxuICAgIFwiZ3VpbHNpbmdscmlnaHRcIixcbiAgICBcImZpXCIsXG4gICAgXCJmbFwiLFxuICAgIFwiXCIsXG4gICAgXCJlbmRhc2hcIixcbiAgICBcImRhZ2dlclwiLFxuICAgIFwiZGFnZ2VyZGJsXCIsXG4gICAgXCJwZXJpb2RjZW50ZXJlZFwiLFxuICAgIFwiXCIsXG4gICAgXCJwYXJhZ3JhcGhcIixcbiAgICBcImJ1bGxldFwiLFxuICAgIFwicXVvdGVzaW5nbGJhc2VcIixcbiAgICBcInF1b3RlZGJsYmFzZVwiLFxuICAgIFwicXVvdGVkYmxyaWdodFwiLFxuICAgIFwiZ3VpbGxlbW90cmlnaHRcIixcbiAgICBcImVsbGlwc2lzXCIsXG4gICAgXCJwZXJ0aG91c2FuZFwiLFxuICAgIFwiXCIsXG4gICAgXCJxdWVzdGlvbmRvd25cIixcbiAgICBcIlwiLFxuICAgIFwiZ3JhdmVcIixcbiAgICBcImFjdXRlXCIsXG4gICAgXCJjaXJjdW1mbGV4XCIsXG4gICAgXCJ0aWxkZVwiLFxuICAgIFwibWFjcm9uXCIsXG4gICAgXCJicmV2ZVwiLFxuICAgIFwiZG90YWNjZW50XCIsXG4gICAgXCJkaWVyZXNpc1wiLFxuICAgIFwiXCIsXG4gICAgXCJyaW5nXCIsXG4gICAgXCJjZWRpbGxhXCIsXG4gICAgXCJcIixcbiAgICBcImh1bmdhcnVtbGF1dFwiLFxuICAgIFwib2dvbmVrXCIsXG4gICAgXCJjYXJvblwiLFxuICAgIFwiZW1kYXNoXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIkFFXCIsXG4gICAgXCJcIixcbiAgICBcIm9yZGZlbWluaW5lXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIkxzbGFzaFwiLFxuICAgIFwiT3NsYXNoXCIsXG4gICAgXCJPRVwiLFxuICAgIFwib3JkbWFzY3VsaW5lXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiYWVcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcImRvdGxlc3NpXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwibHNsYXNoXCIsXG4gICAgXCJvc2xhc2hcIixcbiAgICBcIm9lXCIsXG4gICAgXCJnZXJtYW5kYmxzXCJcbl07XG5sZXQgJGJjMDQzM2Q5YjdlNDFmNWYkZXhwb3J0JDRmNThmNDk3ZTE0YTUzYzMgPSBbXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwic3BhY2VcIixcbiAgICBcImV4Y2xhbXNtYWxsXCIsXG4gICAgXCJIdW5nYXJ1bWxhdXRzbWFsbFwiLFxuICAgIFwiXCIsXG4gICAgXCJkb2xsYXJvbGRzdHlsZVwiLFxuICAgIFwiZG9sbGFyc3VwZXJpb3JcIixcbiAgICBcImFtcGVyc2FuZHNtYWxsXCIsXG4gICAgXCJBY3V0ZXNtYWxsXCIsXG4gICAgXCJwYXJlbmxlZnRzdXBlcmlvclwiLFxuICAgIFwicGFyZW5yaWdodHN1cGVyaW9yXCIsXG4gICAgXCJ0d29kb3RlbmxlYWRlclwiLFxuICAgIFwib25lZG90ZW5sZWFkZXJcIixcbiAgICBcImNvbW1hXCIsXG4gICAgXCJoeXBoZW5cIixcbiAgICBcInBlcmlvZFwiLFxuICAgIFwiZnJhY3Rpb25cIixcbiAgICBcInplcm9vbGRzdHlsZVwiLFxuICAgIFwib25lb2xkc3R5bGVcIixcbiAgICBcInR3b29sZHN0eWxlXCIsXG4gICAgXCJ0aHJlZW9sZHN0eWxlXCIsXG4gICAgXCJmb3Vyb2xkc3R5bGVcIixcbiAgICBcImZpdmVvbGRzdHlsZVwiLFxuICAgIFwic2l4b2xkc3R5bGVcIixcbiAgICBcInNldmVub2xkc3R5bGVcIixcbiAgICBcImVpZ2h0b2xkc3R5bGVcIixcbiAgICBcIm5pbmVvbGRzdHlsZVwiLFxuICAgIFwiY29sb25cIixcbiAgICBcInNlbWljb2xvblwiLFxuICAgIFwiY29tbWFzdXBlcmlvclwiLFxuICAgIFwidGhyZWVxdWFydGVyc2VtZGFzaFwiLFxuICAgIFwicGVyaW9kc3VwZXJpb3JcIixcbiAgICBcInF1ZXN0aW9uc21hbGxcIixcbiAgICBcIlwiLFxuICAgIFwiYXN1cGVyaW9yXCIsXG4gICAgXCJic3VwZXJpb3JcIixcbiAgICBcImNlbnRzdXBlcmlvclwiLFxuICAgIFwiZHN1cGVyaW9yXCIsXG4gICAgXCJlc3VwZXJpb3JcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJpc3VwZXJpb3JcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJsc3VwZXJpb3JcIixcbiAgICBcIm1zdXBlcmlvclwiLFxuICAgIFwibnN1cGVyaW9yXCIsXG4gICAgXCJvc3VwZXJpb3JcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJyc3VwZXJpb3JcIixcbiAgICBcInNzdXBlcmlvclwiLFxuICAgIFwidHN1cGVyaW9yXCIsXG4gICAgXCJcIixcbiAgICBcImZmXCIsXG4gICAgXCJmaVwiLFxuICAgIFwiZmxcIixcbiAgICBcImZmaVwiLFxuICAgIFwiZmZsXCIsXG4gICAgXCJwYXJlbmxlZnRpbmZlcmlvclwiLFxuICAgIFwiXCIsXG4gICAgXCJwYXJlbnJpZ2h0aW5mZXJpb3JcIixcbiAgICBcIkNpcmN1bWZsZXhzbWFsbFwiLFxuICAgIFwiaHlwaGVuc3VwZXJpb3JcIixcbiAgICBcIkdyYXZlc21hbGxcIixcbiAgICBcIkFzbWFsbFwiLFxuICAgIFwiQnNtYWxsXCIsXG4gICAgXCJDc21hbGxcIixcbiAgICBcIkRzbWFsbFwiLFxuICAgIFwiRXNtYWxsXCIsXG4gICAgXCJGc21hbGxcIixcbiAgICBcIkdzbWFsbFwiLFxuICAgIFwiSHNtYWxsXCIsXG4gICAgXCJJc21hbGxcIixcbiAgICBcIkpzbWFsbFwiLFxuICAgIFwiS3NtYWxsXCIsXG4gICAgXCJMc21hbGxcIixcbiAgICBcIk1zbWFsbFwiLFxuICAgIFwiTnNtYWxsXCIsXG4gICAgXCJPc21hbGxcIixcbiAgICBcIlBzbWFsbFwiLFxuICAgIFwiUXNtYWxsXCIsXG4gICAgXCJSc21hbGxcIixcbiAgICBcIlNzbWFsbFwiLFxuICAgIFwiVHNtYWxsXCIsXG4gICAgXCJVc21hbGxcIixcbiAgICBcIlZzbWFsbFwiLFxuICAgIFwiV3NtYWxsXCIsXG4gICAgXCJYc21hbGxcIixcbiAgICBcIllzbWFsbFwiLFxuICAgIFwiWnNtYWxsXCIsXG4gICAgXCJjb2xvbm1vbmV0YXJ5XCIsXG4gICAgXCJvbmVmaXR0ZWRcIixcbiAgICBcInJ1cGlhaFwiLFxuICAgIFwiVGlsZGVzbWFsbFwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJleGNsYW1kb3duc21hbGxcIixcbiAgICBcImNlbnRvbGRzdHlsZVwiLFxuICAgIFwiTHNsYXNoc21hbGxcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJTY2Fyb25zbWFsbFwiLFxuICAgIFwiWmNhcm9uc21hbGxcIixcbiAgICBcIkRpZXJlc2lzc21hbGxcIixcbiAgICBcIkJyZXZlc21hbGxcIixcbiAgICBcIkNhcm9uc21hbGxcIixcbiAgICBcIlwiLFxuICAgIFwiRG90YWNjZW50c21hbGxcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJNYWNyb25zbWFsbFwiLFxuICAgIFwiXCIsXG4gICAgXCJcIixcbiAgICBcImZpZ3VyZWRhc2hcIixcbiAgICBcImh5cGhlbmluZmVyaW9yXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiT2dvbmVrc21hbGxcIixcbiAgICBcIlJpbmdzbWFsbFwiLFxuICAgIFwiQ2VkaWxsYXNtYWxsXCIsXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJvbmVxdWFydGVyXCIsXG4gICAgXCJvbmVoYWxmXCIsXG4gICAgXCJ0aHJlZXF1YXJ0ZXJzXCIsXG4gICAgXCJxdWVzdGlvbmRvd25zbWFsbFwiLFxuICAgIFwib25lZWlnaHRoXCIsXG4gICAgXCJ0aHJlZWVpZ2h0aHNcIixcbiAgICBcImZpdmVlaWdodGhzXCIsXG4gICAgXCJzZXZlbmVpZ2h0aHNcIixcbiAgICBcIm9uZXRoaXJkXCIsXG4gICAgXCJ0d290aGlyZHNcIixcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJ6ZXJvc3VwZXJpb3JcIixcbiAgICBcIm9uZXN1cGVyaW9yXCIsXG4gICAgXCJ0d29zdXBlcmlvclwiLFxuICAgIFwidGhyZWVzdXBlcmlvclwiLFxuICAgIFwiZm91cnN1cGVyaW9yXCIsXG4gICAgXCJmaXZlc3VwZXJpb3JcIixcbiAgICBcInNpeHN1cGVyaW9yXCIsXG4gICAgXCJzZXZlbnN1cGVyaW9yXCIsXG4gICAgXCJlaWdodHN1cGVyaW9yXCIsXG4gICAgXCJuaW5lc3VwZXJpb3JcIixcbiAgICBcInplcm9pbmZlcmlvclwiLFxuICAgIFwib25laW5mZXJpb3JcIixcbiAgICBcInR3b2luZmVyaW9yXCIsXG4gICAgXCJ0aHJlZWluZmVyaW9yXCIsXG4gICAgXCJmb3VyaW5mZXJpb3JcIixcbiAgICBcImZpdmVpbmZlcmlvclwiLFxuICAgIFwic2l4aW5mZXJpb3JcIixcbiAgICBcInNldmVuaW5mZXJpb3JcIixcbiAgICBcImVpZ2h0aW5mZXJpb3JcIixcbiAgICBcIm5pbmVpbmZlcmlvclwiLFxuICAgIFwiY2VudGluZmVyaW9yXCIsXG4gICAgXCJkb2xsYXJpbmZlcmlvclwiLFxuICAgIFwicGVyaW9kaW5mZXJpb3JcIixcbiAgICBcImNvbW1haW5mZXJpb3JcIixcbiAgICBcIkFncmF2ZXNtYWxsXCIsXG4gICAgXCJBYWN1dGVzbWFsbFwiLFxuICAgIFwiQWNpcmN1bWZsZXhzbWFsbFwiLFxuICAgIFwiQXRpbGRlc21hbGxcIixcbiAgICBcIkFkaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJBcmluZ3NtYWxsXCIsXG4gICAgXCJBRXNtYWxsXCIsXG4gICAgXCJDY2VkaWxsYXNtYWxsXCIsXG4gICAgXCJFZ3JhdmVzbWFsbFwiLFxuICAgIFwiRWFjdXRlc21hbGxcIixcbiAgICBcIkVjaXJjdW1mbGV4c21hbGxcIixcbiAgICBcIkVkaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJJZ3JhdmVzbWFsbFwiLFxuICAgIFwiSWFjdXRlc21hbGxcIixcbiAgICBcIkljaXJjdW1mbGV4c21hbGxcIixcbiAgICBcIklkaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJFdGhzbWFsbFwiLFxuICAgIFwiTnRpbGRlc21hbGxcIixcbiAgICBcIk9ncmF2ZXNtYWxsXCIsXG4gICAgXCJPYWN1dGVzbWFsbFwiLFxuICAgIFwiT2NpcmN1bWZsZXhzbWFsbFwiLFxuICAgIFwiT3RpbGRlc21hbGxcIixcbiAgICBcIk9kaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJPRXNtYWxsXCIsXG4gICAgXCJPc2xhc2hzbWFsbFwiLFxuICAgIFwiVWdyYXZlc21hbGxcIixcbiAgICBcIlVhY3V0ZXNtYWxsXCIsXG4gICAgXCJVY2lyY3VtZmxleHNtYWxsXCIsXG4gICAgXCJVZGllcmVzaXNzbWFsbFwiLFxuICAgIFwiWWFjdXRlc21hbGxcIixcbiAgICBcIlRob3Juc21hbGxcIixcbiAgICBcIllkaWVyZXNpc3NtYWxsXCJcbl07XG5cblxubGV0ICRlZjY1OGY1YzlhMTQ4OGIyJGV4cG9ydCRjMzNiNTAzMzZjMjM0ZjE2ID0gW1xuICAgIFwiLm5vdGRlZlwiLFxuICAgIFwic3BhY2VcIixcbiAgICBcImV4Y2xhbVwiLFxuICAgIFwicXVvdGVkYmxcIixcbiAgICBcIm51bWJlcnNpZ25cIixcbiAgICBcImRvbGxhclwiLFxuICAgIFwicGVyY2VudFwiLFxuICAgIFwiYW1wZXJzYW5kXCIsXG4gICAgXCJxdW90ZXJpZ2h0XCIsXG4gICAgXCJwYXJlbmxlZnRcIixcbiAgICBcInBhcmVucmlnaHRcIixcbiAgICBcImFzdGVyaXNrXCIsXG4gICAgXCJwbHVzXCIsXG4gICAgXCJjb21tYVwiLFxuICAgIFwiaHlwaGVuXCIsXG4gICAgXCJwZXJpb2RcIixcbiAgICBcInNsYXNoXCIsXG4gICAgXCJ6ZXJvXCIsXG4gICAgXCJvbmVcIixcbiAgICBcInR3b1wiLFxuICAgIFwidGhyZWVcIixcbiAgICBcImZvdXJcIixcbiAgICBcImZpdmVcIixcbiAgICBcInNpeFwiLFxuICAgIFwic2V2ZW5cIixcbiAgICBcImVpZ2h0XCIsXG4gICAgXCJuaW5lXCIsXG4gICAgXCJjb2xvblwiLFxuICAgIFwic2VtaWNvbG9uXCIsXG4gICAgXCJsZXNzXCIsXG4gICAgXCJlcXVhbFwiLFxuICAgIFwiZ3JlYXRlclwiLFxuICAgIFwicXVlc3Rpb25cIixcbiAgICBcImF0XCIsXG4gICAgXCJBXCIsXG4gICAgXCJCXCIsXG4gICAgXCJDXCIsXG4gICAgXCJEXCIsXG4gICAgXCJFXCIsXG4gICAgXCJGXCIsXG4gICAgXCJHXCIsXG4gICAgXCJIXCIsXG4gICAgXCJJXCIsXG4gICAgXCJKXCIsXG4gICAgXCJLXCIsXG4gICAgXCJMXCIsXG4gICAgXCJNXCIsXG4gICAgXCJOXCIsXG4gICAgXCJPXCIsXG4gICAgXCJQXCIsXG4gICAgXCJRXCIsXG4gICAgXCJSXCIsXG4gICAgXCJTXCIsXG4gICAgXCJUXCIsXG4gICAgXCJVXCIsXG4gICAgXCJWXCIsXG4gICAgXCJXXCIsXG4gICAgXCJYXCIsXG4gICAgXCJZXCIsXG4gICAgXCJaXCIsXG4gICAgXCJicmFja2V0bGVmdFwiLFxuICAgIFwiYmFja3NsYXNoXCIsXG4gICAgXCJicmFja2V0cmlnaHRcIixcbiAgICBcImFzY2lpY2lyY3VtXCIsXG4gICAgXCJ1bmRlcnNjb3JlXCIsXG4gICAgXCJxdW90ZWxlZnRcIixcbiAgICBcImFcIixcbiAgICBcImJcIixcbiAgICBcImNcIixcbiAgICBcImRcIixcbiAgICBcImVcIixcbiAgICBcImZcIixcbiAgICBcImdcIixcbiAgICBcImhcIixcbiAgICBcImlcIixcbiAgICBcImpcIixcbiAgICBcImtcIixcbiAgICBcImxcIixcbiAgICBcIm1cIixcbiAgICBcIm5cIixcbiAgICBcIm9cIixcbiAgICBcInBcIixcbiAgICBcInFcIixcbiAgICBcInJcIixcbiAgICBcInNcIixcbiAgICBcInRcIixcbiAgICBcInVcIixcbiAgICBcInZcIixcbiAgICBcIndcIixcbiAgICBcInhcIixcbiAgICBcInlcIixcbiAgICBcInpcIixcbiAgICBcImJyYWNlbGVmdFwiLFxuICAgIFwiYmFyXCIsXG4gICAgXCJicmFjZXJpZ2h0XCIsXG4gICAgXCJhc2NpaXRpbGRlXCIsXG4gICAgXCJleGNsYW1kb3duXCIsXG4gICAgXCJjZW50XCIsXG4gICAgXCJzdGVybGluZ1wiLFxuICAgIFwiZnJhY3Rpb25cIixcbiAgICBcInllblwiLFxuICAgIFwiZmxvcmluXCIsXG4gICAgXCJzZWN0aW9uXCIsXG4gICAgXCJjdXJyZW5jeVwiLFxuICAgIFwicXVvdGVzaW5nbGVcIixcbiAgICBcInF1b3RlZGJsbGVmdFwiLFxuICAgIFwiZ3VpbGxlbW90bGVmdFwiLFxuICAgIFwiZ3VpbHNpbmdsbGVmdFwiLFxuICAgIFwiZ3VpbHNpbmdscmlnaHRcIixcbiAgICBcImZpXCIsXG4gICAgXCJmbFwiLFxuICAgIFwiZW5kYXNoXCIsXG4gICAgXCJkYWdnZXJcIixcbiAgICBcImRhZ2dlcmRibFwiLFxuICAgIFwicGVyaW9kY2VudGVyZWRcIixcbiAgICBcInBhcmFncmFwaFwiLFxuICAgIFwiYnVsbGV0XCIsXG4gICAgXCJxdW90ZXNpbmdsYmFzZVwiLFxuICAgIFwicXVvdGVkYmxiYXNlXCIsXG4gICAgXCJxdW90ZWRibHJpZ2h0XCIsXG4gICAgXCJndWlsbGVtb3RyaWdodFwiLFxuICAgIFwiZWxsaXBzaXNcIixcbiAgICBcInBlcnRob3VzYW5kXCIsXG4gICAgXCJxdWVzdGlvbmRvd25cIixcbiAgICBcImdyYXZlXCIsXG4gICAgXCJhY3V0ZVwiLFxuICAgIFwiY2lyY3VtZmxleFwiLFxuICAgIFwidGlsZGVcIixcbiAgICBcIm1hY3JvblwiLFxuICAgIFwiYnJldmVcIixcbiAgICBcImRvdGFjY2VudFwiLFxuICAgIFwiZGllcmVzaXNcIixcbiAgICBcInJpbmdcIixcbiAgICBcImNlZGlsbGFcIixcbiAgICBcImh1bmdhcnVtbGF1dFwiLFxuICAgIFwib2dvbmVrXCIsXG4gICAgXCJjYXJvblwiLFxuICAgIFwiZW1kYXNoXCIsXG4gICAgXCJBRVwiLFxuICAgIFwib3JkZmVtaW5pbmVcIixcbiAgICBcIkxzbGFzaFwiLFxuICAgIFwiT3NsYXNoXCIsXG4gICAgXCJPRVwiLFxuICAgIFwib3JkbWFzY3VsaW5lXCIsXG4gICAgXCJhZVwiLFxuICAgIFwiZG90bGVzc2lcIixcbiAgICBcImxzbGFzaFwiLFxuICAgIFwib3NsYXNoXCIsXG4gICAgXCJvZVwiLFxuICAgIFwiZ2VybWFuZGJsc1wiLFxuICAgIFwib25lc3VwZXJpb3JcIixcbiAgICBcImxvZ2ljYWxub3RcIixcbiAgICBcIm11XCIsXG4gICAgXCJ0cmFkZW1hcmtcIixcbiAgICBcIkV0aFwiLFxuICAgIFwib25laGFsZlwiLFxuICAgIFwicGx1c21pbnVzXCIsXG4gICAgXCJUaG9yblwiLFxuICAgIFwib25lcXVhcnRlclwiLFxuICAgIFwiZGl2aWRlXCIsXG4gICAgXCJicm9rZW5iYXJcIixcbiAgICBcImRlZ3JlZVwiLFxuICAgIFwidGhvcm5cIixcbiAgICBcInRocmVlcXVhcnRlcnNcIixcbiAgICBcInR3b3N1cGVyaW9yXCIsXG4gICAgXCJyZWdpc3RlcmVkXCIsXG4gICAgXCJtaW51c1wiLFxuICAgIFwiZXRoXCIsXG4gICAgXCJtdWx0aXBseVwiLFxuICAgIFwidGhyZWVzdXBlcmlvclwiLFxuICAgIFwiY29weXJpZ2h0XCIsXG4gICAgXCJBYWN1dGVcIixcbiAgICBcIkFjaXJjdW1mbGV4XCIsXG4gICAgXCJBZGllcmVzaXNcIixcbiAgICBcIkFncmF2ZVwiLFxuICAgIFwiQXJpbmdcIixcbiAgICBcIkF0aWxkZVwiLFxuICAgIFwiQ2NlZGlsbGFcIixcbiAgICBcIkVhY3V0ZVwiLFxuICAgIFwiRWNpcmN1bWZsZXhcIixcbiAgICBcIkVkaWVyZXNpc1wiLFxuICAgIFwiRWdyYXZlXCIsXG4gICAgXCJJYWN1dGVcIixcbiAgICBcIkljaXJjdW1mbGV4XCIsXG4gICAgXCJJZGllcmVzaXNcIixcbiAgICBcIklncmF2ZVwiLFxuICAgIFwiTnRpbGRlXCIsXG4gICAgXCJPYWN1dGVcIixcbiAgICBcIk9jaXJjdW1mbGV4XCIsXG4gICAgXCJPZGllcmVzaXNcIixcbiAgICBcIk9ncmF2ZVwiLFxuICAgIFwiT3RpbGRlXCIsXG4gICAgXCJTY2Fyb25cIixcbiAgICBcIlVhY3V0ZVwiLFxuICAgIFwiVWNpcmN1bWZsZXhcIixcbiAgICBcIlVkaWVyZXNpc1wiLFxuICAgIFwiVWdyYXZlXCIsXG4gICAgXCJZYWN1dGVcIixcbiAgICBcIllkaWVyZXNpc1wiLFxuICAgIFwiWmNhcm9uXCIsXG4gICAgXCJhYWN1dGVcIixcbiAgICBcImFjaXJjdW1mbGV4XCIsXG4gICAgXCJhZGllcmVzaXNcIixcbiAgICBcImFncmF2ZVwiLFxuICAgIFwiYXJpbmdcIixcbiAgICBcImF0aWxkZVwiLFxuICAgIFwiY2NlZGlsbGFcIixcbiAgICBcImVhY3V0ZVwiLFxuICAgIFwiZWNpcmN1bWZsZXhcIixcbiAgICBcImVkaWVyZXNpc1wiLFxuICAgIFwiZWdyYXZlXCIsXG4gICAgXCJpYWN1dGVcIixcbiAgICBcImljaXJjdW1mbGV4XCIsXG4gICAgXCJpZGllcmVzaXNcIixcbiAgICBcImlncmF2ZVwiLFxuICAgIFwibnRpbGRlXCIsXG4gICAgXCJvYWN1dGVcIixcbiAgICBcIm9jaXJjdW1mbGV4XCIsXG4gICAgXCJvZGllcmVzaXNcIixcbiAgICBcIm9ncmF2ZVwiLFxuICAgIFwib3RpbGRlXCIsXG4gICAgXCJzY2Fyb25cIixcbiAgICBcInVhY3V0ZVwiLFxuICAgIFwidWNpcmN1bWZsZXhcIixcbiAgICBcInVkaWVyZXNpc1wiLFxuICAgIFwidWdyYXZlXCIsXG4gICAgXCJ5YWN1dGVcIixcbiAgICBcInlkaWVyZXNpc1wiLFxuICAgIFwiemNhcm9uXCJcbl07XG5sZXQgJGVmNjU4ZjVjOWExNDg4YjIkZXhwb3J0JDNlZDBmOWUxZmVlOGQ0ODkgPSBbXG4gICAgXCIubm90ZGVmXCIsXG4gICAgXCJzcGFjZVwiLFxuICAgIFwiZXhjbGFtc21hbGxcIixcbiAgICBcIkh1bmdhcnVtbGF1dHNtYWxsXCIsXG4gICAgXCJkb2xsYXJvbGRzdHlsZVwiLFxuICAgIFwiZG9sbGFyc3VwZXJpb3JcIixcbiAgICBcImFtcGVyc2FuZHNtYWxsXCIsXG4gICAgXCJBY3V0ZXNtYWxsXCIsXG4gICAgXCJwYXJlbmxlZnRzdXBlcmlvclwiLFxuICAgIFwicGFyZW5yaWdodHN1cGVyaW9yXCIsXG4gICAgXCJ0d29kb3RlbmxlYWRlclwiLFxuICAgIFwib25lZG90ZW5sZWFkZXJcIixcbiAgICBcImNvbW1hXCIsXG4gICAgXCJoeXBoZW5cIixcbiAgICBcInBlcmlvZFwiLFxuICAgIFwiZnJhY3Rpb25cIixcbiAgICBcInplcm9vbGRzdHlsZVwiLFxuICAgIFwib25lb2xkc3R5bGVcIixcbiAgICBcInR3b29sZHN0eWxlXCIsXG4gICAgXCJ0aHJlZW9sZHN0eWxlXCIsXG4gICAgXCJmb3Vyb2xkc3R5bGVcIixcbiAgICBcImZpdmVvbGRzdHlsZVwiLFxuICAgIFwic2l4b2xkc3R5bGVcIixcbiAgICBcInNldmVub2xkc3R5bGVcIixcbiAgICBcImVpZ2h0b2xkc3R5bGVcIixcbiAgICBcIm5pbmVvbGRzdHlsZVwiLFxuICAgIFwiY29sb25cIixcbiAgICBcInNlbWljb2xvblwiLFxuICAgIFwiY29tbWFzdXBlcmlvclwiLFxuICAgIFwidGhyZWVxdWFydGVyc2VtZGFzaFwiLFxuICAgIFwicGVyaW9kc3VwZXJpb3JcIixcbiAgICBcInF1ZXN0aW9uc21hbGxcIixcbiAgICBcImFzdXBlcmlvclwiLFxuICAgIFwiYnN1cGVyaW9yXCIsXG4gICAgXCJjZW50c3VwZXJpb3JcIixcbiAgICBcImRzdXBlcmlvclwiLFxuICAgIFwiZXN1cGVyaW9yXCIsXG4gICAgXCJpc3VwZXJpb3JcIixcbiAgICBcImxzdXBlcmlvclwiLFxuICAgIFwibXN1cGVyaW9yXCIsXG4gICAgXCJuc3VwZXJpb3JcIixcbiAgICBcIm9zdXBlcmlvclwiLFxuICAgIFwicnN1cGVyaW9yXCIsXG4gICAgXCJzc3VwZXJpb3JcIixcbiAgICBcInRzdXBlcmlvclwiLFxuICAgIFwiZmZcIixcbiAgICBcImZpXCIsXG4gICAgXCJmbFwiLFxuICAgIFwiZmZpXCIsXG4gICAgXCJmZmxcIixcbiAgICBcInBhcmVubGVmdGluZmVyaW9yXCIsXG4gICAgXCJwYXJlbnJpZ2h0aW5mZXJpb3JcIixcbiAgICBcIkNpcmN1bWZsZXhzbWFsbFwiLFxuICAgIFwiaHlwaGVuc3VwZXJpb3JcIixcbiAgICBcIkdyYXZlc21hbGxcIixcbiAgICBcIkFzbWFsbFwiLFxuICAgIFwiQnNtYWxsXCIsXG4gICAgXCJDc21hbGxcIixcbiAgICBcIkRzbWFsbFwiLFxuICAgIFwiRXNtYWxsXCIsXG4gICAgXCJGc21hbGxcIixcbiAgICBcIkdzbWFsbFwiLFxuICAgIFwiSHNtYWxsXCIsXG4gICAgXCJJc21hbGxcIixcbiAgICBcIkpzbWFsbFwiLFxuICAgIFwiS3NtYWxsXCIsXG4gICAgXCJMc21hbGxcIixcbiAgICBcIk1zbWFsbFwiLFxuICAgIFwiTnNtYWxsXCIsXG4gICAgXCJPc21hbGxcIixcbiAgICBcIlBzbWFsbFwiLFxuICAgIFwiUXNtYWxsXCIsXG4gICAgXCJSc21hbGxcIixcbiAgICBcIlNzbWFsbFwiLFxuICAgIFwiVHNtYWxsXCIsXG4gICAgXCJVc21hbGxcIixcbiAgICBcIlZzbWFsbFwiLFxuICAgIFwiV3NtYWxsXCIsXG4gICAgXCJYc21hbGxcIixcbiAgICBcIllzbWFsbFwiLFxuICAgIFwiWnNtYWxsXCIsXG4gICAgXCJjb2xvbm1vbmV0YXJ5XCIsXG4gICAgXCJvbmVmaXR0ZWRcIixcbiAgICBcInJ1cGlhaFwiLFxuICAgIFwiVGlsZGVzbWFsbFwiLFxuICAgIFwiZXhjbGFtZG93bnNtYWxsXCIsXG4gICAgXCJjZW50b2xkc3R5bGVcIixcbiAgICBcIkxzbGFzaHNtYWxsXCIsXG4gICAgXCJTY2Fyb25zbWFsbFwiLFxuICAgIFwiWmNhcm9uc21hbGxcIixcbiAgICBcIkRpZXJlc2lzc21hbGxcIixcbiAgICBcIkJyZXZlc21hbGxcIixcbiAgICBcIkNhcm9uc21hbGxcIixcbiAgICBcIkRvdGFjY2VudHNtYWxsXCIsXG4gICAgXCJNYWNyb25zbWFsbFwiLFxuICAgIFwiZmlndXJlZGFzaFwiLFxuICAgIFwiaHlwaGVuaW5mZXJpb3JcIixcbiAgICBcIk9nb25la3NtYWxsXCIsXG4gICAgXCJSaW5nc21hbGxcIixcbiAgICBcIkNlZGlsbGFzbWFsbFwiLFxuICAgIFwib25lcXVhcnRlclwiLFxuICAgIFwib25laGFsZlwiLFxuICAgIFwidGhyZWVxdWFydGVyc1wiLFxuICAgIFwicXVlc3Rpb25kb3duc21hbGxcIixcbiAgICBcIm9uZWVpZ2h0aFwiLFxuICAgIFwidGhyZWVlaWdodGhzXCIsXG4gICAgXCJmaXZlZWlnaHRoc1wiLFxuICAgIFwic2V2ZW5laWdodGhzXCIsXG4gICAgXCJvbmV0aGlyZFwiLFxuICAgIFwidHdvdGhpcmRzXCIsXG4gICAgXCJ6ZXJvc3VwZXJpb3JcIixcbiAgICBcIm9uZXN1cGVyaW9yXCIsXG4gICAgXCJ0d29zdXBlcmlvclwiLFxuICAgIFwidGhyZWVzdXBlcmlvclwiLFxuICAgIFwiZm91cnN1cGVyaW9yXCIsXG4gICAgXCJmaXZlc3VwZXJpb3JcIixcbiAgICBcInNpeHN1cGVyaW9yXCIsXG4gICAgXCJzZXZlbnN1cGVyaW9yXCIsXG4gICAgXCJlaWdodHN1cGVyaW9yXCIsXG4gICAgXCJuaW5lc3VwZXJpb3JcIixcbiAgICBcInplcm9pbmZlcmlvclwiLFxuICAgIFwib25laW5mZXJpb3JcIixcbiAgICBcInR3b2luZmVyaW9yXCIsXG4gICAgXCJ0aHJlZWluZmVyaW9yXCIsXG4gICAgXCJmb3VyaW5mZXJpb3JcIixcbiAgICBcImZpdmVpbmZlcmlvclwiLFxuICAgIFwic2l4aW5mZXJpb3JcIixcbiAgICBcInNldmVuaW5mZXJpb3JcIixcbiAgICBcImVpZ2h0aW5mZXJpb3JcIixcbiAgICBcIm5pbmVpbmZlcmlvclwiLFxuICAgIFwiY2VudGluZmVyaW9yXCIsXG4gICAgXCJkb2xsYXJpbmZlcmlvclwiLFxuICAgIFwicGVyaW9kaW5mZXJpb3JcIixcbiAgICBcImNvbW1haW5mZXJpb3JcIixcbiAgICBcIkFncmF2ZXNtYWxsXCIsXG4gICAgXCJBYWN1dGVzbWFsbFwiLFxuICAgIFwiQWNpcmN1bWZsZXhzbWFsbFwiLFxuICAgIFwiQXRpbGRlc21hbGxcIixcbiAgICBcIkFkaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJBcmluZ3NtYWxsXCIsXG4gICAgXCJBRXNtYWxsXCIsXG4gICAgXCJDY2VkaWxsYXNtYWxsXCIsXG4gICAgXCJFZ3JhdmVzbWFsbFwiLFxuICAgIFwiRWFjdXRlc21hbGxcIixcbiAgICBcIkVjaXJjdW1mbGV4c21hbGxcIixcbiAgICBcIkVkaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJJZ3JhdmVzbWFsbFwiLFxuICAgIFwiSWFjdXRlc21hbGxcIixcbiAgICBcIkljaXJjdW1mbGV4c21hbGxcIixcbiAgICBcIklkaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJFdGhzbWFsbFwiLFxuICAgIFwiTnRpbGRlc21hbGxcIixcbiAgICBcIk9ncmF2ZXNtYWxsXCIsXG4gICAgXCJPYWN1dGVzbWFsbFwiLFxuICAgIFwiT2NpcmN1bWZsZXhzbWFsbFwiLFxuICAgIFwiT3RpbGRlc21hbGxcIixcbiAgICBcIk9kaWVyZXNpc3NtYWxsXCIsXG4gICAgXCJPRXNtYWxsXCIsXG4gICAgXCJPc2xhc2hzbWFsbFwiLFxuICAgIFwiVWdyYXZlc21hbGxcIixcbiAgICBcIlVhY3V0ZXNtYWxsXCIsXG4gICAgXCJVY2lyY3VtZmxleHNtYWxsXCIsXG4gICAgXCJVZGllcmVzaXNzbWFsbFwiLFxuICAgIFwiWWFjdXRlc21hbGxcIixcbiAgICBcIlRob3Juc21hbGxcIixcbiAgICBcIllkaWVyZXNpc3NtYWxsXCJcbl07XG5sZXQgJGVmNjU4ZjVjOWExNDg4YjIkZXhwb3J0JGRjMjhiZTExMTM5ZDQxMjAgPSBbXG4gICAgXCIubm90ZGVmXCIsXG4gICAgXCJzcGFjZVwiLFxuICAgIFwiZG9sbGFyb2xkc3R5bGVcIixcbiAgICBcImRvbGxhcnN1cGVyaW9yXCIsXG4gICAgXCJwYXJlbmxlZnRzdXBlcmlvclwiLFxuICAgIFwicGFyZW5yaWdodHN1cGVyaW9yXCIsXG4gICAgXCJ0d29kb3RlbmxlYWRlclwiLFxuICAgIFwib25lZG90ZW5sZWFkZXJcIixcbiAgICBcImNvbW1hXCIsXG4gICAgXCJoeXBoZW5cIixcbiAgICBcInBlcmlvZFwiLFxuICAgIFwiZnJhY3Rpb25cIixcbiAgICBcInplcm9vbGRzdHlsZVwiLFxuICAgIFwib25lb2xkc3R5bGVcIixcbiAgICBcInR3b29sZHN0eWxlXCIsXG4gICAgXCJ0aHJlZW9sZHN0eWxlXCIsXG4gICAgXCJmb3Vyb2xkc3R5bGVcIixcbiAgICBcImZpdmVvbGRzdHlsZVwiLFxuICAgIFwic2l4b2xkc3R5bGVcIixcbiAgICBcInNldmVub2xkc3R5bGVcIixcbiAgICBcImVpZ2h0b2xkc3R5bGVcIixcbiAgICBcIm5pbmVvbGRzdHlsZVwiLFxuICAgIFwiY29sb25cIixcbiAgICBcInNlbWljb2xvblwiLFxuICAgIFwiY29tbWFzdXBlcmlvclwiLFxuICAgIFwidGhyZWVxdWFydGVyc2VtZGFzaFwiLFxuICAgIFwicGVyaW9kc3VwZXJpb3JcIixcbiAgICBcImFzdXBlcmlvclwiLFxuICAgIFwiYnN1cGVyaW9yXCIsXG4gICAgXCJjZW50c3VwZXJpb3JcIixcbiAgICBcImRzdXBlcmlvclwiLFxuICAgIFwiZXN1cGVyaW9yXCIsXG4gICAgXCJpc3VwZXJpb3JcIixcbiAgICBcImxzdXBlcmlvclwiLFxuICAgIFwibXN1cGVyaW9yXCIsXG4gICAgXCJuc3VwZXJpb3JcIixcbiAgICBcIm9zdXBlcmlvclwiLFxuICAgIFwicnN1cGVyaW9yXCIsXG4gICAgXCJzc3VwZXJpb3JcIixcbiAgICBcInRzdXBlcmlvclwiLFxuICAgIFwiZmZcIixcbiAgICBcImZpXCIsXG4gICAgXCJmbFwiLFxuICAgIFwiZmZpXCIsXG4gICAgXCJmZmxcIixcbiAgICBcInBhcmVubGVmdGluZmVyaW9yXCIsXG4gICAgXCJwYXJlbnJpZ2h0aW5mZXJpb3JcIixcbiAgICBcImh5cGhlbnN1cGVyaW9yXCIsXG4gICAgXCJjb2xvbm1vbmV0YXJ5XCIsXG4gICAgXCJvbmVmaXR0ZWRcIixcbiAgICBcInJ1cGlhaFwiLFxuICAgIFwiY2VudG9sZHN0eWxlXCIsXG4gICAgXCJmaWd1cmVkYXNoXCIsXG4gICAgXCJoeXBoZW5pbmZlcmlvclwiLFxuICAgIFwib25lcXVhcnRlclwiLFxuICAgIFwib25laGFsZlwiLFxuICAgIFwidGhyZWVxdWFydGVyc1wiLFxuICAgIFwib25lZWlnaHRoXCIsXG4gICAgXCJ0aHJlZWVpZ2h0aHNcIixcbiAgICBcImZpdmVlaWdodGhzXCIsXG4gICAgXCJzZXZlbmVpZ2h0aHNcIixcbiAgICBcIm9uZXRoaXJkXCIsXG4gICAgXCJ0d290aGlyZHNcIixcbiAgICBcInplcm9zdXBlcmlvclwiLFxuICAgIFwib25lc3VwZXJpb3JcIixcbiAgICBcInR3b3N1cGVyaW9yXCIsXG4gICAgXCJ0aHJlZXN1cGVyaW9yXCIsXG4gICAgXCJmb3Vyc3VwZXJpb3JcIixcbiAgICBcImZpdmVzdXBlcmlvclwiLFxuICAgIFwic2l4c3VwZXJpb3JcIixcbiAgICBcInNldmVuc3VwZXJpb3JcIixcbiAgICBcImVpZ2h0c3VwZXJpb3JcIixcbiAgICBcIm5pbmVzdXBlcmlvclwiLFxuICAgIFwiemVyb2luZmVyaW9yXCIsXG4gICAgXCJvbmVpbmZlcmlvclwiLFxuICAgIFwidHdvaW5mZXJpb3JcIixcbiAgICBcInRocmVlaW5mZXJpb3JcIixcbiAgICBcImZvdXJpbmZlcmlvclwiLFxuICAgIFwiZml2ZWluZmVyaW9yXCIsXG4gICAgXCJzaXhpbmZlcmlvclwiLFxuICAgIFwic2V2ZW5pbmZlcmlvclwiLFxuICAgIFwiZWlnaHRpbmZlcmlvclwiLFxuICAgIFwibmluZWluZmVyaW9yXCIsXG4gICAgXCJjZW50aW5mZXJpb3JcIixcbiAgICBcImRvbGxhcmluZmVyaW9yXCIsXG4gICAgXCJwZXJpb2RpbmZlcmlvclwiLFxuICAgIFwiY29tbWFpbmZlcmlvclwiXG5dO1xuXG5cblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIFNjcmlwdHMgYW5kIExhbmd1YWdlcyAjXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRMYW5nU3lzVGFibGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgcmVzZXJ2ZWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQxNiksXG4gICAgcmVxRmVhdHVyZUluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgIGZlYXR1cmVDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBmZWF0dXJlSW5kZXhlczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCBcImZlYXR1cmVDb3VudFwiKVxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJExhbmdTeXNSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdGFnOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICBsYW5nU3lzOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJExhbmdTeXNUYWJsZSwge1xuICAgICAgICB0eXBlOiBcInBhcmVudFwiXG4gICAgfSlcbn0pO1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRTY3JpcHQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZGVmYXVsdExhbmdTeXM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTGFuZ1N5c1RhYmxlKSxcbiAgICBjb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBsYW5nU3lzUmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTGFuZ1N5c1JlY29yZCwgXCJjb3VudFwiKVxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJFNjcmlwdFJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB0YWc6IG5ldyAkNTJaSWYkU3RyaW5nKDQpLFxuICAgIHNjcmlwdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRTY3JpcHQsIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIlxuICAgIH0pXG59KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkM2UxNWZjMDVjZTg2NDIyOSA9IG5ldyAkNTJaSWYkQXJyYXkoJDdjYmJlNGUyNGVmM2NiNzUkdmFyJFNjcmlwdFJlY29yZCwgJDUyWklmJHVpbnQxNik7XG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBGZWF0dXJlcyBhbmQgTG9va3VwcyAjXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJEZlYXR1cmVQYXJhbXMgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBuYW1lSUQ6ICQ1MlpJZiR1aW50MTZcbn0pO1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ2ZTkxY2Y3NjE2MzMzZDUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZmVhdHVyZVBhcmFtczogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRGZWF0dXJlUGFyYW1zKSxcbiAgICBsb29rdXBDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBsb29rdXBMaXN0SW5kZXhlczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCBcImxvb2t1cENvdW50XCIpXG59KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkRmVhdHVyZVJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB0YWc6IG5ldyAkNTJaSWYkU3RyaW5nKDQpLFxuICAgIGZlYXR1cmU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkNmU5MWNmNzYxNjMzM2Q1LCB7XG4gICAgICAgIHR5cGU6IFwicGFyZW50XCJcbiAgICB9KVxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JGFhMTgxMzBkZWY0YjZjYjQgPSBuZXcgJDUyWklmJEFycmF5KCQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRGZWF0dXJlUmVjb3JkLCAkNTJaSWYkdWludDE2KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTG9va3VwRmxhZ3MgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbWFya0F0dGFjaG1lbnRUeXBlOiAkNTJaSWYkdWludDgsXG4gICAgZmxhZ3M6IG5ldyAkNTJaSWYkQml0ZmllbGQoJDUyWklmJHVpbnQ4LCBbXG4gICAgICAgIFwicmlnaHRUb0xlZnRcIixcbiAgICAgICAgXCJpZ25vcmVCYXNlR2x5cGhzXCIsXG4gICAgICAgIFwiaWdub3JlTGlnYXR1cmVzXCIsXG4gICAgICAgIFwiaWdub3JlTWFya3NcIixcbiAgICAgICAgXCJ1c2VNYXJrRmlsdGVyaW5nU2V0XCJcbiAgICBdKVxufSk7XG5mdW5jdGlvbiAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkZGYwMDA4YzZmZjJkYTIyYShTdWJUYWJsZSkge1xuICAgIGxldCBMb29rdXAgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgICAgIGxvb2t1cFR5cGU6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGZsYWdzOiAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTG9va3VwRmxhZ3MsXG4gICAgICAgIHN1YlRhYmxlQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHN1YlRhYmxlczogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgU3ViVGFibGUpLCBcInN1YlRhYmxlQ291bnRcIiksXG4gICAgICAgIG1hcmtGaWx0ZXJpbmdTZXQ6IG5ldyAkNTJaSWYkT3B0aW9uYWwoJDUyWklmJHVpbnQxNiwgKHQpPT50LmZsYWdzLmZsYWdzLnVzZU1hcmtGaWx0ZXJpbmdTZXQpXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyAkNTJaSWYkTGF6eUFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBMb29rdXApLCAkNTJaSWYkdWludDE2KTtcbn1cbi8vIyMjIyMjIyMjIyMjIyMjIyNcbi8vIENvdmVyYWdlIFRhYmxlICNcbi8vIyMjIyMjIyMjIyMjIyMjIyNcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkUmFuZ2VSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgc3RhcnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgZW5kOiAkNTJaSWYkdWludDE2LFxuICAgIHN0YXJ0Q292ZXJhZ2VJbmRleDogJDUyWklmJHVpbnQxNlxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MTYsIHtcbiAgICAxOiB7XG4gICAgICAgIGdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGdseXBoczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCBcImdseXBoQ291bnRcIilcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgcmFuZ2VDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgcmFuZ2VSZWNvcmRzOiBuZXcgJDUyWklmJEFycmF5KCQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRSYW5nZVJlY29yZCwgXCJyYW5nZUNvdW50XCIpXG4gICAgfVxufSk7XG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIENsYXNzIERlZmluaXRpb24gVGFibGUgI1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJENsYXNzUmFuZ2VSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgc3RhcnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgZW5kOiAkNTJaSWYkdWludDE2LFxuICAgIGNsYXNzOiAkNTJaSWYkdWludDE2XG59KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODQzZDU1MWZiYmFmZWY3MSA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MTYsIHtcbiAgICAxOiB7XG4gICAgICAgIHN0YXJ0R2x5cGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNsYXNzVmFsdWVBcnJheTogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCBcImdseXBoQ291bnRcIilcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgY2xhc3NSYW5nZUNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBjbGFzc1JhbmdlUmVjb3JkOiBuZXcgJDUyWklmJEFycmF5KCQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRDbGFzc1JhbmdlUmVjb3JkLCBcImNsYXNzUmFuZ2VDb3VudFwiKVxuICAgIH1cbn0pO1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4MjE1ZDE0YTYzZDlmYjEwID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGE6ICQ1MlpJZiR1aW50MTYsXG4gICAgYjogJDUyWklmJHVpbnQxNixcbiAgICBkZWx0YUZvcm1hdDogJDUyWklmJHVpbnQxNlxufSk7XG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gQ29udGV4dHVhbCBTdWJzdGl0dXRpb24vUG9zaXRpb25pbmcgVGFibGVzICNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJExvb2t1cFJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBzZXF1ZW5jZUluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgIGxvb2t1cExpc3RJbmRleDogJDUyWklmJHVpbnQxNlxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJFJ1bGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZ2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBsb29rdXBDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBpbnB1dDogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAodCk9PnQuZ2x5cGhDb3VudCAtIDEpLFxuICAgIGxvb2t1cFJlY29yZHM6IG5ldyAkNTJaSWYkQXJyYXkoJDdjYmJlNGUyNGVmM2NiNzUkdmFyJExvb2t1cFJlY29yZCwgXCJsb29rdXBDb3VudFwiKVxufSk7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJFJ1bGVTZXQgPSBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkUnVsZSksICQ1MlpJZiR1aW50MTYpO1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRDbGFzc1J1bGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZ2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBsb29rdXBDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBjbGFzc2VzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICh0KT0+dC5nbHlwaENvdW50IC0gMSksXG4gICAgbG9va3VwUmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTG9va3VwUmVjb3JkLCBcImxvb2t1cENvdW50XCIpXG59KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkQ2xhc3NTZXQgPSBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkQ2xhc3NSdWxlKSwgJDUyWklmJHVpbnQxNik7XG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDg0MTg1OGI4OTJjZTFmNGMgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgMToge1xuICAgICAgICBjb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpLFxuICAgICAgICBydWxlU2V0Q291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHJ1bGVTZXRzOiBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkUnVsZVNldCksIFwicnVsZVNldENvdW50XCIpXG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSksXG4gICAgICAgIGNsYXNzRGVmOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDg0M2Q1NTFmYmJhZmVmNzEpLFxuICAgICAgICBjbGFzc1NldENudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY2xhc3NTZXQ6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRDbGFzc1NldCksIFwiY2xhc3NTZXRDbnRcIilcbiAgICB9LFxuICAgIDM6IHtcbiAgICAgICAgZ2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbG9va3VwQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNvdmVyYWdlczogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSksIFwiZ2x5cGhDb3VudFwiKSxcbiAgICAgICAgbG9va3VwUmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTG9va3VwUmVjb3JkLCBcImxvb2t1cENvdW50XCIpXG4gICAgfVxufSk7XG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gQ2hhaW5pbmcgQ29udGV4dHVhbCBTdWJzdGl0dXRpb24vUG9zaXRpb25pbmcgVGFibGVzICNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5sZXQgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJENoYWluUnVsZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBiYWNrdHJhY2tHbHlwaENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGJhY2t0cmFjazogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCBcImJhY2t0cmFja0dseXBoQ291bnRcIiksXG4gICAgaW5wdXRHbHlwaENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGlucHV0OiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICh0KT0+dC5pbnB1dEdseXBoQ291bnQgLSAxKSxcbiAgICBsb29rYWhlYWRHbHlwaENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGxvb2thaGVhZDogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCBcImxvb2thaGVhZEdseXBoQ291bnRcIiksXG4gICAgbG9va3VwQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbG9va3VwUmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTG9va3VwUmVjb3JkLCBcImxvb2t1cENvdW50XCIpXG59KTtcbmxldCAkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkQ2hhaW5SdWxlU2V0ID0gbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJENoYWluUnVsZSksICQ1MlpJZiR1aW50MTYpO1xubGV0ICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ1ZTZkMDllNjg2MTE2MmY2ID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQxNiwge1xuICAgIDE6IHtcbiAgICAgICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSxcbiAgICAgICAgY2hhaW5Db3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY2hhaW5SdWxlU2V0czogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkdmFyJENoYWluUnVsZVNldCksIFwiY2hhaW5Db3VudFwiKVxuICAgIH0sXG4gICAgMjoge1xuICAgICAgICBjb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpLFxuICAgICAgICBiYWNrdHJhY2tDbGFzc0RlZjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4NDNkNTUxZmJiYWZlZjcxKSxcbiAgICAgICAgaW5wdXRDbGFzc0RlZjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4NDNkNTUxZmJiYWZlZjcxKSxcbiAgICAgICAgbG9va2FoZWFkQ2xhc3NEZWY6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODQzZDU1MWZiYmFmZWY3MSksXG4gICAgICAgIGNoYWluQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNoYWluQ2xhc3NTZXQ6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRDaGFpblJ1bGVTZXQpLCBcImNoYWluQ291bnRcIilcbiAgICB9LFxuICAgIDM6IHtcbiAgICAgICAgYmFja3RyYWNrR2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgYmFja3RyYWNrQ292ZXJhZ2U6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpLCBcImJhY2t0cmFja0dseXBoQ291bnRcIiksXG4gICAgICAgIGlucHV0R2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgaW5wdXRDb3ZlcmFnZTogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSksIFwiaW5wdXRHbHlwaENvdW50XCIpLFxuICAgICAgICBsb29rYWhlYWRHbHlwaENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBsb29rYWhlYWRDb3ZlcmFnZTogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSksIFwibG9va2FoZWFkR2x5cGhDb3VudFwiKSxcbiAgICAgICAgbG9va3VwQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGxvb2t1cFJlY29yZHM6IG5ldyAkNTJaSWYkQXJyYXkoJDdjYmJlNGUyNGVmM2NiNzUkdmFyJExvb2t1cFJlY29yZCwgXCJsb29rdXBDb3VudFwiKVxuICAgIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqKipcbiAqIFZhcmlhdGlvbiBTdG9yZSAqXG4gKioqKioqKioqKioqKioqKioqKi8gbGV0ICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGMkRPVDE0ID0gbmV3ICQ1MlpJZiRGaXhlZCgxNiwgXCJCRVwiLCAxNCk7XG5sZXQgJDFhNDdiMGM0NWMxYzIyZmUkdmFyJFJlZ2lvbkF4aXNDb29yZGluYXRlcyA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBzdGFydENvb3JkOiAkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkRjJET1QxNCxcbiAgICBwZWFrQ29vcmQ6ICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGMkRPVDE0LFxuICAgIGVuZENvb3JkOiAkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkRjJET1QxNFxufSk7XG5sZXQgJDFhNDdiMGM0NWMxYzIyZmUkdmFyJFZhcmlhdGlvblJlZ2lvbkxpc3QgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgYXhpc0NvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIHJlZ2lvbkNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIHZhcmlhdGlvblJlZ2lvbnM6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRBcnJheSgkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkUmVnaW9uQXhpc0Nvb3JkaW5hdGVzLCBcImF4aXNDb3VudFwiKSwgXCJyZWdpb25Db3VudFwiKVxufSk7XG5sZXQgJDFhNDdiMGM0NWMxYzIyZmUkdmFyJERlbHRhU2V0ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHNob3J0RGVsdGFzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiRpbnQxNiwgKHQpPT50LnBhcmVudC5zaG9ydERlbHRhQ291bnQpLFxuICAgIHJlZ2lvbkRlbHRhczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkaW50OCwgKHQpPT50LnBhcmVudC5yZWdpb25JbmRleENvdW50IC0gdC5wYXJlbnQuc2hvcnREZWx0YUNvdW50KSxcbiAgICBkZWx0YXM6ICh0KT0+dC5zaG9ydERlbHRhcy5jb25jYXQodC5yZWdpb25EZWx0YXMpXG59KTtcbmxldCAkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkSXRlbVZhcmlhdGlvbkRhdGEgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgaXRlbUNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIHNob3J0RGVsdGFDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICByZWdpb25JbmRleENvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIHJlZ2lvbkluZGV4ZXM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgXCJyZWdpb25JbmRleENvdW50XCIpLFxuICAgIGRlbHRhU2V0czogbmV3ICQ1MlpJZiRBcnJheSgkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkRGVsdGFTZXQsIFwiaXRlbUNvdW50XCIpXG59KTtcbmxldCAkMWE0N2IwYzQ1YzFjMjJmZSRleHBvcnQkZmUxYjEyMmEyNzEwZjI0MSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgdmFyaWF0aW9uUmVnaW9uTGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRWYXJpYXRpb25SZWdpb25MaXN0KSxcbiAgICB2YXJpYXRpb25EYXRhQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgaXRlbVZhcmlhdGlvbkRhdGE6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRJdGVtVmFyaWF0aW9uRGF0YSksIFwidmFyaWF0aW9uRGF0YUNvdW50XCIpXG59KTtcbi8qKioqKioqKioqKioqKioqKioqKioqXG4gKiBGZWF0dXJlIFZhcmlhdGlvbnMgKlxuICoqKioqKioqKioqKioqKioqKioqKiovIGxldCAkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkQ29uZGl0aW9uVGFibGUgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgMToge1xuICAgICAgICBheGlzSW5kZXg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGF4aXNJbmRleDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZmlsdGVyUmFuZ2VNaW5WYWx1ZTogJDFhNDdiMGM0NWMxYzIyZmUkdmFyJEYyRE9UMTQsXG4gICAgICAgIGZpbHRlclJhbmdlTWF4VmFsdWU6ICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGMkRPVDE0XG4gICAgfVxufSk7XG5sZXQgJDFhNDdiMGM0NWMxYzIyZmUkdmFyJENvbmRpdGlvblNldCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBjb25kaXRpb25Db3VudDogJDUyWklmJHVpbnQxNixcbiAgICBjb25kaXRpb25UYWJsZTogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgJDFhNDdiMGM0NWMxYzIyZmUkdmFyJENvbmRpdGlvblRhYmxlKSwgXCJjb25kaXRpb25Db3VudFwiKVxufSk7XG5sZXQgJDFhNDdiMGM0NWMxYzIyZmUkdmFyJEZlYXR1cmVUYWJsZVN1YnN0aXR1dGlvblJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmZWF0dXJlSW5kZXg6ICQ1MlpJZiR1aW50MTYsXG4gICAgYWx0ZXJuYXRlRmVhdHVyZVRhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ2ZTkxY2Y3NjE2MzMzZDUpLCB7XG4gICAgICAgIHR5cGU6IFwicGFyZW50XCJcbiAgICB9KVxufSk7XG5sZXQgJDFhNDdiMGM0NWMxYzIyZmUkdmFyJEZlYXR1cmVUYWJsZVN1YnN0aXR1dGlvbiA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkZml4ZWQzMixcbiAgICBzdWJzdGl0dXRpb25Db3VudDogJDUyWklmJHVpbnQxNixcbiAgICBzdWJzdGl0dXRpb25zOiBuZXcgJDUyWklmJEFycmF5KCQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGZWF0dXJlVGFibGVTdWJzdGl0dXRpb25SZWNvcmQsIFwic3Vic3RpdHV0aW9uQ291bnRcIilcbn0pO1xubGV0ICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGZWF0dXJlVmFyaWF0aW9uUmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGNvbmRpdGlvblNldDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRDb25kaXRpb25TZXQsIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIlxuICAgIH0pLFxuICAgIGZlYXR1cmVUYWJsZVN1YnN0aXR1dGlvbjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGZWF0dXJlVGFibGVTdWJzdGl0dXRpb24sIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIlxuICAgIH0pXG59KTtcbmxldCAkMWE0N2IwYzQ1YzFjMjJmZSRleHBvcnQkNDQxYjcwYjc5NzFkZDQxOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBtYWpvclZlcnNpb246ICQ1MlpJZiR1aW50MTYsXG4gICAgbWlub3JWZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIGZlYXR1cmVWYXJpYXRpb25SZWNvcmRDb3VudDogJDUyWklmJHVpbnQzMixcbiAgICBmZWF0dXJlVmFyaWF0aW9uUmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkRmVhdHVyZVZhcmlhdGlvblJlY29yZCwgXCJmZWF0dXJlVmFyaWF0aW9uUmVjb3JkQ291bnRcIilcbn0pO1xuXG5cbi8vIENoZWNrcyBpZiBhbiBvcGVyYW5kIGlzIGFuIGluZGV4IG9mIGEgcHJlZGVmaW5lZCB2YWx1ZSxcbi8vIG90aGVyd2lzZSBkZWxlZ2F0ZXMgdG8gdGhlIHByb3ZpZGVkIHR5cGUuXG5jbGFzcyAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkUHJlZGVmaW5lZE9wIHtcbiAgICBkZWNvZGUoc3RyZWFtLCBwYXJlbnQsIG9wZXJhbmRzKSB7XG4gICAgICAgIGlmICh0aGlzLnByZWRlZmluZWRPcHNbb3BlcmFuZHNbMF1dKSByZXR1cm4gdGhpcy5wcmVkZWZpbmVkT3BzW29wZXJhbmRzWzBdXTtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5kZWNvZGUoc3RyZWFtLCBwYXJlbnQsIG9wZXJhbmRzKTtcbiAgICB9XG4gICAgc2l6ZSh2YWx1ZSwgY3R4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUuc2l6ZSh2YWx1ZSwgY3R4KTtcbiAgICB9XG4gICAgZW5jb2RlKHN0cmVhbSwgdmFsdWUsIGN0eCkge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLnByZWRlZmluZWRPcHMuaW5kZXhPZih2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHJldHVybiBpbmRleDtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5lbmNvZGUoc3RyZWFtLCB2YWx1ZSwgY3R4KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocHJlZGVmaW5lZE9wcywgdHlwZSl7XG4gICAgICAgIHRoaXMucHJlZGVmaW5lZE9wcyA9IHByZWRlZmluZWRPcHM7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxufVxuY2xhc3MgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRkVuY29kaW5nVmVyc2lvbiBleHRlbmRzICQ1MlpJZiROdW1iZXIge1xuICAgIGRlY29kZShzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuICQ1MlpJZiR1aW50OC5kZWNvZGUoc3RyZWFtKSAmIDB4N2Y7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKFwiVUludDhcIik7XG4gICAgfVxufVxubGV0ICRiODRmZDNkZDlkOGVkZGIyJHZhciRSYW5nZTEgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZmlyc3Q6ICQ1MlpJZiR1aW50MTYsXG4gICAgbkxlZnQ6ICQ1MlpJZiR1aW50OFxufSk7XG5sZXQgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJFJhbmdlMiA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmaXJzdDogJDUyWklmJHVpbnQxNixcbiAgICBuTGVmdDogJDUyWklmJHVpbnQxNlxufSk7XG5sZXQgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRkN1c3RvbUVuY29kaW5nID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QobmV3ICRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkZFbmNvZGluZ1ZlcnNpb24oKSwge1xuICAgIDA6IHtcbiAgICAgICAgbkNvZGVzOiAkNTJaSWYkdWludDgsXG4gICAgICAgIGNvZGVzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50OCwgXCJuQ29kZXNcIilcbiAgICB9LFxuICAgIDE6IHtcbiAgICAgICAgblJhbmdlczogJDUyWklmJHVpbnQ4LFxuICAgICAgICByYW5nZXM6IG5ldyAkNTJaSWYkQXJyYXkoJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJFJhbmdlMSwgXCJuUmFuZ2VzXCIpXG4gICAgfVxufSk7XG5sZXQgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRkVuY29kaW5nID0gbmV3ICRiODRmZDNkZDlkOGVkZGIyJHZhciRQcmVkZWZpbmVkT3AoW1xuICAgICgwLCAkYmMwNDMzZDliN2U0MWY1ZiRleHBvcnQkZGVlMDAyNzA2MGZhMTNiZCksXG4gICAgKDAsICRiYzA0MzNkOWI3ZTQxZjVmJGV4cG9ydCQ0ZjU4ZjQ5N2UxNGE1M2MzKVxuXSwgbmV3ICgwLCAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSgkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGQ3VzdG9tRW5jb2RpbmcsIHtcbiAgICBsYXp5OiB0cnVlXG59KSk7XG4vLyBEZWNvZGVzIGFuIGFycmF5IG9mIHJhbmdlcyB1bnRpbCB0aGUgdG90YWxcbi8vIGxlbmd0aCBpcyBlcXVhbCB0byB0aGUgcHJvdmlkZWQgbGVuZ3RoLlxuY2xhc3MgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJFJhbmdlQXJyYXkgZXh0ZW5kcyAkNTJaSWYkQXJyYXkge1xuICAgIGRlY29kZShzdHJlYW0sIHBhcmVudCkge1xuICAgICAgICBsZXQgbGVuZ3RoID0gKDAsICQ1MlpJZiRyZXNvbHZlTGVuZ3RoKSh0aGlzLmxlbmd0aCwgc3RyZWFtLCBwYXJlbnQpO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgIHdoaWxlKGNvdW50IDwgbGVuZ3RoKXtcbiAgICAgICAgICAgIGxldCByYW5nZSA9IHRoaXMudHlwZS5kZWNvZGUoc3RyZWFtLCBwYXJlbnQpO1xuICAgICAgICAgICAgcmFuZ2Uub2Zmc2V0ID0gY291bnQ7XG4gICAgICAgICAgICBjb3VudCArPSByYW5nZS5uTGVmdCArIDE7XG4gICAgICAgICAgICByZXMucHVzaChyYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG59XG5sZXQgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRkN1c3RvbUNoYXJzZXQgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDgsIHtcbiAgICAwOiB7XG4gICAgICAgIGdseXBoczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAodCk9PnQucGFyZW50LkNoYXJTdHJpbmdzLmxlbmd0aCAtIDEpXG4gICAgfSxcbiAgICAxOiB7XG4gICAgICAgIHJhbmdlczogbmV3ICRiODRmZDNkZDlkOGVkZGIyJHZhciRSYW5nZUFycmF5KCRiODRmZDNkZDlkOGVkZGIyJHZhciRSYW5nZTEsICh0KT0+dC5wYXJlbnQuQ2hhclN0cmluZ3MubGVuZ3RoIC0gMSlcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgcmFuZ2VzOiBuZXcgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJFJhbmdlQXJyYXkoJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJFJhbmdlMiwgKHQpPT50LnBhcmVudC5DaGFyU3RyaW5ncy5sZW5ndGggLSAxKVxuICAgIH1cbn0pO1xubGV0ICRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkZDaGFyc2V0ID0gbmV3ICRiODRmZDNkZDlkOGVkZGIyJHZhciRQcmVkZWZpbmVkT3AoW1xuICAgICgwLCAkZWY2NThmNWM5YTE0ODhiMiRleHBvcnQkYzMzYjUwMzM2YzIzNGYxNiksXG4gICAgKDAsICRlZjY1OGY1YzlhMTQ4OGIyJGV4cG9ydCQzZWQwZjllMWZlZThkNDg5KSxcbiAgICAoMCwgJGVmNjU4ZjVjOWExNDg4YjIkZXhwb3J0JGRjMjhiZTExMTM5ZDQxMjApXG5dLCBuZXcgKDAsICQwZTM0YTQzZDA1YmRlODJjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKCRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkZDdXN0b21DaGFyc2V0LCB7XG4gICAgbGF6eTogdHJ1ZVxufSkpO1xubGV0ICRiODRmZDNkZDlkOGVkZGIyJHZhciRGRFJhbmdlMyA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmaXJzdDogJDUyWklmJHVpbnQxNixcbiAgICBmZDogJDUyWklmJHVpbnQ4XG59KTtcbmxldCAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkRkRSYW5nZTQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZmlyc3Q6ICQ1MlpJZiR1aW50MzIsXG4gICAgZmQ6ICQ1MlpJZiR1aW50MTZcbn0pO1xubGV0ICRiODRmZDNkZDlkOGVkZGIyJHZhciRGRFNlbGVjdCA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50OCwge1xuICAgIDA6IHtcbiAgICAgICAgZmRzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50OCwgKHQpPT50LnBhcmVudC5DaGFyU3RyaW5ncy5sZW5ndGgpXG4gICAgfSxcbiAgICAzOiB7XG4gICAgICAgIG5SYW5nZXM6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHJhbmdlczogbmV3ICQ1MlpJZiRBcnJheSgkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkRkRSYW5nZTMsIFwiblJhbmdlc1wiKSxcbiAgICAgICAgc2VudGluZWw6ICQ1MlpJZiR1aW50MTZcbiAgICB9LFxuICAgIDQ6IHtcbiAgICAgICAgblJhbmdlczogJDUyWklmJHVpbnQzMixcbiAgICAgICAgcmFuZ2VzOiBuZXcgJDUyWklmJEFycmF5KCRiODRmZDNkZDlkOGVkZGIyJHZhciRGRFJhbmdlNCwgXCJuUmFuZ2VzXCIpLFxuICAgICAgICBzZW50aW5lbDogJDUyWklmJHVpbnQzMlxuICAgIH1cbn0pO1xubGV0ICRiODRmZDNkZDlkOGVkZGIyJHZhciRwdHIgPSBuZXcgKDAsICQwZTM0YTQzZDA1YmRlODJjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKCgwLCAkNmQ1OWRiMmUyOWNjNzdiMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSk7XG5jbGFzcyAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGUHJpdmF0ZU9wIHtcbiAgICBkZWNvZGUoc3RyZWFtLCBwYXJlbnQsIG9wZXJhbmRzKSB7XG4gICAgICAgIHBhcmVudC5sZW5ndGggPSBvcGVyYW5kc1swXTtcbiAgICAgICAgcmV0dXJuICRiODRmZDNkZDlkOGVkZGIyJHZhciRwdHIuZGVjb2RlKHN0cmVhbSwgcGFyZW50LCBbXG4gICAgICAgICAgICBvcGVyYW5kc1sxXVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgc2l6ZShkaWN0LCBjdHgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICgwLCAkNmQ1OWRiMmUyOWNjNzdiMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5zaXplKGRpY3QsIGN0eCwgZmFsc2UpLFxuICAgICAgICAgICAgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJHB0ci5zaXplKGRpY3QsIGN0eClbMF1cbiAgICAgICAgXTtcbiAgICB9XG4gICAgZW5jb2RlKHN0cmVhbSwgZGljdCwgY3R4KSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAoMCwgJDZkNTlkYjJlMjljYzc3YjMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkuc2l6ZShkaWN0LCBjdHgsIGZhbHNlKSxcbiAgICAgICAgICAgICRiODRmZDNkZDlkOGVkZGIyJHZhciRwdHIuZW5jb2RlKHN0cmVhbSwgZGljdCwgY3R4KVswXVxuICAgICAgICBdO1xuICAgIH1cbn1cbmxldCAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkRm9udERpY3QgPSBuZXcgKDAsICQ2MWFhNTQ5ZjE2ZDU4YjliJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKFtcbiAgICAvLyBrZXkgICAgICAgbmFtZSAgICAgICAgICAgICAgICAgICB0eXBlKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFxuICAgIFtcbiAgICAgICAgMTgsXG4gICAgICAgIFwiUHJpdmF0ZVwiLFxuICAgICAgICBuZXcgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRlByaXZhdGVPcCxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDM4XG4gICAgICAgIF0sXG4gICAgICAgIFwiRm9udE5hbWVcIixcbiAgICAgICAgXCJzaWRcIixcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDdcbiAgICAgICAgXSxcbiAgICAgICAgXCJGb250TWF0cml4XCIsXG4gICAgICAgIFwiYXJyYXlcIixcbiAgICAgICAgW1xuICAgICAgICAgICAgMC4wMDEsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDAuMDAxLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXVxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDVcbiAgICAgICAgXSxcbiAgICAgICAgXCJQYWludFR5cGVcIixcbiAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgMFxuICAgIF0sIFxuXSk7XG5sZXQgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRlRvcERpY3QgPSBuZXcgKDAsICQ2MWFhNTQ5ZjE2ZDU4YjliJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKFtcbiAgICAvLyBrZXkgICAgICAgbmFtZSAgICAgICAgICAgICAgICAgICB0eXBlKHMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzMFxuICAgICAgICBdLFxuICAgICAgICBcIlJPU1wiLFxuICAgICAgICBbXG4gICAgICAgICAgICBcInNpZFwiLFxuICAgICAgICAgICAgXCJzaWRcIixcbiAgICAgICAgICAgIFwibnVtYmVyXCJcbiAgICAgICAgXSxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICAwLFxuICAgICAgICBcInZlcnNpb25cIixcbiAgICAgICAgXCJzaWRcIixcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICAxLFxuICAgICAgICBcIk5vdGljZVwiLFxuICAgICAgICBcInNpZFwiLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBcIkNvcHlyaWdodFwiLFxuICAgICAgICBcInNpZFwiLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDIsXG4gICAgICAgIFwiRnVsbE5hbWVcIixcbiAgICAgICAgXCJzaWRcIixcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICAzLFxuICAgICAgICBcIkZhbWlseU5hbWVcIixcbiAgICAgICAgXCJzaWRcIixcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICA0LFxuICAgICAgICBcIldlaWdodFwiLFxuICAgICAgICBcInNpZFwiLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMVxuICAgICAgICBdLFxuICAgICAgICBcImlzRml4ZWRQaXRjaFwiLFxuICAgICAgICBcImJvb2xlYW5cIixcbiAgICAgICAgZmFsc2VcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFwiSXRhbGljQW5nbGVcIixcbiAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgMFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDNcbiAgICAgICAgXSxcbiAgICAgICAgXCJVbmRlcmxpbmVQb3NpdGlvblwiLFxuICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICAtMTAwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgNFxuICAgICAgICBdLFxuICAgICAgICBcIlVuZGVybGluZVRoaWNrbmVzc1wiLFxuICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICA1MFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDVcbiAgICAgICAgXSxcbiAgICAgICAgXCJQYWludFR5cGVcIixcbiAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgMFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDZcbiAgICAgICAgXSxcbiAgICAgICAgXCJDaGFyc3RyaW5nVHlwZVwiLFxuICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICAyXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgN1xuICAgICAgICBdLFxuICAgICAgICBcIkZvbnRNYXRyaXhcIixcbiAgICAgICAgXCJhcnJheVwiLFxuICAgICAgICBbXG4gICAgICAgICAgICAwLjAwMSxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMC4wMDEsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMFxuICAgICAgICBdXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDEzLFxuICAgICAgICBcIlVuaXF1ZUlEXCIsXG4gICAgICAgIFwibnVtYmVyXCIsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgNSxcbiAgICAgICAgXCJGb250QkJveFwiLFxuICAgICAgICBcImFycmF5XCIsXG4gICAgICAgIFtcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXVxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDhcbiAgICAgICAgXSxcbiAgICAgICAgXCJTdHJva2VXaWR0aFwiLFxuICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICAwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDE0LFxuICAgICAgICBcIlhVSURcIixcbiAgICAgICAgXCJhcnJheVwiLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDE1LFxuICAgICAgICBcImNoYXJzZXRcIixcbiAgICAgICAgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRkNoYXJzZXQsXG4gICAgICAgICgwLCAkZWY2NThmNWM5YTE0ODhiMiRleHBvcnQkYzMzYjUwMzM2YzIzNGYxNilcbiAgICBdLFxuICAgIFtcbiAgICAgICAgMTYsXG4gICAgICAgIFwiRW5jb2RpbmdcIixcbiAgICAgICAgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRkVuY29kaW5nLFxuICAgICAgICAoMCwgJGJjMDQzM2Q5YjdlNDFmNWYkZXhwb3J0JGRlZTAwMjcwNjBmYTEzYmQpXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDE3LFxuICAgICAgICBcIkNoYXJTdHJpbmdzXCIsXG4gICAgICAgIG5ldyAoMCwgJDBlMzRhNDNkMDViZGU4MmMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkobmV3ICgwLCAkNDNlOTgyMWVmMzcxN2VlYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSksXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgMTgsXG4gICAgICAgIFwiUHJpdmF0ZVwiLFxuICAgICAgICBuZXcgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRlByaXZhdGVPcCxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDIwXG4gICAgICAgIF0sXG4gICAgICAgIFwiU3ludGhldGljQmFzZVwiLFxuICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMjFcbiAgICAgICAgXSxcbiAgICAgICAgXCJQb3N0U2NyaXB0XCIsXG4gICAgICAgIFwic2lkXCIsXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAyMlxuICAgICAgICBdLFxuICAgICAgICBcIkJhc2VGb250TmFtZVwiLFxuICAgICAgICBcInNpZFwiLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMjNcbiAgICAgICAgXSxcbiAgICAgICAgXCJCYXNlRm9udEJsZW5kXCIsXG4gICAgICAgIFwiZGVsdGFcIixcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgLy8gQ0lEIGZvbnQgc3BlY2lmaWNcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMzFcbiAgICAgICAgXSxcbiAgICAgICAgXCJDSURGb250VmVyc2lvblwiLFxuICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICAwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMzJcbiAgICAgICAgXSxcbiAgICAgICAgXCJDSURGb250UmV2aXNpb25cIixcbiAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgMFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDMzXG4gICAgICAgIF0sXG4gICAgICAgIFwiQ0lERm9udFR5cGVcIixcbiAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgMFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDM0XG4gICAgICAgIF0sXG4gICAgICAgIFwiQ0lEQ291bnRcIixcbiAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgODcyMFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDM1XG4gICAgICAgIF0sXG4gICAgICAgIFwiVUlEQmFzZVwiLFxuICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMzdcbiAgICAgICAgXSxcbiAgICAgICAgXCJGRFNlbGVjdFwiLFxuICAgICAgICBuZXcgKDAsICQwZTM0YTQzZDA1YmRlODJjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKCRiODRmZDNkZDlkOGVkZGIyJHZhciRGRFNlbGVjdCksXG4gICAgICAgIG51bGxcbiAgICBdLFxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICAzNlxuICAgICAgICBdLFxuICAgICAgICBcIkZEQXJyYXlcIixcbiAgICAgICAgbmV3ICgwLCAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KShuZXcgKDAsICQ0M2U5ODIxZWYzNzE3ZWVjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKCRiODRmZDNkZDlkOGVkZGIyJHZhciRGb250RGljdCkpLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMzhcbiAgICAgICAgXSxcbiAgICAgICAgXCJGb250TmFtZVwiLFxuICAgICAgICBcInNpZFwiLFxuICAgICAgICBudWxsXG4gICAgXVxuXSk7XG5sZXQgJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJFZhcmlhdGlvblN0b3JlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGxlbmd0aDogJDUyWklmJHVpbnQxNixcbiAgICBpdGVtVmFyaWF0aW9uU3RvcmU6ICgwLCAkMWE0N2IwYzQ1YzFjMjJmZSRleHBvcnQkZmUxYjEyMmEyNzEwZjI0MSlcbn0pO1xubGV0ICRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkYyVG9wRGljdCA9IG5ldyAoMCwgJDYxYWE1NDlmMTZkNThiOWIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoW1xuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgMTIsXG4gICAgICAgICAgICA3XG4gICAgICAgIF0sXG4gICAgICAgIFwiRm9udE1hdHJpeFwiLFxuICAgICAgICBcImFycmF5XCIsXG4gICAgICAgIFtcbiAgICAgICAgICAgIDAuMDAxLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwLjAwMSxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwXG4gICAgICAgIF1cbiAgICBdLFxuICAgIFtcbiAgICAgICAgMTcsXG4gICAgICAgIFwiQ2hhclN0cmluZ3NcIixcbiAgICAgICAgbmV3ICgwLCAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KShuZXcgKDAsICQ0M2U5ODIxZWYzNzE3ZWVjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKSxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAxMixcbiAgICAgICAgICAgIDM3XG4gICAgICAgIF0sXG4gICAgICAgIFwiRkRTZWxlY3RcIixcbiAgICAgICAgbmV3ICgwLCAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSgkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkRkRTZWxlY3QpLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEyLFxuICAgICAgICAgICAgMzZcbiAgICAgICAgXSxcbiAgICAgICAgXCJGREFycmF5XCIsXG4gICAgICAgIG5ldyAoMCwgJDBlMzRhNDNkMDViZGU4MmMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkobmV3ICgwLCAkNDNlOTgyMWVmMzcxN2VlYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSgkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkRm9udERpY3QpKSxcbiAgICAgICAgbnVsbFxuICAgIF0sXG4gICAgW1xuICAgICAgICAyNCxcbiAgICAgICAgXCJ2c3RvcmVcIixcbiAgICAgICAgbmV3ICgwLCAkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSgkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkVmFyaWF0aW9uU3RvcmUpLFxuICAgICAgICBudWxsXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDI1LFxuICAgICAgICBcIm1heHN0YWNrXCIsXG4gICAgICAgIFwibnVtYmVyXCIsXG4gICAgICAgIDE5M1xuICAgIF1cbl0pO1xubGV0ICRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkZUb3AgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkZml4ZWQxNiwge1xuICAgIDE6IHtcbiAgICAgICAgaGRyU2l6ZTogJDUyWklmJHVpbnQ4LFxuICAgICAgICBvZmZTaXplOiAkNTJaSWYkdWludDgsXG4gICAgICAgIG5hbWVJbmRleDogbmV3ICgwLCAkNDNlOTgyMWVmMzcxN2VlYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KShuZXcgJDUyWklmJFN0cmluZyhcImxlbmd0aFwiKSksXG4gICAgICAgIHRvcERpY3RJbmRleDogbmV3ICgwLCAkNDNlOTgyMWVmMzcxN2VlYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSgkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGVG9wRGljdCksXG4gICAgICAgIHN0cmluZ0luZGV4OiBuZXcgKDAsICQ0M2U5ODIxZWYzNzE3ZWVjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKG5ldyAkNTJaSWYkU3RyaW5nKFwibGVuZ3RoXCIpKSxcbiAgICAgICAgZ2xvYmFsU3VickluZGV4OiBuZXcgKDAsICQ0M2U5ODIxZWYzNzE3ZWVjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpXG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIGhkclNpemU6ICQ1MlpJZiR1aW50OCxcbiAgICAgICAgbGVuZ3RoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICB0b3BEaWN0OiAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGMlRvcERpY3QsXG4gICAgICAgIGdsb2JhbFN1YnJJbmRleDogbmV3ICgwLCAkNDNlOTgyMWVmMzcxN2VlYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KVxuICAgIH1cbn0pO1xudmFyICRiODRmZDNkZDlkOGVkZGIyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSAkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGVG9wO1xuXG5cblxuXG5jbGFzcyAkODIyYWMwZDU4OWU0ZTIzNyR2YXIkQ0ZGRm9udCB7XG4gICAgc3RhdGljIGRlY29kZShzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyAkODIyYWMwZDU4OWU0ZTIzNyR2YXIkQ0ZGRm9udChzdHJlYW0pO1xuICAgIH1cbiAgICBkZWNvZGUoKSB7XG4gICAgICAgIGxldCBzdGFydCA9IHRoaXMuc3RyZWFtLnBvcztcbiAgICAgICAgbGV0IHRvcCA9ICgwLCAkYjg0ZmQzZGQ5ZDhlZGRiMiRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5kZWNvZGUodGhpcy5zdHJlYW0pO1xuICAgICAgICBmb3IobGV0IGtleSBpbiB0b3Ape1xuICAgICAgICAgICAgbGV0IHZhbCA9IHRvcFtrZXldO1xuICAgICAgICAgICAgdGhpc1trZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gPCAyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50b3BEaWN0SW5kZXgubGVuZ3RoICE9PSAxKSB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IGEgc2luZ2xlIGZvbnQgaXMgYWxsb3dlZCBpbiBDRkZcIik7XG4gICAgICAgICAgICB0aGlzLnRvcERpY3QgPSB0aGlzLnRvcERpY3RJbmRleFswXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzQ0lERm9udCA9IHRoaXMudG9wRGljdC5ST1MgIT0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHN0cmluZyhzaWQpIHtcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiA+PSAyKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKHNpZCA8ICgwLCAkMjI5MjI0YWVjNDM3ODNjNSRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5sZW5ndGgpIHJldHVybiAoMCwgJDIyOTIyNGFlYzQzNzgzYzUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSlbc2lkXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nSW5kZXhbc2lkIC0gKDAsICQyMjkyMjRhZWM0Mzc4M2M1JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLmxlbmd0aF07XG4gICAgfVxuICAgIGdldCBwb3N0c2NyaXB0TmFtZSgpIHtcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiA8IDIpIHJldHVybiB0aGlzLm5hbWVJbmRleFswXTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGdldCBmdWxsTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nKHRoaXMudG9wRGljdC5GdWxsTmFtZSk7XG4gICAgfVxuICAgIGdldCBmYW1pbHlOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJpbmcodGhpcy50b3BEaWN0LkZhbWlseU5hbWUpO1xuICAgIH1cbiAgICBnZXRDaGFyU3RyaW5nKGdseXBoKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLnBvcyA9IHRoaXMudG9wRGljdC5DaGFyU3RyaW5nc1tnbHlwaF0ub2Zmc2V0O1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJlYW0ucmVhZEJ1ZmZlcih0aGlzLnRvcERpY3QuQ2hhclN0cmluZ3NbZ2x5cGhdLmxlbmd0aCk7XG4gICAgfVxuICAgIGdldEdseXBoTmFtZShnaWQpIHtcbiAgICAgICAgLy8gQ0ZGMiBnbHlwaCBuYW1lcyBhcmUgaW4gdGhlIHBvc3QgdGFibGUuXG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gPj0gMikgcmV0dXJuIG51bGw7XG4gICAgICAgIC8vIENJRC1rZXllZCBmb250cyBkb24ndCBoYXZlIGdseXBoIG5hbWVzXG4gICAgICAgIGlmICh0aGlzLmlzQ0lERm9udCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCB7IGNoYXJzZXQ6IGNoYXJzZXQgIH0gPSB0aGlzLnRvcERpY3Q7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoYXJzZXQpKSByZXR1cm4gY2hhcnNldFtnaWRdO1xuICAgICAgICBpZiAoZ2lkID09PSAwKSByZXR1cm4gXCIubm90ZGVmXCI7XG4gICAgICAgIGdpZCAtPSAxO1xuICAgICAgICBzd2l0Y2goY2hhcnNldC52ZXJzaW9uKXtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJpbmcoY2hhcnNldC5nbHlwaHNbZ2lkXSk7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGNoYXJzZXQucmFuZ2VzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmdlID0gY2hhcnNldC5yYW5nZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZS5vZmZzZXQgPD0gZ2lkICYmIGdpZCA8PSByYW5nZS5vZmZzZXQgKyByYW5nZS5uTGVmdCkgcmV0dXJuIHRoaXMuc3RyaW5nKHJhbmdlLmZpcnN0ICsgKGdpZCAtIHJhbmdlLm9mZnNldCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZmRGb3JHbHlwaChnaWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRvcERpY3QuRkRTZWxlY3QpIHJldHVybiBudWxsO1xuICAgICAgICBzd2l0Y2godGhpcy50b3BEaWN0LkZEU2VsZWN0LnZlcnNpb24pe1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvcERpY3QuRkRTZWxlY3QuZmRzW2dpZF07XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgbGV0IHsgcmFuZ2VzOiByYW5nZXMgIH0gPSB0aGlzLnRvcERpY3QuRkRTZWxlY3Q7XG4gICAgICAgICAgICAgICAgbGV0IGxvdyA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IGhpZ2ggPSByYW5nZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB3aGlsZShsb3cgPD0gaGlnaCl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtaWQgPSBsb3cgKyBoaWdoID4+IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnaWQgPCByYW5nZXNbbWlkXS5maXJzdCkgaGlnaCA9IG1pZCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1pZCA8IGhpZ2ggJiYgZ2lkID49IHJhbmdlc1ttaWQgKyAxXS5maXJzdCkgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gcmFuZ2VzW21pZF0uZmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gRkRTZWxlY3QgdmVyc2lvbjogJHt0aGlzLnRvcERpY3QuRkRTZWxlY3QudmVyc2lvbn1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlRGljdEZvckdseXBoKGdpZCkge1xuICAgICAgICBpZiAodGhpcy50b3BEaWN0LkZEU2VsZWN0KSB7XG4gICAgICAgICAgICBsZXQgZmQgPSB0aGlzLmZkRm9yR2x5cGgoZ2lkKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRvcERpY3QuRkRBcnJheVtmZF0pIHJldHVybiB0aGlzLnRvcERpY3QuRkRBcnJheVtmZF0uUHJpdmF0ZTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gPCAyKSByZXR1cm4gdGhpcy50b3BEaWN0LlByaXZhdGU7XG4gICAgICAgIHJldHVybiB0aGlzLnRvcERpY3QuRkRBcnJheVswXS5Qcml2YXRlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzdHJlYW0pe1xuICAgICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgdGhpcy5kZWNvZGUoKTtcbiAgICB9XG59XG52YXIgJDgyMmFjMGQ1ODllNGUyMzckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9ICQ4MjJhYzBkNTg5ZTRlMjM3JHZhciRDRkZGb250O1xuXG5cblxubGV0ICQyYmJmMmJjMWNlMzdjZDhmJHZhciRWZXJ0aWNhbE9yaWdpbiA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBnbHlwaEluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgIHZlcnRPcmlnaW5ZOiAkNTJaSWYkaW50MTZcbn0pO1xudmFyICQyYmJmMmJjMWNlMzdjZDhmJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbWFqb3JWZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIG1pbm9yVmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBkZWZhdWx0VmVydE9yaWdpblk6ICQ1MlpJZiRpbnQxNixcbiAgICBudW1WZXJ0T3JpZ2luWU1ldHJpY3M6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWV0cmljczogbmV3ICQ1MlpJZiRBcnJheSgkMmJiZjJiYzFjZTM3Y2Q4ZiR2YXIkVmVydGljYWxPcmlnaW4sIFwibnVtVmVydE9yaWdpbllNZXRyaWNzXCIpXG59KTtcblxuXG5cblxubGV0ICQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCQxNmIyMjdjYjE1ZDcxNmEwID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGhlaWdodDogJDUyWklmJHVpbnQ4LFxuICAgIHdpZHRoOiAkNTJaSWYkdWludDgsXG4gICAgaG9yaUJlYXJpbmdYOiAkNTJaSWYkaW50OCxcbiAgICBob3JpQmVhcmluZ1k6ICQ1MlpJZiRpbnQ4LFxuICAgIGhvcmlBZHZhbmNlOiAkNTJaSWYkdWludDgsXG4gICAgdmVydEJlYXJpbmdYOiAkNTJaSWYkaW50OCxcbiAgICB2ZXJ0QmVhcmluZ1k6ICQ1MlpJZiRpbnQ4LFxuICAgIHZlcnRBZHZhbmNlOiAkNTJaSWYkdWludDhcbn0pO1xubGV0ICQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCQ2MmM1M2U3NWY2OWJmZTEyID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGhlaWdodDogJDUyWklmJHVpbnQ4LFxuICAgIHdpZHRoOiAkNTJaSWYkdWludDgsXG4gICAgYmVhcmluZ1g6ICQ1MlpJZiRpbnQ4LFxuICAgIGJlYXJpbmdZOiAkNTJaSWYkaW50OCxcbiAgICBhZHZhbmNlOiAkNTJaSWYkdWludDhcbn0pO1xubGV0ICQwOTQxNjE4ZGMyMmE5NDZkJHZhciRFQkRUQ29tcG9uZW50ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGdseXBoOiAkNTJaSWYkdWludDE2LFxuICAgIHhPZmZzZXQ6ICQ1MlpJZiRpbnQ4LFxuICAgIHlPZmZzZXQ6ICQ1MlpJZiRpbnQ4XG59KTtcbmNsYXNzICQwOTQxNjE4ZGMyMmE5NDZkJHZhciRCeXRlQWxpZ25lZCB7XG59XG5jbGFzcyAkMDk0MTYxOGRjMjJhOTQ2ZCR2YXIkQml0QWxpZ25lZCB7XG59XG5sZXQgJDA5NDE2MThkYzIyYTk0NmQkZXhwb3J0JGYxZjVkZGViMjBkMTRmID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoXCJ2ZXJzaW9uXCIsIHtcbiAgICAxOiB7XG4gICAgICAgIG1ldHJpY3M6ICQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCQ2MmM1M2U3NWY2OWJmZTEyLFxuICAgICAgICBkYXRhOiAkMDk0MTYxOGRjMjJhOTQ2ZCR2YXIkQnl0ZUFsaWduZWRcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgbWV0cmljczogJDA5NDE2MThkYzIyYTk0NmQkZXhwb3J0JDYyYzUzZTc1ZjY5YmZlMTIsXG4gICAgICAgIGRhdGE6ICQwOTQxNjE4ZGMyMmE5NDZkJHZhciRCaXRBbGlnbmVkXG4gICAgfSxcbiAgICAvLyBmb3JtYXQgMyBpcyBkZXByZWNhdGVkXG4gICAgLy8gZm9ybWF0IDQgaXMgbm90IHN1cHBvcnRlZCBieSBNaWNyb3NvZnRcbiAgICA1OiB7XG4gICAgICAgIGRhdGE6ICQwOTQxNjE4ZGMyMmE5NDZkJHZhciRCaXRBbGlnbmVkXG4gICAgfSxcbiAgICA2OiB7XG4gICAgICAgIG1ldHJpY3M6ICQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCQxNmIyMjdjYjE1ZDcxNmEwLFxuICAgICAgICBkYXRhOiAkMDk0MTYxOGRjMjJhOTQ2ZCR2YXIkQnl0ZUFsaWduZWRcbiAgICB9LFxuICAgIDc6IHtcbiAgICAgICAgbWV0cmljczogJDA5NDE2MThkYzIyYTk0NmQkZXhwb3J0JDE2YjIyN2NiMTVkNzE2YTAsXG4gICAgICAgIGRhdGE6ICQwOTQxNjE4ZGMyMmE5NDZkJHZhciRCaXRBbGlnbmVkXG4gICAgfSxcbiAgICA4OiB7XG4gICAgICAgIG1ldHJpY3M6ICQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCQ2MmM1M2U3NWY2OWJmZTEyLFxuICAgICAgICBwYWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQ4KSxcbiAgICAgICAgbnVtQ29tcG9uZW50czogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY29tcG9uZW50czogbmV3ICQ1MlpJZiRBcnJheSgkMDk0MTYxOGRjMjJhOTQ2ZCR2YXIkRUJEVENvbXBvbmVudCwgXCJudW1Db21wb25lbnRzXCIpXG4gICAgfSxcbiAgICA5OiB7XG4gICAgICAgIG1ldHJpY3M6ICQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCQxNmIyMjdjYjE1ZDcxNmEwLFxuICAgICAgICBwYWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQ4KSxcbiAgICAgICAgbnVtQ29tcG9uZW50czogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY29tcG9uZW50czogbmV3ICQ1MlpJZiRBcnJheSgkMDk0MTYxOGRjMjJhOTQ2ZCR2YXIkRUJEVENvbXBvbmVudCwgXCJudW1Db21wb25lbnRzXCIpXG4gICAgfSxcbiAgICAxNzoge1xuICAgICAgICBtZXRyaWNzOiAkMDk0MTYxOGRjMjJhOTQ2ZCRleHBvcnQkNjJjNTNlNzVmNjliZmUxMixcbiAgICAgICAgZGF0YUxlbjogJDUyWklmJHVpbnQzMixcbiAgICAgICAgZGF0YTogbmV3ICQ1MlpJZiRCdWZmZXIoXCJkYXRhTGVuXCIpXG4gICAgfSxcbiAgICAxODoge1xuICAgICAgICBtZXRyaWNzOiAkMDk0MTYxOGRjMjJhOTQ2ZCRleHBvcnQkMTZiMjI3Y2IxNWQ3MTZhMCxcbiAgICAgICAgZGF0YUxlbjogJDUyWklmJHVpbnQzMixcbiAgICAgICAgZGF0YTogbmV3ICQ1MlpJZiRCdWZmZXIoXCJkYXRhTGVuXCIpXG4gICAgfSxcbiAgICAxOToge1xuICAgICAgICBkYXRhTGVuOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBkYXRhOiBuZXcgJDUyWklmJEJ1ZmZlcihcImRhdGFMZW5cIilcbiAgICB9XG59KTtcblxuXG5sZXQgJDk5MTFjNGM3MjAxYzEzZGUkdmFyJFNCaXRMaW5lTWV0cmljcyA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBhc2NlbmRlcjogJDUyWklmJGludDgsXG4gICAgZGVzY2VuZGVyOiAkNTJaSWYkaW50OCxcbiAgICB3aWR0aE1heDogJDUyWklmJHVpbnQ4LFxuICAgIGNhcmV0U2xvcGVOdW1lcmF0b3I6ICQ1MlpJZiRpbnQ4LFxuICAgIGNhcmV0U2xvcGVEZW5vbWluYXRvcjogJDUyWklmJGludDgsXG4gICAgY2FyZXRPZmZzZXQ6ICQ1MlpJZiRpbnQ4LFxuICAgIG1pbk9yaWdpblNCOiAkNTJaSWYkaW50OCxcbiAgICBtaW5BZHZhbmNlU0I6ICQ1MlpJZiRpbnQ4LFxuICAgIG1heEJlZm9yZUJMOiAkNTJaSWYkaW50OCxcbiAgICBtaW5BZnRlckJMOiAkNTJaSWYkaW50OCxcbiAgICBwYWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJGludDgsIDIpXG59KTtcbmxldCAkOTkxMWM0YzcyMDFjMTNkZSR2YXIkQ29kZU9mZnNldFBhaXIgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZ2x5cGhDb2RlOiAkNTJaSWYkdWludDE2LFxuICAgIG9mZnNldDogJDUyWklmJHVpbnQxNlxufSk7XG5sZXQgJDk5MTFjNGM3MjAxYzEzZGUkdmFyJEluZGV4U3VidGFibGUgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgaGVhZGVyOiB7XG4gICAgICAgIGltYWdlRm9ybWF0OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBpbWFnZURhdGFPZmZzZXQ6ICQ1MlpJZiR1aW50MzJcbiAgICB9LFxuICAgIDE6IHtcbiAgICAgICAgb2Zmc2V0QXJyYXk6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQzMiwgKHQpPT50LnBhcmVudC5sYXN0R2x5cGhJbmRleCAtIHQucGFyZW50LmZpcnN0R2x5cGhJbmRleCArIDEpXG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIGltYWdlU2l6ZTogJDUyWklmJHVpbnQzMixcbiAgICAgICAgYmlnTWV0cmljczogKDAsICQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCQxNmIyMjdjYjE1ZDcxNmEwKVxuICAgIH0sXG4gICAgMzoge1xuICAgICAgICBvZmZzZXRBcnJheTogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAodCk9PnQucGFyZW50Lmxhc3RHbHlwaEluZGV4IC0gdC5wYXJlbnQuZmlyc3RHbHlwaEluZGV4ICsgMSlcbiAgICB9LFxuICAgIDQ6IHtcbiAgICAgICAgbnVtR2x5cGhzOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBnbHlwaEFycmF5OiBuZXcgJDUyWklmJEFycmF5KCQ5OTExYzRjNzIwMWMxM2RlJHZhciRDb2RlT2Zmc2V0UGFpciwgKHQpPT50Lm51bUdseXBocyArIDEpXG4gICAgfSxcbiAgICA1OiB7XG4gICAgICAgIGltYWdlU2l6ZTogJDUyWklmJHVpbnQzMixcbiAgICAgICAgYmlnTWV0cmljczogKDAsICQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCQxNmIyMjdjYjE1ZDcxNmEwKSxcbiAgICAgICAgbnVtR2x5cGhzOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBnbHlwaENvZGVBcnJheTogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCBcIm51bUdseXBoc1wiKVxuICAgIH1cbn0pO1xubGV0ICQ5OTExYzRjNzIwMWMxM2RlJHZhciRJbmRleFN1YnRhYmxlQXJyYXkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZmlyc3RHbHlwaEluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgIGxhc3RHbHlwaEluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgIHN1YnRhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgJDk5MTFjNGM3MjAxYzEzZGUkdmFyJEluZGV4U3VidGFibGUpXG59KTtcbmxldCAkOTkxMWM0YzcyMDFjMTNkZSR2YXIkQml0bWFwU2l6ZVRhYmxlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGluZGV4U3ViVGFibGVBcnJheTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAkNTJaSWYkQXJyYXkoJDk5MTFjNGM3MjAxYzEzZGUkdmFyJEluZGV4U3VidGFibGVBcnJheSwgMSksIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIlxuICAgIH0pLFxuICAgIGluZGV4VGFibGVzU2l6ZTogJDUyWklmJHVpbnQzMixcbiAgICBudW1iZXJPZkluZGV4U3ViVGFibGVzOiAkNTJaSWYkdWludDMyLFxuICAgIGNvbG9yUmVmOiAkNTJaSWYkdWludDMyLFxuICAgIGhvcmk6ICQ5OTExYzRjNzIwMWMxM2RlJHZhciRTQml0TGluZU1ldHJpY3MsXG4gICAgdmVydDogJDk5MTFjNGM3MjAxYzEzZGUkdmFyJFNCaXRMaW5lTWV0cmljcyxcbiAgICBzdGFydEdseXBoSW5kZXg6ICQ1MlpJZiR1aW50MTYsXG4gICAgZW5kR2x5cGhJbmRleDogJDUyWklmJHVpbnQxNixcbiAgICBwcGVtWDogJDUyWklmJHVpbnQ4LFxuICAgIHBwZW1ZOiAkNTJaSWYkdWludDgsXG4gICAgYml0RGVwdGg6ICQ1MlpJZiR1aW50OCxcbiAgICBmbGFnczogbmV3ICQ1MlpJZiRCaXRmaWVsZCgkNTJaSWYkdWludDgsIFtcbiAgICAgICAgXCJob3Jpem9udGFsXCIsXG4gICAgICAgIFwidmVydGljYWxcIlxuICAgIF0pXG59KTtcbnZhciAkOTkxMWM0YzcyMDFjMTNkZSRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiR1aW50MzIsXG4gICAgbnVtU2l6ZXM6ICQ1MlpJZiR1aW50MzIsXG4gICAgc2l6ZXM6IG5ldyAkNTJaSWYkQXJyYXkoJDk5MTFjNGM3MjAxYzEzZGUkdmFyJEJpdG1hcFNpemVUYWJsZSwgXCJudW1TaXplc1wiKVxufSk7XG5cblxuXG5sZXQgJGFiYjg0NzA1MWVmZDUxYjEkdmFyJEltYWdlVGFibGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgcHBlbTogJDUyWklmJHVpbnQxNixcbiAgICByZXNvbHV0aW9uOiAkNTJaSWYkdWludDE2LFxuICAgIGltYWdlT2Zmc2V0czogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgXCJ2b2lkXCIpLCAodCk9PnQucGFyZW50LnBhcmVudC5tYXhwLm51bUdseXBocyArIDEpXG59KTtcbnZhciAvLyBUaGlzIGlzIHRoZSBBcHBsZSBzYml4IHRhYmxlLCB1c2VkIGJ5IHRoZSBcIkFwcGxlIENvbG9yIEVtb2ppXCIgZm9udC5cbi8vIEl0IGluY2x1ZGVzIHNldmVyYWwgaW1hZ2UgdGFibGVzIHdpdGggaW1hZ2VzIGZvciBlYWNoIGJpdG1hcCBnbHlwaFxuLy8gb2Ygc2V2ZXJhbCBkaWZmZXJlbnQgc2l6ZXMuXG4kYWJiODQ3MDUxZWZkNTFiMSRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiR1aW50MTYsXG4gICAgZmxhZ3M6IG5ldyAkNTJaSWYkQml0ZmllbGQoJDUyWklmJHVpbnQxNiwgW1xuICAgICAgICBcInJlbmRlck91dGxpbmVzXCJcbiAgICBdKSxcbiAgICBudW1JbWdUYWJsZXM6ICQ1MlpJZiR1aW50MzIsXG4gICAgaW1hZ2VUYWJsZXM6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICRhYmI4NDcwNTFlZmQ1MWIxJHZhciRJbWFnZVRhYmxlKSwgXCJudW1JbWdUYWJsZXNcIilcbn0pO1xuXG5cblxubGV0ICRlYjYyOTE4OGYzZGZlZmRkJHZhciRMYXllclJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBnaWQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgcGFsZXR0ZUluZGV4OiAkNTJaSWYkdWludDE2IC8vIEluZGV4IHZhbHVlIHRvIHVzZSBpbiB0aGUgYXBwcm9wcmlhdGUgcGFsZXR0ZS4gVGhpcyB2YWx1ZSBtdXN0XG59KTsgLy8gYmUgbGVzcyB0aGFuIG51bVBhbGV0dGVFbnRyaWVzIGluIHRoZSBDUEFMIHRhYmxlLCBleGNlcHQgZm9yXG4vLyB0aGUgc3BlY2lhbCBjYXNlIG5vdGVkIGJlbG93LiBFYWNoIHBhbGV0dGUgZW50cnkgaXMgMTYgYml0cy5cbi8vIEEgcGFsZXR0ZSBpbmRleCBvZiAweEZGRkYgaXMgYSBzcGVjaWFsIGNhc2UgaW5kaWNhdGluZyB0aGF0XG4vLyB0aGUgdGV4dCBmb3JlZ3JvdW5kIGNvbG9yIHNob3VsZCBiZSB1c2VkLlxubGV0ICRlYjYyOTE4OGYzZGZlZmRkJHZhciRCYXNlR2x5cGhSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZ2lkOiAkNTJaSWYkdWludDE2LFxuICAgIC8vIGFuZCBpcyBub3QgcmVuZGVyZWQgZm9yIGNvbG9yLlxuICAgIGZpcnN0TGF5ZXJJbmRleDogJDUyWklmJHVpbnQxNixcbiAgICAvLyBUaGVyZSB3aWxsIGJlIG51bUxheWVycyBjb25zZWN1dGl2ZSBlbnRyaWVzIGZvciB0aGlzIGJhc2UgZ2x5cGguXG4gICAgbnVtTGF5ZXJzOiAkNTJaSWYkdWludDE2XG59KTtcbnZhciAkZWI2MjkxODhmM2RmZWZkZCRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiR1aW50MTYsXG4gICAgbnVtQmFzZUdseXBoUmVjb3JkczogJDUyWklmJHVpbnQxNixcbiAgICBiYXNlR2x5cGhSZWNvcmQ6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgJDUyWklmJEFycmF5KCRlYjYyOTE4OGYzZGZlZmRkJHZhciRCYXNlR2x5cGhSZWNvcmQsIFwibnVtQmFzZUdseXBoUmVjb3Jkc1wiKSksXG4gICAgbGF5ZXJSZWNvcmRzOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgbmV3ICQ1MlpJZiRBcnJheSgkZWI2MjkxODhmM2RmZWZkZCR2YXIkTGF5ZXJSZWNvcmQsIFwibnVtTGF5ZXJSZWNvcmRzXCIpLCB7XG4gICAgICAgIGxhenk6IHRydWVcbiAgICB9KSxcbiAgICBudW1MYXllclJlY29yZHM6ICQ1MlpJZiR1aW50MTZcbn0pO1xuXG5cblxubGV0ICQwODczNGI4ZTdkYzY0NTg3JHZhciRDb2xvclJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBibHVlOiAkNTJaSWYkdWludDgsXG4gICAgZ3JlZW46ICQ1MlpJZiR1aW50OCxcbiAgICByZWQ6ICQ1MlpJZiR1aW50OCxcbiAgICBhbHBoYTogJDUyWklmJHVpbnQ4XG59KTtcbnZhciAkMDg3MzRiOGU3ZGM2NDU4NyRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQxNiwge1xuICAgIGhlYWRlcjoge1xuICAgICAgICBudW1QYWxldHRlRW50cmllczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbnVtUGFsZXR0ZXM6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIG51bUNvbG9yUmVjb3JkczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY29sb3JSZWNvcmRzOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgbmV3ICQ1MlpJZiRBcnJheSgkMDg3MzRiOGU3ZGM2NDU4NyR2YXIkQ29sb3JSZWNvcmQsIFwibnVtQ29sb3JSZWNvcmRzXCIpKSxcbiAgICAgICAgY29sb3JSZWNvcmRJbmRpY2VzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsIFwibnVtUGFsZXR0ZXNcIilcbiAgICB9LFxuICAgIDA6IHt9LFxuICAgIDE6IHtcbiAgICAgICAgb2Zmc2V0UGFsZXR0ZVR5cGVBcnJheTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQzMiwgXCJudW1QYWxldHRlc1wiKSksXG4gICAgICAgIG9mZnNldFBhbGV0dGVMYWJlbEFycmF5OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCBcIm51bVBhbGV0dGVzXCIpKSxcbiAgICAgICAgb2Zmc2V0UGFsZXR0ZUVudHJ5TGFiZWxBcnJheTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgXCJudW1QYWxldHRlRW50cmllc1wiKSlcbiAgICB9XG59KTtcblxuXG5cblxuXG5sZXQgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VDb29yZCA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MTYsIHtcbiAgICAxOiB7XG4gICAgICAgIGNvb3JkaW5hdGU6ICQ1MlpJZiRpbnQxNiAvLyBYIG9yIFkgdmFsdWUsIGluIGRlc2lnbiB1bml0c1xuICAgIH0sXG4gICAgMjoge1xuICAgICAgICBjb29yZGluYXRlOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHJlZmVyZW5jZUdseXBoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBiYXNlQ29vcmRQb2ludDogJDUyWklmJHVpbnQxNiAvLyBJbmRleCBvZiBjb250b3VyIHBvaW50IG9uIHRoZSByZWZlcmVuY2VHbHlwaFxuICAgIH0sXG4gICAgMzoge1xuICAgICAgICBjb29yZGluYXRlOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIGRldmljZVRhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4MjE1ZDE0YTYzZDlmYjEwKSkgLy8gRGV2aWNlIHRhYmxlIGZvciBYIG9yIFkgdmFsdWVcbiAgICB9XG59KTtcbmxldCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZVZhbHVlcyA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBkZWZhdWx0SW5kZXg6ICQ1MlpJZiR1aW50MTYsXG4gICAgYmFzZUNvb3JkQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgYmFzZUNvb3JkczogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VDb29yZCksIFwiYmFzZUNvb3JkQ291bnRcIilcbn0pO1xubGV0ICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRGZWF0TWluTWF4UmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHRhZzogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgbWluQ29vcmQ6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZUNvb3JkLCB7XG4gICAgICAgIHR5cGU6IFwicGFyZW50XCJcbiAgICB9KSxcbiAgICBtYXhDb29yZDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlQ29vcmQsIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIlxuICAgIH0pIC8vIE1heSBiZSBOVUxMXG59KTtcbmxldCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkTWluTWF4ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIG1pbkNvb3JkOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VDb29yZCksXG4gICAgbWF4Q29vcmQ6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZUNvb3JkKSxcbiAgICBmZWF0TWluTWF4Q291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgZmVhdE1pbk1heFJlY29yZHM6IG5ldyAkNTJaSWYkQXJyYXkoJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEZlYXRNaW5NYXhSZWNvcmQsIFwiZmVhdE1pbk1heENvdW50XCIpIC8vIEluIGFscGhhYmV0aWNhbCBvcmRlclxufSk7XG5sZXQgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VMYW5nU3lzUmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHRhZzogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgbWluTWF4OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJE1pbk1heCwge1xuICAgICAgICB0eXBlOiBcInBhcmVudFwiXG4gICAgfSlcbn0pO1xubGV0ICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlU2NyaXB0ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGJhc2VWYWx1ZXM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZVZhbHVlcyksXG4gICAgZGVmYXVsdE1pbk1heDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRNaW5NYXgpLFxuICAgIGJhc2VMYW5nU3lzQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgYmFzZUxhbmdTeXNSZWNvcmRzOiBuZXcgJDUyWklmJEFycmF5KCQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlTGFuZ1N5c1JlY29yZCwgXCJiYXNlTGFuZ1N5c0NvdW50XCIpIC8vIGluIGFscGhhYmV0aWNhbCBvcmRlciBieSBCYXNlTGFuZ1N5c1RhZ1xufSk7XG5sZXQgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VTY3JpcHRSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdGFnOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICBzY3JpcHQ6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZVNjcmlwdCwge1xuICAgICAgICB0eXBlOiBcInBhcmVudFwiXG4gICAgfSlcbn0pO1xubGV0ICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlU2NyaXB0TGlzdCA9IG5ldyAkNTJaSWYkQXJyYXkoJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VTY3JpcHRSZWNvcmQsICQ1MlpJZiR1aW50MTYpO1xuLy8gQXJyYXkgb2YgNC1ieXRlIGJhc2VsaW5lIGlkZW50aWZpY2F0aW9uIHRhZ3MtbXVzdCBiZSBpbiBhbHBoYWJldGljYWwgb3JkZXJcbmxldCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZVRhZ0xpc3QgPSBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkU3RyaW5nKDQpLCAkNTJaSWYkdWludDE2KTtcbmxldCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQXhpcyA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBiYXNlVGFnTGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlVGFnTGlzdCksXG4gICAgYmFzZVNjcmlwdExpc3Q6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZVNjcmlwdExpc3QpXG59KTtcbnZhciAkNDk3Y2VmNDExZDg4NGUzNCRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQzMiwge1xuICAgIGhlYWRlcjoge1xuICAgICAgICBob3JpekF4aXM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQXhpcyksXG4gICAgICAgIHZlcnRBeGlzOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEF4aXMpIC8vIE1heSBiZSBOVUxMXG4gICAgfSxcbiAgICAweDAwMDEwMDAwOiB7fSxcbiAgICAweDAwMDEwMDAxOiB7XG4gICAgICAgIGl0ZW1WYXJpYXRpb25TdG9yZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICgwLCAkMWE0N2IwYzQ1YzFjMjJmZSRleHBvcnQkZmUxYjEyMmEyNzEwZjI0MSkpXG4gICAgfVxufSk7XG5cblxuXG5cblxubGV0ICRjZjVmMzNjNjNlZjIwOWU2JHZhciRBdHRhY2hQb2ludCA9IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgJDUyWklmJHVpbnQxNik7XG5sZXQgJGNmNWYzM2M2M2VmMjA5ZTYkdmFyJEF0dGFjaExpc3QgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgIGdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgYXR0YWNoUG9pbnRzOiBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkQXR0YWNoUG9pbnQpLCBcImdseXBoQ291bnRcIilcbn0pO1xubGV0ICRjZjVmMzNjNjNlZjIwOWU2JHZhciRDYXJldFZhbHVlID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQxNiwge1xuICAgIDE6IHtcbiAgICAgICAgY29vcmRpbmF0ZTogJDUyWklmJGludDE2XG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIGNhcmV0VmFsdWVQb2ludDogJDUyWklmJHVpbnQxNlxuICAgIH0sXG4gICAgMzoge1xuICAgICAgICBjb29yZGluYXRlOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIGRldmljZVRhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4MjE1ZDE0YTYzZDlmYjEwKSlcbiAgICB9XG59KTtcbmxldCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkTGlnR2x5cGggPSBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkQ2FyZXRWYWx1ZSksICQ1MlpJZiR1aW50MTYpO1xubGV0ICRjZjVmMzNjNjNlZjIwOWU2JHZhciRMaWdDYXJldExpc3QgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgIGxpZ0dseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbGlnR2x5cGhzOiBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkTGlnR2x5cGgpLCBcImxpZ0dseXBoQ291bnRcIilcbn0pO1xubGV0ICRjZjVmMzNjNjNlZjIwOWU2JHZhciRNYXJrR2x5cGhTZXRzRGVmID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIG1hcmtTZXRUYWJsZUZvcm1hdDogJDUyWklmJHVpbnQxNixcbiAgICBtYXJrU2V0Q291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksIFwibWFya1NldENvdW50XCIpXG59KTtcbnZhciAkY2Y1ZjMzYzYzZWYyMDllNiRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQzMiwge1xuICAgIGhlYWRlcjoge1xuICAgICAgICBnbHlwaENsYXNzRGVmOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4NDNkNTUxZmJiYWZlZjcxKSksXG4gICAgICAgIGF0dGFjaExpc3Q6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkQXR0YWNoTGlzdCksXG4gICAgICAgIGxpZ0NhcmV0TGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRjZjVmMzNjNjNlZjIwOWU2JHZhciRMaWdDYXJldExpc3QpLFxuICAgICAgICBtYXJrQXR0YWNoQ2xhc3NEZWY6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDg0M2Q1NTFmYmJhZmVmNzEpKVxuICAgIH0sXG4gICAgMHgwMDAxMDAwMDoge30sXG4gICAgMHgwMDAxMDAwMjoge1xuICAgICAgICBtYXJrR2x5cGhTZXRzRGVmOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJGNmNWYzM2M2M2VmMjA5ZTYkdmFyJE1hcmtHbHlwaFNldHNEZWYpXG4gICAgfSxcbiAgICAweDAwMDEwMDAzOiB7XG4gICAgICAgIG1hcmtHbHlwaFNldHNEZWY6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkTWFya0dseXBoU2V0c0RlZiksXG4gICAgICAgIGl0ZW1WYXJpYXRpb25TdG9yZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICgwLCAkMWE0N2IwYzQ1YzFjMjJmZSRleHBvcnQkZmUxYjEyMmEyNzEwZjI0MSkpXG4gICAgfVxufSk7XG5cblxuXG5cblxubGV0ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRWYWx1ZUZvcm1hdCA9IG5ldyAkNTJaSWYkQml0ZmllbGQoJDUyWklmJHVpbnQxNiwgW1xuICAgIFwieFBsYWNlbWVudFwiLFxuICAgIFwieVBsYWNlbWVudFwiLFxuICAgIFwieEFkdmFuY2VcIixcbiAgICBcInlBZHZhbmNlXCIsXG4gICAgXCJ4UGxhRGV2aWNlXCIsXG4gICAgXCJ5UGxhRGV2aWNlXCIsXG4gICAgXCJ4QWR2RGV2aWNlXCIsXG4gICAgXCJ5QWR2RGV2aWNlXCJcbl0pO1xubGV0ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciR0eXBlcyA9IHtcbiAgICB4UGxhY2VtZW50OiAkNTJaSWYkaW50MTYsXG4gICAgeVBsYWNlbWVudDogJDUyWklmJGludDE2LFxuICAgIHhBZHZhbmNlOiAkNTJaSWYkaW50MTYsXG4gICAgeUFkdmFuY2U6ICQ1MlpJZiRpbnQxNixcbiAgICB4UGxhRGV2aWNlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4MjE1ZDE0YTYzZDlmYjEwKSwge1xuICAgICAgICB0eXBlOiBcImdsb2JhbFwiLFxuICAgICAgICByZWxhdGl2ZVRvOiAoY3R4KT0+Y3R4LnJlbFxuICAgIH0pLFxuICAgIHlQbGFEZXZpY2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDgyMTVkMTRhNjNkOWZiMTApLCB7XG4gICAgICAgIHR5cGU6IFwiZ2xvYmFsXCIsXG4gICAgICAgIHJlbGF0aXZlVG86IChjdHgpPT5jdHgucmVsXG4gICAgfSksXG4gICAgeEFkdkRldmljZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODIxNWQxNGE2M2Q5ZmIxMCksIHtcbiAgICAgICAgdHlwZTogXCJnbG9iYWxcIixcbiAgICAgICAgcmVsYXRpdmVUbzogKGN0eCk9PmN0eC5yZWxcbiAgICB9KSxcbiAgICB5QWR2RGV2aWNlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4MjE1ZDE0YTYzZDlmYjEwKSwge1xuICAgICAgICB0eXBlOiBcImdsb2JhbFwiLFxuICAgICAgICByZWxhdGl2ZVRvOiAoY3R4KT0+Y3R4LnJlbFxuICAgIH0pXG59O1xuY2xhc3MgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFZhbHVlUmVjb3JkIHtcbiAgICBidWlsZFN0cnVjdChwYXJlbnQpIHtcbiAgICAgICAgbGV0IHN0cnVjdCA9IHBhcmVudDtcbiAgICAgICAgd2hpbGUoIXN0cnVjdFt0aGlzLmtleV0gJiYgc3RydWN0LnBhcmVudClzdHJ1Y3QgPSBzdHJ1Y3QucGFyZW50O1xuICAgICAgICBpZiAoIXN0cnVjdFt0aGlzLmtleV0pIHJldHVybjtcbiAgICAgICAgbGV0IGZpZWxkcyA9IHt9O1xuICAgICAgICBmaWVsZHMucmVsID0gKCk9PnN0cnVjdC5fc3RhcnRPZmZzZXQ7XG4gICAgICAgIGxldCBmb3JtYXQgPSBzdHJ1Y3RbdGhpcy5rZXldO1xuICAgICAgICBmb3IobGV0IGtleSBpbiBmb3JtYXQpaWYgKGZvcm1hdFtrZXldKSBmaWVsZHNba2V5XSA9ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciR0eXBlc1trZXldO1xuICAgICAgICByZXR1cm4gbmV3ICQ1MlpJZiRTdHJ1Y3QoZmllbGRzKTtcbiAgICB9XG4gICAgc2l6ZSh2YWwsIGN0eCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZFN0cnVjdChjdHgpLnNpemUodmFsLCBjdHgpO1xuICAgIH1cbiAgICBkZWNvZGUoc3RyZWFtLCBwYXJlbnQpIHtcbiAgICAgICAgbGV0IHJlcyA9IHRoaXMuYnVpbGRTdHJ1Y3QocGFyZW50KS5kZWNvZGUoc3RyZWFtLCBwYXJlbnQpO1xuICAgICAgICBkZWxldGUgcmVzLnJlbDtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioa2V5ID0gXCJ2YWx1ZUZvcm1hdFwiKXtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgfVxufVxubGV0ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRQYWlyVmFsdWVSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgc2Vjb25kR2x5cGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgdmFsdWUxOiBuZXcgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFZhbHVlUmVjb3JkKFwidmFsdWVGb3JtYXQxXCIpLFxuICAgIHZhbHVlMjogbmV3ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRWYWx1ZVJlY29yZChcInZhbHVlRm9ybWF0MlwiKVxufSk7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFBhaXJTZXQgPSBuZXcgJDUyWklmJEFycmF5KCQ0N2UwZThlZjUxNWQ5OTAzJHZhciRQYWlyVmFsdWVSZWNvcmQsICQ1MlpJZiR1aW50MTYpO1xubGV0ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRDbGFzczJSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmFsdWUxOiBuZXcgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFZhbHVlUmVjb3JkKFwidmFsdWVGb3JtYXQxXCIpLFxuICAgIHZhbHVlMjogbmV3ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRWYWx1ZVJlY29yZChcInZhbHVlRm9ybWF0MlwiKVxufSk7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJEFuY2hvciA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MTYsIHtcbiAgICAxOiB7XG4gICAgICAgIHhDb29yZGluYXRlOiAkNTJaSWYkaW50MTYsXG4gICAgICAgIHlDb29yZGluYXRlOiAkNTJaSWYkaW50MTZcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgeENvb3JkaW5hdGU6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgeUNvb3JkaW5hdGU6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgYW5jaG9yUG9pbnQ6ICQ1MlpJZiR1aW50MTZcbiAgICB9LFxuICAgIDM6IHtcbiAgICAgICAgeENvb3JkaW5hdGU6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgeUNvb3JkaW5hdGU6ICQ1MlpJZiRpbnQxNixcbiAgICAgICAgeERldmljZVRhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4MjE1ZDE0YTYzZDlmYjEwKSksXG4gICAgICAgIHlEZXZpY2VUYWJsZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODIxNWQxNGE2M2Q5ZmIxMCkpXG4gICAgfVxufSk7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJEVudHJ5RXhpdFJlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBlbnRyeUFuY2hvcjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRBbmNob3IsIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIlxuICAgIH0pLFxuICAgIGV4aXRBbmNob3I6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkQW5jaG9yLCB7XG4gICAgICAgIHR5cGU6IFwicGFyZW50XCJcbiAgICB9KVxufSk7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJE1hcmtSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgY2xhc3M6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWFya0FuY2hvcjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRBbmNob3IsIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIlxuICAgIH0pXG59KTtcbmxldCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkTWFya0FycmF5ID0gbmV3ICQ1MlpJZiRBcnJheSgkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkTWFya1JlY29yZCwgJDUyWklmJHVpbnQxNik7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJEJhc2VSZWNvcmQgPSBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkQW5jaG9yKSwgKHQpPT50LnBhcmVudC5jbGFzc0NvdW50KTtcbmxldCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkQmFzZUFycmF5ID0gbmV3ICQ1MlpJZiRBcnJheSgkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkQmFzZVJlY29yZCwgJDUyWklmJHVpbnQxNik7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJENvbXBvbmVudFJlY29yZCA9IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRBbmNob3IpLCAodCk9PnQucGFyZW50LnBhcmVudC5jbGFzc0NvdW50KTtcbmxldCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkTGlnYXR1cmVBdHRhY2ggPSBuZXcgJDUyWklmJEFycmF5KCQ0N2UwZThlZjUxNWQ5OTAzJHZhciRDb21wb25lbnRSZWNvcmQsICQ1MlpJZiR1aW50MTYpO1xubGV0ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRMaWdhdHVyZUFycmF5ID0gbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJExpZ2F0dXJlQXR0YWNoKSwgJDUyWklmJHVpbnQxNik7XG5sZXQgJDQ3ZTBlOGVmNTE1ZDk5MDMkZXhwb3J0JDczYThjZmIxOWNkNDNhMGYgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdChcImxvb2t1cFR5cGVcIiwge1xuICAgIDE6IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MTYsIHtcbiAgICAgICAgMToge1xuICAgICAgICAgICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgICAgICAgICAgdmFsdWVGb3JtYXQ6ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRWYWx1ZUZvcm1hdCxcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFZhbHVlUmVjb3JkKClcbiAgICAgICAgfSxcbiAgICAgICAgMjoge1xuICAgICAgICAgICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgICAgICAgICAgdmFsdWVGb3JtYXQ6ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRWYWx1ZUZvcm1hdCxcbiAgICAgICAgICAgIHZhbHVlQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgICAgICB2YWx1ZXM6IG5ldyAkNTJaSWYkTGF6eUFycmF5KG5ldyAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkVmFsdWVSZWNvcmQoKSwgXCJ2YWx1ZUNvdW50XCIpXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICAyOiBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgICAgIDE6IHtcbiAgICAgICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgICAgIHZhbHVlRm9ybWF0MTogJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJFZhbHVlRm9ybWF0LFxuICAgICAgICAgICAgdmFsdWVGb3JtYXQyOiAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkVmFsdWVGb3JtYXQsXG4gICAgICAgICAgICBwYWlyU2V0Q291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgICAgICBwYWlyU2V0czogbmV3ICQ1MlpJZiRMYXp5QXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRQYWlyU2V0KSwgXCJwYWlyU2V0Q291bnRcIilcbiAgICAgICAgfSxcbiAgICAgICAgMjoge1xuICAgICAgICAgICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgICAgICAgICAgdmFsdWVGb3JtYXQxOiAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkVmFsdWVGb3JtYXQsXG4gICAgICAgICAgICB2YWx1ZUZvcm1hdDI6ICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRWYWx1ZUZvcm1hdCxcbiAgICAgICAgICAgIGNsYXNzRGVmMTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODQzZDU1MWZiYmFmZWY3MSkpLFxuICAgICAgICAgICAgY2xhc3NEZWYyOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4NDNkNTUxZmJiYWZlZjcxKSksXG4gICAgICAgICAgICBjbGFzczFDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgICAgIGNsYXNzMkNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICAgICAgY2xhc3NSZWNvcmRzOiBuZXcgJDUyWklmJExhenlBcnJheShuZXcgJDUyWklmJExhenlBcnJheSgkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkQ2xhc3MyUmVjb3JkLCBcImNsYXNzMkNvdW50XCIpLCBcImNsYXNzMUNvdW50XCIpXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICAzOiB7XG4gICAgICAgIGZvcm1hdDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgICAgICBlbnRyeUV4aXRDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZW50cnlFeGl0UmVjb3JkczogbmV3ICQ1MlpJZiRBcnJheSgkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkRW50cnlFeGl0UmVjb3JkLCBcImVudHJ5RXhpdENvdW50XCIpXG4gICAgfSxcbiAgICA0OiB7XG4gICAgICAgIGZvcm1hdDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbWFya0NvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgYmFzZUNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgY2xhc3NDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbWFya0FycmF5OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJE1hcmtBcnJheSksXG4gICAgICAgIGJhc2VBcnJheTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRCYXNlQXJyYXkpXG4gICAgfSxcbiAgICA1OiB7XG4gICAgICAgIGZvcm1hdDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbWFya0NvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgbGlnYXR1cmVDb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksXG4gICAgICAgIGNsYXNzQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIG1hcmtBcnJheTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ0N2UwZThlZjUxNWQ5OTAzJHZhciRNYXJrQXJyYXkpLFxuICAgICAgICBsaWdhdHVyZUFycmF5OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJExpZ2F0dXJlQXJyYXkpXG4gICAgfSxcbiAgICA2OiB7XG4gICAgICAgIGZvcm1hdDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbWFyazFDb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksXG4gICAgICAgIG1hcmsyQ292ZXJhZ2U6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDE3NjA4YzNmODFhNjExMSkpLFxuICAgICAgICBjbGFzc0NvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBtYXJrMUFycmF5OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJE1hcmtBcnJheSksXG4gICAgICAgIG1hcmsyQXJyYXk6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkQmFzZUFycmF5KVxuICAgIH0sXG4gICAgNzogKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ4NDE4NThiODkyY2UxZjRjKSxcbiAgICA4OiAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDVlNmQwOWU2ODYxMTYyZjYpLFxuICAgIDk6IHtcbiAgICAgICAgcG9zRm9ybWF0OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBsb29rdXBUeXBlOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBleHRlbnNpb246IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBudWxsKVxuICAgIH1cbn0pO1xuLy8gRml4IGNpcmN1bGFyIHJlZmVyZW5jZVxuJDQ3ZTBlOGVmNTE1ZDk5MDMkZXhwb3J0JDczYThjZmIxOWNkNDNhMGYudmVyc2lvbnNbOV0uZXh0ZW5zaW9uLnR5cGUgPSAkNDdlMGU4ZWY1MTVkOTkwMyRleHBvcnQkNzNhOGNmYjE5Y2Q0M2EwZjtcbnZhciAkNDdlMGU4ZWY1MTVkOTkwMyRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQzMiwge1xuICAgIGhlYWRlcjoge1xuICAgICAgICBzY3JpcHRMaXN0OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQzZTE1ZmMwNWNlODY0MjI5KSksXG4gICAgICAgIGZlYXR1cmVMaXN0OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCRhYTE4MTMwZGVmNGI2Y2I0KSksXG4gICAgICAgIGxvb2t1cExpc3Q6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBuZXcgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCRkZjAwMDhjNmZmMmRhMjJhKSgkNDdlMGU4ZWY1MTVkOTkwMyRleHBvcnQkNzNhOGNmYjE5Y2Q0M2EwZikpXG4gICAgfSxcbiAgICAweDAwMDEwMDAwOiB7fSxcbiAgICAweDAwMDEwMDAxOiB7XG4gICAgICAgIGZlYXR1cmVWYXJpYXRpb25zOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgKDAsICQxYTQ3YjBjNDVjMWMyMmZlJGV4cG9ydCQ0NDFiNzBiNzk3MWRkNDE5KSlcbiAgICB9XG59KTtcblxuXG5cblxuXG5sZXQgJGQzZjQ0MjA2NGFmNjZlMDYkdmFyJFNlcXVlbmNlID0gbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAkNTJaSWYkdWludDE2KTtcbmxldCAkZDNmNDQyMDY0YWY2NmUwNiR2YXIkQWx0ZXJuYXRlU2V0ID0gJGQzZjQ0MjA2NGFmNjZlMDYkdmFyJFNlcXVlbmNlO1xubGV0ICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRMaWdhdHVyZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBnbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICBjb21wQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgY29tcG9uZW50czogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAodCk9PnQuY29tcENvdW50IC0gMSlcbn0pO1xubGV0ICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRMaWdhdHVyZVNldCA9IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRMaWdhdHVyZSksICQ1MlpJZiR1aW50MTYpO1xubGV0ICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRHU1VCTG9va3VwID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoXCJsb29rdXBUeXBlXCIsIHtcbiAgICAxOiBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgICAgIDE6IHtcbiAgICAgICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgICAgIGRlbHRhR2x5cGhJRDogJDUyWklmJGludDE2XG4gICAgICAgIH0sXG4gICAgICAgIDI6IHtcbiAgICAgICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgICAgIGdseXBoQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgICAgICBzdWJzdGl0dXRlOiBuZXcgJDUyWklmJExhenlBcnJheSgkNTJaSWYkdWludDE2LCBcImdseXBoQ291bnRcIilcbiAgICAgICAgfVxuICAgIH0pLFxuICAgIDI6IHtcbiAgICAgICAgc3Vic3RGb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgY291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHNlcXVlbmNlczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRTZXF1ZW5jZSksIFwiY291bnRcIilcbiAgICB9LFxuICAgIDM6IHtcbiAgICAgICAgc3Vic3RGb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgY291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGFsdGVybmF0ZVNldDogbmV3ICQ1MlpJZiRMYXp5QXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRBbHRlcm5hdGVTZXQpLCBcImNvdW50XCIpXG4gICAgfSxcbiAgICA0OiB7XG4gICAgICAgIHN1YnN0Rm9ybWF0OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBjb3ZlcmFnZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksXG4gICAgICAgIGNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBsaWdhdHVyZVNldHM6IG5ldyAkNTJaSWYkTGF6eUFycmF5KG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkZDNmNDQyMDY0YWY2NmUwNiR2YXIkTGlnYXR1cmVTZXQpLCBcImNvdW50XCIpXG4gICAgfSxcbiAgICA1OiAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDg0MTg1OGI4OTJjZTFmNGMpLFxuICAgIDY6ICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkNWU2ZDA5ZTY4NjExNjJmNiksXG4gICAgNzoge1xuICAgICAgICBzdWJzdEZvcm1hdDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbG9va3VwVHlwZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZXh0ZW5zaW9uOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgbnVsbClcbiAgICB9LFxuICAgIDg6IHtcbiAgICAgICAgc3Vic3RGb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEpKSxcbiAgICAgICAgYmFja3RyYWNrQ292ZXJhZ2U6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksIFwiYmFja3RyYWNrR2x5cGhDb3VudFwiKSxcbiAgICAgICAgbG9va2FoZWFkR2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgbG9va2FoZWFkQ292ZXJhZ2U6IG5ldyAkNTJaSWYkQXJyYXkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICgwLCAkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkMTc2MDhjM2Y4MWE2MTExKSksIFwibG9va2FoZWFkR2x5cGhDb3VudFwiKSxcbiAgICAgICAgZ2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgc3Vic3RpdHV0ZXM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgXCJnbHlwaENvdW50XCIpXG4gICAgfVxufSk7XG4vLyBGaXggY2lyY3VsYXIgcmVmZXJlbmNlXG4kZDNmNDQyMDY0YWY2NmUwNiR2YXIkR1NVQkxvb2t1cC52ZXJzaW9uc1s3XS5leHRlbnNpb24udHlwZSA9ICRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRHU1VCTG9va3VwO1xudmFyICRkM2Y0NDIwNjRhZjY2ZTA2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDMyLCB7XG4gICAgaGVhZGVyOiB7XG4gICAgICAgIHNjcmlwdExpc3Q6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDNlMTVmYzA1Y2U4NjQyMjkpKSxcbiAgICAgICAgZmVhdHVyZUxpc3Q6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JGFhMTgxMzBkZWY0YjZjYjQpKSxcbiAgICAgICAgbG9va3VwTGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsIG5ldyAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JGRmMDAwOGM2ZmYyZGEyMmEpKCRkM2Y0NDIwNjRhZjY2ZTA2JHZhciRHU1VCTG9va3VwKSlcbiAgICB9LFxuICAgIDB4MDAwMTAwMDA6IHt9LFxuICAgIDB4MDAwMTAwMDE6IHtcbiAgICAgICAgZmVhdHVyZVZhcmlhdGlvbnM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAoMCwgJDFhNDdiMGM0NWMxYzIyZmUkZXhwb3J0JDQ0MWI3MGI3OTcxZGQ0MTkpKVxuICAgIH1cbn0pO1xuXG5cblxuXG5cbmxldCAkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZkdTVUJNb2RMaXN0ID0gbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAkNTJaSWYkdWludDE2KTtcbmxldCAkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZlByaW9yaXR5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHNocmlua2FnZUVuYWJsZUdTVUI6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZkdTVUJNb2RMaXN0KSxcbiAgICBzaHJpbmthZ2VEaXNhYmxlR1NVQjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmR1NVQk1vZExpc3QpLFxuICAgIHNocmlua2FnZUVuYWJsZUdQT1M6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZkdTVUJNb2RMaXN0KSxcbiAgICBzaHJpbmthZ2VEaXNhYmxlR1BPUzogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmR1NVQk1vZExpc3QpLFxuICAgIHNocmlua2FnZUpzdGZNYXg6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBuZXcgKDAsICQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCRkZjAwMDhjNmZmMmRhMjJhKSgoMCwgJDQ3ZTBlOGVmNTE1ZDk5MDMkZXhwb3J0JDczYThjZmIxOWNkNDNhMGYpKSksXG4gICAgZXh0ZW5zaW9uRW5hYmxlR1NVQjogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmR1NVQk1vZExpc3QpLFxuICAgIGV4dGVuc2lvbkRpc2FibGVHU1VCOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZHU1VCTW9kTGlzdCksXG4gICAgZXh0ZW5zaW9uRW5hYmxlR1BPUzogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmR1NVQk1vZExpc3QpLFxuICAgIGV4dGVuc2lvbkRpc2FibGVHUE9TOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZHU1VCTW9kTGlzdCksXG4gICAgZXh0ZW5zaW9uSnN0Zk1heDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsIG5ldyAoMCwgJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JGRmMDAwOGM2ZmYyZGEyMmEpKCgwLCAkNDdlMGU4ZWY1MTVkOTkwMyRleHBvcnQkNzNhOGNmYjE5Y2Q0M2EwZikpKVxufSk7XG5sZXQgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZMYW5nU3lzID0gbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZQcmlvcml0eSksICQ1MlpJZiR1aW50MTYpO1xubGV0ICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmTGFuZ1N5c1JlY29yZCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB0YWc6IG5ldyAkNTJaSWYkU3RyaW5nKDQpLFxuICAgIGpzdGZMYW5nU3lzOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZMYW5nU3lzKVxufSk7XG5sZXQgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZTY3JpcHQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZXh0ZW5kZXJHbHlwaHM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICQ1MlpJZiR1aW50MTYpKSxcbiAgICBkZWZhdWx0TGFuZ1N5czogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmTGFuZ1N5cyksXG4gICAgbGFuZ1N5c0NvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGxhbmdTeXNSZWNvcmRzOiBuZXcgJDUyWklmJEFycmF5KCQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmTGFuZ1N5c1JlY29yZCwgXCJsYW5nU3lzQ291bnRcIilcbn0pO1xubGV0ICQ3MWNmYjNjNDc2N2ZiZDBjJHZhciRKc3RmU2NyaXB0UmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHRhZzogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgc2NyaXB0OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZTY3JpcHQsIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIlxuICAgIH0pXG59KTtcbnZhciAkNzFjZmIzYzQ3NjdmYmQwYyRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiR1aW50MzIsXG4gICAgc2NyaXB0Q291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgc2NyaXB0TGlzdDogbmV3ICQ1MlpJZiRBcnJheSgkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZlNjcmlwdFJlY29yZCwgXCJzY3JpcHRDb3VudFwiKVxufSk7XG5cblxuXG5cblxuLy8gVE9ETzogYWRkIHRoaXMgdG8gcmVzdHJ1Y3R1cmVcbmNsYXNzICRkMDU5YTZiZDJkM2I1YjYzJHZhciRWYXJpYWJsZVNpemVOdW1iZXIge1xuICAgIGRlY29kZShzdHJlYW0sIHBhcmVudCkge1xuICAgICAgICBzd2l0Y2godGhpcy5zaXplKDAsIHBhcmVudCkpe1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmVhbS5yZWFkVUludDE2QkUoKTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtLnJlYWRVSW50MjRCRSgpO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW0ucmVhZFVJbnQzMkJFKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2l6ZSh2YWwsIHBhcmVudCkge1xuICAgICAgICByZXR1cm4gKDAsICQ1MlpJZiRyZXNvbHZlTGVuZ3RoKSh0aGlzLl9zaXplLCBudWxsLCBwYXJlbnQpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzaXplKXtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHNpemU7XG4gICAgfVxufVxubGV0ICRkMDU5YTZiZDJkM2I1YjYzJHZhciRNYXBEYXRhRW50cnkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZW50cnk6IG5ldyAkZDA1OWE2YmQyZDNiNWI2MyR2YXIkVmFyaWFibGVTaXplTnVtYmVyKCh0KT0+KCh0LnBhcmVudC5lbnRyeUZvcm1hdCAmIDB4MDAzMCkgPj4gNCkgKyAxKSxcbiAgICBvdXRlckluZGV4OiAodCk9PnQuZW50cnkgPj4gKHQucGFyZW50LmVudHJ5Rm9ybWF0ICYgMHgwMDBGKSArIDEsXG4gICAgaW5uZXJJbmRleDogKHQpPT50LmVudHJ5ICYgKDEgPDwgKHQucGFyZW50LmVudHJ5Rm9ybWF0ICYgMHgwMDBGKSArIDEpIC0gMVxufSk7XG5sZXQgJGQwNTlhNmJkMmQzYjViNjMkdmFyJERlbHRhU2V0SW5kZXhNYXAgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZW50cnlGb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWFwQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbWFwRGF0YTogbmV3ICQ1MlpJZiRBcnJheSgkZDA1OWE2YmQyZDNiNWI2MyR2YXIkTWFwRGF0YUVudHJ5LCBcIm1hcENvdW50XCIpXG59KTtcbnZhciAkZDA1OWE2YmQyZDNiNWI2MyRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIG1ham9yVmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBtaW5vclZlcnNpb246ICQ1MlpJZiR1aW50MTYsXG4gICAgaXRlbVZhcmlhdGlvblN0b3JlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgKDAsICQxYTQ3YjBjNDVjMWMyMmZlJGV4cG9ydCRmZTFiMTIyYTI3MTBmMjQxKSksXG4gICAgYWR2YW5jZVdpZHRoTWFwcGluZzogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsICRkMDU5YTZiZDJkM2I1YjYzJHZhciREZWx0YVNldEluZGV4TWFwKSxcbiAgICBMU0JNYXBwaW5nOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgJGQwNTlhNmJkMmQzYjViNjMkdmFyJERlbHRhU2V0SW5kZXhNYXApLFxuICAgIFJTQk1hcHBpbmc6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAkZDA1OWE2YmQyZDNiNWI2MyR2YXIkRGVsdGFTZXRJbmRleE1hcClcbn0pO1xuXG5cblxubGV0ICRkY2VlY2EzZTE5NzdjZTMwJHZhciRTaWduYXR1cmUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZm9ybWF0OiAkNTJaSWYkdWludDMyLFxuICAgIGxlbmd0aDogJDUyWklmJHVpbnQzMixcbiAgICBvZmZzZXQ6ICQ1MlpJZiR1aW50MzJcbn0pO1xubGV0ICRkY2VlY2EzZTE5NzdjZTMwJHZhciRTaWduYXR1cmVCbG9jayA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDE2LCAyKSxcbiAgICBjYlNpZ25hdHVyZTogJDUyWklmJHVpbnQzMixcbiAgICBzaWduYXR1cmU6IG5ldyAkNTJaSWYkQnVmZmVyKFwiY2JTaWduYXR1cmVcIilcbn0pO1xudmFyICRkY2VlY2EzZTE5NzdjZTMwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdWxWZXJzaW9uOiAkNTJaSWYkdWludDMyLFxuICAgIHVzTnVtU2lnczogJDUyWklmJHVpbnQxNixcbiAgICB1c0ZsYWc6ICQ1MlpJZiR1aW50MTYsXG4gICAgc2lnbmF0dXJlczogbmV3ICQ1MlpJZiRBcnJheSgkZGNlZWNhM2UxOTc3Y2UzMCR2YXIkU2lnbmF0dXJlLCBcInVzTnVtU2lnc1wiKSxcbiAgICBzaWduYXR1cmVCbG9ja3M6IG5ldyAkNTJaSWYkQXJyYXkoJGRjZWVjYTNlMTk3N2NlMzAkdmFyJFNpZ25hdHVyZUJsb2NrLCBcInVzTnVtU2lnc1wiKVxufSk7XG5cblxuXG5sZXQgJDhhY2Q3NDBhOTQzNWFhZDAkdmFyJEdhc3BSYW5nZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICByYW5nZU1heFBQRU06ICQ1MlpJZiR1aW50MTYsXG4gICAgcmFuZ2VHYXNwQmVoYXZpb3I6IG5ldyAkNTJaSWYkQml0ZmllbGQoJDUyWklmJHVpbnQxNiwgW1xuICAgICAgICBcImdyYXlzY2FsZVwiLFxuICAgICAgICBcImdyaWRmaXRcIixcbiAgICAgICAgXCJzeW1tZXRyaWNTbW9vdGhpbmdcIixcbiAgICAgICAgXCJzeW1tZXRyaWNHcmlkZml0XCIgLy8gb25seSBpbiB2ZXJzaW9uIDEsIGZvciBDbGVhclR5cGVcbiAgICBdKVxufSk7XG52YXIgJDhhY2Q3NDBhOTQzNWFhZDAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIG51bVJhbmdlczogJDUyWklmJHVpbnQxNixcbiAgICBnYXNwUmFuZ2VzOiBuZXcgJDUyWklmJEFycmF5KCQ4YWNkNzQwYTk0MzVhYWQwJHZhciRHYXNwUmFuZ2UsIFwibnVtUmFuZ2VzXCIpIC8vIFNvcnRlZCBieSBwcGVtXG59KTtcblxuXG5cbmxldCAkYjVmMzgwMjQzYzM0ZDZhMCR2YXIkRGV2aWNlUmVjb3JkID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHBpeGVsU2l6ZTogJDUyWklmJHVpbnQ4LFxuICAgIG1heGltdW1XaWR0aDogJDUyWklmJHVpbnQ4LFxuICAgIHdpZHRoczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgsICh0KT0+dC5wYXJlbnQucGFyZW50Lm1heHAubnVtR2x5cGhzKVxufSk7XG52YXIgLy8gVGhlIEhvcml6b250YWwgRGV2aWNlIE1ldHJpY3MgdGFibGUgc3RvcmVzIGludGVnZXIgYWR2YW5jZSB3aWR0aHMgc2NhbGVkIHRvIHBhcnRpY3VsYXIgcGl4ZWwgc2l6ZXNcbiRiNWYzODAyNDNjMzRkNmEwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBudW1SZWNvcmRzOiAkNTJaSWYkaW50MTYsXG4gICAgc2l6ZURldmljZVJlY29yZDogJDUyWklmJGludDMyLFxuICAgIHJlY29yZHM6IG5ldyAkNTJaSWYkQXJyYXkoJGI1ZjM4MDI0M2MzNGQ2YTAkdmFyJERldmljZVJlY29yZCwgXCJudW1SZWNvcmRzXCIpXG59KTtcblxuXG5cbmxldCAkY2EyZGYxMjU2OTY2ZTMxMyR2YXIkS2VyblBhaXIgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbGVmdDogJDUyWklmJHVpbnQxNixcbiAgICByaWdodDogJDUyWklmJHVpbnQxNixcbiAgICB2YWx1ZTogJDUyWklmJGludDE2XG59KTtcbmxldCAkY2EyZGYxMjU2OTY2ZTMxMyR2YXIkQ2xhc3NUYWJsZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmaXJzdEdseXBoOiAkNTJaSWYkdWludDE2LFxuICAgIG5HbHlwaHM6ICQ1MlpJZiR1aW50MTYsXG4gICAgb2Zmc2V0czogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCBcIm5HbHlwaHNcIiksXG4gICAgbWF4OiAodCk9PnQub2Zmc2V0cy5sZW5ndGggJiYgTWF0aC5tYXguYXBwbHkoTWF0aCwgdC5vZmZzZXRzKVxufSk7XG5sZXQgJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm4yQXJyYXkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgb2ZmOiAodCk9PnQuX3N0YXJ0T2Zmc2V0IC0gdC5wYXJlbnQucGFyZW50Ll9zdGFydE9mZnNldCxcbiAgICBsZW46ICh0KT0+KCh0LnBhcmVudC5sZWZ0VGFibGUubWF4IC0gdC5vZmYpIC8gdC5wYXJlbnQucm93V2lkdGggKyAxKSAqICh0LnBhcmVudC5yb3dXaWR0aCAvIDIpLFxuICAgIHZhbHVlczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDUyWklmJGludDE2LCBcImxlblwiKVxufSk7XG5sZXQgJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm5TdWJ0YWJsZSA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KFwiZm9ybWF0XCIsIHtcbiAgICAwOiB7XG4gICAgICAgIG5QYWlyczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgc2VhcmNoUmFuZ2U6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGVudHJ5U2VsZWN0b3I6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHJhbmdlU2hpZnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHBhaXJzOiBuZXcgJDUyWklmJEFycmF5KCRjYTJkZjEyNTY5NjZlMzEzJHZhciRLZXJuUGFpciwgXCJuUGFpcnNcIilcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgcm93V2lkdGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGxlZnRUYWJsZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICRjYTJkZjEyNTY5NjZlMzEzJHZhciRDbGFzc1RhYmxlLCB7XG4gICAgICAgICAgICB0eXBlOiBcInBhcmVudFwiXG4gICAgICAgIH0pLFxuICAgICAgICByaWdodFRhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJGNhMmRmMTI1Njk2NmUzMTMkdmFyJENsYXNzVGFibGUsIHtcbiAgICAgICAgICAgIHR5cGU6IFwicGFyZW50XCJcbiAgICAgICAgfSksXG4gICAgICAgIGFycmF5OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm4yQXJyYXksIHtcbiAgICAgICAgICAgIHR5cGU6IFwicGFyZW50XCJcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIDM6IHtcbiAgICAgICAgZ2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAga2VyblZhbHVlQ291bnQ6ICQ1MlpJZiR1aW50OCxcbiAgICAgICAgbGVmdENsYXNzQ291bnQ6ICQ1MlpJZiR1aW50OCxcbiAgICAgICAgcmlnaHRDbGFzc0NvdW50OiAkNTJaSWYkdWludDgsXG4gICAgICAgIGZsYWdzOiAkNTJaSWYkdWludDgsXG4gICAgICAgIGtlcm5WYWx1ZTogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkaW50MTYsIFwia2VyblZhbHVlQ291bnRcIiksXG4gICAgICAgIGxlZnRDbGFzczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgsIFwiZ2x5cGhDb3VudFwiKSxcbiAgICAgICAgcmlnaHRDbGFzczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgsIFwiZ2x5cGhDb3VudFwiKSxcbiAgICAgICAga2VybkluZGV4OiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50OCwgKHQpPT50LmxlZnRDbGFzc0NvdW50ICogdC5yaWdodENsYXNzQ291bnQpXG4gICAgfVxufSk7XG5sZXQgJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm5UYWJsZSA9IG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KFwidmVyc2lvblwiLCB7XG4gICAgMDoge1xuICAgICAgICBzdWJWZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGZvcm1hdDogJDUyWklmJHVpbnQ4LFxuICAgICAgICBjb3ZlcmFnZTogbmV3ICQ1MlpJZiRCaXRmaWVsZCgkNTJaSWYkdWludDgsIFtcbiAgICAgICAgICAgIFwiaG9yaXpvbnRhbFwiLFxuICAgICAgICAgICAgXCJtaW5pbXVtXCIsXG4gICAgICAgICAgICBcImNyb3NzU3RyZWFtXCIsXG4gICAgICAgICAgICBcIm92ZXJyaWRlXCIgLy8gSWYgc2V0IHRvIDEgdGhlIHZhbHVlIGluIHRoaXMgdGFibGUgcmVwbGFjZXMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlXG4gICAgICAgIF0pLFxuICAgICAgICBzdWJ0YWJsZTogJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm5TdWJ0YWJsZSxcbiAgICAgICAgcGFkZGluZzogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDgsICh0KT0+dC5sZW5ndGggLSB0Ll9jdXJyZW50T2Zmc2V0KVxuICAgIH0sXG4gICAgMToge1xuICAgICAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIGNvdmVyYWdlOiBuZXcgJDUyWklmJEJpdGZpZWxkKCQ1MlpJZiR1aW50OCwgW1xuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBcInZhcmlhdGlvblwiLFxuICAgICAgICAgICAgXCJjcm9zc1N0cmVhbVwiLFxuICAgICAgICAgICAgXCJ2ZXJ0aWNhbFwiIC8vIFNldCBpZiB0YWJsZSBoYXMgdmVydGljYWwga2VybmluZyB2YWx1ZXNcbiAgICAgICAgXSksXG4gICAgICAgIGZvcm1hdDogJDUyWklmJHVpbnQ4LFxuICAgICAgICB0dXBsZUluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgICAgICBzdWJ0YWJsZTogJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm5TdWJ0YWJsZSxcbiAgICAgICAgcGFkZGluZzogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDgsICh0KT0+dC5sZW5ndGggLSB0Ll9jdXJyZW50T2Zmc2V0KVxuICAgIH1cbn0pO1xudmFyICRjYTJkZjEyNTY5NjZlMzEzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdCgkNTJaSWYkdWludDE2LCB7XG4gICAgMDoge1xuICAgICAgICBuVGFibGVzOiAkNTJaSWYkdWludDE2LFxuICAgICAgICB0YWJsZXM6IG5ldyAkNTJaSWYkQXJyYXkoJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm5UYWJsZSwgXCJuVGFibGVzXCIpXG4gICAgfSxcbiAgICAxOiB7XG4gICAgICAgIHJlc2VydmVkOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50MTYpLFxuICAgICAgICBuVGFibGVzOiAkNTJaSWYkdWludDMyLFxuICAgICAgICB0YWJsZXM6IG5ldyAkNTJaSWYkQXJyYXkoJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm5UYWJsZSwgXCJuVGFibGVzXCIpXG4gICAgfVxufSk7XG5cblxuXG52YXIgLy8gTGluZWFyIFRocmVzaG9sZCB0YWJsZVxuLy8gUmVjb3JkcyB0aGUgcHBlbSBmb3IgZWFjaCBnbHlwaCBhdCB3aGljaCB0aGUgc2NhbGluZyBiZWNvbWVzIGxpbmVhciBhZ2Fpbixcbi8vIGRlc3BpdGUgaW5zdHJ1Y3Rpb25zIGVmZmVjdGluZyB0aGUgYWR2YW5jZSB3aWR0aFxuJDdhOWY5MmIwYzQ2ZWJlMzMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB2ZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIG51bUdseXBoczogJDUyWklmJHVpbnQxNixcbiAgICB5UGVsczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgsIFwibnVtR2x5cGhzXCIpXG59KTtcblxuXG5cbnZhciAvLyBQQ0wgNSBUYWJsZVxuLy8gTk9URTogVGhlIFBDTFQgdGFibGUgaXMgc3Ryb25nbHkgZGlzY291cmFnZWQgZm9yIE9wZW5UeXBlIGZvbnRzIHdpdGggVHJ1ZVR5cGUgb3V0bGluZXNcbiQyYjJjY2M0MTlkMTUyNjMxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBmb250TnVtYmVyOiAkNTJaSWYkdWludDMyLFxuICAgIHBpdGNoOiAkNTJaSWYkdWludDE2LFxuICAgIHhIZWlnaHQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgc3R5bGU6ICQ1MlpJZiR1aW50MTYsXG4gICAgdHlwZUZhbWlseTogJDUyWklmJHVpbnQxNixcbiAgICBjYXBIZWlnaHQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgc3ltYm9sU2V0OiAkNTJaSWYkdWludDE2LFxuICAgIHR5cGVmYWNlOiBuZXcgJDUyWklmJFN0cmluZygxNiksXG4gICAgY2hhcmFjdGVyQ29tcGxlbWVudDogbmV3ICQ1MlpJZiRTdHJpbmcoOCksXG4gICAgZmlsZU5hbWU6IG5ldyAkNTJaSWYkU3RyaW5nKDYpLFxuICAgIHN0cm9rZVdlaWdodDogbmV3ICQ1MlpJZiRTdHJpbmcoMSksXG4gICAgd2lkdGhUeXBlOiBuZXcgJDUyWklmJFN0cmluZygxKSxcbiAgICBzZXJpZlN0eWxlOiAkNTJaSWYkdWludDgsXG4gICAgcmVzZXJ2ZWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQ4KVxufSk7XG5cblxuXG4vLyBWRE1YIHRhYmxlcyBjb250YWluIGFzY2VuZGVyL2Rlc2NlbmRlciBvdmVycmlkZXMgZm9yIGNlcnRhaW4gKHVzdWFsbHkgc21hbGwpXG4vLyBzaXplcy4gVGhpcyBpcyBuZWVkZWQgaW4gb3JkZXIgdG8gbWF0Y2ggZm9udCBtZXRyaWNzIG9uIFdpbmRvd3MuXG5sZXQgJGNhNWI0MGI5YmNkYTljOWIkdmFyJFJhdGlvID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGJDaGFyU2V0OiAkNTJaSWYkdWludDgsXG4gICAgeFJhdGlvOiAkNTJaSWYkdWludDgsXG4gICAgeVN0YXJ0UmF0aW86ICQ1MlpJZiR1aW50OCxcbiAgICB5RW5kUmF0aW86ICQ1MlpJZiR1aW50OCAvLyBFbmRpbmcgeS1SYXRpbyB2YWx1ZVxufSk7XG5sZXQgJGNhNWI0MGI5YmNkYTljOWIkdmFyJHZUYWJsZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB5UGVsSGVpZ2h0OiAkNTJaSWYkdWludDE2LFxuICAgIHlNYXg6ICQ1MlpJZiRpbnQxNixcbiAgICB5TWluOiAkNTJaSWYkaW50MTYgLy8gTWluaW11bSB2YWx1ZSAoaW4gcGVscykgZm9yIHRoaXMgeVBlbEhlaWdodFxufSk7XG5sZXQgJGNhNWI0MGI5YmNkYTljOWIkdmFyJFZkbXhHcm91cCA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICByZWNzOiAkNTJaSWYkdWludDE2LFxuICAgIHN0YXJ0c3o6ICQ1MlpJZiR1aW50OCxcbiAgICBlbmRzejogJDUyWklmJHVpbnQ4LFxuICAgIGVudHJpZXM6IG5ldyAkNTJaSWYkQXJyYXkoJGNhNWI0MGI5YmNkYTljOWIkdmFyJHZUYWJsZSwgXCJyZWNzXCIpIC8vIFRoZSBWRE1YIHJlY29yZHNcbn0pO1xudmFyICRjYTViNDBiOWJjZGE5YzliJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBudW1SZWNzOiAkNTJaSWYkdWludDE2LFxuICAgIG51bVJhdGlvczogJDUyWklmJHVpbnQxNixcbiAgICByYXRpb1JhbmdlczogbmV3ICQ1MlpJZiRBcnJheSgkY2E1YjQwYjliY2RhOWM5YiR2YXIkUmF0aW8sIFwibnVtUmF0aW9zXCIpLFxuICAgIG9mZnNldHM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgXCJudW1SYXRpb3NcIiksXG4gICAgZ3JvdXBzOiBuZXcgJDUyWklmJEFycmF5KCRjYTViNDBiOWJjZGE5YzliJHZhciRWZG14R3JvdXAsIFwibnVtUmVjc1wiKSAvLyBUaGUgYWN0dWFsIFZETVggZ3JvdXBpbmdzXG59KTtcblxuXG5cbnZhciAvLyBWZXJ0aWNhbCBIZWFkZXIgVGFibGVcbiQ2OTUzMGEzYzQwNzU1YWYwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBhc2NlbnQ6ICQ1MlpJZiRpbnQxNixcbiAgICBkZXNjZW50OiAkNTJaSWYkaW50MTYsXG4gICAgbGluZUdhcDogJDUyWklmJGludDE2LFxuICAgIGFkdmFuY2VIZWlnaHRNYXg6ICQ1MlpJZiRpbnQxNixcbiAgICBtaW5Ub3BTaWRlQmVhcmluZzogJDUyWklmJGludDE2LFxuICAgIG1pbkJvdHRvbVNpZGVCZWFyaW5nOiAkNTJaSWYkaW50MTYsXG4gICAgeU1heEV4dGVudDogJDUyWklmJGludDE2LFxuICAgIGNhcmV0U2xvcGVSaXNlOiAkNTJaSWYkaW50MTYsXG4gICAgY2FyZXRTbG9wZVJ1bjogJDUyWklmJGludDE2LFxuICAgIGNhcmV0T2Zmc2V0OiAkNTJaSWYkaW50MTYsXG4gICAgcmVzZXJ2ZWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJGludDE2LCA0KSxcbiAgICBtZXRyaWNEYXRhRm9ybWF0OiAkNTJaSWYkaW50MTYsXG4gICAgbnVtYmVyT2ZNZXRyaWNzOiAkNTJaSWYkdWludDE2IC8vIE51bWJlciBvZiBhZHZhbmNlIGhlaWdodHMgaW4gdGhlIFZlcnRpY2FsIE1ldHJpY3MgdGFibGVcbn0pO1xuXG5cblxubGV0ICQzNDQwNzNkZDI3MGYwZTYyJHZhciRWbXR4RW50cnkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgYWR2YW5jZTogJDUyWklmJHVpbnQxNixcbiAgICBiZWFyaW5nOiAkNTJaSWYkaW50MTYgLy8gVGhlIHRvcCBzaWRlYmVhcmluZyBvZiB0aGUgZ2x5cGhcbn0pO1xudmFyIC8vIFZlcnRpY2FsIE1ldHJpY3MgVGFibGVcbiQzNDQwNzNkZDI3MGYwZTYyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbWV0cmljczogbmV3ICQ1MlpJZiRMYXp5QXJyYXkoJDM0NDA3M2RkMjcwZjBlNjIkdmFyJFZtdHhFbnRyeSwgKHQpPT50LnBhcmVudC52aGVhLm51bWJlck9mTWV0cmljcyksXG4gICAgYmVhcmluZ3M6IG5ldyAkNTJaSWYkTGF6eUFycmF5KCQ1MlpJZiRpbnQxNiwgKHQpPT50LnBhcmVudC5tYXhwLm51bUdseXBocyAtIHQucGFyZW50LnZoZWEubnVtYmVyT2ZNZXRyaWNzKVxufSk7XG5cblxuXG5sZXQgJDM3OTNiNzgxOTE4Y2ZjZWQkdmFyJHNob3J0RnJhYyA9IG5ldyAkNTJaSWYkRml4ZWQoMTYsIFwiQkVcIiwgMTQpO1xubGV0ICQzNzkzYjc4MTkxOGNmY2VkJHZhciRDb3JyZXNwb25kZW5jZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmcm9tQ29vcmQ6ICQzNzkzYjc4MTkxOGNmY2VkJHZhciRzaG9ydEZyYWMsXG4gICAgdG9Db29yZDogJDM3OTNiNzgxOTE4Y2ZjZWQkdmFyJHNob3J0RnJhY1xufSk7XG5sZXQgJDM3OTNiNzgxOTE4Y2ZjZWQkdmFyJFNlZ21lbnQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgcGFpckNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGNvcnJlc3BvbmRlbmNlOiBuZXcgJDUyWklmJEFycmF5KCQzNzkzYjc4MTkxOGNmY2VkJHZhciRDb3JyZXNwb25kZW5jZSwgXCJwYWlyQ291bnRcIilcbn0pO1xudmFyICQzNzkzYjc4MTkxOGNmY2VkJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJGZpeGVkMzIsXG4gICAgYXhpc0NvdW50OiAkNTJaSWYkdWludDMyLFxuICAgIHNlZ21lbnQ6IG5ldyAkNTJaSWYkQXJyYXkoJDM3OTNiNzgxOTE4Y2ZjZWQkdmFyJFNlZ21lbnQsIFwiYXhpc0NvdW50XCIpXG59KTtcblxuXG5cblxuY2xhc3MgJDZjYjdkZDVmNDdkODI1ODAkdmFyJFVuYm91bmRlZEFycmF5QWNjZXNzb3Ige1xuICAgIGdldEl0ZW0oaW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2l0ZW1zW2luZGV4XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgcG9zID0gdGhpcy5zdHJlYW0ucG9zO1xuICAgICAgICAgICAgdGhpcy5zdHJlYW0ucG9zID0gdGhpcy5iYXNlICsgdGhpcy50eXBlLnNpemUobnVsbCwgdGhpcy5wYXJlbnQpICogaW5kZXg7XG4gICAgICAgICAgICB0aGlzLl9pdGVtc1tpbmRleF0gPSB0aGlzLnR5cGUuZGVjb2RlKHRoaXMuc3RyZWFtLCB0aGlzLnBhcmVudCk7XG4gICAgICAgICAgICB0aGlzLnN0cmVhbS5wb3MgPSBwb3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW2luZGV4XTtcbiAgICB9XG4gICAgaW5zcGVjdCgpIHtcbiAgICAgICAgcmV0dXJuIGBbVW5ib3VuZGVkQXJyYXkgJHt0aGlzLnR5cGUuY29uc3RydWN0b3IubmFtZX1dYDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IodHlwZSwgc3RyZWFtLCBwYXJlbnQpe1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuYmFzZSA9IHRoaXMuc3RyZWFtLnBvcztcbiAgICAgICAgdGhpcy5faXRlbXMgPSBbXTtcbiAgICB9XG59XG5jbGFzcyAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkYzVhZjFlZWJjODgyZTM5YSBleHRlbmRzICQ1MlpJZiRBcnJheSB7XG4gICAgZGVjb2RlKHN0cmVhbSwgcGFyZW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgJDZjYjdkZDVmNDdkODI1ODAkdmFyJFVuYm91bmRlZEFycmF5QWNjZXNzb3IodGhpcy50eXBlLCBzdHJlYW0sIHBhcmVudCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHR5cGUpe1xuICAgICAgICBzdXBlcih0eXBlLCAwKTtcbiAgICB9XG59XG5sZXQgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDgzNTFmOGMyYWUyZjEwM2MgPSBmdW5jdGlvbihWYWx1ZVR5cGUgPSAkNTJaSWYkdWludDE2KSB7XG4gICAgLy8gSGVscGVyIGNsYXNzIHRoYXQgbWFrZXMgaW50ZXJuYWwgc3RydWN0dXJlcyBpbnZpc2libGUgdG8gcG9pbnRlcnNcbiAgICBjbGFzcyBTaGFkb3cge1xuICAgICAgICBkZWNvZGUoc3RyZWFtLCBjdHgpIHtcbiAgICAgICAgICAgIGN0eCA9IGN0eC5wYXJlbnQucGFyZW50O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5kZWNvZGUoc3RyZWFtLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHNpemUodmFsLCBjdHgpIHtcbiAgICAgICAgICAgIGN0eCA9IGN0eC5wYXJlbnQucGFyZW50O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5zaXplKHZhbCwgY3R4KTtcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGUoc3RyZWFtLCB2YWwsIGN0eCkge1xuICAgICAgICAgICAgY3R4ID0gY3R4LnBhcmVudC5wYXJlbnQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50eXBlLmVuY29kZShzdHJlYW0sIHZhbCwgY3R4KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdHJ1Y3Rvcih0eXBlKXtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVmFsdWVUeXBlID0gbmV3IFNoYWRvdyhWYWx1ZVR5cGUpO1xuICAgIGxldCBCaW5hcnlTZWFyY2hIZWFkZXIgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgICAgIHVuaXRTaXplOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBuVW5pdHM6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIHNlYXJjaFJhbmdlOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBlbnRyeVNlbGVjdG9yOiAkNTJaSWYkdWludDE2LFxuICAgICAgICByYW5nZVNoaWZ0OiAkNTJaSWYkdWludDE2XG4gICAgfSk7XG4gICAgbGV0IExvb2t1cFNlZ21lbnRTaW5nbGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgICAgIGxhc3RHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZmlyc3RHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgdmFsdWU6IFZhbHVlVHlwZVxuICAgIH0pO1xuICAgIGxldCBMb29rdXBTZWdtZW50QXJyYXkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgICAgIGxhc3RHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZmlyc3RHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgdmFsdWVzOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgbmV3ICQ1MlpJZiRBcnJheShWYWx1ZVR5cGUsICh0KT0+dC5sYXN0R2x5cGggLSB0LmZpcnN0R2x5cGggKyAxKSwge1xuICAgICAgICAgICAgdHlwZTogXCJwYXJlbnRcIlxuICAgICAgICB9KVxuICAgIH0pO1xuICAgIGxldCBMb29rdXBTaW5nbGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgICAgIGdseXBoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICB2YWx1ZTogVmFsdWVUeXBlXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyAkNTJaSWYkVmVyc2lvbmVkU3RydWN0KCQ1MlpJZiR1aW50MTYsIHtcbiAgICAgICAgMDoge1xuICAgICAgICAgICAgdmFsdWVzOiBuZXcgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JGM1YWYxZWViYzg4MmUzOWEoVmFsdWVUeXBlKSAvLyBsZW5ndGggPT0gbnVtYmVyIG9mIGdseXBocyBtYXliZT9cbiAgICAgICAgfSxcbiAgICAgICAgMjoge1xuICAgICAgICAgICAgYmluYXJ5U2VhcmNoSGVhZGVyOiBCaW5hcnlTZWFyY2hIZWFkZXIsXG4gICAgICAgICAgICBzZWdtZW50czogbmV3ICQ1MlpJZiRBcnJheShMb29rdXBTZWdtZW50U2luZ2xlLCAodCk9PnQuYmluYXJ5U2VhcmNoSGVhZGVyLm5Vbml0cylcbiAgICAgICAgfSxcbiAgICAgICAgNDoge1xuICAgICAgICAgICAgYmluYXJ5U2VhcmNoSGVhZGVyOiBCaW5hcnlTZWFyY2hIZWFkZXIsXG4gICAgICAgICAgICBzZWdtZW50czogbmV3ICQ1MlpJZiRBcnJheShMb29rdXBTZWdtZW50QXJyYXksICh0KT0+dC5iaW5hcnlTZWFyY2hIZWFkZXIublVuaXRzKVxuICAgICAgICB9LFxuICAgICAgICA2OiB7XG4gICAgICAgICAgICBiaW5hcnlTZWFyY2hIZWFkZXI6IEJpbmFyeVNlYXJjaEhlYWRlcixcbiAgICAgICAgICAgIHNlZ21lbnRzOiBuZXcgJDUyWklmJEFycmF5KExvb2t1cFNpbmdsZSwgKHQpPT50LmJpbmFyeVNlYXJjaEhlYWRlci5uVW5pdHMpXG4gICAgICAgIH0sXG4gICAgICAgIDg6IHtcbiAgICAgICAgICAgIGZpcnN0R2x5cGg6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgICAgICBjb3VudDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgICAgIHZhbHVlczogbmV3ICQ1MlpJZiRBcnJheShWYWx1ZVR5cGUsIFwiY291bnRcIilcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbmZ1bmN0aW9uICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCQ3OWY3ZDkzZDc5MDkzNGJhKGVudHJ5RGF0YSA9IHt9LCBsb29rdXBUeXBlID0gJDUyWklmJHVpbnQxNikge1xuICAgIGxldCBlbnRyeSA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBuZXdTdGF0ZTogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZmxhZ3M6ICQ1MlpJZiR1aW50MTZcbiAgICB9LCBlbnRyeURhdGEpO1xuICAgIGxldCBFbnRyeSA9IG5ldyAkNTJaSWYkU3RydWN0KGVudHJ5KTtcbiAgICBsZXQgU3RhdGVBcnJheSA9IG5ldyAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkYzVhZjFlZWJjODgyZTM5YShuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsICh0KT0+dC5uQ2xhc3NlcykpO1xuICAgIGxldCBTdGF0ZUhlYWRlciA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICAgICAgbkNsYXNzZXM6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIGNsYXNzVGFibGU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDgzNTFmOGMyYWUyZjEwM2MobG9va3VwVHlwZSkpLFxuICAgICAgICBzdGF0ZUFycmF5OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgU3RhdGVBcnJheSksXG4gICAgICAgIGVudHJ5VGFibGU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JGM1YWYxZWViYzg4MmUzOWEoRW50cnkpKVxuICAgIH0pO1xuICAgIHJldHVybiBTdGF0ZUhlYWRlcjtcbn1cbmZ1bmN0aW9uICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCQxMDUwMjc0MjUxOTljYzUxKGVudHJ5RGF0YSA9IHt9LCBsb29rdXBUeXBlID0gJDUyWklmJHVpbnQxNikge1xuICAgIGxldCBDbGFzc0xvb2t1cFRhYmxlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgICAgICB2ZXJzaW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiA4O1xuICAgICAgICB9LFxuICAgICAgICBmaXJzdEdseXBoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICB2YWx1ZXM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQ4LCAkNTJaSWYkdWludDE2KVxuICAgIH0pO1xuICAgIGxldCBlbnRyeSA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBuZXdTdGF0ZU9mZnNldDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgLy8gY29udmVydCBvZmZzZXQgdG8gc3RhdGVBcnJheSBpbmRleFxuICAgICAgICBuZXdTdGF0ZTogKHQpPT4odC5uZXdTdGF0ZU9mZnNldCAtICh0LnBhcmVudC5zdGF0ZUFycmF5LmJhc2UgLSB0LnBhcmVudC5fc3RhcnRPZmZzZXQpKSAvIHQucGFyZW50Lm5DbGFzc2VzLFxuICAgICAgICBmbGFnczogJDUyWklmJHVpbnQxNlxuICAgIH0sIGVudHJ5RGF0YSk7XG4gICAgbGV0IEVudHJ5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3QoZW50cnkpO1xuICAgIGxldCBTdGF0ZUFycmF5ID0gbmV3ICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCRjNWFmMWVlYmM4ODJlMzlhKG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQ4LCAodCk9PnQubkNsYXNzZXMpKTtcbiAgICBsZXQgU3RhdGVIZWFkZXIxID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgICAgICBuQ2xhc3NlczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY2xhc3NUYWJsZTogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsIENsYXNzTG9va3VwVGFibGUpLFxuICAgICAgICBzdGF0ZUFycmF5OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgU3RhdGVBcnJheSksXG4gICAgICAgIGVudHJ5VGFibGU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCBuZXcgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JGM1YWYxZWViYzg4MmUzOWEoRW50cnkpKVxuICAgIH0pO1xuICAgIHJldHVybiBTdGF0ZUhlYWRlcjE7XG59XG5cblxubGV0ICQ2YTM3NDZlOGM3MDhmNWEzJHZhciRCc2xuU3VidGFibGUgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdChcImZvcm1hdFwiLCB7XG4gICAgMDoge1xuICAgICAgICBkZWx0YXM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJGludDE2LCAzMilcbiAgICB9LFxuICAgIDE6IHtcbiAgICAgICAgZGVsdGFzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiRpbnQxNiwgMzIpLFxuICAgICAgICBtYXBwaW5nRGF0YTogbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkODM1MWY4YzJhZTJmMTAzYykoJDUyWklmJHVpbnQxNilcbiAgICB9LFxuICAgIDI6IHtcbiAgICAgICAgc3RhbmRhcmRHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY29udHJvbFBvaW50czogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAzMilcbiAgICB9LFxuICAgIDM6IHtcbiAgICAgICAgc3RhbmRhcmRHbHlwaDogJDUyWklmJHVpbnQxNixcbiAgICAgICAgY29udHJvbFBvaW50czogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAzMiksXG4gICAgICAgIG1hcHBpbmdEYXRhOiBuZXcgKDAsICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCQ4MzUxZjhjMmFlMmYxMDNjKSgkNTJaSWYkdWludDE2KVxuICAgIH1cbn0pO1xudmFyICQ2YTM3NDZlOGM3MDhmNWEzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJGZpeGVkMzIsXG4gICAgZm9ybWF0OiAkNTJaSWYkdWludDE2LFxuICAgIGRlZmF1bHRCYXNlbGluZTogJDUyWklmJHVpbnQxNixcbiAgICBzdWJ0YWJsZTogJDZhMzc0NmU4YzcwOGY1YTMkdmFyJEJzbG5TdWJ0YWJsZVxufSk7XG5cblxuXG5sZXQgJGQwYzc2ZmFjNjE3YjMwOGEkdmFyJFNldHRpbmcgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgc2V0dGluZzogJDUyWklmJHVpbnQxNixcbiAgICBuYW1lSW5kZXg6ICQ1MlpJZiRpbnQxNixcbiAgICBuYW1lOiAodCk9PnQucGFyZW50LnBhcmVudC5wYXJlbnQubmFtZS5yZWNvcmRzLmZvbnRGZWF0dXJlc1t0Lm5hbWVJbmRleF1cbn0pO1xubGV0ICRkMGM3NmZhYzYxN2IzMDhhJHZhciRGZWF0dXJlTmFtZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmZWF0dXJlOiAkNTJaSWYkdWludDE2LFxuICAgIG5TZXR0aW5nczogJDUyWklmJHVpbnQxNixcbiAgICBzZXR0aW5nVGFibGU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgJDUyWklmJEFycmF5KCRkMGM3NmZhYzYxN2IzMDhhJHZhciRTZXR0aW5nLCBcIm5TZXR0aW5nc1wiKSwge1xuICAgICAgICB0eXBlOiBcInBhcmVudFwiXG4gICAgfSksXG4gICAgZmVhdHVyZUZsYWdzOiBuZXcgJDUyWklmJEJpdGZpZWxkKCQ1MlpJZiR1aW50OCwgW1xuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBcImhhc0RlZmF1bHRcIixcbiAgICAgICAgXCJleGNsdXNpdmVcIlxuICAgIF0pLFxuICAgIGRlZmF1bHRTZXR0aW5nOiAkNTJaSWYkdWludDgsXG4gICAgbmFtZUluZGV4OiAkNTJaSWYkaW50MTYsXG4gICAgbmFtZTogKHQpPT50LnBhcmVudC5wYXJlbnQubmFtZS5yZWNvcmRzLmZvbnRGZWF0dXJlc1t0Lm5hbWVJbmRleF1cbn0pO1xudmFyICRkMGM3NmZhYzYxN2IzMDhhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJGZpeGVkMzIsXG4gICAgZmVhdHVyZU5hbWVDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICByZXNlcnZlZDE6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQxNiksXG4gICAgcmVzZXJ2ZWQyOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50MzIpLFxuICAgIGZlYXR1cmVOYW1lczogbmV3ICQ1MlpJZiRBcnJheSgkZDBjNzZmYWM2MTdiMzA4YSR2YXIkRmVhdHVyZU5hbWUsIFwiZmVhdHVyZU5hbWVDb3VudFwiKVxufSk7XG5cblxuXG5sZXQgJGU4M2ZkMDY1ZjAwZmNkMDEkdmFyJEF4aXMgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgYXhpc1RhZzogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgbWluVmFsdWU6ICQ1MlpJZiRmaXhlZDMyLFxuICAgIGRlZmF1bHRWYWx1ZTogJDUyWklmJGZpeGVkMzIsXG4gICAgbWF4VmFsdWU6ICQ1MlpJZiRmaXhlZDMyLFxuICAgIGZsYWdzOiAkNTJaSWYkdWludDE2LFxuICAgIG5hbWVJRDogJDUyWklmJHVpbnQxNixcbiAgICBuYW1lOiAodCk9PnQucGFyZW50LnBhcmVudC5uYW1lLnJlY29yZHMuZm9udEZlYXR1cmVzW3QubmFtZUlEXVxufSk7XG5sZXQgJGU4M2ZkMDY1ZjAwZmNkMDEkdmFyJEluc3RhbmNlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIG5hbWVJRDogJDUyWklmJHVpbnQxNixcbiAgICBuYW1lOiAodCk9PnQucGFyZW50LnBhcmVudC5uYW1lLnJlY29yZHMuZm9udEZlYXR1cmVzW3QubmFtZUlEXSxcbiAgICBmbGFnczogJDUyWklmJHVpbnQxNixcbiAgICBjb29yZDogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkZml4ZWQzMiwgKHQpPT50LnBhcmVudC5heGlzQ291bnQpLFxuICAgIHBvc3RzY3JpcHROYW1lSUQ6IG5ldyAkNTJaSWYkT3B0aW9uYWwoJDUyWklmJHVpbnQxNiwgKHQpPT50LnBhcmVudC5pbnN0YW5jZVNpemUgLSB0Ll9jdXJyZW50T2Zmc2V0ID4gMClcbn0pO1xudmFyICRlODNmZDA2NWYwMGZjZDAxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJGZpeGVkMzIsXG4gICAgb2Zmc2V0VG9EYXRhOiAkNTJaSWYkdWludDE2LFxuICAgIGNvdW50U2l6ZVBhaXJzOiAkNTJaSWYkdWludDE2LFxuICAgIGF4aXNDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBheGlzU2l6ZTogJDUyWklmJHVpbnQxNixcbiAgICBpbnN0YW5jZUNvdW50OiAkNTJaSWYkdWludDE2LFxuICAgIGluc3RhbmNlU2l6ZTogJDUyWklmJHVpbnQxNixcbiAgICBheGlzOiBuZXcgJDUyWklmJEFycmF5KCRlODNmZDA2NWYwMGZjZDAxJHZhciRBeGlzLCBcImF4aXNDb3VudFwiKSxcbiAgICBpbnN0YW5jZTogbmV3ICQ1MlpJZiRBcnJheSgkZTgzZmQwNjVmMDBmY2QwMSR2YXIkSW5zdGFuY2UsIFwiaW5zdGFuY2VDb3VudFwiKVxufSk7XG5cblxuXG5sZXQgJGRiZTMzYzhkM2E3ZjEzMWMkdmFyJHNob3J0RnJhYyA9IG5ldyAkNTJaSWYkRml4ZWQoMTYsIFwiQkVcIiwgMTQpO1xuY2xhc3MgJGRiZTMzYzhkM2E3ZjEzMWMkdmFyJE9mZnNldCB7XG4gICAgc3RhdGljIGRlY29kZShzdHJlYW0sIHBhcmVudCkge1xuICAgICAgICAvLyBJbiBzaG9ydCBmb3JtYXQsIG9mZnNldHMgYXJlIG11bHRpcGxpZWQgYnkgMi5cbiAgICAgICAgLy8gVGhpcyBkb2Vzbid0IHNlZW0gdG8gYmUgZG9jdW1lbnRlZCBieSBBcHBsZSwgYnV0IGl0XG4gICAgICAgIC8vIGlzIGltcGxlbWVudGVkIHRoaXMgd2F5IGluIEZyZWV0eXBlLlxuICAgICAgICByZXR1cm4gcGFyZW50LmZsYWdzID8gc3RyZWFtLnJlYWRVSW50MzJCRSgpIDogc3RyZWFtLnJlYWRVSW50MTZCRSgpICogMjtcbiAgICB9XG59XG5sZXQgJGRiZTMzYzhkM2E3ZjEzMWMkdmFyJGd2YXIgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDE2KSxcbiAgICBheGlzQ291bnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgZ2xvYmFsQ29vcmRDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBnbG9iYWxDb29yZHM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgJDUyWklmJEFycmF5KG5ldyAkNTJaSWYkQXJyYXkoJGRiZTMzYzhkM2E3ZjEzMWMkdmFyJHNob3J0RnJhYywgXCJheGlzQ291bnRcIiksIFwiZ2xvYmFsQ29vcmRDb3VudFwiKSksXG4gICAgZ2x5cGhDb3VudDogJDUyWklmJHVpbnQxNixcbiAgICBmbGFnczogJDUyWklmJHVpbnQxNixcbiAgICBvZmZzZXRUb0RhdGE6ICQ1MlpJZiR1aW50MzIsXG4gICAgb2Zmc2V0czogbmV3ICQ1MlpJZiRBcnJheShuZXcgJDUyWklmJFBvaW50ZXIoJGRiZTMzYzhkM2E3ZjEzMWMkdmFyJE9mZnNldCwgXCJ2b2lkXCIsIHtcbiAgICAgICAgcmVsYXRpdmVUbzogKGN0eCk9PmN0eC5vZmZzZXRUb0RhdGEsXG4gICAgICAgIGFsbG93TnVsbDogZmFsc2VcbiAgICB9KSwgKHQpPT50LmdseXBoQ291bnQgKyAxKVxufSk7XG52YXIgJGRiZTMzYzhkM2E3ZjEzMWMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9ICRkYmUzM2M4ZDNhN2YxMzFjJHZhciRndmFyO1xuXG5cblxuXG5sZXQgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJENsYXNzVGFibGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbGVuZ3RoOiAkNTJaSWYkdWludDE2LFxuICAgIGNvdmVyYWdlOiAkNTJaSWYkdWludDE2LFxuICAgIHN1YkZlYXR1cmVGbGFnczogJDUyWklmJHVpbnQzMixcbiAgICBzdGF0ZVRhYmxlOiBuZXcgKDAsICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCQxMDUwMjc0MjUxOTljYzUxKVxufSk7XG5sZXQgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJFdpZHRoRGVsdGFSZWNvcmQgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAganVzdENsYXNzOiAkNTJaSWYkdWludDMyLFxuICAgIGJlZm9yZUdyb3dMaW1pdDogJDUyWklmJGZpeGVkMzIsXG4gICAgYmVmb3JlU2hyaW5rTGltaXQ6ICQ1MlpJZiRmaXhlZDMyLFxuICAgIGFmdGVyR3Jvd0xpbWl0OiAkNTJaSWYkZml4ZWQzMixcbiAgICBhZnRlclNocmlua0xpbWl0OiAkNTJaSWYkZml4ZWQzMixcbiAgICBncm93RmxhZ3M6ICQ1MlpJZiR1aW50MTYsXG4gICAgc2hyaW5rRmxhZ3M6ICQ1MlpJZiR1aW50MTZcbn0pO1xubGV0ICQwNWIwMTg4N2RmOTZjNGVlJHZhciRXaWR0aERlbHRhQ2x1c3RlciA9IG5ldyAkNTJaSWYkQXJyYXkoJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJFdpZHRoRGVsdGFSZWNvcmQsICQ1MlpJZiR1aW50MzIpO1xubGV0ICQwNWIwMTg4N2RmOTZjNGVlJHZhciRBY3Rpb25EYXRhID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoXCJhY3Rpb25UeXBlXCIsIHtcbiAgICAwOiB7XG4gICAgICAgIGxvd2VyTGltaXQ6ICQ1MlpJZiRmaXhlZDMyLFxuICAgICAgICB1cHBlckxpbWl0OiAkNTJaSWYkZml4ZWQzMixcbiAgICAgICAgb3JkZXI6ICQ1MlpJZiR1aW50MTYsXG4gICAgICAgIGdseXBoczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDE2LCAkNTJaSWYkdWludDE2KVxuICAgIH0sXG4gICAgMToge1xuICAgICAgICBhZGRHbHlwaDogJDUyWklmJHVpbnQxNlxuICAgIH0sXG4gICAgMjoge1xuICAgICAgICBzdWJzdFRocmVzaG9sZDogJDUyWklmJGZpeGVkMzIsXG4gICAgICAgIGFkZEdseXBoOiAkNTJaSWYkdWludDE2LFxuICAgICAgICBzdWJzdEdseXBoOiAkNTJaSWYkdWludDE2XG4gICAgfSxcbiAgICAzOiB7fSxcbiAgICA0OiB7XG4gICAgICAgIHZhcmlhdGlvbkF4aXM6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIG1pbmltdW1MaW1pdDogJDUyWklmJGZpeGVkMzIsXG4gICAgICAgIG5vU3RyZXRjaFZhbHVlOiAkNTJaSWYkZml4ZWQzMixcbiAgICAgICAgbWF4aW11bUxpbWl0OiAkNTJaSWYkZml4ZWQzMlxuICAgIH0sXG4gICAgNToge1xuICAgICAgICBmbGFnczogJDUyWklmJHVpbnQxNixcbiAgICAgICAgZ2x5cGg6ICQ1MlpJZiR1aW50MTZcbiAgICB9XG59KTtcbmxldCAkMDViMDE4ODdkZjk2YzRlZSR2YXIkQWN0aW9uID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGFjdGlvbkNsYXNzOiAkNTJaSWYkdWludDE2LFxuICAgIGFjdGlvblR5cGU6ICQ1MlpJZiR1aW50MTYsXG4gICAgYWN0aW9uTGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgIGFjdGlvbkRhdGE6ICQwNWIwMTg4N2RmOTZjNGVlJHZhciRBY3Rpb25EYXRhLFxuICAgIHBhZGRpbmc6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQ4LCAodCk9PnQuYWN0aW9uTGVuZ3RoIC0gdC5fY3VycmVudE9mZnNldClcbn0pO1xubGV0ICQwNWIwMTg4N2RmOTZjNGVlJHZhciRQb3N0Y29tcGVuc2F0aW9uQWN0aW9uID0gbmV3ICQ1MlpJZiRBcnJheSgkMDViMDE4ODdkZjk2YzRlZSR2YXIkQWN0aW9uLCAkNTJaSWYkdWludDMyKTtcbmxldCAkMDViMDE4ODdkZjk2YzRlZSR2YXIkUG9zdENvbXBlbnNhdGlvblRhYmxlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGxvb2t1cFRhYmxlOiBuZXcgKDAsICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCQ4MzUxZjhjMmFlMmYxMDNjKShuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJFBvc3Rjb21wZW5zYXRpb25BY3Rpb24pKVxufSk7XG5sZXQgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJEp1c3RpZmljYXRpb25UYWJsZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBjbGFzc1RhYmxlOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJENsYXNzVGFibGUsIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIlxuICAgIH0pLFxuICAgIHdkY09mZnNldDogJDUyWklmJHVpbnQxNixcbiAgICBwb3N0Q29tcGVuc2F0aW9uVGFibGU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkMDViMDE4ODdkZjk2YzRlZSR2YXIkUG9zdENvbXBlbnNhdGlvblRhYmxlLCB7XG4gICAgICAgIHR5cGU6IFwicGFyZW50XCJcbiAgICB9KSxcbiAgICB3aWR0aERlbHRhQ2x1c3RlcnM6IG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDgzNTFmOGMyYWUyZjEwM2MpKG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkMDViMDE4ODdkZjk2YzRlZSR2YXIkV2lkdGhEZWx0YUNsdXN0ZXIsIHtcbiAgICAgICAgdHlwZTogXCJwYXJlbnRcIixcbiAgICAgICAgcmVsYXRpdmVUbzogKGN0eCk9PmN0eC53ZGNPZmZzZXRcbiAgICB9KSlcbn0pO1xudmFyICQwNWIwMTg4N2RmOTZjNGVlJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQzMixcbiAgICBmb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgaG9yaXpvbnRhbDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsICQwNWIwMTg4N2RmOTZjNGVlJHZhciRKdXN0aWZpY2F0aW9uVGFibGUpLFxuICAgIHZlcnRpY2FsOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJEp1c3RpZmljYXRpb25UYWJsZSlcbn0pO1xuXG5cblxuXG5sZXQgJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJExpZ2F0dXJlRGF0YSA9IHtcbiAgICBhY3Rpb246ICQ1MlpJZiR1aW50MTZcbn07XG5sZXQgJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJENvbnRleHR1YWxEYXRhID0ge1xuICAgIG1hcmtJbmRleDogJDUyWklmJHVpbnQxNixcbiAgICBjdXJyZW50SW5kZXg6ICQ1MlpJZiR1aW50MTZcbn07XG5sZXQgJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJEluc2VydGlvbkRhdGEgPSB7XG4gICAgY3VycmVudEluc2VydEluZGV4OiAkNTJaSWYkdWludDE2LFxuICAgIG1hcmtlZEluc2VydEluZGV4OiAkNTJaSWYkdWludDE2XG59O1xubGV0ICQwM2VlNmViZDU0ZGIxMDUzJHZhciRTdWJzdGl0dXRpb25UYWJsZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBpdGVtczogbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkYzVhZjFlZWJjODgyZTM5YSkobmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDgzNTFmOGMyYWUyZjEwM2MpKSlcbn0pO1xubGV0ICQwM2VlNmViZDU0ZGIxMDUzJHZhciRTdWJ0YWJsZURhdGEgPSBuZXcgJDUyWklmJFZlcnNpb25lZFN0cnVjdChcInR5cGVcIiwge1xuICAgIDA6IHtcbiAgICAgICAgc3RhdGVUYWJsZTogbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkNzlmN2Q5M2Q3OTA5MzRiYSlcbiAgICB9LFxuICAgIDE6IHtcbiAgICAgICAgc3RhdGVUYWJsZTogbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkNzlmN2Q5M2Q3OTA5MzRiYSkoJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJENvbnRleHR1YWxEYXRhKSxcbiAgICAgICAgc3Vic3RpdHV0aW9uVGFibGU6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAkMDNlZTZlYmQ1NGRiMTA1MyR2YXIkU3Vic3RpdHV0aW9uVGFibGUpXG4gICAgfSxcbiAgICAyOiB7XG4gICAgICAgIHN0YXRlVGFibGU6IG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDc5ZjdkOTNkNzkwOTM0YmEpKCQwM2VlNmViZDU0ZGIxMDUzJHZhciRMaWdhdHVyZURhdGEpLFxuICAgICAgICBsaWdhdHVyZUFjdGlvbnM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgKDAsICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCRjNWFmMWVlYmM4ODJlMzlhKSgkNTJaSWYkdWludDMyKSksXG4gICAgICAgIGNvbXBvbmVudHM6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBuZXcgKDAsICQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCRjNWFmMWVlYmM4ODJlMzlhKSgkNTJaSWYkdWludDE2KSksXG4gICAgICAgIGxpZ2F0dXJlTGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MzIsIG5ldyAoMCwgJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JGM1YWYxZWViYzg4MmUzOWEpKCQ1MlpJZiR1aW50MTYpKVxuICAgIH0sXG4gICAgNDoge1xuICAgICAgICBsb29rdXBUYWJsZTogbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkODM1MWY4YzJhZTJmMTAzYylcbiAgICB9LFxuICAgIDU6IHtcbiAgICAgICAgc3RhdGVUYWJsZTogbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkNzlmN2Q5M2Q3OTA5MzRiYSkoJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJEluc2VydGlvbkRhdGEpLFxuICAgICAgICBpbnNlcnRpb25BY3Rpb25zOiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkYzVhZjFlZWJjODgyZTM5YSkoJDUyWklmJHVpbnQxNikpXG4gICAgfVxufSk7XG5sZXQgJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJFN1YnRhYmxlID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGxlbmd0aDogJDUyWklmJHVpbnQzMixcbiAgICBjb3ZlcmFnZTogJDUyWklmJHVpbnQyNCxcbiAgICB0eXBlOiAkNTJaSWYkdWludDgsXG4gICAgc3ViRmVhdHVyZUZsYWdzOiAkNTJaSWYkdWludDMyLFxuICAgIHRhYmxlOiAkMDNlZTZlYmQ1NGRiMTA1MyR2YXIkU3VidGFibGVEYXRhLFxuICAgIHBhZGRpbmc6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQ4LCAodCk9PnQubGVuZ3RoIC0gdC5fY3VycmVudE9mZnNldClcbn0pO1xubGV0ICQwM2VlNmViZDU0ZGIxMDUzJHZhciRGZWF0dXJlRW50cnkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZmVhdHVyZVR5cGU6ICQ1MlpJZiR1aW50MTYsXG4gICAgZmVhdHVyZVNldHRpbmc6ICQ1MlpJZiR1aW50MTYsXG4gICAgZW5hYmxlRmxhZ3M6ICQ1MlpJZiR1aW50MzIsXG4gICAgZGlzYWJsZUZsYWdzOiAkNTJaSWYkdWludDMyXG59KTtcbmxldCAkMDNlZTZlYmQ1NGRiMTA1MyR2YXIkTW9yeENoYWluID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGRlZmF1bHRGbGFnczogJDUyWklmJHVpbnQzMixcbiAgICBjaGFpbkxlbmd0aDogJDUyWklmJHVpbnQzMixcbiAgICBuRmVhdHVyZUVudHJpZXM6ICQ1MlpJZiR1aW50MzIsXG4gICAgblN1YnRhYmxlczogJDUyWklmJHVpbnQzMixcbiAgICBmZWF0dXJlczogbmV3ICQ1MlpJZiRBcnJheSgkMDNlZTZlYmQ1NGRiMTA1MyR2YXIkRmVhdHVyZUVudHJ5LCBcIm5GZWF0dXJlRW50cmllc1wiKSxcbiAgICBzdWJ0YWJsZXM6IG5ldyAkNTJaSWYkQXJyYXkoJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJFN1YnRhYmxlLCBcIm5TdWJ0YWJsZXNcIilcbn0pO1xudmFyICQwM2VlNmViZDU0ZGIxMDUzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICB1bnVzZWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQxNiksXG4gICAgbkNoYWluczogJDUyWklmJHVpbnQzMixcbiAgICBjaGFpbnM6IG5ldyAkNTJaSWYkQXJyYXkoJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJE1vcnhDaGFpbiwgXCJuQ2hhaW5zXCIpXG59KTtcblxuXG5cblxubGV0ICRiNzQ5MmE4MGIwZDFhMDU2JHZhciRPcHRpY2FsQm91bmRzID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGxlZnQ6ICQ1MlpJZiRpbnQxNixcbiAgICB0b3A6ICQ1MlpJZiRpbnQxNixcbiAgICByaWdodDogJDUyWklmJGludDE2LFxuICAgIGJvdHRvbTogJDUyWklmJGludDE2XG59KTtcbnZhciAkYjc0OTJhODBiMGQxYTA1NiRleHBvcnQkMmUyYmNkODczOWFlMDM5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHZlcnNpb246ICQ1MlpJZiRmaXhlZDMyLFxuICAgIGZvcm1hdDogJDUyWklmJHVpbnQxNixcbiAgICBsb29rdXBUYWJsZTogbmV3ICgwLCAkNmNiN2RkNWY0N2Q4MjU4MCRleHBvcnQkODM1MWY4YzJhZTJmMTAzYykoJGI3NDkyYTgwYjBkMWEwNTYkdmFyJE9wdGljYWxCb3VuZHMpXG59KTtcblxuXG5sZXQgJGMzMzk1NzIyYmVhNzUxZTIkdmFyJHRhYmxlcyA9IHt9O1xudmFyICRjMzM5NTcyMmJlYTc1MWUyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSAkYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzO1xuJGMzMzk1NzIyYmVhNzUxZTIkdmFyJHRhYmxlcy5jbWFwID0gKDAsICQyNmE2MjIwNWFkMDY1NzRlJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpO1xuJGMzMzk1NzIyYmVhNzUxZTIkdmFyJHRhYmxlcy5oZWFkID0gKDAsICRmMjYxMmEyOWY5MmFjMDYyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpO1xuJGMzMzk1NzIyYmVhNzUxZTIkdmFyJHRhYmxlcy5oaGVhID0gKDAsICQyYzE3OWRkNTkzNTgzMDczJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpO1xuJGMzMzk1NzIyYmVhNzUxZTIkdmFyJHRhYmxlcy5obXR4ID0gKDAsICRiZGM5MDYwNTQyMjY0Yjg1JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpO1xuJGMzMzk1NzIyYmVhNzUxZTIkdmFyJHRhYmxlcy5tYXhwID0gKDAsICRkYmY1MWNiM2QzZmU0MDlkJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpO1xuJGMzMzk1NzIyYmVhNzUxZTIkdmFyJHRhYmxlcy5uYW1lID0gKDAsICQyYmNmMjIxNzUzZWM4ZTMyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpO1xuJGMzMzk1NzIyYmVhNzUxZTIkdmFyJHRhYmxlc1tcIk9TLzJcIl0gPSAoMCwgJDg0YjI3MmFhMzFiNzA2MDYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLnBvc3QgPSAoMCwgJDMyZDllMmViOTU2NWQ5M2MkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLmZwZ20gPSAoMCwgJDVjMGYzN2NhNWZmYjE4NTAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLmxvY2EgPSAoMCwgJDJiMmIyNjA5MDJiMWM1N2UkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLnByZXAgPSAoMCwgJDdhZmI4NzhjN2JlYTRmNjYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzW1wiY3Z0IFwiXSA9ICgwLCAkNTIwMmJkOWQ5YWQ4ZWFhYyRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXMuZ2x5ZiA9ICgwLCAkNmM5MmI2MzcxYmNlOGJkOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiRjMzM5NTcyMmJlYTc1MWUyJHZhciR0YWJsZXNbXCJDRkYgXCJdID0gKDAsICQ4MjJhYzBkNTg5ZTRlMjM3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpO1xuJGMzMzk1NzIyYmVhNzUxZTIkdmFyJHRhYmxlc1tcIkNGRjJcIl0gPSAoMCwgJDgyMmFjMGQ1ODllNGUyMzckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLlZPUkcgPSAoMCwgJDJiYmYyYmMxY2UzN2NkOGYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkVCTEMgPSAoMCwgJDk5MTFjNGM3MjAxYzEzZGUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkNCTEMgPSAkYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkVCTEM7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLnNiaXggPSAoMCwgJGFiYjg0NzA1MWVmZDUxYjEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkNPTFIgPSAoMCwgJGViNjI5MTg4ZjNkZmVmZGQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkNQQUwgPSAoMCwgJDA4NzM0YjhlN2RjNjQ1ODckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkJBU0UgPSAoMCwgJDQ5N2NlZjQxMWQ4ODRlMzQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkdERUYgPSAoMCwgJGNmNWYzM2M2M2VmMjA5ZTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkdQT1MgPSAoMCwgJDQ3ZTBlOGVmNTE1ZDk5MDMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkdTVUIgPSAoMCwgJGQzZjQ0MjA2NGFmNjZlMDYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkpTVEYgPSAoMCwgJDcxY2ZiM2M0NzY3ZmJkMGMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkhWQVIgPSAoMCwgJGQwNTlhNmJkMmQzYjViNjMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkRTSUcgPSAoMCwgJGRjZWVjYTNlMTk3N2NlMzAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLmdhc3AgPSAoMCwgJDhhY2Q3NDBhOTQzNWFhZDAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLmhkbXggPSAoMCwgJGI1ZjM4MDI0M2MzNGQ2YTAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLmtlcm4gPSAoMCwgJGNhMmRmMTI1Njk2NmUzMTMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLkxUU0ggPSAoMCwgJDdhOWY5MmIwYzQ2ZWJlMzMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLlBDTFQgPSAoMCwgJDJiMmNjYzQxOWQxNTI2MzEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLlZETVggPSAoMCwgJGNhNWI0MGI5YmNkYTljOWIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLnZoZWEgPSAoMCwgJDY5NTMwYTNjNDA3NTVhZjAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLnZtdHggPSAoMCwgJDM0NDA3M2RkMjcwZjBlNjIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLmF2YXIgPSAoMCwgJDM3OTNiNzgxOTE4Y2ZjZWQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLmJzbG4gPSAoMCwgJDZhMzc0NmU4YzcwOGY1YTMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLmZlYXQgPSAoMCwgJGQwYzc2ZmFjNjE3YjMwOGEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLmZ2YXIgPSAoMCwgJGU4M2ZkMDY1ZjAwZmNkMDEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLmd2YXIgPSAoMCwgJGRiZTMzYzhkM2E3ZjEzMWMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLmp1c3QgPSAoMCwgJDA1YjAxODg3ZGY5NmM0ZWUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLm1vcnggPSAoMCwgJDAzZWU2ZWJkNTRkYjEwNTMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzLm9wYmQgPSAoMCwgJGI3NDkyYTgwYjBkMWEwNTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG5cblxubGV0ICQ4MTZjMDdhMDRiNmRiYTg3JHZhciRUYWJsZUVudHJ5ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIHRhZzogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgY2hlY2tTdW06ICQ1MlpJZiR1aW50MzIsXG4gICAgb2Zmc2V0OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQzMiwgXCJ2b2lkXCIsIHtcbiAgICAgICAgdHlwZTogXCJnbG9iYWxcIlxuICAgIH0pLFxuICAgIGxlbmd0aDogJDUyWklmJHVpbnQzMlxufSk7XG5sZXQgJDgxNmMwN2EwNGI2ZGJhODckdmFyJERpcmVjdG9yeSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB0YWc6IG5ldyAkNTJaSWYkU3RyaW5nKDQpLFxuICAgIG51bVRhYmxlczogJDUyWklmJHVpbnQxNixcbiAgICBzZWFyY2hSYW5nZTogJDUyWklmJHVpbnQxNixcbiAgICBlbnRyeVNlbGVjdG9yOiAkNTJaSWYkdWludDE2LFxuICAgIHJhbmdlU2hpZnQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgdGFibGVzOiBuZXcgJDUyWklmJEFycmF5KCQ4MTZjMDdhMDRiNmRiYTg3JHZhciRUYWJsZUVudHJ5LCBcIm51bVRhYmxlc1wiKVxufSk7XG4kODE2YzA3YTA0YjZkYmE4NyR2YXIkRGlyZWN0b3J5LnByb2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgdGFibGVzID0ge307XG4gICAgZm9yIChsZXQgdGFibGUgb2YgdGhpcy50YWJsZXMpdGFibGVzW3RhYmxlLnRhZ10gPSB0YWJsZTtcbiAgICB0aGlzLnRhYmxlcyA9IHRhYmxlcztcbn07XG4kODE2YzA3YTA0YjZkYmE4NyR2YXIkRGlyZWN0b3J5LnByZUVuY29kZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnRhYmxlcykpIHtcbiAgICAgICAgbGV0IHRhYmxlcyA9IFtdO1xuICAgICAgICBmb3IobGV0IHRhZyBpbiB0aGlzLnRhYmxlcyl7XG4gICAgICAgICAgICBsZXQgdGFibGUgPSB0aGlzLnRhYmxlc1t0YWddO1xuICAgICAgICAgICAgaWYgKHRhYmxlKSB0YWJsZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgICAgICAgICAgY2hlY2tTdW06IDAsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBuZXcgJDUyWklmJFZvaWRQb2ludGVyKCgwLCAkYzMzOTU3MjJiZWE3NTFlMiRleHBvcnQkMmUyYmNkODczOWFlMDM5KVt0YWddLCB0YWJsZSksXG4gICAgICAgICAgICAgICAgbGVuZ3RoOiAoMCwgJGMzMzk1NzIyYmVhNzUxZTIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSlbdGFnXS5zaXplKHRhYmxlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50YWJsZXMgPSB0YWJsZXM7XG4gICAgfVxuICAgIHRoaXMudGFnID0gXCJ0cnVlXCI7XG4gICAgdGhpcy5udW1UYWJsZXMgPSB0aGlzLnRhYmxlcy5sZW5ndGg7XG4gICAgbGV0IG1heEV4cG9uZW50Rm9yMiA9IE1hdGguZmxvb3IoTWF0aC5sb2codGhpcy5udW1UYWJsZXMpIC8gTWF0aC5MTjIpO1xuICAgIGxldCBtYXhQb3dlck9mMiA9IE1hdGgucG93KDIsIG1heEV4cG9uZW50Rm9yMik7XG4gICAgdGhpcy5zZWFyY2hSYW5nZSA9IG1heFBvd2VyT2YyICogMTY7XG4gICAgdGhpcy5lbnRyeVNlbGVjdG9yID0gTWF0aC5sb2cobWF4UG93ZXJPZjIpIC8gTWF0aC5MTjI7XG4gICAgdGhpcy5yYW5nZVNoaWZ0ID0gdGhpcy5udW1UYWJsZXMgKiAxNiAtIHRoaXMuc2VhcmNoUmFuZ2U7XG59O1xudmFyICQ4MTZjMDdhMDRiNmRiYTg3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSAkODE2YzA3YTA0YjZkYmE4NyR2YXIkRGlyZWN0b3J5O1xuXG5cblxuXG5mdW5jdGlvbiAkMTI3Mjc3MzBkZGZjOGJmZSRleHBvcnQkMmUwYWU2NzMzOWQ1ZjFhYyhhcnIsIGNtcCkge1xuICAgIGxldCBtaW4gPSAwO1xuICAgIGxldCBtYXggPSBhcnIubGVuZ3RoIC0gMTtcbiAgICB3aGlsZShtaW4gPD0gbWF4KXtcbiAgICAgICAgbGV0IG1pZCA9IG1pbiArIG1heCA+PiAxO1xuICAgICAgICBsZXQgcmVzID0gY21wKGFyclttaWRdKTtcbiAgICAgICAgaWYgKHJlcyA8IDApIG1heCA9IG1pZCAtIDE7XG4gICAgICAgIGVsc2UgaWYgKHJlcyA+IDApIG1pbiA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgcmV0dXJuIG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JGQwMjYzMWNjY2Y3ODk3MjMoaW5kZXgsIGVuZCkge1xuICAgIGxldCByYW5nZTEgPSBbXTtcbiAgICB3aGlsZShpbmRleCA8IGVuZClyYW5nZTEucHVzaChpbmRleCsrKTtcbiAgICByZXR1cm4gcmFuZ2UxO1xufVxuY29uc3QgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDNkMjhjMTk5NmNlZDFmMTQgPSBuZXcgVGV4dERlY29kZXIoXCJhc2NpaVwiKTtcbi8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9uaWtsYXN2aC9iYXNlNjQtYXJyYXlidWZmZXIuIE1JVCBsaWNlbnNlLlxuY29uc3QgJDEyNzI3NzMwZGRmYzhiZmUkdmFyJENIQVJTID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG5jb25zdCAkMTI3Mjc3MzBkZGZjOGJmZSR2YXIkTE9PS1VQID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbmZvcihsZXQgaSA9IDA7IGkgPCAkMTI3Mjc3MzBkZGZjOGJmZSR2YXIkQ0hBUlMubGVuZ3RoOyBpKyspJDEyNzI3NzMwZGRmYzhiZmUkdmFyJExPT0tVUFskMTI3Mjc3MzBkZGZjOGJmZSR2YXIkQ0hBUlMuY2hhckNvZGVBdChpKV0gPSBpO1xuZnVuY3Rpb24gJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDk0ZmRmMTFiYWZjOGRlNmIoYmFzZTY0KSB7XG4gICAgbGV0IGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1O1xuICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDFdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSBidWZmZXJMZW5ndGgtLTtcbiAgICB9XG4gICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyTGVuZ3RoKTtcbiAgICBsZXQgcCA9IDA7XG4gICAgZm9yKGxldCBpMSA9IDAsIGxlbiA9IGJhc2U2NC5sZW5ndGg7IGkxIDwgbGVuOyBpMSArPSA0KXtcbiAgICAgICAgbGV0IGVuY29kZWQxID0gJDEyNzI3NzMwZGRmYzhiZmUkdmFyJExPT0tVUFtiYXNlNjQuY2hhckNvZGVBdChpMSldO1xuICAgICAgICBsZXQgZW5jb2RlZDIgPSAkMTI3Mjc3MzBkZGZjOGJmZSR2YXIkTE9PS1VQW2Jhc2U2NC5jaGFyQ29kZUF0KGkxICsgMSldO1xuICAgICAgICBsZXQgZW5jb2RlZDMgPSAkMTI3Mjc3MzBkZGZjOGJmZSR2YXIkTE9PS1VQW2Jhc2U2NC5jaGFyQ29kZUF0KGkxICsgMildO1xuICAgICAgICBsZXQgZW5jb2RlZDQgPSAkMTI3Mjc3MzBkZGZjOGJmZSR2YXIkTE9PS1VQW2Jhc2U2NC5jaGFyQ29kZUF0KGkxICsgMyldO1xuICAgICAgICBieXRlc1twKytdID0gZW5jb2RlZDEgPDwgMiB8IGVuY29kZWQyID4+IDQ7XG4gICAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDIgJiAxNSkgPDwgNCB8IGVuY29kZWQzID4+IDI7XG4gICAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDMgJiAzKSA8PCA2IHwgZW5jb2RlZDQgJiA2MztcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xufVxuXG5cblxuXG5cbmNsYXNzICRmMDhkZDQxZWYxMGI2OTRjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIGZpbmRTdWJ0YWJsZShjbWFwVGFibGUsIHBhaXJzKSB7XG4gICAgICAgIGZvciAobGV0IFtwbGF0Zm9ybUlELCBlbmNvZGluZ0lEXSBvZiBwYWlycylmb3IgKGxldCBjbWFwIG9mIGNtYXBUYWJsZS50YWJsZXMpe1xuICAgICAgICAgICAgaWYgKGNtYXAucGxhdGZvcm1JRCA9PT0gcGxhdGZvcm1JRCAmJiBjbWFwLmVuY29kaW5nSUQgPT09IGVuY29kaW5nSUQpIHJldHVybiBjbWFwLnRhYmxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsb29rdXAoY29kZXBvaW50LCB2YXJpYXRpb25TZWxlY3Rvcikge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBVbmljb2RlIGNtYXAgaW4gdGhpcyBmb250LCB3ZSBuZWVkIHRvIHJlLWVuY29kZVxuICAgICAgICAvLyB0aGUgY29kZXBvaW50IGluIHRoZSBlbmNvZGluZyB0aGF0IHRoZSBjbWFwIHN1cHBvcnRzLlxuICAgICAgICBpZiAodGhpcy5lbmNvZGluZykgY29kZXBvaW50ID0gdGhpcy5lbmNvZGluZy5nZXQoY29kZXBvaW50KSB8fCBjb2RlcG9pbnQ7XG4gICAgICAgIGVsc2UgaWYgKHZhcmlhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgICAgICBsZXQgZ2lkID0gdGhpcy5nZXRWYXJpYXRpb25TZWxlY3Rvcihjb2RlcG9pbnQsIHZhcmlhdGlvblNlbGVjdG9yKTtcbiAgICAgICAgICAgIGlmIChnaWQpIHJldHVybiBnaWQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNtYXAgPSB0aGlzLmNtYXA7XG4gICAgICAgIHN3aXRjaChjbWFwLnZlcnNpb24pe1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBjbWFwLmNvZGVNYXAuZ2V0KGNvZGVwb2ludCkgfHwgMDtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtaW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWF4ID0gY21hcC5zZWdDb3VudCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKG1pbiA8PSBtYXgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1pZCA9IG1pbiArIG1heCA+PiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGVwb2ludCA8IGNtYXAuc3RhcnRDb2RlLmdldChtaWQpKSBtYXggPSBtaWQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY29kZXBvaW50ID4gY21hcC5lbmRDb2RlLmdldChtaWQpKSBtaW4gPSBtaWQgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmdlT2Zmc2V0ID0gY21hcC5pZFJhbmdlT2Zmc2V0LmdldChtaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBnaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlT2Zmc2V0ID09PSAwKSBnaWQgPSBjb2RlcG9pbnQgKyBjbWFwLmlkRGVsdGEuZ2V0KG1pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHJhbmdlT2Zmc2V0IC8gMiArIChjb2RlcG9pbnQgLSBjbWFwLnN0YXJ0Q29kZS5nZXQobWlkKSkgLSAoY21hcC5zZWdDb3VudCAtIG1pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdpZCA9IGNtYXAuZ2x5cGhJbmRleEFycmF5LmdldChpbmRleCkgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdpZCAhPT0gMCkgZ2lkICs9IGNtYXAuaWREZWx0YS5nZXQobWlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdpZCAmIDB4ZmZmZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVE9ETzogY21hcCBmb3JtYXQgOFwiKTtcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNtYXAuZ2x5cGhJbmRpY2VzLmdldChjb2RlcG9pbnQgLSBjbWFwLmZpcnN0Q29kZSkgfHwgMDtcbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1pbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXggPSBjbWFwLm5Hcm91cHMgLSAxO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZShtaW4gPD0gbWF4KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtaWQgPSBtaW4gKyBtYXggPj4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cCA9IGNtYXAuZ3JvdXBzLmdldChtaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGVwb2ludCA8IGdyb3VwLnN0YXJ0Q2hhckNvZGUpIG1heCA9IG1pZCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjb2RlcG9pbnQgPiBncm91cC5lbmRDaGFyQ29kZSkgbWluID0gbWlkICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbWFwLnZlcnNpb24gPT09IDEyKSByZXR1cm4gZ3JvdXAuZ2x5cGhJRCArIChjb2RlcG9pbnQgLSBncm91cC5zdGFydENoYXJDb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBncm91cC5nbHlwaElEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVE9ETzogY21hcCBmb3JtYXQgMTRcIik7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBjbWFwIGZvcm1hdCAke2NtYXAudmVyc2lvbn1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRWYXJpYXRpb25TZWxlY3Rvcihjb2RlcG9pbnQsIHZhcmlhdGlvblNlbGVjdG9yKSB7XG4gICAgICAgIGlmICghdGhpcy51dnMpIHJldHVybiAwO1xuICAgICAgICBsZXQgc2VsZWN0b3JzID0gdGhpcy51dnMudmFyU2VsZWN0b3JzLnRvQXJyYXkoKTtcbiAgICAgICAgbGV0IGkgPSAoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDJlMGFlNjczMzlkNWYxYWMpKHNlbGVjdG9ycywgKHgpPT52YXJpYXRpb25TZWxlY3RvciAtIHgudmFyU2VsZWN0b3IpO1xuICAgICAgICBsZXQgc2VsID0gc2VsZWN0b3JzW2ldO1xuICAgICAgICBpZiAoaSAhPT0gLTEgJiYgc2VsLmRlZmF1bHRVVlMpIGkgPSAoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDJlMGFlNjczMzlkNWYxYWMpKHNlbC5kZWZhdWx0VVZTLCAoeCk9PmNvZGVwb2ludCA8IHguc3RhcnRVbmljb2RlVmFsdWUgPyAtMSA6IGNvZGVwb2ludCA+IHguc3RhcnRVbmljb2RlVmFsdWUgKyB4LmFkZGl0aW9uYWxDb3VudCA/IDEgOiAwKTtcbiAgICAgICAgaWYgKGkgIT09IC0xICYmIHNlbC5ub25EZWZhdWx0VVZTKSB7XG4gICAgICAgICAgICBpID0gKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCQyZTBhZTY3MzM5ZDVmMWFjKShzZWwubm9uRGVmYXVsdFVWUywgKHgpPT5jb2RlcG9pbnQgLSB4LnVuaWNvZGVWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHJldHVybiBzZWwubm9uRGVmYXVsdFVWU1tpXS5nbHlwaElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBnZXRDaGFyYWN0ZXJTZXQoKSB7XG4gICAgICAgIGxldCBjbWFwID0gdGhpcy5jbWFwO1xuICAgICAgICBzd2l0Y2goY21hcC52ZXJzaW9uKXtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCRkMDI2MzFjY2NmNzg5NzIzKSgwLCBjbWFwLmNvZGVNYXAubGVuZ3RoKTtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVuZENvZGVzID0gY21hcC5lbmRDb2RlLnRvQXJyYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGVuZENvZGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YWlsID0gZW5kQ29kZXNbaV0gKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gY21hcC5zdGFydENvZGUuZ2V0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goLi4uKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCRkMDI2MzFjY2NmNzg5NzIzKShzdGFydCwgdGFpbCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRPRE86IGNtYXAgZm9ybWF0IDhcIik7XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JGQwMjYzMWNjY2Y3ODk3MjMpKGNtYXAuZmlyc3RDb2RlLCBjbWFwLmZpcnN0Q29kZSArIGNtYXAuZ2x5cGhJbmRpY2VzLmxlbmd0aCk7XG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZ3JvdXAgb2YgY21hcC5ncm91cHMudG9BcnJheSgpKXJlcy5wdXNoKC4uLigwLCAkMTI3Mjc3MzBkZGZjOGJmZSRleHBvcnQkZDAyNjMxY2NjZjc4OTcyMykoZ3JvdXAuc3RhcnRDaGFyQ29kZSwgZ3JvdXAuZW5kQ2hhckNvZGUgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUT0RPOiBjbWFwIGZvcm1hdCAxNFwiKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGNtYXAgZm9ybWF0ICR7Y21hcC52ZXJzaW9ufWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvZGVQb2ludHNGb3JHbHlwaChnaWQpIHtcbiAgICAgICAgbGV0IGNtYXAgPSB0aGlzLmNtYXA7XG4gICAgICAgIHN3aXRjaChjbWFwLnZlcnNpb24pe1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspaWYgKGNtYXAuY29kZU1hcC5nZXQoaSkgPT09IGdpZCkgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgY21hcC5zZWdDb3VudDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbmQgPSBjbWFwLmVuZENvZGUuZ2V0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gY21hcC5zdGFydENvZGUuZ2V0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmdlT2Zmc2V0ID0gY21hcC5pZFJhbmdlT2Zmc2V0LmdldChpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkZWx0YSA9IGNtYXAuaWREZWx0YS5nZXQoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGMgPSBzdGFydDsgYyA8PSBlbmQ7IGMrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGcgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZU9mZnNldCA9PT0gMCkgZyA9IGMgKyBkZWx0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gcmFuZ2VPZmZzZXQgLyAyICsgKGMgLSBzdGFydCkgLSAoY21hcC5zZWdDb3VudCAtIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gY21hcC5nbHlwaEluZGV4QXJyYXkuZ2V0KGluZGV4KSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZyAhPT0gMCkgZyArPSBkZWx0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGcgPT09IGdpZCkgcmVzLnB1c2goYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBncm91cCBvZiBjbWFwLmdyb3Vwcy50b0FycmF5KCkpaWYgKGdpZCA+PSBncm91cC5nbHlwaElEICYmIGdpZCA8PSBncm91cC5nbHlwaElEICsgKGdyb3VwLmVuZENoYXJDb2RlIC0gZ3JvdXAuc3RhcnRDaGFyQ29kZSkpIHJlcy5wdXNoKGdyb3VwLnN0YXJ0Q2hhckNvZGUgKyAoZ2lkIC0gZ3JvdXAuZ2x5cGhJRCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGdyb3VwIG9mIGNtYXAuZ3JvdXBzLnRvQXJyYXkoKSlpZiAoZ2lkID09PSBncm91cC5nbHlwaElEKSByZXMucHVzaCguLi4oMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JGQwMjYzMWNjY2Y3ODk3MjMpKGdyb3VwLnN0YXJ0Q2hhckNvZGUsIGdyb3VwLmVuZENoYXJDb2RlICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGNtYXAgZm9ybWF0ICR7Y21hcC52ZXJzaW9ufWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNtYXBUYWJsZSl7XG4gICAgICAgIC8vIEF0dGVtcHQgdG8gZmluZCBhIFVuaWNvZGUgY21hcCBmaXJzdFxuICAgICAgICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgICAgICAgdGhpcy5jbWFwID0gdGhpcy5maW5kU3VidGFibGUoY21hcFRhYmxlLCBbXG4gICAgICAgICAgICAvLyAzMi1iaXQgc3VidGFibGVzXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgMyxcbiAgICAgICAgICAgICAgICAxMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDZcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICA0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgLy8gMTYtYml0IHN1YnRhYmxlc1xuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIDMsXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDNcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgIF1cbiAgICAgICAgXSk7XG4gICAgICAgIC8vIElmIG5vdCB1bmljb2RlIGNtYXAgd2FzIGZvdW5kLCB0YWtlIHRoZSBmaXJzdCB0YWJsZSB3aXRoIGEgc3VwcG9ydGVkIGVuY29kaW5nLlxuICAgICAgICBpZiAoIXRoaXMuY21hcCkgZm9yIChsZXQgY21hcCBvZiBjbWFwVGFibGUudGFibGVzKXtcbiAgICAgICAgICAgIGxldCBlbmNvZGluZyA9ICgwLCAkZTQ0OWFkNzhkNTA4NDVmZSRleHBvcnQkYmFkYzU0NGUwNjUxYjZiMSkoY21hcC5wbGF0Zm9ybUlELCBjbWFwLmVuY29kaW5nSUQsIGNtYXAudGFibGUubGFuZ3VhZ2UgLSAxKTtcbiAgICAgICAgICAgIGxldCBtYXBwaW5nID0gKDAsICRlNDQ5YWQ3OGQ1MDg0NWZlJGV4cG9ydCQxZGNlYjNjMTRlZDY4YmVlKShlbmNvZGluZyk7XG4gICAgICAgICAgICBpZiAobWFwcGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuY21hcCA9IGNtYXAudGFibGU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmNvZGluZyA9IG1hcHBpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmNtYXApIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGEgc3VwcG9ydGVkIGNtYXAgdGFibGVcIik7XG4gICAgICAgIHRoaXMudXZzID0gdGhpcy5maW5kU3VidGFibGUoY21hcFRhYmxlLCBbXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICA1XG4gICAgICAgICAgICBdXG4gICAgICAgIF0pO1xuICAgICAgICBpZiAodGhpcy51dnMgJiYgdGhpcy51dnMudmVyc2lvbiAhPT0gMTQpIHRoaXMudXZzID0gbnVsbDtcbiAgICB9XG59XG4oMCwgJDUyWklmJHN3Y2hlbHBlcnNzcmNfdHNfZGVjb3JhdGVtanMpKFtcbiAgICAoMCwgJGU3MTU2NWYyY2UwOWNiNmIkZXhwb3J0JDY5YTMyMDlmMWEwNmMwNGQpXG5dLCAkZjA4ZGQ0MWVmMTBiNjk0YyRleHBvcnQkMmUyYmNkODczOWFlMDM5LnByb3RvdHlwZSwgXCJnZXRDaGFyYWN0ZXJTZXRcIiwgbnVsbCk7XG4oMCwgJDUyWklmJHN3Y2hlbHBlcnNzcmNfdHNfZGVjb3JhdGVtanMpKFtcbiAgICAoMCwgJGU3MTU2NWYyY2UwOWNiNmIkZXhwb3J0JDY5YTMyMDlmMWEwNmMwNGQpXG5dLCAkZjA4ZGQ0MWVmMTBiNjk0YyRleHBvcnQkMmUyYmNkODczOWFlMDM5LnByb3RvdHlwZSwgXCJjb2RlUG9pbnRzRm9yR2x5cGhcIiwgbnVsbCk7XG5cblxuXG5jbGFzcyAkMGJiYTNhOWRiNTc2MzdmMyRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBwcm9jZXNzKGdseXBocywgcG9zaXRpb25zKSB7XG4gICAgICAgIGZvcihsZXQgZ2x5cGhJbmRleCA9IDA7IGdseXBoSW5kZXggPCBnbHlwaHMubGVuZ3RoIC0gMTsgZ2x5cGhJbmRleCsrKXtcbiAgICAgICAgICAgIGxldCBsZWZ0ID0gZ2x5cGhzW2dseXBoSW5kZXhdLmlkO1xuICAgICAgICAgICAgbGV0IHJpZ2h0ID0gZ2x5cGhzW2dseXBoSW5kZXggKyAxXS5pZDtcbiAgICAgICAgICAgIHBvc2l0aW9uc1tnbHlwaEluZGV4XS54QWR2YW5jZSArPSB0aGlzLmdldEtlcm5pbmcobGVmdCwgcmlnaHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEtlcm5pbmcobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgbGV0IHJlcyA9IDA7XG4gICAgICAgIGZvciAobGV0IHRhYmxlIG9mIHRoaXMua2Vybi50YWJsZXMpe1xuICAgICAgICAgICAgaWYgKHRhYmxlLmNvdmVyYWdlLmNyb3NzU3RyZWFtKSBjb250aW51ZTtcbiAgICAgICAgICAgIHN3aXRjaCh0YWJsZS52ZXJzaW9uKXtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFibGUuY292ZXJhZ2UuaG9yaXpvbnRhbCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlLmNvdmVyYWdlLnZlcnRpY2FsIHx8IHRhYmxlLmNvdmVyYWdlLnZhcmlhdGlvbikgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQga2VybmluZyB0YWJsZSB2ZXJzaW9uICR7dGFibGUudmVyc2lvbn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB2YWwgPSAwO1xuICAgICAgICAgICAgbGV0IHMgPSB0YWJsZS5zdWJ0YWJsZTtcbiAgICAgICAgICAgIHN3aXRjaCh0YWJsZS5mb3JtYXQpe1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhaXJJZHggPSAoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDJlMGFlNjczMzlkNWYxYWMpKHMucGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0IC0gcGFpci5sZWZ0IHx8IHJpZ2h0IC0gcGFpci5yaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWlySWR4ID49IDApIHZhbCA9IHMucGFpcnNbcGFpcklkeF0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxlZnRPZmZzZXQgPSAwLCByaWdodE9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsZWZ0ID49IHMubGVmdFRhYmxlLmZpcnN0R2x5cGggJiYgbGVmdCA8IHMubGVmdFRhYmxlLmZpcnN0R2x5cGggKyBzLmxlZnRUYWJsZS5uR2x5cGhzKSBsZWZ0T2Zmc2V0ID0gcy5sZWZ0VGFibGUub2Zmc2V0c1tsZWZ0IC0gcy5sZWZ0VGFibGUuZmlyc3RHbHlwaF07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgbGVmdE9mZnNldCA9IHMuYXJyYXkub2ZmO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmlnaHQgPj0gcy5yaWdodFRhYmxlLmZpcnN0R2x5cGggJiYgcmlnaHQgPCBzLnJpZ2h0VGFibGUuZmlyc3RHbHlwaCArIHMucmlnaHRUYWJsZS5uR2x5cGhzKSByaWdodE9mZnNldCA9IHMucmlnaHRUYWJsZS5vZmZzZXRzW3JpZ2h0IC0gcy5yaWdodFRhYmxlLmZpcnN0R2x5cGhdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAobGVmdE9mZnNldCArIHJpZ2h0T2Zmc2V0IC0gcy5hcnJheS5vZmYpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gcy5hcnJheS52YWx1ZXMuZ2V0KGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAobGVmdCA+PSBzLmdseXBoQ291bnQgfHwgcmlnaHQgPj0gcy5nbHlwaENvdW50KSByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gcy5rZXJuVmFsdWVbcy5rZXJuSW5kZXhbcy5sZWZ0Q2xhc3NbbGVmdF0gKiBzLnJpZ2h0Q2xhc3NDb3VudCArIHMucmlnaHRDbGFzc1tyaWdodF1dXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBrZXJuaW5nIHN1Yi10YWJsZSBmb3JtYXQgJHt0YWJsZS5mb3JtYXR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNaWNyb3NvZnQgc3VwcG9ydHMgdGhlIG92ZXJyaWRlIGZsYWcsIHdoaWNoIHJlc2V0cyB0aGUgcmVzdWx0XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIHRoZSBzdW0gb2YgdGhlIHJlc3VsdHMgZnJvbSBhbGwgc3VidGFibGVzIGlzIHJldHVybmVkXG4gICAgICAgICAgICBpZiAodGFibGUuY292ZXJhZ2Uub3ZlcnJpZGUpIHJlcyA9IHZhbDtcbiAgICAgICAgICAgIGVsc2UgcmVzICs9IHZhbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihmb250KXtcbiAgICAgICAgdGhpcy5rZXJuID0gZm9udC5rZXJuO1xuICAgIH1cbn1cblxuXG5cbmNsYXNzICQwYTRiZGZlYjZkZmQ2ZjVlJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIHBvc2l0aW9uR2x5cGhzKGdseXBocywgcG9zaXRpb25zKSB7XG4gICAgICAgIC8vIGZpbmQgZWFjaCBiYXNlICsgbWFyayBjbHVzdGVyLCBhbmQgcG9zaXRpb24gdGhlIG1hcmtzIHJlbGF0aXZlIHRvIHRoZSBiYXNlXG4gICAgICAgIGxldCBjbHVzdGVyU3RhcnQgPSAwO1xuICAgICAgICBsZXQgY2x1c3RlckVuZCA9IDA7XG4gICAgICAgIGZvcihsZXQgaW5kZXggPSAwOyBpbmRleCA8IGdseXBocy5sZW5ndGg7IGluZGV4Kyspe1xuICAgICAgICAgICAgbGV0IGdseXBoID0gZ2x5cGhzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChnbHlwaC5pc01hcmspIGNsdXN0ZXJFbmQgPSBpbmRleDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjbHVzdGVyU3RhcnQgIT09IGNsdXN0ZXJFbmQpIHRoaXMucG9zaXRpb25DbHVzdGVyKGdseXBocywgcG9zaXRpb25zLCBjbHVzdGVyU3RhcnQsIGNsdXN0ZXJFbmQpO1xuICAgICAgICAgICAgICAgIGNsdXN0ZXJTdGFydCA9IGNsdXN0ZXJFbmQgPSBpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY2x1c3RlclN0YXJ0ICE9PSBjbHVzdGVyRW5kKSB0aGlzLnBvc2l0aW9uQ2x1c3RlcihnbHlwaHMsIHBvc2l0aW9ucywgY2x1c3RlclN0YXJ0LCBjbHVzdGVyRW5kKTtcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9ucztcbiAgICB9XG4gICAgcG9zaXRpb25DbHVzdGVyKGdseXBocywgcG9zaXRpb25zLCBjbHVzdGVyU3RhcnQsIGNsdXN0ZXJFbmQpIHtcbiAgICAgICAgbGV0IGJhc2UgPSBnbHlwaHNbY2x1c3RlclN0YXJ0XTtcbiAgICAgICAgbGV0IGJhc2VCb3ggPSBiYXNlLmNib3guY29weSgpO1xuICAgICAgICAvLyBhZGp1c3QgYm91bmRpbmcgYm94IGZvciBsaWdhdHVyZSBnbHlwaHNcbiAgICAgICAgaWYgKGJhc2UuY29kZVBvaW50cy5sZW5ndGggPiAxKSAvLyBMVFIuIFRPRE86IFJUTCBzdXBwb3J0LlxuICAgICAgICBiYXNlQm94Lm1pblggKz0gKGJhc2UuY29kZVBvaW50cy5sZW5ndGggLSAxKSAqIGJhc2VCb3gud2lkdGggLyBiYXNlLmNvZGVQb2ludHMubGVuZ3RoO1xuICAgICAgICBsZXQgeE9mZnNldCA9IC1wb3NpdGlvbnNbY2x1c3RlclN0YXJ0XS54QWR2YW5jZTtcbiAgICAgICAgbGV0IHlPZmZzZXQgPSAwO1xuICAgICAgICBsZXQgeUdhcCA9IHRoaXMuZm9udC51bml0c1BlckVtIC8gMTY7XG4gICAgICAgIC8vIHBvc2l0aW9uIGVhY2ggb2YgdGhlIG1hcmsgZ2x5cGhzIHJlbGF0aXZlIHRvIHRoZSBiYXNlIGdseXBoXG4gICAgICAgIGZvcihsZXQgaW5kZXggPSBjbHVzdGVyU3RhcnQgKyAxOyBpbmRleCA8PSBjbHVzdGVyRW5kOyBpbmRleCsrKXtcbiAgICAgICAgICAgIGxldCBtYXJrID0gZ2x5cGhzW2luZGV4XTtcbiAgICAgICAgICAgIGxldCBtYXJrQm94ID0gbWFyay5jYm94O1xuICAgICAgICAgICAgbGV0IHBvc2l0aW9uID0gcG9zaXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgIGxldCBjb21iaW5pbmdDbGFzcyA9IHRoaXMuZ2V0Q29tYmluaW5nQ2xhc3MobWFyay5jb2RlUG9pbnRzWzBdKTtcbiAgICAgICAgICAgIGlmIChjb21iaW5pbmdDbGFzcyAhPT0gXCJOb3RfUmVvcmRlcmVkXCIpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi54T2Zmc2V0ID0gcG9zaXRpb24ueU9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgLy8geCBwb3NpdGlvbmluZ1xuICAgICAgICAgICAgICAgIHN3aXRjaChjb21iaW5pbmdDbGFzcyl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJEb3VibGVfQWJvdmVcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkRvdWJsZV9CZWxvd1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTFRSLiBUT0RPOiBSVEwgc3VwcG9ydC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnhPZmZzZXQgKz0gYmFzZUJveC5taW5YIC0gbWFya0JveC53aWR0aCAvIDIgLSBtYXJrQm94Lm1pblg7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkF0dGFjaGVkX0JlbG93X0xlZnRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkJlbG93X0xlZnRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFib3ZlX0xlZnRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxlZnQgYWxpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnhPZmZzZXQgKz0gYmFzZUJveC5taW5YIC0gbWFya0JveC5taW5YO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBdHRhY2hlZF9BYm92ZV9SaWdodFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQmVsb3dfUmlnaHRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFib3ZlX1JpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByaWdodCBhbGlnblxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueE9mZnNldCArPSBiYXNlQm94Lm1heFggLSBtYXJrQm94LndpZHRoIC0gbWFya0JveC5taW5YO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjZW50ZXIgYWxpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnhPZmZzZXQgKz0gYmFzZUJveC5taW5YICsgKGJhc2VCb3gud2lkdGggLSBtYXJrQm94LndpZHRoKSAvIDIgLSBtYXJrQm94Lm1pblg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHkgcG9zaXRpb25pbmdcbiAgICAgICAgICAgICAgICBzd2l0Y2goY29tYmluaW5nQ2xhc3Mpe1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRG91YmxlX0JlbG93XCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJCZWxvd19MZWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJCZWxvd1wiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQmVsb3dfUmlnaHRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkF0dGFjaGVkX0JlbG93X0xlZnRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkF0dGFjaGVkX0JlbG93XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgYSBzbWFsbCBnYXAgYmV0d2VlbiB0aGUgZ2x5cGhzIGlmIHRoZXkgYXJlIG5vdCBhdHRhY2hlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbWJpbmluZ0NsYXNzID09PSBcIkF0dGFjaGVkX0JlbG93X0xlZnRcIiB8fCBjb21iaW5pbmdDbGFzcyA9PT0gXCJBdHRhY2hlZF9CZWxvd1wiKSBiYXNlQm94Lm1pblkgKz0geUdhcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnlPZmZzZXQgPSAtYmFzZUJveC5taW5ZIC0gbWFya0JveC5tYXhZO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUJveC5taW5ZICs9IG1hcmtCb3guaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJEb3VibGVfQWJvdmVcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFib3ZlX0xlZnRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFib3ZlXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBYm92ZV9SaWdodFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQXR0YWNoZWRfQWJvdmVcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkF0dGFjaGVkX0Fib3ZlX1JpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgYSBzbWFsbCBnYXAgYmV0d2VlbiB0aGUgZ2x5cGhzIGlmIHRoZXkgYXJlIG5vdCBhdHRhY2hlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbWJpbmluZ0NsYXNzID09PSBcIkF0dGFjaGVkX0Fib3ZlXCIgfHwgY29tYmluaW5nQ2xhc3MgPT09IFwiQXR0YWNoZWRfQWJvdmVfUmlnaHRcIikgYmFzZUJveC5tYXhZICs9IHlHYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi55T2Zmc2V0ID0gYmFzZUJveC5tYXhZIC0gbWFya0JveC5taW5ZO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUJveC5tYXhZICs9IG1hcmtCb3guaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLnhBZHZhbmNlID0gcG9zaXRpb24ueUFkdmFuY2UgPSAwO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uLnhPZmZzZXQgKz0geE9mZnNldDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi55T2Zmc2V0ICs9IHlPZmZzZXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHhPZmZzZXQgLT0gcG9zaXRpb24ueEFkdmFuY2U7XG4gICAgICAgICAgICAgICAgeU9mZnNldCAtPSBwb3NpdGlvbi55QWR2YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGdldENvbWJpbmluZ0NsYXNzKGNvZGVQb2ludCkge1xuICAgICAgICBsZXQgY29tYmluaW5nQ2xhc3MgPSAoMCwgJDUyWklmJGdldENvbWJpbmluZ0NsYXNzKShjb2RlUG9pbnQpO1xuICAgICAgICAvLyBUaGFpIC8gTGFvIG5lZWQgc29tZSBwZXItY2hhcmFjdGVyIHdvcmtcbiAgICAgICAgaWYgKChjb2RlUG9pbnQgJiAtMjU2KSA9PT0gMHgwZTAwKSB7XG4gICAgICAgICAgICBpZiAoY29tYmluaW5nQ2xhc3MgPT09IFwiTm90X1Jlb3JkZXJlZFwiKSBzd2l0Y2goY29kZVBvaW50KXtcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzMTpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzNDpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzNTpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzNjpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzNzpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGU0NzpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGU0YzpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGUzZDpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGU0ZTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQWJvdmVfUmlnaHRcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGViMTpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGViNDpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGViNTpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGViNjpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGViNzpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGViYjpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGVjYzpcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGVjZDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQWJvdmVcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDB4MGViYzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQmVsb3dcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvZGVQb2ludCA9PT0gMHgwZTNhKSByZXR1cm4gXCJCZWxvd19SaWdodFwiO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaChjb21iaW5pbmdDbGFzcyl7XG4gICAgICAgICAgICAvLyBIZWJyZXdcbiAgICAgICAgICAgIGNhc2UgXCJDQ0MxMFwiOlxuICAgICAgICAgICAgY2FzZSBcIkNDQzExXCI6XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMTJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJDQ0MxM1wiOlxuICAgICAgICAgICAgY2FzZSBcIkNDQzE0XCI6XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMTVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJDQ0MxNlwiOlxuICAgICAgICAgICAgY2FzZSBcIkNDQzE3XCI6XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMThcIjpcbiAgICAgICAgICAgIGNhc2UgXCJDQ0MyMFwiOlxuICAgICAgICAgICAgY2FzZSBcIkNDQzIyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQmVsb3dcIjtcbiAgICAgICAgICAgIGNhc2UgXCJDQ0MyM1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkF0dGFjaGVkX0Fib3ZlXCI7XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMjRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBYm92ZV9SaWdodFwiO1xuICAgICAgICAgICAgY2FzZSBcIkNDQzI1XCI6XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMTlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBYm92ZV9MZWZ0XCI7XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMjZcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBYm92ZVwiO1xuICAgICAgICAgICAgY2FzZSBcIkNDQzIxXCI6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBBcmFiaWMgYW5kIFN5cmlhY1xuICAgICAgICAgICAgY2FzZSBcIkNDQzI3XCI6XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMjhcIjpcbiAgICAgICAgICAgIGNhc2UgXCJDQ0MzMFwiOlxuICAgICAgICAgICAgY2FzZSBcIkNDQzMxXCI6XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMzNcIjpcbiAgICAgICAgICAgIGNhc2UgXCJDQ0MzNFwiOlxuICAgICAgICAgICAgY2FzZSBcIkNDQzM1XCI6XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMzZcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBYm92ZVwiO1xuICAgICAgICAgICAgY2FzZSBcIkNDQzI5XCI6XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMzJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJCZWxvd1wiO1xuICAgICAgICAgICAgLy8gVGhhaVxuICAgICAgICAgICAgY2FzZSBcIkNDQzEwM1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkJlbG93X1JpZ2h0XCI7XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMTA3XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQWJvdmVfUmlnaHRcIjtcbiAgICAgICAgICAgIC8vIExhb1xuICAgICAgICAgICAgY2FzZSBcIkNDQzExOFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkJlbG93XCI7XG4gICAgICAgICAgICBjYXNlIFwiQ0NDMTIyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQWJvdmVcIjtcbiAgICAgICAgICAgIC8vIFRpYmV0YW5cbiAgICAgICAgICAgIGNhc2UgXCJDQ0MxMjlcIjpcbiAgICAgICAgICAgIGNhc2UgXCJDQ0MxMzJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJCZWxvd1wiO1xuICAgICAgICAgICAgY2FzZSBcIkNDQzEzMFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkFib3ZlXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbWJpbmluZ0NsYXNzO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihmb250KXtcbiAgICAgICAgdGhpcy5mb250ID0gZm9udDtcbiAgICB9XG59XG5cblxuY2xhc3MgJGYzNDYwMGFiOWQ3ZjcwZDgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgYm91bmRpbmcgYm94XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqLyBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heFggLSB0aGlzLm1pblg7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBib3VuZGluZyBib3hcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heFkgLSB0aGlzLm1pblk7XG4gICAgfVxuICAgIGFkZFBvaW50KHgsIHkpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHgpICE9PSBJbmZpbml0eSkge1xuICAgICAgICAgICAgaWYgKHggPCB0aGlzLm1pblgpIHRoaXMubWluWCA9IHg7XG4gICAgICAgICAgICBpZiAoeCA+IHRoaXMubWF4WCkgdGhpcy5tYXhYID0geDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTWF0aC5hYnMoeSkgIT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICBpZiAoeSA8IHRoaXMubWluWSkgdGhpcy5taW5ZID0geTtcbiAgICAgICAgICAgIGlmICh5ID4gdGhpcy5tYXhZKSB0aGlzLm1heFkgPSB5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvcHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgJGYzNDYwMGFiOWQ3ZjcwZDgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSh0aGlzLm1pblgsIHRoaXMubWluWSwgdGhpcy5tYXhYLCB0aGlzLm1heFkpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihtaW5YID0gSW5maW5pdHksIG1pblkgPSBJbmZpbml0eSwgbWF4WCA9IC1JbmZpbml0eSwgbWF4WSA9IC1JbmZpbml0eSl7XG4gICAgICAgIC8qKlxuICAgICAqIFRoZSBtaW5pbXVtIFggcG9zaXRpb24gaW4gdGhlIGJvdW5kaW5nIGJveFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovIHRoaXMubWluWCA9IG1pblg7XG4gICAgICAgIC8qKlxuICAgICAqIFRoZSBtaW5pbXVtIFkgcG9zaXRpb24gaW4gdGhlIGJvdW5kaW5nIGJveFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovIHRoaXMubWluWSA9IG1pblk7XG4gICAgICAgIC8qKlxuICAgICAqIFRoZSBtYXhtaW11bSBYIHBvc2l0aW9uIGluIHRoZSBib3VuZGluZyBib3hcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqLyB0aGlzLm1heFggPSBtYXhYO1xuICAgICAgICAvKipcbiAgICAgKiBUaGUgbWF4bWltdW0gWSBwb3NpdGlvbiBpbiB0aGUgYm91bmRpbmcgYm94XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi8gdGhpcy5tYXhZID0gbWF4WTtcbiAgICB9XG59XG5cblxuXG4vLyBUaGlzIG1hcHMgdGhlIFVuaWNvZGUgU2NyaXB0IHByb3BlcnR5IHRvIGFuIE9wZW5UeXBlIHNjcmlwdCB0YWdcbi8vIERhdGEgZnJvbSBodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9vdHNwZWMvc2NyaXB0dGFncy5odG1cbi8vIGFuZCBodHRwOi8vd3d3LnVuaWNvZGUub3JnL1B1YmxpYy9VTklEQVRBL1Byb3BlcnR5VmFsdWVBbGlhc2VzLnR4dC5cbmNvbnN0ICQxMzBkMWE2NDJlYmNkMmI3JHZhciRVTklDT0RFX1NDUklQVFMgPSB7XG4gICAgQ2F1Y2FzaWFuX0FsYmFuaWFuOiBcImFnaGJcIixcbiAgICBBcmFiaWM6IFwiYXJhYlwiLFxuICAgIEltcGVyaWFsX0FyYW1haWM6IFwiYXJtaVwiLFxuICAgIEFybWVuaWFuOiBcImFybW5cIixcbiAgICBBdmVzdGFuOiBcImF2c3RcIixcbiAgICBCYWxpbmVzZTogXCJiYWxpXCIsXG4gICAgQmFtdW06IFwiYmFtdVwiLFxuICAgIEJhc3NhX1ZhaDogXCJiYXNzXCIsXG4gICAgQmF0YWs6IFwiYmF0a1wiLFxuICAgIEJlbmdhbGk6IFtcbiAgICAgICAgXCJibmcyXCIsXG4gICAgICAgIFwiYmVuZ1wiXG4gICAgXSxcbiAgICBCb3BvbW9mbzogXCJib3BvXCIsXG4gICAgQnJhaG1pOiBcImJyYWhcIixcbiAgICBCcmFpbGxlOiBcImJyYWlcIixcbiAgICBCdWdpbmVzZTogXCJidWdpXCIsXG4gICAgQnVoaWQ6IFwiYnVoZFwiLFxuICAgIENoYWttYTogXCJjYWttXCIsXG4gICAgQ2FuYWRpYW5fQWJvcmlnaW5hbDogXCJjYW5zXCIsXG4gICAgQ2FyaWFuOiBcImNhcmlcIixcbiAgICBDaGFtOiBcImNoYW1cIixcbiAgICBDaGVyb2tlZTogXCJjaGVyXCIsXG4gICAgQ29wdGljOiBcImNvcHRcIixcbiAgICBDeXByaW90OiBcImNwcnRcIixcbiAgICBDeXJpbGxpYzogXCJjeXJsXCIsXG4gICAgRGV2YW5hZ2FyaTogW1xuICAgICAgICBcImRldjJcIixcbiAgICAgICAgXCJkZXZhXCJcbiAgICBdLFxuICAgIERlc2VyZXQ6IFwiZHNydFwiLFxuICAgIER1cGxveWFuOiBcImR1cGxcIixcbiAgICBFZ3lwdGlhbl9IaWVyb2dseXBoczogXCJlZ3lwXCIsXG4gICAgRWxiYXNhbjogXCJlbGJhXCIsXG4gICAgRXRoaW9waWM6IFwiZXRoaVwiLFxuICAgIEdlb3JnaWFuOiBcImdlb3JcIixcbiAgICBHbGFnb2xpdGljOiBcImdsYWdcIixcbiAgICBHb3RoaWM6IFwiZ290aFwiLFxuICAgIEdyYW50aGE6IFwiZ3JhblwiLFxuICAgIEdyZWVrOiBcImdyZWtcIixcbiAgICBHdWphcmF0aTogW1xuICAgICAgICBcImdqcjJcIixcbiAgICAgICAgXCJndWpyXCJcbiAgICBdLFxuICAgIEd1cm11a2hpOiBbXG4gICAgICAgIFwiZ3VyMlwiLFxuICAgICAgICBcImd1cnVcIlxuICAgIF0sXG4gICAgSGFuZ3VsOiBcImhhbmdcIixcbiAgICBIYW46IFwiaGFuaVwiLFxuICAgIEhhbnVub286IFwiaGFub1wiLFxuICAgIEhlYnJldzogXCJoZWJyXCIsXG4gICAgSGlyYWdhbmE6IFwiaGlyYVwiLFxuICAgIFBhaGF3aF9IbW9uZzogXCJobW5nXCIsXG4gICAgS2F0YWthbmFfT3JfSGlyYWdhbmE6IFwiaHJrdFwiLFxuICAgIE9sZF9JdGFsaWM6IFwiaXRhbFwiLFxuICAgIEphdmFuZXNlOiBcImphdmFcIixcbiAgICBLYXlhaF9MaTogXCJrYWxpXCIsXG4gICAgS2F0YWthbmE6IFwia2FuYVwiLFxuICAgIEtoYXJvc2h0aGk6IFwia2hhclwiLFxuICAgIEtobWVyOiBcImtobXJcIixcbiAgICBLaG9qa2k6IFwia2hvalwiLFxuICAgIEthbm5hZGE6IFtcbiAgICAgICAgXCJrbmQyXCIsXG4gICAgICAgIFwia25kYVwiXG4gICAgXSxcbiAgICBLYWl0aGk6IFwia3RoaVwiLFxuICAgIFRhaV9UaGFtOiBcImxhbmFcIixcbiAgICBMYW86IFwibGFvIFwiLFxuICAgIExhdGluOiBcImxhdG5cIixcbiAgICBMZXBjaGE6IFwibGVwY1wiLFxuICAgIExpbWJ1OiBcImxpbWJcIixcbiAgICBMaW5lYXJfQTogXCJsaW5hXCIsXG4gICAgTGluZWFyX0I6IFwibGluYlwiLFxuICAgIExpc3U6IFwibGlzdVwiLFxuICAgIEx5Y2lhbjogXCJseWNpXCIsXG4gICAgTHlkaWFuOiBcImx5ZGlcIixcbiAgICBNYWhhamFuaTogXCJtYWhqXCIsXG4gICAgTWFuZGFpYzogXCJtYW5kXCIsXG4gICAgTWFuaWNoYWVhbjogXCJtYW5pXCIsXG4gICAgTWVuZGVfS2lrYWt1aTogXCJtZW5kXCIsXG4gICAgTWVyb2l0aWNfQ3Vyc2l2ZTogXCJtZXJjXCIsXG4gICAgTWVyb2l0aWNfSGllcm9nbHlwaHM6IFwibWVyb1wiLFxuICAgIE1hbGF5YWxhbTogW1xuICAgICAgICBcIm1sbTJcIixcbiAgICAgICAgXCJtbHltXCJcbiAgICBdLFxuICAgIE1vZGk6IFwibW9kaVwiLFxuICAgIE1vbmdvbGlhbjogXCJtb25nXCIsXG4gICAgTXJvOiBcIm1yb29cIixcbiAgICBNZWV0ZWlfTWF5ZWs6IFwibXRlaVwiLFxuICAgIE15YW5tYXI6IFtcbiAgICAgICAgXCJteW0yXCIsXG4gICAgICAgIFwibXltclwiXG4gICAgXSxcbiAgICBPbGRfTm9ydGhfQXJhYmlhbjogXCJuYXJiXCIsXG4gICAgTmFiYXRhZWFuOiBcIm5iYXRcIixcbiAgICBOa286IFwibmtvIFwiLFxuICAgIE9naGFtOiBcIm9nYW1cIixcbiAgICBPbF9DaGlraTogXCJvbGNrXCIsXG4gICAgT2xkX1R1cmtpYzogXCJvcmtoXCIsXG4gICAgT3JpeWE6IFtcbiAgICAgICAgXCJvcnkyXCIsXG4gICAgICAgIFwib3J5YVwiXG4gICAgXSxcbiAgICBPc21hbnlhOiBcIm9zbWFcIixcbiAgICBQYWxteXJlbmU6IFwicGFsbVwiLFxuICAgIFBhdV9DaW5fSGF1OiBcInBhdWNcIixcbiAgICBPbGRfUGVybWljOiBcInBlcm1cIixcbiAgICBQaGFnc19QYTogXCJwaGFnXCIsXG4gICAgSW5zY3JpcHRpb25hbF9QYWhsYXZpOiBcInBobGlcIixcbiAgICBQc2FsdGVyX1BhaGxhdmk6IFwicGhscFwiLFxuICAgIFBob2VuaWNpYW46IFwicGhueFwiLFxuICAgIE1pYW86IFwicGxyZFwiLFxuICAgIEluc2NyaXB0aW9uYWxfUGFydGhpYW46IFwicHJ0aVwiLFxuICAgIFJlamFuZzogXCJyam5nXCIsXG4gICAgUnVuaWM6IFwicnVuclwiLFxuICAgIFNhbWFyaXRhbjogXCJzYW1yXCIsXG4gICAgT2xkX1NvdXRoX0FyYWJpYW46IFwic2FyYlwiLFxuICAgIFNhdXJhc2h0cmE6IFwic2F1clwiLFxuICAgIFNoYXZpYW46IFwic2hhd1wiLFxuICAgIFNoYXJhZGE6IFwic2hyZFwiLFxuICAgIFNpZGRoYW06IFwic2lkZFwiLFxuICAgIEtodWRhd2FkaTogXCJzaW5kXCIsXG4gICAgU2luaGFsYTogXCJzaW5oXCIsXG4gICAgU29yYV9Tb21wZW5nOiBcInNvcmFcIixcbiAgICBTdW5kYW5lc2U6IFwic3VuZFwiLFxuICAgIFN5bG90aV9OYWdyaTogXCJzeWxvXCIsXG4gICAgU3lyaWFjOiBcInN5cmNcIixcbiAgICBUYWdiYW53YTogXCJ0YWdiXCIsXG4gICAgVGFrcmk6IFwidGFrclwiLFxuICAgIFRhaV9MZTogXCJ0YWxlXCIsXG4gICAgTmV3X1RhaV9MdWU6IFwidGFsdVwiLFxuICAgIFRhbWlsOiBbXG4gICAgICAgIFwidG1sMlwiLFxuICAgICAgICBcInRhbWxcIlxuICAgIF0sXG4gICAgVGFpX1ZpZXQ6IFwidGF2dFwiLFxuICAgIFRlbHVndTogW1xuICAgICAgICBcInRlbDJcIixcbiAgICAgICAgXCJ0ZWx1XCJcbiAgICBdLFxuICAgIFRpZmluYWdoOiBcInRmbmdcIixcbiAgICBUYWdhbG9nOiBcInRnbGdcIixcbiAgICBUaGFhbmE6IFwidGhhYVwiLFxuICAgIFRoYWk6IFwidGhhaVwiLFxuICAgIFRpYmV0YW46IFwidGlidFwiLFxuICAgIFRpcmh1dGE6IFwidGlyaFwiLFxuICAgIFVnYXJpdGljOiBcInVnYXJcIixcbiAgICBWYWk6IFwidmFpIFwiLFxuICAgIFdhcmFuZ19DaXRpOiBcIndhcmFcIixcbiAgICBPbGRfUGVyc2lhbjogXCJ4cGVvXCIsXG4gICAgQ3VuZWlmb3JtOiBcInhzdXhcIixcbiAgICBZaTogXCJ5aSAgXCIsXG4gICAgSW5oZXJpdGVkOiBcInppbmhcIixcbiAgICBDb21tb246IFwienl5eVwiLFxuICAgIFVua25vd246IFwienp6elwiXG59O1xuY29uc3QgJDEzMGQxYTY0MmViY2QyYjckdmFyJE9QRU5UWVBFX1NDUklQVFMgPSB7fTtcbmZvcihsZXQgc2NyaXB0IGluICQxMzBkMWE2NDJlYmNkMmI3JHZhciRVTklDT0RFX1NDUklQVFMpe1xuICAgIGxldCB0YWcgPSAkMTMwZDFhNjQyZWJjZDJiNyR2YXIkVU5JQ09ERV9TQ1JJUFRTW3NjcmlwdF07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGFnKSkgZm9yIChsZXQgdCBvZiB0YWcpJDEzMGQxYTY0MmViY2QyYjckdmFyJE9QRU5UWVBFX1NDUklQVFNbdF0gPSBzY3JpcHQ7XG4gICAgZWxzZSAkMTMwZDFhNjQyZWJjZDJiNyR2YXIkT1BFTlRZUEVfU0NSSVBUU1t0YWddID0gc2NyaXB0O1xufVxuZnVuY3Rpb24gJDEzMGQxYTY0MmViY2QyYjckZXhwb3J0JGIzMmYwYjVmNjlkNjVlNTEoc2NyaXB0MSkge1xuICAgIHJldHVybiAkMTMwZDFhNjQyZWJjZDJiNyR2YXIkVU5JQ09ERV9TQ1JJUFRTW3NjcmlwdDFdO1xufVxuZnVuY3Rpb24gJDEzMGQxYTY0MmViY2QyYjckZXhwb3J0JGNlNTBlODJmMTJhODI3YTQodGFnKSB7XG4gICAgcmV0dXJuICQxMzBkMWE2NDJlYmNkMmI3JHZhciRPUEVOVFlQRV9TQ1JJUFRTW3RhZ107XG59XG5mdW5jdGlvbiAkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkZTVjYjI1ZTIwNGZiODQ1MChzdHJpbmcpIHtcbiAgICBsZXQgbGVuID0gc3RyaW5nLmxlbmd0aDtcbiAgICBsZXQgaWR4ID0gMDtcbiAgICB3aGlsZShpZHggPCBsZW4pe1xuICAgICAgICBsZXQgY29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGlkeCsrKTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIGhpZ2ggc3Vycm9nYXRlXG4gICAgICAgIGlmICgweGQ4MDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4ZGJmZiAmJiBpZHggPCBsZW4pIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gc3RyaW5nLmNoYXJDb2RlQXQoaWR4KTtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBsb3cgc3Vycm9nYXRlXG4gICAgICAgICAgICBpZiAoMHhkYzAwIDw9IG5leHQgJiYgbmV4dCA8PSAweGRmZmYpIHtcbiAgICAgICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgICAgICBjb2RlID0gKChjb2RlICYgMHgzRkYpIDw8IDEwKSArIChuZXh0ICYgMHgzRkYpICsgMHgxMDAwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgc2NyaXB0MiA9ICgwLCAkNTJaSWYkZ2V0U2NyaXB0KShjb2RlKTtcbiAgICAgICAgaWYgKHNjcmlwdDIgIT09IFwiQ29tbW9uXCIgJiYgc2NyaXB0MiAhPT0gXCJJbmhlcml0ZWRcIiAmJiBzY3JpcHQyICE9PSBcIlVua25vd25cIikgcmV0dXJuICQxMzBkMWE2NDJlYmNkMmI3JHZhciRVTklDT0RFX1NDUklQVFNbc2NyaXB0Ml07XG4gICAgfVxuICAgIHJldHVybiAkMTMwZDFhNjQyZWJjZDJiNyR2YXIkVU5JQ09ERV9TQ1JJUFRTLlVua25vd247XG59XG5mdW5jdGlvbiAkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkMTZmYWIwNzU3Y2ZjMjIzZChjb2RlUG9pbnRzKSB7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBsZXQgY29kZVBvaW50ID0gY29kZVBvaW50c1tpXTtcbiAgICAgICAgbGV0IHNjcmlwdDMgPSAoMCwgJDUyWklmJGdldFNjcmlwdCkoY29kZVBvaW50KTtcbiAgICAgICAgaWYgKHNjcmlwdDMgIT09IFwiQ29tbW9uXCIgJiYgc2NyaXB0MyAhPT0gXCJJbmhlcml0ZWRcIiAmJiBzY3JpcHQzICE9PSBcIlVua25vd25cIikgcmV0dXJuICQxMzBkMWE2NDJlYmNkMmI3JHZhciRVTklDT0RFX1NDUklQVFNbc2NyaXB0M107XG4gICAgfVxuICAgIHJldHVybiAkMTMwZDFhNjQyZWJjZDJiNyR2YXIkVU5JQ09ERV9TQ1JJUFRTLlVua25vd247XG59XG4vLyBUaGUgc2NyaXB0cyBpbiB0aGlzIG1hcCBhcmUgd3JpdHRlbiBmcm9tIHJpZ2h0IHRvIGxlZnRcbmNvbnN0ICQxMzBkMWE2NDJlYmNkMmI3JHZhciRSVEwgPSB7XG4gICAgYXJhYjogdHJ1ZSxcbiAgICBoZWJyOiB0cnVlLFxuICAgIHN5cmM6IHRydWUsXG4gICAgdGhhYTogdHJ1ZSxcbiAgICBjcHJ0OiB0cnVlLFxuICAgIGtoYXI6IHRydWUsXG4gICAgcGhueDogdHJ1ZSxcbiAgICBcIm5rbyBcIjogdHJ1ZSxcbiAgICBseWRpOiB0cnVlLFxuICAgIGF2c3Q6IHRydWUsXG4gICAgYXJtaTogdHJ1ZSxcbiAgICBwaGxpOiB0cnVlLFxuICAgIHBydGk6IHRydWUsXG4gICAgc2FyYjogdHJ1ZSxcbiAgICBvcmtoOiB0cnVlLFxuICAgIHNhbXI6IHRydWUsXG4gICAgbWFuZDogdHJ1ZSxcbiAgICBtZXJjOiB0cnVlLFxuICAgIG1lcm86IHRydWUsXG4gICAgLy8gVW5pY29kZSA3LjAgKG5vdCBsaXN0ZWQgb24gaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3R5cG9ncmFwaHkvb3RzcGVjL3NjcmlwdHRhZ3MuaHRtKVxuICAgIG1hbmk6IHRydWUsXG4gICAgbWVuZDogdHJ1ZSxcbiAgICBuYmF0OiB0cnVlLFxuICAgIG5hcmI6IHRydWUsXG4gICAgcGFsbTogdHJ1ZSxcbiAgICBwaGxwOiB0cnVlIC8vIFBzYWx0ZXIgUGFobGF2aVxufTtcbmZ1bmN0aW9uICQxMzBkMWE2NDJlYmNkMmI3JGV4cG9ydCQ5ZmRkYjlkMGRkN2Q4YTU0KHNjcmlwdDQpIHtcbiAgICBpZiAoJDEzMGQxYTY0MmViY2QyYjckdmFyJFJUTFtzY3JpcHQ0XSkgcmV0dXJuIFwicnRsXCI7XG4gICAgcmV0dXJuIFwibHRyXCI7XG59XG5cblxuY2xhc3MgJGJlMDdiM2U5N2E0MjY4N2EkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgLyoqXG4gICAqIFRoZSB0b3RhbCBhZHZhbmNlIHdpZHRoIG9mIHRoZSBydW4uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqLyBnZXQgYWR2YW5jZVdpZHRoKCkge1xuICAgICAgICBsZXQgd2lkdGggPSAwO1xuICAgICAgICBmb3IgKGxldCBwb3NpdGlvbiBvZiB0aGlzLnBvc2l0aW9ucyl3aWR0aCArPSBwb3NpdGlvbi54QWR2YW5jZTtcbiAgICAgICAgcmV0dXJuIHdpZHRoO1xuICAgIH1cbiAgICAvKipcbiAgKiBUaGUgdG90YWwgYWR2YW5jZSBoZWlnaHQgb2YgdGhlIHJ1bi5cbiAgKiBAdHlwZSB7bnVtYmVyfVxuICAqLyBnZXQgYWR2YW5jZUhlaWdodCgpIHtcbiAgICAgICAgbGV0IGhlaWdodCA9IDA7XG4gICAgICAgIGZvciAobGV0IHBvc2l0aW9uIG9mIHRoaXMucG9zaXRpb25zKWhlaWdodCArPSBwb3NpdGlvbi55QWR2YW5jZTtcbiAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICogVGhlIGJvdW5kaW5nIGJveCBjb250YWluaW5nIGFsbCBnbHlwaHMgaW4gdGhlIHJ1bi5cbiAgKiBAdHlwZSB7QkJveH1cbiAgKi8gZ2V0IGJib3goKSB7XG4gICAgICAgIGxldCBiYm94ID0gbmV3ICgwLCAkZjM0NjAwYWI5ZDdmNzBkOCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICBsZXQgeSA9IDA7XG4gICAgICAgIGZvcihsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuZ2x5cGhzLmxlbmd0aDsgaW5kZXgrKyl7XG4gICAgICAgICAgICBsZXQgZ2x5cGggPSB0aGlzLmdseXBoc1tpbmRleF07XG4gICAgICAgICAgICBsZXQgcCA9IHRoaXMucG9zaXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgIGxldCBiID0gZ2x5cGguYmJveDtcbiAgICAgICAgICAgIGJib3guYWRkUG9pbnQoYi5taW5YICsgeCArIHAueE9mZnNldCwgYi5taW5ZICsgeSArIHAueU9mZnNldCk7XG4gICAgICAgICAgICBiYm94LmFkZFBvaW50KGIubWF4WCArIHggKyBwLnhPZmZzZXQsIGIubWF4WSArIHkgKyBwLnlPZmZzZXQpO1xuICAgICAgICAgICAgeCArPSBwLnhBZHZhbmNlO1xuICAgICAgICAgICAgeSArPSBwLnlBZHZhbmNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYm94O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihnbHlwaHMsIGZlYXR1cmVzLCBzY3JpcHQsIGxhbmd1YWdlLCBkaXJlY3Rpb24pe1xuICAgICAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBHbHlwaCBvYmplY3RzIGluIHRoZSBydW5cbiAgICAgKiBAdHlwZSB7R2x5cGhbXX1cbiAgICAgKi8gdGhpcy5nbHlwaHMgPSBnbHlwaHM7XG4gICAgICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIEdseXBoUG9zaXRpb24gb2JqZWN0cyBmb3IgZWFjaCBnbHlwaCBpbiB0aGUgcnVuXG4gICAgICogQHR5cGUge0dseXBoUG9zaXRpb25bXX1cbiAgICAgKi8gdGhpcy5wb3NpdGlvbnMgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgKiBUaGUgc2NyaXB0IHRoYXQgd2FzIHJlcXVlc3RlZCBmb3Igc2hhcGluZy4gVGhpcyB3YXMgZWl0aGVyIHBhc3NlZCBpbiBvciBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5LlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuICAgICAgICAvKipcbiAgICAgKiBUaGUgbGFuZ3VhZ2UgcmVxdWVzdGVkIGZvciBzaGFwaW5nLCBhcyBwYXNzZWQgaW4uIElmIGBudWxsYCwgdGhlIGRlZmF1bHQgbGFuZ3VhZ2UgZm9yIHRoZVxuICAgICAqIHNjcmlwdCB3YXMgdXNlZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqLyB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2UgfHwgbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICogVGhlIGRpcmVjdGlvbiByZXF1ZXN0ZWQgZm9yIHNoYXBpbmcsIGFzIHBhc3NlZCBpbiAoZWl0aGVyIGx0ciBvciBydGwpLlxuICAgICAqIElmIGBudWxsYCwgdGhlIGRlZmF1bHQgZGlyZWN0aW9uIG9mIHRoZSBzY3JpcHQgaXMgdXNlZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqLyB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbiB8fCAkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkOWZkZGI5ZDBkZDdkOGE1NChzY3JpcHQpO1xuICAgICAgICAvKipcbiAgICAgKiBUaGUgZmVhdHVyZXMgcmVxdWVzdGVkIGR1cmluZyBzaGFwaW5nLiBUaGlzIGlzIGEgY29tYmluYXRpb24gb2YgdXNlclxuICAgICAqIHNwZWNpZmllZCBmZWF0dXJlcyBhbmQgZmVhdHVyZXMgY2hvc2VuIGJ5IHRoZSBzaGFwZXIuXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKi8gdGhpcy5mZWF0dXJlcyA9IHt9O1xuICAgICAgICAvLyBDb252ZXJ0IGZlYXR1cmVzIHRvIGFuIG9iamVjdFxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmZWF0dXJlcykpIGZvciAobGV0IHRhZyBvZiBmZWF0dXJlcyl0aGlzLmZlYXR1cmVzW3RhZ10gPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgZmVhdHVyZXMgPT09IFwib2JqZWN0XCIpIHRoaXMuZmVhdHVyZXMgPSBmZWF0dXJlcztcbiAgICB9XG59XG5cblxuY2xhc3MgJDFhYzc1ZDlhNTViNjdmMDEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgY29uc3RydWN0b3IoeEFkdmFuY2UgPSAwLCB5QWR2YW5jZSA9IDAsIHhPZmZzZXQgPSAwLCB5T2Zmc2V0ID0gMCl7XG4gICAgICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgdG8gbW92ZSB0aGUgdmlydHVhbCBwZW4gaW4gdGhlIFggZGlyZWN0aW9uIGFmdGVyIHJlbmRlcmluZyB0aGlzIGdseXBoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovIHRoaXMueEFkdmFuY2UgPSB4QWR2YW5jZTtcbiAgICAgICAgLyoqXG4gICAgICogVGhlIGFtb3VudCB0byBtb3ZlIHRoZSB2aXJ0dWFsIHBlbiBpbiB0aGUgWSBkaXJlY3Rpb24gYWZ0ZXIgcmVuZGVyaW5nIHRoaXMgZ2x5cGguXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi8gdGhpcy55QWR2YW5jZSA9IHlBZHZhbmNlO1xuICAgICAgICAvKipcbiAgICAgKiBUaGUgb2Zmc2V0IGZyb20gdGhlIHBlbiBwb3NpdGlvbiBpbiB0aGUgWCBkaXJlY3Rpb24gYXQgd2hpY2ggdG8gcmVuZGVyIHRoaXMgZ2x5cGguXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi8gdGhpcy54T2Zmc2V0ID0geE9mZnNldDtcbiAgICAgICAgLyoqXG4gICAgICogVGhlIG9mZnNldCBmcm9tIHRoZSBwZW4gcG9zaXRpb24gaW4gdGhlIFkgZGlyZWN0aW9uIGF0IHdoaWNoIHRvIHJlbmRlciB0aGlzIGdseXBoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovIHRoaXMueU9mZnNldCA9IHlPZmZzZXQ7XG4gICAgfVxufVxuXG5cblxuLy8gc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9mb250cy9UcnVlVHlwZS1SZWZlcmVuY2UtTWFudWFsL1JNMDkvQXBwZW5kaXhGLmh0bWxcbi8vIGFuZCAvU3lzdGVtL0xpYnJhcnkvRnJhbWV3b3Jrcy9Db3JlVGV4dC5mcmFtZXdvcmsvVmVyc2lvbnMvQS9IZWFkZXJzL1NGTlRMYXlvdXRUeXBlcy5oIG9uIGEgTWFjXG5jb25zdCAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZXMgPSB7XG4gICAgYWxsVHlwb2dyYXBoaWNGZWF0dXJlczoge1xuICAgICAgICBjb2RlOiAwLFxuICAgICAgICBleGNsdXNpdmU6IGZhbHNlLFxuICAgICAgICBhbGxUeXBlRmVhdHVyZXM6IDBcbiAgICB9LFxuICAgIGxpZ2F0dXJlczoge1xuICAgICAgICBjb2RlOiAxLFxuICAgICAgICBleGNsdXNpdmU6IGZhbHNlLFxuICAgICAgICByZXF1aXJlZExpZ2F0dXJlczogMCxcbiAgICAgICAgY29tbW9uTGlnYXR1cmVzOiAyLFxuICAgICAgICByYXJlTGlnYXR1cmVzOiA0LFxuICAgICAgICAvLyBsb2dvczogNlxuICAgICAgICByZWJ1c1BpY3R1cmVzOiA4LFxuICAgICAgICBkaXBodGhvbmdMaWdhdHVyZXM6IDEwLFxuICAgICAgICBzcXVhcmVkTGlnYXR1cmVzOiAxMixcbiAgICAgICAgYWJicmV2U3F1YXJlZExpZ2F0dXJlczogMTQsXG4gICAgICAgIHN5bWJvbExpZ2F0dXJlczogMTYsXG4gICAgICAgIGNvbnRleHR1YWxMaWdhdHVyZXM6IDE4LFxuICAgICAgICBoaXN0b3JpY2FsTGlnYXR1cmVzOiAyMFxuICAgIH0sXG4gICAgY3Vyc2l2ZUNvbm5lY3Rpb246IHtcbiAgICAgICAgY29kZTogMixcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICB1bmNvbm5lY3RlZDogMCxcbiAgICAgICAgcGFydGlhbGx5Q29ubmVjdGVkOiAxLFxuICAgICAgICBjdXJzaXZlOiAyXG4gICAgfSxcbiAgICBsZXR0ZXJDYXNlOiB7XG4gICAgICAgIGNvZGU6IDMsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZVxuICAgIH0sXG4gICAgLy8gdXBwZXJBbmRMb3dlckNhc2U6IDAgICAgICAgICAgIyBkZXByZWNhdGVkXG4gICAgLy8gYWxsQ2FwczogMSAgICAgICAgICAgICAgICAgICAgIyBkZXByZWNhdGVkXG4gICAgLy8gYWxsTG93ZXJDYXNlOiAyICAgICAgICAgICAgICAgIyBkZXByZWNhdGVkXG4gICAgLy8gc21hbGxDYXBzOiAzICAgICAgICAgICAgICAgICAgIyBkZXByZWNhdGVkXG4gICAgLy8gaW5pdGlhbENhcHM6IDQgICAgICAgICAgICAgICAgIyBkZXByZWNhdGVkXG4gICAgLy8gaW5pdGlhbENhcHNBbmRTbWFsbENhcHM6IDUgICAgIyBkZXByZWNhdGVkXG4gICAgdmVydGljYWxTdWJzdGl0dXRpb246IHtcbiAgICAgICAgY29kZTogNCxcbiAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgc3Vic3RpdHV0ZVZlcnRpY2FsRm9ybXM6IDBcbiAgICB9LFxuICAgIGxpbmd1aXN0aWNSZWFycmFuZ2VtZW50OiB7XG4gICAgICAgIGNvZGU6IDUsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIGxpbmd1aXN0aWNSZWFycmFuZ2VtZW50OiAwXG4gICAgfSxcbiAgICBudW1iZXJTcGFjaW5nOiB7XG4gICAgICAgIGNvZGU6IDYsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgbW9ub3NwYWNlZE51bWJlcnM6IDAsXG4gICAgICAgIHByb3BvcnRpb25hbE51bWJlcnM6IDEsXG4gICAgICAgIHRoaXJkV2lkdGhOdW1iZXJzOiAyLFxuICAgICAgICBxdWFydGVyV2lkdGhOdW1iZXJzOiAzXG4gICAgfSxcbiAgICBzbWFydFN3YXNoOiB7XG4gICAgICAgIGNvZGU6IDgsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIHdvcmRJbml0aWFsU3dhc2hlczogMCxcbiAgICAgICAgd29yZEZpbmFsU3dhc2hlczogMixcbiAgICAgICAgLy8gbGluZUluaXRpYWxTd2FzaGVzOiA0XG4gICAgICAgIC8vIGxpbmVGaW5hbFN3YXNoZXM6IDZcbiAgICAgICAgbm9uRmluYWxTd2FzaGVzOiA4XG4gICAgfSxcbiAgICBkaWFjcml0aWNzOiB7XG4gICAgICAgIGNvZGU6IDksXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgc2hvd0RpYWNyaXRpY3M6IDAsXG4gICAgICAgIGhpZGVEaWFjcml0aWNzOiAxLFxuICAgICAgICBkZWNvbXBvc2VEaWFjcml0aWNzOiAyXG4gICAgfSxcbiAgICB2ZXJ0aWNhbFBvc2l0aW9uOiB7XG4gICAgICAgIGNvZGU6IDEwLFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIG5vcm1hbFBvc2l0aW9uOiAwLFxuICAgICAgICBzdXBlcmlvcnM6IDEsXG4gICAgICAgIGluZmVyaW9yczogMixcbiAgICAgICAgb3JkaW5hbHM6IDMsXG4gICAgICAgIHNjaWVudGlmaWNJbmZlcmlvcnM6IDRcbiAgICB9LFxuICAgIGZyYWN0aW9uczoge1xuICAgICAgICBjb2RlOiAxMSxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBub0ZyYWN0aW9uczogMCxcbiAgICAgICAgdmVydGljYWxGcmFjdGlvbnM6IDEsXG4gICAgICAgIGRpYWdvbmFsRnJhY3Rpb25zOiAyXG4gICAgfSxcbiAgICBvdmVybGFwcGluZ0NoYXJhY3RlcnM6IHtcbiAgICAgICAgY29kZTogMTMsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIHByZXZlbnRPdmVybGFwOiAwXG4gICAgfSxcbiAgICB0eXBvZ3JhcGhpY0V4dHJhczoge1xuICAgICAgICBjb2RlOiAxNCxcbiAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgLy8gaHlwaGVuc1RvRW1EYXNoOiAwXG4gICAgICAgIC8vIGh5cGhlblRvRW5EYXNoOiAyXG4gICAgICAgIHNsYXNoZWRaZXJvOiA0XG4gICAgfSxcbiAgICAvLyBmb3JtSW50ZXJyb2Jhbmc6IDZcbiAgICAvLyBzbWFydFF1b3RlczogOFxuICAgIC8vIHBlcmlvZHNUb0VsbGlwc2lzOiAxMFxuICAgIG1hdGhlbWF0aWNhbEV4dHJhczoge1xuICAgICAgICBjb2RlOiAxNSxcbiAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgLy8gaHlwaGVuVG9NaW51czogMFxuICAgICAgICAvLyBhc3RlcmlzdG9NdWx0aXBseTogMlxuICAgICAgICAvLyBzbGFzaFRvRGl2aWRlOiA0XG4gICAgICAgIC8vIGluZXF1YWxpdHlMaWdhdHVyZXM6IDZcbiAgICAgICAgLy8gZXhwb25lbnRzOiA4XG4gICAgICAgIG1hdGhlbWF0aWNhbEdyZWVrOiAxMFxuICAgIH0sXG4gICAgb3JuYW1lbnRTZXRzOiB7XG4gICAgICAgIGNvZGU6IDE2LFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIG5vT3JuYW1lbnRzOiAwLFxuICAgICAgICBkaW5nYmF0czogMSxcbiAgICAgICAgcGlDaGFyYWN0ZXJzOiAyLFxuICAgICAgICBmbGV1cm9uczogMyxcbiAgICAgICAgZGVjb3JhdGl2ZUJvcmRlcnM6IDQsXG4gICAgICAgIGludGVybmF0aW9uYWxTeW1ib2xzOiA1LFxuICAgICAgICBtYXRoU3ltYm9sczogNlxuICAgIH0sXG4gICAgY2hhcmFjdGVyQWx0ZXJuYXRpdmVzOiB7XG4gICAgICAgIGNvZGU6IDE3LFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIG5vQWx0ZXJuYXRlczogMFxuICAgIH0sXG4gICAgLy8gdXNlciBkZWZpbmVkIG9wdGlvbnNcbiAgICBkZXNpZ25Db21wbGV4aXR5OiB7XG4gICAgICAgIGNvZGU6IDE4LFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIGRlc2lnbkxldmVsMTogMCxcbiAgICAgICAgZGVzaWduTGV2ZWwyOiAxLFxuICAgICAgICBkZXNpZ25MZXZlbDM6IDIsXG4gICAgICAgIGRlc2lnbkxldmVsNDogMyxcbiAgICAgICAgZGVzaWduTGV2ZWw1OiA0XG4gICAgfSxcbiAgICBzdHlsZU9wdGlvbnM6IHtcbiAgICAgICAgY29kZTogMTksXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgbm9TdHlsZU9wdGlvbnM6IDAsXG4gICAgICAgIGRpc3BsYXlUZXh0OiAxLFxuICAgICAgICBlbmdyYXZlZFRleHQ6IDIsXG4gICAgICAgIGlsbHVtaW5hdGVkQ2FwczogMyxcbiAgICAgICAgdGl0bGluZ0NhcHM6IDQsXG4gICAgICAgIHRhbGxDYXBzOiA1XG4gICAgfSxcbiAgICBjaGFyYWN0ZXJTaGFwZToge1xuICAgICAgICBjb2RlOiAyMCxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICB0cmFkaXRpb25hbENoYXJhY3RlcnM6IDAsXG4gICAgICAgIHNpbXBsaWZpZWRDaGFyYWN0ZXJzOiAxLFxuICAgICAgICBKSVMxOTc4Q2hhcmFjdGVyczogMixcbiAgICAgICAgSklTMTk4M0NoYXJhY3RlcnM6IDMsXG4gICAgICAgIEpJUzE5OTBDaGFyYWN0ZXJzOiA0LFxuICAgICAgICB0cmFkaXRpb25hbEFsdE9uZTogNSxcbiAgICAgICAgdHJhZGl0aW9uYWxBbHRUd286IDYsXG4gICAgICAgIHRyYWRpdGlvbmFsQWx0VGhyZWU6IDcsXG4gICAgICAgIHRyYWRpdGlvbmFsQWx0Rm91cjogOCxcbiAgICAgICAgdHJhZGl0aW9uYWxBbHRGaXZlOiA5LFxuICAgICAgICBleHBlcnRDaGFyYWN0ZXJzOiAxMCxcbiAgICAgICAgSklTMjAwNENoYXJhY3RlcnM6IDExLFxuICAgICAgICBob2pvQ2hhcmFjdGVyczogMTIsXG4gICAgICAgIE5MQ0NoYXJhY3RlcnM6IDEzLFxuICAgICAgICB0cmFkaXRpb25hbE5hbWVzQ2hhcmFjdGVyczogMTRcbiAgICB9LFxuICAgIG51bWJlckNhc2U6IHtcbiAgICAgICAgY29kZTogMjEsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgbG93ZXJDYXNlTnVtYmVyczogMCxcbiAgICAgICAgdXBwZXJDYXNlTnVtYmVyczogMVxuICAgIH0sXG4gICAgdGV4dFNwYWNpbmc6IHtcbiAgICAgICAgY29kZTogMjIsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgcHJvcG9ydGlvbmFsVGV4dDogMCxcbiAgICAgICAgbW9ub3NwYWNlZFRleHQ6IDEsXG4gICAgICAgIGhhbGZXaWR0aFRleHQ6IDIsXG4gICAgICAgIHRoaXJkV2lkdGhUZXh0OiAzLFxuICAgICAgICBxdWFydGVyV2lkdGhUZXh0OiA0LFxuICAgICAgICBhbHRQcm9wb3J0aW9uYWxUZXh0OiA1LFxuICAgICAgICBhbHRIYWxmV2lkdGhUZXh0OiA2XG4gICAgfSxcbiAgICB0cmFuc2xpdGVyYXRpb246IHtcbiAgICAgICAgY29kZTogMjMsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgbm9UcmFuc2xpdGVyYXRpb246IDBcbiAgICB9LFxuICAgIC8vIGhhbmphVG9IYW5ndWw6IDFcbiAgICAvLyBoaXJhZ2FuYVRvS2F0YWthbmE6IDJcbiAgICAvLyBrYXRha2FuYVRvSGlyYWdhbmE6IDNcbiAgICAvLyBrYW5hVG9Sb21hbml6YXRpb246IDRcbiAgICAvLyByb21hbml6YXRpb25Ub0hpcmFnYW5hOiA1XG4gICAgLy8gcm9tYW5pemF0aW9uVG9LYXRha2FuYTogNlxuICAgIC8vIGhhbmphVG9IYW5ndWxBbHRPbmU6IDdcbiAgICAvLyBoYW5qYVRvSGFuZ3VsQWx0VHdvOiA4XG4gICAgLy8gaGFuamFUb0hhbmd1bEFsdFRocmVlOiA5XG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgICBjb2RlOiAyNCxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBub0Fubm90YXRpb246IDAsXG4gICAgICAgIGJveEFubm90YXRpb246IDEsXG4gICAgICAgIHJvdW5kZWRCb3hBbm5vdGF0aW9uOiAyLFxuICAgICAgICBjaXJjbGVBbm5vdGF0aW9uOiAzLFxuICAgICAgICBpbnZlcnRlZENpcmNsZUFubm90YXRpb246IDQsXG4gICAgICAgIHBhcmVudGhlc2lzQW5ub3RhdGlvbjogNSxcbiAgICAgICAgcGVyaW9kQW5ub3RhdGlvbjogNixcbiAgICAgICAgcm9tYW5OdW1lcmFsQW5ub3RhdGlvbjogNyxcbiAgICAgICAgZGlhbW9uZEFubm90YXRpb246IDgsXG4gICAgICAgIGludmVydGVkQm94QW5ub3RhdGlvbjogOSxcbiAgICAgICAgaW52ZXJ0ZWRSb3VuZGVkQm94QW5ub3RhdGlvbjogMTBcbiAgICB9LFxuICAgIGthbmFTcGFjaW5nOiB7XG4gICAgICAgIGNvZGU6IDI1LFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIGZ1bGxXaWR0aEthbmE6IDAsXG4gICAgICAgIHByb3BvcnRpb25hbEthbmE6IDFcbiAgICB9LFxuICAgIGlkZW9ncmFwaGljU3BhY2luZzoge1xuICAgICAgICBjb2RlOiAyNixcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBmdWxsV2lkdGhJZGVvZ3JhcGhzOiAwLFxuICAgICAgICBwcm9wb3J0aW9uYWxJZGVvZ3JhcGhzOiAxLFxuICAgICAgICBoYWxmV2lkdGhJZGVvZ3JhcGhzOiAyXG4gICAgfSxcbiAgICB1bmljb2RlRGVjb21wb3NpdGlvbjoge1xuICAgICAgICBjb2RlOiAyNyxcbiAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgY2Fub25pY2FsQ29tcG9zaXRpb246IDAsXG4gICAgICAgIGNvbXBhdGliaWxpdHlDb21wb3NpdGlvbjogMixcbiAgICAgICAgdHJhbnNjb2RpbmdDb21wb3NpdGlvbjogNFxuICAgIH0sXG4gICAgcnVieUthbmE6IHtcbiAgICAgICAgY29kZTogMjgsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIC8vIG5vUnVieUthbmE6IDAgICAgICMgZGVwcmVjYXRlZCAtIHVzZSBydWJ5S2FuYU9mZiBpbnN0ZWFkXG4gICAgICAgIC8vIHJ1YnlLYW5hOiAxICAgICAjIGRlcHJlY2F0ZWQgLSB1c2UgcnVieUthbmFPbiBpbnN0ZWFkXG4gICAgICAgIHJ1YnlLYW5hOiAyXG4gICAgfSxcbiAgICBDSktTeW1ib2xBbHRlcm5hdGl2ZXM6IHtcbiAgICAgICAgY29kZTogMjksXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgbm9DSktTeW1ib2xBbHRlcm5hdGl2ZXM6IDAsXG4gICAgICAgIENKS1N5bWJvbEFsdE9uZTogMSxcbiAgICAgICAgQ0pLU3ltYm9sQWx0VHdvOiAyLFxuICAgICAgICBDSktTeW1ib2xBbHRUaHJlZTogMyxcbiAgICAgICAgQ0pLU3ltYm9sQWx0Rm91cjogNCxcbiAgICAgICAgQ0pLU3ltYm9sQWx0Rml2ZTogNVxuICAgIH0sXG4gICAgaWRlb2dyYXBoaWNBbHRlcm5hdGl2ZXM6IHtcbiAgICAgICAgY29kZTogMzAsXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgbm9JZGVvZ3JhcGhpY0FsdGVybmF0aXZlczogMCxcbiAgICAgICAgaWRlb2dyYXBoaWNBbHRPbmU6IDEsXG4gICAgICAgIGlkZW9ncmFwaGljQWx0VHdvOiAyLFxuICAgICAgICBpZGVvZ3JhcGhpY0FsdFRocmVlOiAzLFxuICAgICAgICBpZGVvZ3JhcGhpY0FsdEZvdXI6IDQsXG4gICAgICAgIGlkZW9ncmFwaGljQWx0Rml2ZTogNVxuICAgIH0sXG4gICAgQ0pLVmVydGljYWxSb21hblBsYWNlbWVudDoge1xuICAgICAgICBjb2RlOiAzMSxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBDSktWZXJ0aWNhbFJvbWFuQ2VudGVyZWQ6IDAsXG4gICAgICAgIENKS1ZlcnRpY2FsUm9tYW5IQmFzZWxpbmU6IDFcbiAgICB9LFxuICAgIGl0YWxpY0NKS1JvbWFuOiB7XG4gICAgICAgIGNvZGU6IDMyLFxuICAgICAgICBleGNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAvLyBub0NKS0l0YWxpY1JvbWFuOiAwICAgICAjIGRlcHJlY2F0ZWQgLSB1c2UgQ0pLSXRhbGljUm9tYW5PZmYgaW5zdGVhZFxuICAgICAgICAvLyBDSktJdGFsaWNSb21hbjogMSAgICAgIyBkZXByZWNhdGVkIC0gdXNlIENKS0l0YWxpY1JvbWFuT24gaW5zdGVhZFxuICAgICAgICBDSktJdGFsaWNSb21hbjogMlxuICAgIH0sXG4gICAgY2FzZVNlbnNpdGl2ZUxheW91dDoge1xuICAgICAgICBjb2RlOiAzMyxcbiAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgY2FzZVNlbnNpdGl2ZUxheW91dDogMCxcbiAgICAgICAgY2FzZVNlbnNpdGl2ZVNwYWNpbmc6IDJcbiAgICB9LFxuICAgIGFsdGVybmF0ZUthbmE6IHtcbiAgICAgICAgY29kZTogMzQsXG4gICAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICAgIGFsdGVybmF0ZUhvcml6S2FuYTogMCxcbiAgICAgICAgYWx0ZXJuYXRlVmVydEthbmE6IDJcbiAgICB9LFxuICAgIHN0eWxpc3RpY0FsdGVybmF0aXZlczoge1xuICAgICAgICBjb2RlOiAzNSxcbiAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgbm9TdHlsaXN0aWNBbHRlcm5hdGVzOiAwLFxuICAgICAgICBzdHlsaXN0aWNBbHRPbmU6IDIsXG4gICAgICAgIHN0eWxpc3RpY0FsdFR3bzogNCxcbiAgICAgICAgc3R5bGlzdGljQWx0VGhyZWU6IDYsXG4gICAgICAgIHN0eWxpc3RpY0FsdEZvdXI6IDgsXG4gICAgICAgIHN0eWxpc3RpY0FsdEZpdmU6IDEwLFxuICAgICAgICBzdHlsaXN0aWNBbHRTaXg6IDEyLFxuICAgICAgICBzdHlsaXN0aWNBbHRTZXZlbjogMTQsXG4gICAgICAgIHN0eWxpc3RpY0FsdEVpZ2h0OiAxNixcbiAgICAgICAgc3R5bGlzdGljQWx0TmluZTogMTgsXG4gICAgICAgIHN0eWxpc3RpY0FsdFRlbjogMjAsXG4gICAgICAgIHN0eWxpc3RpY0FsdEVsZXZlbjogMjIsXG4gICAgICAgIHN0eWxpc3RpY0FsdFR3ZWx2ZTogMjQsXG4gICAgICAgIHN0eWxpc3RpY0FsdFRoaXJ0ZWVuOiAyNixcbiAgICAgICAgc3R5bGlzdGljQWx0Rm91cnRlZW46IDI4LFxuICAgICAgICBzdHlsaXN0aWNBbHRGaWZ0ZWVuOiAzMCxcbiAgICAgICAgc3R5bGlzdGljQWx0U2l4dGVlbjogMzIsXG4gICAgICAgIHN0eWxpc3RpY0FsdFNldmVudGVlbjogMzQsXG4gICAgICAgIHN0eWxpc3RpY0FsdEVpZ2h0ZWVuOiAzNixcbiAgICAgICAgc3R5bGlzdGljQWx0TmluZXRlZW46IDM4LFxuICAgICAgICBzdHlsaXN0aWNBbHRUd2VudHk6IDQwXG4gICAgfSxcbiAgICBjb250ZXh0dWFsQWx0ZXJuYXRlczoge1xuICAgICAgICBjb2RlOiAzNixcbiAgICAgICAgZXhjbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgY29udGV4dHVhbEFsdGVybmF0ZXM6IDAsXG4gICAgICAgIHN3YXNoQWx0ZXJuYXRlczogMixcbiAgICAgICAgY29udGV4dHVhbFN3YXNoQWx0ZXJuYXRlczogNFxuICAgIH0sXG4gICAgbG93ZXJDYXNlOiB7XG4gICAgICAgIGNvZGU6IDM3LFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIGRlZmF1bHRMb3dlckNhc2U6IDAsXG4gICAgICAgIGxvd2VyQ2FzZVNtYWxsQ2FwczogMSxcbiAgICAgICAgbG93ZXJDYXNlUGV0aXRlQ2FwczogMlxuICAgIH0sXG4gICAgdXBwZXJDYXNlOiB7XG4gICAgICAgIGNvZGU6IDM4LFxuICAgICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICAgIGRlZmF1bHRVcHBlckNhc2U6IDAsXG4gICAgICAgIHVwcGVyQ2FzZVNtYWxsQ2FwczogMSxcbiAgICAgICAgdXBwZXJDYXNlUGV0aXRlQ2FwczogMlxuICAgIH0sXG4gICAgbGFuZ3VhZ2VUYWc6IHtcbiAgICAgICAgY29kZTogMzksXG4gICAgICAgIGV4Y2x1c2l2ZTogdHJ1ZVxuICAgIH0sXG4gICAgQ0pLUm9tYW5TcGFjaW5nOiB7XG4gICAgICAgIGNvZGU6IDEwMyxcbiAgICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgICBoYWxmV2lkdGhDSktSb21hbjogMCxcbiAgICAgICAgcHJvcG9ydGlvbmFsQ0pLUm9tYW46IDEsXG4gICAgICAgIGRlZmF1bHRDSktSb21hbjogMixcbiAgICAgICAgZnVsbFdpZHRoQ0pLUm9tYW46IDNcbiAgICB9XG59O1xuY29uc3QgJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUgPSAobmFtZSwgc2VsZWN0b3IpPT5bXG4gICAgICAgICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlc1tuYW1lXS5jb2RlLFxuICAgICAgICAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZXNbbmFtZV1bc2VsZWN0b3JdXG4gICAgXTtcbmNvbnN0ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRPVE1hcHBpbmcgPSB7XG4gICAgcmxpZzogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJsaWdhdHVyZXNcIiwgXCJyZXF1aXJlZExpZ2F0dXJlc1wiKSxcbiAgICBjbGlnOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcImxpZ2F0dXJlc1wiLCBcImNvbnRleHR1YWxMaWdhdHVyZXNcIiksXG4gICAgZGxpZzogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJsaWdhdHVyZXNcIiwgXCJyYXJlTGlnYXR1cmVzXCIpLFxuICAgIGhsaWc6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwibGlnYXR1cmVzXCIsIFwiaGlzdG9yaWNhbExpZ2F0dXJlc1wiKSxcbiAgICBsaWdhOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcImxpZ2F0dXJlc1wiLCBcImNvbW1vbkxpZ2F0dXJlc1wiKSxcbiAgICBoaXN0OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcImxpZ2F0dXJlc1wiLCBcImhpc3RvcmljYWxMaWdhdHVyZXNcIiksXG4gICAgc21jcDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJsb3dlckNhc2VcIiwgXCJsb3dlckNhc2VTbWFsbENhcHNcIiksXG4gICAgcGNhcDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJsb3dlckNhc2VcIiwgXCJsb3dlckNhc2VQZXRpdGVDYXBzXCIpLFxuICAgIGZyYWM6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwiZnJhY3Rpb25zXCIsIFwiZGlhZ29uYWxGcmFjdGlvbnNcIiksXG4gICAgZG5vbTogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJmcmFjdGlvbnNcIiwgXCJkaWFnb25hbEZyYWN0aW9uc1wiKSxcbiAgICBudW1yOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcImZyYWN0aW9uc1wiLCBcImRpYWdvbmFsRnJhY3Rpb25zXCIpLFxuICAgIGFmcmM6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwiZnJhY3Rpb25zXCIsIFwidmVydGljYWxGcmFjdGlvbnNcIiksXG4gICAgLy8gYWFsdFxuICAgIC8vIGFidmYsIGFidm0sIGFidnMsIGFraG4sIGJsd2YsIGJsd20sIGJsd3MsIGNmYXIsIGNqY3QsIGNwc3AsIGZhbHQsIGlzb2wsIGphbHQsIGxqbW8sIG1zZXQ/XG4gICAgLy8gbHRyYSwgbHRybSwgbnVrdCwgcHJlZiwgcHJlcywgcHN0ZiwgcHN0cywgcmFuZCwgcmtyZiwgcnBoZiwgcnRsYSwgcnRsbSwgc2l6ZSwgdGptbywgdG51bT9cbiAgICAvLyB1bmljLCB2YXR1LCB2aGFsLCB2am1vLCB2cGFsLCB2cnQyXG4gICAgLy8gZGlzdCAtPiB0cmFrIHRhYmxlP1xuICAgIC8vIGtlcm4sIHZrcm4gLT4ga2VybiB0YWJsZVxuICAgIC8vIGxmYmQgKyBvcGJkICsgcnRiZCAtPiBvcGJkIHRhYmxlP1xuICAgIC8vIG1hcmssIG1rbWsgLT4gYWNudCB0YWJsZT9cbiAgICAvLyBsb2NsIC0+IGxhbmd1YWdlVGFnICsgbHRhZyB0YWJsZVxuICAgIGNhc2U6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwiY2FzZVNlbnNpdGl2ZUxheW91dFwiLCBcImNhc2VTZW5zaXRpdmVMYXlvdXRcIiksXG4gICAgY2NtcDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJ1bmljb2RlRGVjb21wb3NpdGlvblwiLCBcImNhbm9uaWNhbENvbXBvc2l0aW9uXCIpLFxuICAgIGNwY3Q6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwiQ0pLVmVydGljYWxSb21hblBsYWNlbWVudFwiLCBcIkNKS1ZlcnRpY2FsUm9tYW5DZW50ZXJlZFwiKSxcbiAgICB2YWx0OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcIkNKS1ZlcnRpY2FsUm9tYW5QbGFjZW1lbnRcIiwgXCJDSktWZXJ0aWNhbFJvbWFuQ2VudGVyZWRcIiksXG4gICAgc3dzaDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJjb250ZXh0dWFsQWx0ZXJuYXRlc1wiLCBcInN3YXNoQWx0ZXJuYXRlc1wiKSxcbiAgICBjc3doOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcImNvbnRleHR1YWxBbHRlcm5hdGVzXCIsIFwiY29udGV4dHVhbFN3YXNoQWx0ZXJuYXRlc1wiKSxcbiAgICBjdXJzOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcImN1cnNpdmVDb25uZWN0aW9uXCIsIFwiY3Vyc2l2ZVwiKSxcbiAgICBjMnBjOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInVwcGVyQ2FzZVwiLCBcInVwcGVyQ2FzZVBldGl0ZUNhcHNcIiksXG4gICAgYzJzYzogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJ1cHBlckNhc2VcIiwgXCJ1cHBlckNhc2VTbWFsbENhcHNcIiksXG4gICAgaW5pdDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJzbWFydFN3YXNoXCIsIFwid29yZEluaXRpYWxTd2FzaGVzXCIpLFxuICAgIGZpbjI6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwic21hcnRTd2FzaFwiLCBcIndvcmRGaW5hbFN3YXNoZXNcIiksXG4gICAgbWVkaTogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJzbWFydFN3YXNoXCIsIFwibm9uRmluYWxTd2FzaGVzXCIpLFxuICAgIG1lZDI6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwic21hcnRTd2FzaFwiLCBcIm5vbkZpbmFsU3dhc2hlc1wiKSxcbiAgICBmaW4zOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInNtYXJ0U3dhc2hcIiwgXCJ3b3JkRmluYWxTd2FzaGVzXCIpLFxuICAgIGZpbmE6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwic21hcnRTd2FzaFwiLCBcIndvcmRGaW5hbFN3YXNoZXNcIiksXG4gICAgcGtuYTogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJrYW5hU3BhY2luZ1wiLCBcInByb3BvcnRpb25hbEthbmFcIiksXG4gICAgaGFsZjogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJ0ZXh0U3BhY2luZ1wiLCBcImhhbGZXaWR0aFRleHRcIiksXG4gICAgaGFsdDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJ0ZXh0U3BhY2luZ1wiLCBcImFsdEhhbGZXaWR0aFRleHRcIiksXG4gICAgaGtuYTogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJhbHRlcm5hdGVLYW5hXCIsIFwiYWx0ZXJuYXRlSG9yaXpLYW5hXCIpLFxuICAgIHZrbmE6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwiYWx0ZXJuYXRlS2FuYVwiLCBcImFsdGVybmF0ZVZlcnRLYW5hXCIpLFxuICAgIC8vIGhuZ2w6IGZlYXR1cmUgJ3RyYW5zbGl0ZXJhdGlvbicsICdoYW5qYVRvSGFuZ3VsU2VsZWN0b3InICMgZGVwcmVjYXRlZFxuICAgIGl0YWw6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwiaXRhbGljQ0pLUm9tYW5cIiwgXCJDSktJdGFsaWNSb21hblwiKSxcbiAgICBsbnVtOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcIm51bWJlckNhc2VcIiwgXCJ1cHBlckNhc2VOdW1iZXJzXCIpLFxuICAgIG9udW06ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwibnVtYmVyQ2FzZVwiLCBcImxvd2VyQ2FzZU51bWJlcnNcIiksXG4gICAgbWdyazogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJtYXRoZW1hdGljYWxFeHRyYXNcIiwgXCJtYXRoZW1hdGljYWxHcmVla1wiKSxcbiAgICAvLyBuYWx0OiBub3QgZW5vdWdoIGluZm8uIHdoYXQgdHlwZSBvZiBhbm5vdGF0aW9uP1xuICAgIC8vIG9ybm06IGRpdHRvLCB3aGljaCBvcm5hbWVudCBzdHlsZT9cbiAgICBjYWx0OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcImNvbnRleHR1YWxBbHRlcm5hdGVzXCIsIFwiY29udGV4dHVhbEFsdGVybmF0ZXNcIiksXG4gICAgdnJ0MjogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJ2ZXJ0aWNhbFN1YnN0aXR1dGlvblwiLCBcInN1YnN0aXR1dGVWZXJ0aWNhbEZvcm1zXCIpLFxuICAgIHZlcnQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwidmVydGljYWxTdWJzdGl0dXRpb25cIiwgXCJzdWJzdGl0dXRlVmVydGljYWxGb3Jtc1wiKSxcbiAgICB0bnVtOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcIm51bWJlclNwYWNpbmdcIiwgXCJtb25vc3BhY2VkTnVtYmVyc1wiKSxcbiAgICBwbnVtOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcIm51bWJlclNwYWNpbmdcIiwgXCJwcm9wb3J0aW9uYWxOdW1iZXJzXCIpLFxuICAgIHN1cHM6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwidmVydGljYWxQb3NpdGlvblwiLCBcInN1cGVyaW9yc1wiKSxcbiAgICBzdWJzOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInZlcnRpY2FsUG9zaXRpb25cIiwgXCJpbmZlcmlvcnNcIiksXG4gICAgb3JkbjogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJ2ZXJ0aWNhbFBvc2l0aW9uXCIsIFwib3JkaW5hbHNcIiksXG4gICAgcHdpZDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJ0ZXh0U3BhY2luZ1wiLCBcInByb3BvcnRpb25hbFRleHRcIiksXG4gICAgaHdpZDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJ0ZXh0U3BhY2luZ1wiLCBcImhhbGZXaWR0aFRleHRcIiksXG4gICAgcXdpZDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJ0ZXh0U3BhY2luZ1wiLCBcInF1YXJ0ZXJXaWR0aFRleHRcIiksXG4gICAgdHdpZDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJ0ZXh0U3BhY2luZ1wiLCBcInRoaXJkV2lkdGhUZXh0XCIpLFxuICAgIGZ3aWQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwidGV4dFNwYWNpbmdcIiwgXCJwcm9wb3J0aW9uYWxUZXh0XCIpLFxuICAgIHBhbHQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwidGV4dFNwYWNpbmdcIiwgXCJhbHRQcm9wb3J0aW9uYWxUZXh0XCIpLFxuICAgIHRyYWQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwiY2hhcmFjdGVyU2hhcGVcIiwgXCJ0cmFkaXRpb25hbENoYXJhY3RlcnNcIiksXG4gICAgc21wbDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJjaGFyYWN0ZXJTaGFwZVwiLCBcInNpbXBsaWZpZWRDaGFyYWN0ZXJzXCIpLFxuICAgIGpwNzg6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwiY2hhcmFjdGVyU2hhcGVcIiwgXCJKSVMxOTc4Q2hhcmFjdGVyc1wiKSxcbiAgICBqcDgzOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcImNoYXJhY3RlclNoYXBlXCIsIFwiSklTMTk4M0NoYXJhY3RlcnNcIiksXG4gICAganA5MDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJjaGFyYWN0ZXJTaGFwZVwiLCBcIkpJUzE5OTBDaGFyYWN0ZXJzXCIpLFxuICAgIGpwMDQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwiY2hhcmFjdGVyU2hhcGVcIiwgXCJKSVMyMDA0Q2hhcmFjdGVyc1wiKSxcbiAgICBleHB0OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcImNoYXJhY3RlclNoYXBlXCIsIFwiZXhwZXJ0Q2hhcmFjdGVyc1wiKSxcbiAgICBob2pvOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcImNoYXJhY3RlclNoYXBlXCIsIFwiaG9qb0NoYXJhY3RlcnNcIiksXG4gICAgbmxjazogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJjaGFyYWN0ZXJTaGFwZVwiLCBcIk5MQ0NoYXJhY3RlcnNcIiksXG4gICAgdG5hbTogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJjaGFyYWN0ZXJTaGFwZVwiLCBcInRyYWRpdGlvbmFsTmFtZXNDaGFyYWN0ZXJzXCIpLFxuICAgIHJ1Ynk6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwicnVieUthbmFcIiwgXCJydWJ5S2FuYVwiKSxcbiAgICB0aXRsOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxlT3B0aW9uc1wiLCBcInRpdGxpbmdDYXBzXCIpLFxuICAgIHplcm86ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwidHlwb2dyYXBoaWNFeHRyYXNcIiwgXCJzbGFzaGVkWmVyb1wiKSxcbiAgICBzczAxOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxpc3RpY0FsdGVybmF0aXZlc1wiLCBcInN0eWxpc3RpY0FsdE9uZVwiKSxcbiAgICBzczAyOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxpc3RpY0FsdGVybmF0aXZlc1wiLCBcInN0eWxpc3RpY0FsdFR3b1wiKSxcbiAgICBzczAzOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxpc3RpY0FsdGVybmF0aXZlc1wiLCBcInN0eWxpc3RpY0FsdFRocmVlXCIpLFxuICAgIHNzMDQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwic3R5bGlzdGljQWx0ZXJuYXRpdmVzXCIsIFwic3R5bGlzdGljQWx0Rm91clwiKSxcbiAgICBzczA1OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxpc3RpY0FsdGVybmF0aXZlc1wiLCBcInN0eWxpc3RpY0FsdEZpdmVcIiksXG4gICAgc3MwNjogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJzdHlsaXN0aWNBbHRlcm5hdGl2ZXNcIiwgXCJzdHlsaXN0aWNBbHRTaXhcIiksXG4gICAgc3MwNzogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJzdHlsaXN0aWNBbHRlcm5hdGl2ZXNcIiwgXCJzdHlsaXN0aWNBbHRTZXZlblwiKSxcbiAgICBzczA4OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxpc3RpY0FsdGVybmF0aXZlc1wiLCBcInN0eWxpc3RpY0FsdEVpZ2h0XCIpLFxuICAgIHNzMDk6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwic3R5bGlzdGljQWx0ZXJuYXRpdmVzXCIsIFwic3R5bGlzdGljQWx0TmluZVwiKSxcbiAgICBzczEwOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxpc3RpY0FsdGVybmF0aXZlc1wiLCBcInN0eWxpc3RpY0FsdFRlblwiKSxcbiAgICBzczExOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxpc3RpY0FsdGVybmF0aXZlc1wiLCBcInN0eWxpc3RpY0FsdEVsZXZlblwiKSxcbiAgICBzczEyOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxpc3RpY0FsdGVybmF0aXZlc1wiLCBcInN0eWxpc3RpY0FsdFR3ZWx2ZVwiKSxcbiAgICBzczEzOiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxpc3RpY0FsdGVybmF0aXZlc1wiLCBcInN0eWxpc3RpY0FsdFRoaXJ0ZWVuXCIpLFxuICAgIHNzMTQ6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwic3R5bGlzdGljQWx0ZXJuYXRpdmVzXCIsIFwic3R5bGlzdGljQWx0Rm91cnRlZW5cIiksXG4gICAgc3MxNTogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJzdHlsaXN0aWNBbHRlcm5hdGl2ZXNcIiwgXCJzdHlsaXN0aWNBbHRGaWZ0ZWVuXCIpLFxuICAgIHNzMTY6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwic3R5bGlzdGljQWx0ZXJuYXRpdmVzXCIsIFwic3R5bGlzdGljQWx0U2l4dGVlblwiKSxcbiAgICBzczE3OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxpc3RpY0FsdGVybmF0aXZlc1wiLCBcInN0eWxpc3RpY0FsdFNldmVudGVlblwiKSxcbiAgICBzczE4OiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZShcInN0eWxpc3RpY0FsdGVybmF0aXZlc1wiLCBcInN0eWxpc3RpY0FsdEVpZ2h0ZWVuXCIpLFxuICAgIHNzMTk6ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlKFwic3R5bGlzdGljQWx0ZXJuYXRpdmVzXCIsIFwic3R5bGlzdGljQWx0TmluZXRlZW5cIiksXG4gICAgc3MyMDogJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUoXCJzdHlsaXN0aWNBbHRlcm5hdGl2ZXNcIiwgXCJzdHlsaXN0aWNBbHRUd2VudHlcIilcbn07XG4vLyBzYWx0OiBmZWF0dXJlICdzdHlsaXN0aWNBbHRlcm5hdGl2ZXMnLCAnc3R5bGlzdGljQWx0T25lJyAjIGhtbSwgd2hpY2ggb25lIHRvIGNob29zZVxuLy8gQWRkIGN2MDEtY3Y5OSBmZWF0dXJlc1xuZm9yKGxldCBpID0gMTsgaSA8PSA5OTsgaSsrKSQzYjYzMDJiNjRlY2NjMzJjJHZhciRPVE1hcHBpbmdbYGN2JHtgMDAke2l9YC5zbGljZSgtMil9YF0gPSBbXG4gICAgJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmVzLmNoYXJhY3RlckFsdGVybmF0aXZlcy5jb2RlLFxuICAgIGlcbl07XG4vLyBjcmVhdGUgaW52ZXJzZSBtYXBwaW5nXG5sZXQgJDNiNjMwMmI2NGVjY2MzMmMkdmFyJEFBVE1hcHBpbmcgPSB7fTtcbmZvcihsZXQgb3QgaW4gJDNiNjMwMmI2NGVjY2MzMmMkdmFyJE9UTWFwcGluZyl7XG4gICAgbGV0IGFhdCA9ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRPVE1hcHBpbmdbb3RdO1xuICAgIGlmICgkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkQUFUTWFwcGluZ1thYXRbMF1dID09IG51bGwpICQzYjYzMDJiNjRlY2NjMzJjJHZhciRBQVRNYXBwaW5nW2FhdFswXV0gPSB7fTtcbiAgICAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkQUFUTWFwcGluZ1thYXRbMF1dW2FhdFsxXV0gPSBvdDtcbn1cbmZ1bmN0aW9uICQzYjYzMDJiNjRlY2NjMzJjJGV4cG9ydCRiODEzZjdkMmExNjc3YzE2KGZlYXR1cmVzMSkge1xuICAgIGxldCByZXMgPSB7fTtcbiAgICBmb3IobGV0IGsgaW4gZmVhdHVyZXMxKXtcbiAgICAgICAgbGV0IHI7XG4gICAgICAgIGlmIChyID0gJDNiNjMwMmI2NGVjY2MzMmMkdmFyJE9UTWFwcGluZ1trXSkge1xuICAgICAgICAgICAgaWYgKHJlc1tyWzBdXSA9PSBudWxsKSByZXNbclswXV0gPSB7fTtcbiAgICAgICAgICAgIHJlc1tyWzBdXVtyWzFdXSA9IGZlYXR1cmVzMVtrXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8gTWFwcyBzdHJpbmdzIGluIGEgW2ZlYXR1cmVUeXBlLCBmZWF0dXJlU2V0dGluZ11cbi8vIHRvIHRoZWlyIGVxdWl2YWxlbnQgbnVtYmVyIGNvZGVzXG5mdW5jdGlvbiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkbWFwRmVhdHVyZVN0cmluZ3MoZikge1xuICAgIGxldCBbdHlwZSwgc2V0dGluZ10gPSBmO1xuICAgIGlmIChpc05hTih0eXBlKSkgdmFyIHR5cGVDb2RlID0gJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmVzW3R5cGVdICYmICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlc1t0eXBlXS5jb2RlO1xuICAgIGVsc2UgdmFyIHR5cGVDb2RlID0gdHlwZTtcbiAgICBpZiAoaXNOYU4oc2V0dGluZykpIHZhciBzZXR0aW5nQ29kZSA9ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlc1t0eXBlXSAmJiAkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkZmVhdHVyZXNbdHlwZV1bc2V0dGluZ107XG4gICAgZWxzZSB2YXIgc2V0dGluZ0NvZGUgPSBzZXR0aW5nO1xuICAgIHJldHVybiBbXG4gICAgICAgIHR5cGVDb2RlLFxuICAgICAgICBzZXR0aW5nQ29kZVxuICAgIF07XG59XG5mdW5jdGlvbiAkM2I2MzAyYjY0ZWNjYzMyYyRleHBvcnQkYmQ2ZGYzNDdhNGYzOTFjNChmZWF0dXJlczIpIHtcbiAgICBsZXQgcmVzID0ge307XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmVhdHVyZXMyKSkgZm9yKGxldCBrID0gMDsgayA8IGZlYXR1cmVzMi5sZW5ndGg7IGsrKyl7XG4gICAgICAgIGxldCByO1xuICAgICAgICBsZXQgZiA9ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRtYXBGZWF0dXJlU3RyaW5ncyhmZWF0dXJlczJba10pO1xuICAgICAgICBpZiAociA9ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRBQVRNYXBwaW5nW2ZbMF1dICYmICQzYjYzMDJiNjRlY2NjMzJjJHZhciRBQVRNYXBwaW5nW2ZbMF1dW2ZbMV1dKSByZXNbcl0gPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZmVhdHVyZXMyID09PSBcIm9iamVjdFwiKSBmb3IobGV0IHR5cGUgaW4gZmVhdHVyZXMyKXtcbiAgICAgICAgbGV0IGZlYXR1cmUxID0gZmVhdHVyZXMyW3R5cGVdO1xuICAgICAgICBmb3IobGV0IHNldHRpbmcgaW4gZmVhdHVyZTEpe1xuICAgICAgICAgICAgbGV0IHI7XG4gICAgICAgICAgICBsZXQgZiA9ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRtYXBGZWF0dXJlU3RyaW5ncyhbXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBzZXR0aW5nXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlMVtzZXR0aW5nXSAmJiAociA9ICQzYjYzMDJiNjRlY2NjMzJjJHZhciRBQVRNYXBwaW5nW2ZbMF1dICYmICQzYjYzMDJiNjRlY2NjMzJjJHZhciRBQVRNYXBwaW5nW2ZbMF1dW2ZbMV1dKSkgcmVzW3JdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMocmVzKTtcbn1cblxuXG5cblxuXG5cblxuY2xhc3MgJGZmNWNlMDc3ZGFlMGYxNDQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgbG9va3VwKGdseXBoKSB7XG4gICAgICAgIHN3aXRjaCh0aGlzLnRhYmxlLnZlcnNpb24pe1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhYmxlLnZhbHVlcy5nZXRJdGVtKGdseXBoKTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtaW4gPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWF4ID0gdGhpcy50YWJsZS5iaW5hcnlTZWFyY2hIZWFkZXIublVuaXRzIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUobWluIDw9IG1heCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWlkID0gbWluICsgbWF4ID4+IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VnID0gdGhpcy50YWJsZS5zZWdtZW50c1ttaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBlbmQgb2Ygc2VhcmNoIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VnLmZpcnN0R2x5cGggPT09IDB4ZmZmZikgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2x5cGggPCBzZWcuZmlyc3RHbHlwaCkgbWF4ID0gbWlkIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGdseXBoID4gc2VnLmxhc3RHbHlwaCkgbWluID0gbWlkICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhYmxlLnZlcnNpb24gPT09IDIpIHJldHVybiBzZWcudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gc2VnLnZhbHVlc1tnbHlwaCAtIHNlZy5maXJzdEdseXBoXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWluID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1heCA9IHRoaXMudGFibGUuYmluYXJ5U2VhcmNoSGVhZGVyLm5Vbml0cyAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKG1pbiA8PSBtYXgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pZCA9IG1pbiArIG1heCA+PiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlZyA9IHRoaXMudGFibGUuc2VnbWVudHNbbWlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgZW5kIG9mIHNlYXJjaCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlZy5nbHlwaCA9PT0gMHhmZmZmKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnbHlwaCA8IHNlZy5nbHlwaCkgbWF4ID0gbWlkIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGdseXBoID4gc2VnLmdseXBoKSBtaW4gPSBtaWQgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gc2VnLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50YWJsZS52YWx1ZXNbZ2x5cGggLSB0aGlzLnRhYmxlLmZpcnN0R2x5cGhdO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gbG9va3VwIHRhYmxlIGZvcm1hdDogJHt0aGlzLnRhYmxlLnZlcnNpb259YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2x5cGhzRm9yVmFsdWUoY2xhc3NWYWx1ZSkge1xuICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgIHN3aXRjaCh0aGlzLnRhYmxlLnZlcnNpb24pe1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGZvciAobGV0IHNlZ21lbnQgb2YgdGhpcy50YWJsZS5zZWdtZW50cylpZiAodGhpcy50YWJsZS52ZXJzaW9uID09PSAyICYmIHNlZ21lbnQudmFsdWUgPT09IGNsYXNzVmFsdWUpIHJlcy5wdXNoKC4uLigwLCAkMTI3Mjc3MzBkZGZjOGJmZSRleHBvcnQkZDAyNjMxY2NjZjc4OTcyMykoc2VnbWVudC5maXJzdEdseXBoLCBzZWdtZW50Lmxhc3RHbHlwaCArIDEpKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc2VnbWVudC52YWx1ZXMubGVuZ3RoOyBpbmRleCsrKWlmIChzZWdtZW50LnZhbHVlc1tpbmRleF0gPT09IGNsYXNzVmFsdWUpIHJlcy5wdXNoKHNlZ21lbnQuZmlyc3RHbHlwaCArIGluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgc2VnbWVudDEgb2YgdGhpcy50YWJsZS5zZWdtZW50cylpZiAoc2VnbWVudDEudmFsdWUgPT09IGNsYXNzVmFsdWUpIHJlcy5wdXNoKHNlZ21lbnQxLmdseXBoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy50YWJsZS52YWx1ZXMubGVuZ3RoOyBpKyspaWYgKHRoaXMudGFibGUudmFsdWVzW2ldID09PSBjbGFzc1ZhbHVlKSByZXMucHVzaCh0aGlzLnRhYmxlLmZpcnN0R2x5cGggKyBpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGxvb2t1cCB0YWJsZSBmb3JtYXQ6ICR7dGhpcy50YWJsZS52ZXJzaW9ufWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHRhYmxlKXtcbiAgICAgICAgdGhpcy50YWJsZSA9IHRhYmxlO1xuICAgIH1cbn1cbigwLCAkNTJaSWYkc3djaGVscGVyc3NyY190c19kZWNvcmF0ZW1qcykoW1xuICAgICgwLCAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZClcbl0sICRmZjVjZTA3N2RhZTBmMTQ0JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlLCBcImdseXBoc0ZvclZhbHVlXCIsIG51bGwpO1xuXG5cbmNvbnN0ICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRTVEFSVF9PRl9URVhUX1NUQVRFID0gMDtcbmNvbnN0ICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRTVEFSVF9PRl9MSU5FX1NUQVRFID0gMTtcbmNvbnN0ICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRFTkRfT0ZfVEVYVF9DTEFTUyA9IDA7XG5jb25zdCAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkT1VUX09GX0JPVU5EU19DTEFTUyA9IDE7XG5jb25zdCAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkREVMRVRFRF9HTFlQSF9DTEFTUyA9IDI7XG5jb25zdCAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkRU5EX09GX0xJTkVfQ0xBU1MgPSAzO1xuY29uc3QgJDUwYzdhYWM5MzE2ZjI5NDgkdmFyJERPTlRfQURWQU5DRSA9IDB4NDAwMDtcbmNsYXNzICQ1MGM3YWFjOTMxNmYyOTQ4JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIHByb2Nlc3MoZ2x5cGhzLCByZXZlcnNlLCBwcm9jZXNzRW50cnkpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRTdGF0ZSA9ICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRTVEFSVF9PRl9URVhUX1NUQVRFOyAvLyBTVEFSVF9PRl9MSU5FX1NUQVRFIGlzIHVzZWQgZm9yIGthc2hpZGEgZ2x5cGggaW5zZXJ0aW9ucyBzb21ldGltZXMgSSB0aGluaz9cbiAgICAgICAgbGV0IGluZGV4ID0gcmV2ZXJzZSA/IGdseXBocy5sZW5ndGggLSAxIDogMDtcbiAgICAgICAgbGV0IGRpciA9IHJldmVyc2UgPyAtMSA6IDE7XG4gICAgICAgIHdoaWxlKGRpciA9PT0gMSAmJiBpbmRleCA8PSBnbHlwaHMubGVuZ3RoIHx8IGRpciA9PT0gLTEgJiYgaW5kZXggPj0gLTEpe1xuICAgICAgICAgICAgbGV0IGdseXBoID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBjbGFzc0NvZGUgPSAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkT1VUX09GX0JPVU5EU19DTEFTUztcbiAgICAgICAgICAgIGxldCBzaG91bGRBZHZhbmNlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gZ2x5cGhzLmxlbmd0aCB8fCBpbmRleCA9PT0gLTEpIGNsYXNzQ29kZSA9ICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRFTkRfT0ZfVEVYVF9DTEFTUztcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdseXBoID0gZ2x5cGhzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoZ2x5cGguaWQgPT09IDB4ZmZmZikgY2xhc3NDb2RlID0gJDUwYzdhYWM5MzE2ZjI5NDgkdmFyJERFTEVURURfR0xZUEhfQ0xBU1M7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzQ29kZSA9IHRoaXMubG9va3VwVGFibGUubG9va3VwKGdseXBoLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzQ29kZSA9PSBudWxsKSBjbGFzc0NvZGUgPSAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkT1VUX09GX0JPVU5EU19DTEFTUztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcm93ID0gdGhpcy5zdGF0ZVRhYmxlLnN0YXRlQXJyYXkuZ2V0SXRlbShjdXJyZW50U3RhdGUpO1xuICAgICAgICAgICAgbGV0IGVudHJ5SW5kZXggPSByb3dbY2xhc3NDb2RlXTtcbiAgICAgICAgICAgIGxldCBlbnRyeSA9IHRoaXMuc3RhdGVUYWJsZS5lbnRyeVRhYmxlLmdldEl0ZW0oZW50cnlJbmRleCk7XG4gICAgICAgICAgICBpZiAoY2xhc3NDb2RlICE9PSAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkRU5EX09GX1RFWFRfQ0xBU1MgJiYgY2xhc3NDb2RlICE9PSAkNTBjN2FhYzkzMTZmMjk0OCR2YXIkREVMRVRFRF9HTFlQSF9DTEFTUykge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NFbnRyeShnbHlwaCwgZW50cnksIGluZGV4KTtcbiAgICAgICAgICAgICAgICBzaG91bGRBZHZhbmNlID0gIShlbnRyeS5mbGFncyAmICQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRET05UX0FEVkFOQ0UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFN0YXRlID0gZW50cnkubmV3U3RhdGU7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQWR2YW5jZSkgaW5kZXggKz0gZGlyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbHlwaHM7XG4gICAgfVxuICAgIC8qKlxuICAgKiBQZXJmb3JtcyBhIGRlcHRoLWZpcnN0IHRyYXZlcnNhbCBvZiB0aGUgZ2x5cGggc3RyaW5nc1xuICAgKiByZXByZXNlbnRlZCBieSB0aGUgc3RhdGUgbWFjaGluZS5cbiAgICovIHRyYXZlcnNlKG9wdHMsIHN0YXRlID0gMCwgdmlzaXRlZCA9IG5ldyBTZXQpIHtcbiAgICAgICAgaWYgKHZpc2l0ZWQuaGFzKHN0YXRlKSkgcmV0dXJuO1xuICAgICAgICB2aXNpdGVkLmFkZChzdGF0ZSk7XG4gICAgICAgIGxldCB7IG5DbGFzc2VzOiBuQ2xhc3NlcyAsIHN0YXRlQXJyYXk6IHN0YXRlQXJyYXkgLCBlbnRyeVRhYmxlOiBlbnRyeVRhYmxlICB9ID0gdGhpcy5zdGF0ZVRhYmxlO1xuICAgICAgICBsZXQgcm93ID0gc3RhdGVBcnJheS5nZXRJdGVtKHN0YXRlKTtcbiAgICAgICAgLy8gU2tpcCBwcmVkZWZpbmVkIGNsYXNzZXNcbiAgICAgICAgZm9yKGxldCBjbGFzc0NvZGUgPSA0OyBjbGFzc0NvZGUgPCBuQ2xhc3NlczsgY2xhc3NDb2RlKyspe1xuICAgICAgICAgICAgbGV0IGVudHJ5SW5kZXggPSByb3dbY2xhc3NDb2RlXTtcbiAgICAgICAgICAgIGxldCBlbnRyeSA9IGVudHJ5VGFibGUuZ2V0SXRlbShlbnRyeUluZGV4KTtcbiAgICAgICAgICAgIC8vIFRyeSBhbGwgZ2x5cGhzIGluIHRoZSBjbGFzc1xuICAgICAgICAgICAgZm9yIChsZXQgZ2x5cGggb2YgdGhpcy5sb29rdXBUYWJsZS5nbHlwaHNGb3JWYWx1ZShjbGFzc0NvZGUpKXtcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5lbnRlcikgb3B0cy5lbnRlcihnbHlwaCwgZW50cnkpO1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5uZXdTdGF0ZSAhPT0gMCkgdGhpcy50cmF2ZXJzZShvcHRzLCBlbnRyeS5uZXdTdGF0ZSwgdmlzaXRlZCk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuZXhpdCkgb3B0cy5leGl0KGdseXBoLCBlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc3RhdGVUYWJsZSl7XG4gICAgICAgIHRoaXMuc3RhdGVUYWJsZSA9IHN0YXRlVGFibGU7XG4gICAgICAgIHRoaXMubG9va3VwVGFibGUgPSBuZXcgKDAsICRmZjVjZTA3N2RhZTBmMTQ0JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHN0YXRlVGFibGUuY2xhc3NUYWJsZSk7XG4gICAgfVxufVxuXG5cblxuXG4vLyBpbmRpYyByZXBsYWNlbWVudCBmbGFnc1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJE1BUktfRklSU1QgPSAweDgwMDA7XG5jb25zdCAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkTUFSS19MQVNUID0gMHgyMDAwO1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJFZFUkIgPSAweDAwMEY7XG4vLyBjb250ZXh0dWFsIHN1YnN0aXR1dGlvbiBhbmQgZ2x5cGggaW5zZXJ0aW9uIGZsYWdcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRTRVRfTUFSSyA9IDB4ODAwMDtcbi8vIGxpZ2F0dXJlIGVudHJ5IGZsYWdzXG5jb25zdCAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkU0VUX0NPTVBPTkVOVCA9IDB4ODAwMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRQRVJGT1JNX0FDVElPTiA9IDB4MjAwMDtcbi8vIGxpZ2F0dXJlIGFjdGlvbiBtYXNrc1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJExBU1RfTUFTSyA9IDB4ODAwMDAwMDA7XG5jb25zdCAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkU1RPUkVfTUFTSyA9IDB4NDAwMDAwMDA7XG5jb25zdCAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkT0ZGU0VUX01BU0sgPSAweDNGRkZGRkZGO1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJFZFUlRJQ0FMX09OTFkgPSAweDgwMDAwMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRSRVZFUlNFX0RJUkVDVElPTiA9IDB4NDAwMDAwO1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJEhPUklaT05UQUxfQU5EX1ZFUlRJQ0FMID0gMHgyMDAwMDA7XG4vLyBnbHlwaCBpbnNlcnRpb24gZmxhZ3NcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRDVVJSRU5UX0lTX0tBU0hJREFfTElLRSA9IDB4MjAwMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLRURfSVNfS0FTSElEQV9MSUtFID0gMHgxMDAwO1xuY29uc3QgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJENVUlJFTlRfSU5TRVJUX0JFRk9SRSA9IDB4MDgwMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLRURfSU5TRVJUX0JFRk9SRSA9IDB4MDQwMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRDVVJSRU5UX0lOU0VSVF9DT1VOVCA9IDB4MDNFMDtcbmNvbnN0ICQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLRURfSU5TRVJUX0NPVU5UID0gMHgwMDFGO1xuY2xhc3MgJDU1ZjcxNDMzYTYwNWM4N2QkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgLy8gUHJvY2Vzc2VzIGFuIGFycmF5IG9mIGdseXBocyBhbmQgYXBwbGllcyB0aGUgc3BlY2lmaWVkIGZlYXR1cmVzXG4gICAgLy8gRmVhdHVyZXMgc2hvdWxkIGJlIGluIHRoZSBmb3JtIG9mIHtmZWF0dXJlVHlwZTp7ZmVhdHVyZVNldHRpbmc6Ym9vbGVhbn19XG4gICAgcHJvY2VzcyhnbHlwaHMsIGZlYXR1cmVzID0ge30pIHtcbiAgICAgICAgZm9yIChsZXQgY2hhaW4gb2YgdGhpcy5tb3J4LmNoYWlucyl7XG4gICAgICAgICAgICBsZXQgZmxhZ3MgPSBjaGFpbi5kZWZhdWx0RmxhZ3M7XG4gICAgICAgICAgICAvLyBlbmFibGUvZGlzYWJsZSB0aGUgcmVxdWVzdGVkIGZlYXR1cmVzXG4gICAgICAgICAgICBmb3IgKGxldCBmZWF0dXJlIG9mIGNoYWluLmZlYXR1cmVzKXtcbiAgICAgICAgICAgICAgICBsZXQgZjtcbiAgICAgICAgICAgICAgICBpZiAoZiA9IGZlYXR1cmVzW2ZlYXR1cmUuZmVhdHVyZVR5cGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmW2ZlYXR1cmUuZmVhdHVyZVNldHRpbmddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFncyAmPSBmZWF0dXJlLmRpc2FibGVGbGFncztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzIHw9IGZlYXR1cmUuZW5hYmxlRmxhZ3M7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZltmZWF0dXJlLmZlYXR1cmVTZXR0aW5nXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzIHw9IH5mZWF0dXJlLmRpc2FibGVGbGFncztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzICY9IH5mZWF0dXJlLmVuYWJsZUZsYWdzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgc3VidGFibGUgb2YgY2hhaW4uc3VidGFibGVzKWlmIChzdWJ0YWJsZS5zdWJGZWF0dXJlRmxhZ3MgJiBmbGFncykgdGhpcy5wcm9jZXNzU3VidGFibGUoc3VidGFibGUsIGdseXBocyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVtb3ZlIGRlbGV0ZWQgZ2x5cGhzXG4gICAgICAgIGxldCBpbmRleCA9IGdseXBocy5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZShpbmRleCA+PSAwKXtcbiAgICAgICAgICAgIGlmIChnbHlwaHNbaW5kZXhdLmlkID09PSAweGZmZmYpIGdseXBocy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2x5cGhzO1xuICAgIH1cbiAgICBwcm9jZXNzU3VidGFibGUoc3VidGFibGUsIGdseXBocykge1xuICAgICAgICB0aGlzLnN1YnRhYmxlID0gc3VidGFibGU7XG4gICAgICAgIHRoaXMuZ2x5cGhzID0gZ2x5cGhzO1xuICAgICAgICBpZiAodGhpcy5zdWJ0YWJsZS50eXBlID09PSA0KSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NOb25jb250ZXh0dWFsU3Vic3RpdHV0aW9ucyh0aGlzLnN1YnRhYmxlLCB0aGlzLmdseXBocyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saWdhdHVyZVN0YWNrID0gW107XG4gICAgICAgIHRoaXMubWFya2VkR2x5cGggPSBudWxsO1xuICAgICAgICB0aGlzLmZpcnN0R2x5cGggPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RHbHlwaCA9IG51bGw7XG4gICAgICAgIHRoaXMubWFya2VkSW5kZXggPSBudWxsO1xuICAgICAgICBsZXQgc3RhdGVNYWNoaW5lID0gdGhpcy5nZXRTdGF0ZU1hY2hpbmUoc3VidGFibGUpO1xuICAgICAgICBsZXQgcHJvY2VzcyA9IHRoaXMuZ2V0UHJvY2Vzc29yKCk7XG4gICAgICAgIGxldCByZXZlcnNlID0gISEodGhpcy5zdWJ0YWJsZS5jb3ZlcmFnZSAmICQ1NWY3MTQzM2E2MDVjODdkJHZhciRSRVZFUlNFX0RJUkVDVElPTik7XG4gICAgICAgIHJldHVybiBzdGF0ZU1hY2hpbmUucHJvY2Vzcyh0aGlzLmdseXBocywgcmV2ZXJzZSwgcHJvY2Vzcyk7XG4gICAgfVxuICAgIGdldFN0YXRlTWFjaGluZShzdWJ0YWJsZSkge1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkNTBjN2FhYzkzMTZmMjk0OCRleHBvcnQkMmUyYmNkODczOWFlMDM5KShzdWJ0YWJsZS50YWJsZS5zdGF0ZVRhYmxlKTtcbiAgICB9XG4gICAgZ2V0UHJvY2Vzc29yKCkge1xuICAgICAgICBzd2l0Y2godGhpcy5zdWJ0YWJsZS50eXBlKXtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzSW5kaWNSZWFycmFnZW1lbnQ7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc0NvbnRleHR1YWxTdWJzdGl0dXRpb247XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc0xpZ2F0dXJlO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NOb25jb250ZXh0dWFsU3Vic3RpdHV0aW9ucztcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzR2x5cGhJbnNlcnRpb247XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtb3J4IHN1YnRhYmxlIHR5cGU6ICR7dGhpcy5zdWJ0YWJsZS50eXBlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByb2Nlc3NJbmRpY1JlYXJyYWdlbWVudChnbHlwaCwgZW50cnksIGluZGV4KSB7XG4gICAgICAgIGlmIChlbnRyeS5mbGFncyAmICQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLX0ZJUlNUKSB0aGlzLmZpcnN0R2x5cGggPSBpbmRleDtcbiAgICAgICAgaWYgKGVudHJ5LmZsYWdzICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJE1BUktfTEFTVCkgdGhpcy5sYXN0R2x5cGggPSBpbmRleDtcbiAgICAgICAgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHJlb3JkZXJHbHlwaHModGhpcy5nbHlwaHMsIGVudHJ5LmZsYWdzICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJFZFUkIsIHRoaXMuZmlyc3RHbHlwaCwgdGhpcy5sYXN0R2x5cGgpO1xuICAgIH1cbiAgICBwcm9jZXNzQ29udGV4dHVhbFN1YnN0aXR1dGlvbihnbHlwaCwgZW50cnksIGluZGV4KSB7XG4gICAgICAgIGxldCBzdWJzaXR1dGlvbnMgPSB0aGlzLnN1YnRhYmxlLnRhYmxlLnN1YnN0aXR1dGlvblRhYmxlLml0ZW1zO1xuICAgICAgICBpZiAoZW50cnkubWFya0luZGV4ICE9PSAweGZmZmYpIHtcbiAgICAgICAgICAgIGxldCBsb29rdXAgPSBzdWJzaXR1dGlvbnMuZ2V0SXRlbShlbnRyeS5tYXJrSW5kZXgpO1xuICAgICAgICAgICAgbGV0IGxvb2t1cFRhYmxlID0gbmV3ICgwLCAkZmY1Y2UwNzdkYWUwZjE0NCRleHBvcnQkMmUyYmNkODczOWFlMDM5KShsb29rdXApO1xuICAgICAgICAgICAgZ2x5cGggPSB0aGlzLmdseXBoc1t0aGlzLm1hcmtlZEdseXBoXTtcbiAgICAgICAgICAgIHZhciBnaWQgPSBsb29rdXBUYWJsZS5sb29rdXAoZ2x5cGguaWQpO1xuICAgICAgICAgICAgaWYgKGdpZCkgdGhpcy5nbHlwaHNbdGhpcy5tYXJrZWRHbHlwaF0gPSB0aGlzLmZvbnQuZ2V0R2x5cGgoZ2lkLCBnbHlwaC5jb2RlUG9pbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkuY3VycmVudEluZGV4ICE9PSAweGZmZmYpIHtcbiAgICAgICAgICAgIGxldCBsb29rdXAgPSBzdWJzaXR1dGlvbnMuZ2V0SXRlbShlbnRyeS5jdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgbGV0IGxvb2t1cFRhYmxlID0gbmV3ICgwLCAkZmY1Y2UwNzdkYWUwZjE0NCRleHBvcnQkMmUyYmNkODczOWFlMDM5KShsb29rdXApO1xuICAgICAgICAgICAgZ2x5cGggPSB0aGlzLmdseXBoc1tpbmRleF07XG4gICAgICAgICAgICB2YXIgZ2lkID0gbG9va3VwVGFibGUubG9va3VwKGdseXBoLmlkKTtcbiAgICAgICAgICAgIGlmIChnaWQpIHRoaXMuZ2x5cGhzW2luZGV4XSA9IHRoaXMuZm9udC5nZXRHbHlwaChnaWQsIGdseXBoLmNvZGVQb2ludHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeS5mbGFncyAmICQ1NWY3MTQzM2E2MDVjODdkJHZhciRTRVRfTUFSSykgdGhpcy5tYXJrZWRHbHlwaCA9IGluZGV4O1xuICAgIH1cbiAgICBwcm9jZXNzTGlnYXR1cmUoZ2x5cGgsIGVudHJ5LCBpbmRleCkge1xuICAgICAgICBpZiAoZW50cnkuZmxhZ3MgJiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkU0VUX0NPTVBPTkVOVCkgdGhpcy5saWdhdHVyZVN0YWNrLnB1c2goaW5kZXgpO1xuICAgICAgICBpZiAoZW50cnkuZmxhZ3MgJiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkUEVSRk9STV9BQ1RJT04pIHtcbiAgICAgICAgICAgIGxldCBhY3Rpb25zID0gdGhpcy5zdWJ0YWJsZS50YWJsZS5saWdhdHVyZUFjdGlvbnM7XG4gICAgICAgICAgICBsZXQgY29tcG9uZW50cyA9IHRoaXMuc3VidGFibGUudGFibGUuY29tcG9uZW50cztcbiAgICAgICAgICAgIGxldCBsaWdhdHVyZUxpc3QgPSB0aGlzLnN1YnRhYmxlLnRhYmxlLmxpZ2F0dXJlTGlzdDtcbiAgICAgICAgICAgIGxldCBhY3Rpb25JbmRleCA9IGVudHJ5LmFjdGlvbjtcbiAgICAgICAgICAgIGxldCBsYXN0ID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgbGlnYXR1cmVJbmRleCA9IDA7XG4gICAgICAgICAgICBsZXQgY29kZVBvaW50cyA9IFtdO1xuICAgICAgICAgICAgbGV0IGxpZ2F0dXJlR2x5cGhzID0gW107XG4gICAgICAgICAgICB3aGlsZSghbGFzdCl7XG4gICAgICAgICAgICAgICAgbGV0IGNvbXBvbmVudEdseXBoID0gdGhpcy5saWdhdHVyZVN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIGNvZGVQb2ludHMudW5zaGlmdCguLi50aGlzLmdseXBoc1tjb21wb25lbnRHbHlwaF0uY29kZVBvaW50cyk7XG4gICAgICAgICAgICAgICAgbGV0IGFjdGlvbiA9IGFjdGlvbnMuZ2V0SXRlbShhY3Rpb25JbmRleCsrKTtcbiAgICAgICAgICAgICAgICBsYXN0ID0gISEoYWN0aW9uICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJExBU1RfTUFTSyk7XG4gICAgICAgICAgICAgICAgbGV0IHN0b3JlID0gISEoYWN0aW9uICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJFNUT1JFX01BU0spO1xuICAgICAgICAgICAgICAgIGxldCBvZmZzZXQgPSAoYWN0aW9uICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJE9GRlNFVF9NQVNLKSA8PCAyID4+IDI7IC8vIHNpZ24gZXh0ZW5kIDMwIHRvIDMyIGJpdHNcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gdGhpcy5nbHlwaHNbY29tcG9uZW50R2x5cGhdLmlkO1xuICAgICAgICAgICAgICAgIGxldCBjb21wb25lbnQgPSBjb21wb25lbnRzLmdldEl0ZW0ob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBsaWdhdHVyZUluZGV4ICs9IGNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICBpZiAobGFzdCB8fCBzdG9yZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGlnYXR1cmVFbnRyeSA9IGxpZ2F0dXJlTGlzdC5nZXRJdGVtKGxpZ2F0dXJlSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdseXBoc1tjb21wb25lbnRHbHlwaF0gPSB0aGlzLmZvbnQuZ2V0R2x5cGgobGlnYXR1cmVFbnRyeSwgY29kZVBvaW50cyk7XG4gICAgICAgICAgICAgICAgICAgIGxpZ2F0dXJlR2x5cGhzLnB1c2goY29tcG9uZW50R2x5cGgpO1xuICAgICAgICAgICAgICAgICAgICBsaWdhdHVyZUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgY29kZVBvaW50cyA9IFtdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmdseXBoc1tjb21wb25lbnRHbHlwaF0gPSB0aGlzLmZvbnQuZ2V0R2x5cGgoMHhmZmZmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFB1dCBsaWdhdHVyZSBnbHlwaCBpbmRleGVzIGJhY2sgb24gdGhlIHN0YWNrXG4gICAgICAgICAgICB0aGlzLmxpZ2F0dXJlU3RhY2sucHVzaCguLi5saWdhdHVyZUdseXBocyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc05vbmNvbnRleHR1YWxTdWJzdGl0dXRpb25zKHN1YnRhYmxlLCBnbHlwaHMsIGluZGV4KSB7XG4gICAgICAgIGxldCBsb29rdXBUYWJsZSA9IG5ldyAoMCwgJGZmNWNlMDc3ZGFlMGYxNDQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoc3VidGFibGUudGFibGUubG9va3VwVGFibGUpO1xuICAgICAgICBmb3IoaW5kZXggPSAwOyBpbmRleCA8IGdseXBocy5sZW5ndGg7IGluZGV4Kyspe1xuICAgICAgICAgICAgbGV0IGdseXBoID0gZ2x5cGhzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChnbHlwaC5pZCAhPT0gMHhmZmZmKSB7XG4gICAgICAgICAgICAgICAgbGV0IGdpZCA9IGxvb2t1cFRhYmxlLmxvb2t1cChnbHlwaC5pZCk7XG4gICAgICAgICAgICAgICAgaWYgKGdpZCkgZ2x5cGhzW2luZGV4XSA9IHRoaXMuZm9udC5nZXRHbHlwaChnaWQsIGdseXBoLmNvZGVQb2ludHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnNlcnRHbHlwaHMoZ2x5cGhJbmRleCwgaW5zZXJ0aW9uQWN0aW9uSW5kZXgsIGNvdW50LCBpc0JlZm9yZSkge1xuICAgICAgICBsZXQgaW5zZXJ0aW9ucyA9IFtdO1xuICAgICAgICB3aGlsZShjb3VudC0tKXtcbiAgICAgICAgICAgIGxldCBnaWQgPSB0aGlzLnN1YnRhYmxlLnRhYmxlLmluc2VydGlvbkFjdGlvbnMuZ2V0SXRlbShpbnNlcnRpb25BY3Rpb25JbmRleCsrKTtcbiAgICAgICAgICAgIGluc2VydGlvbnMucHVzaCh0aGlzLmZvbnQuZ2V0R2x5cGgoZ2lkKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0JlZm9yZSkgZ2x5cGhJbmRleCsrO1xuICAgICAgICB0aGlzLmdseXBocy5zcGxpY2UoZ2x5cGhJbmRleCwgMCwgLi4uaW5zZXJ0aW9ucyk7XG4gICAgfVxuICAgIHByb2Nlc3NHbHlwaEluc2VydGlvbihnbHlwaCwgZW50cnksIGluZGV4KSB7XG4gICAgICAgIGlmIChlbnRyeS5mbGFncyAmICQ1NWY3MTQzM2E2MDVjODdkJHZhciRTRVRfTUFSSykgdGhpcy5tYXJrZWRJbmRleCA9IGluZGV4O1xuICAgICAgICBpZiAoZW50cnkubWFya2VkSW5zZXJ0SW5kZXggIT09IDB4ZmZmZikge1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gKGVudHJ5LmZsYWdzICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJE1BUktFRF9JTlNFUlRfQ09VTlQpID4+PiA1O1xuICAgICAgICAgICAgbGV0IGlzQmVmb3JlID0gISEoZW50cnkuZmxhZ3MgJiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkTUFSS0VEX0lOU0VSVF9CRUZPUkUpO1xuICAgICAgICAgICAgdGhpcy5faW5zZXJ0R2x5cGhzKHRoaXMubWFya2VkSW5kZXgsIGVudHJ5Lm1hcmtlZEluc2VydEluZGV4LCBjb3VudCwgaXNCZWZvcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeS5jdXJyZW50SW5zZXJ0SW5kZXggIT09IDB4ZmZmZikge1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gKGVudHJ5LmZsYWdzICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJENVUlJFTlRfSU5TRVJUX0NPVU5UKSA+Pj4gNTtcbiAgICAgICAgICAgIGxldCBpc0JlZm9yZSA9ICEhKGVudHJ5LmZsYWdzICYgJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJENVUlJFTlRfSU5TRVJUX0JFRk9SRSk7XG4gICAgICAgICAgICB0aGlzLl9pbnNlcnRHbHlwaHMoaW5kZXgsIGVudHJ5LmN1cnJlbnRJbnNlcnRJbmRleCwgY291bnQsIGlzQmVmb3JlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTdXBwb3J0ZWRGZWF0dXJlcygpIHtcbiAgICAgICAgbGV0IGZlYXR1cmVzID0gW107XG4gICAgICAgIGZvciAobGV0IGNoYWluIG9mIHRoaXMubW9yeC5jaGFpbnMpZm9yIChsZXQgZmVhdHVyZSBvZiBjaGFpbi5mZWF0dXJlcylmZWF0dXJlcy5wdXNoKFtcbiAgICAgICAgICAgIGZlYXR1cmUuZmVhdHVyZVR5cGUsXG4gICAgICAgICAgICBmZWF0dXJlLmZlYXR1cmVTZXR0aW5nXG4gICAgICAgIF0pO1xuICAgICAgICByZXR1cm4gZmVhdHVyZXM7XG4gICAgfVxuICAgIGdlbmVyYXRlSW5wdXRzKGdpZCkge1xuICAgICAgICBpZiAoIXRoaXMuaW5wdXRDYWNoZSkgdGhpcy5nZW5lcmF0ZUlucHV0Q2FjaGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRDYWNoZVtnaWRdIHx8IFtdO1xuICAgIH1cbiAgICBnZW5lcmF0ZUlucHV0Q2FjaGUoKSB7XG4gICAgICAgIHRoaXMuaW5wdXRDYWNoZSA9IHt9O1xuICAgICAgICBmb3IgKGxldCBjaGFpbiBvZiB0aGlzLm1vcnguY2hhaW5zKXtcbiAgICAgICAgICAgIGxldCBmbGFncyA9IGNoYWluLmRlZmF1bHRGbGFncztcbiAgICAgICAgICAgIGZvciAobGV0IHN1YnRhYmxlIG9mIGNoYWluLnN1YnRhYmxlcylpZiAoc3VidGFibGUuc3ViRmVhdHVyZUZsYWdzICYgZmxhZ3MpIHRoaXMuZ2VuZXJhdGVJbnB1dHNGb3JTdWJ0YWJsZShzdWJ0YWJsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2VuZXJhdGVJbnB1dHNGb3JTdWJ0YWJsZShzdWJ0YWJsZSkge1xuICAgICAgICAvLyBDdXJyZW50bHksIG9ubHkgc3VwcG9ydGluZyBsaWdhdHVyZSBzdWJ0YWJsZXMuXG4gICAgICAgIGlmIChzdWJ0YWJsZS50eXBlICE9PSAyKSByZXR1cm47XG4gICAgICAgIGxldCByZXZlcnNlID0gISEoc3VidGFibGUuY292ZXJhZ2UgJiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkUkVWRVJTRV9ESVJFQ1RJT04pO1xuICAgICAgICBpZiAocmV2ZXJzZSkgdGhyb3cgbmV3IEVycm9yKFwiUmV2ZXJzZSBzdWJ0YWJsZSwgbm90IHN1cHBvcnRlZC5cIik7XG4gICAgICAgIHRoaXMuc3VidGFibGUgPSBzdWJ0YWJsZTtcbiAgICAgICAgdGhpcy5saWdhdHVyZVN0YWNrID0gW107XG4gICAgICAgIGxldCBzdGF0ZU1hY2hpbmUgPSB0aGlzLmdldFN0YXRlTWFjaGluZShzdWJ0YWJsZSk7XG4gICAgICAgIGxldCBwcm9jZXNzID0gdGhpcy5nZXRQcm9jZXNzb3IoKTtcbiAgICAgICAgbGV0IGlucHV0ID0gW107XG4gICAgICAgIGxldCBzdGFjayA9IFtdO1xuICAgICAgICB0aGlzLmdseXBocyA9IFtdO1xuICAgICAgICBzdGF0ZU1hY2hpbmUudHJhdmVyc2Uoe1xuICAgICAgICAgICAgZW50ZXI6IChnbHlwaCwgZW50cnkpPT57XG4gICAgICAgICAgICAgICAgbGV0IGdseXBocyA9IHRoaXMuZ2x5cGhzO1xuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBnbHlwaHM6IGdseXBocy5zbGljZSgpLFxuICAgICAgICAgICAgICAgICAgICBsaWdhdHVyZVN0YWNrOiB0aGlzLmxpZ2F0dXJlU3RhY2suc2xpY2UoKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIEFkZCBnbHlwaCB0byBpbnB1dCBhbmQgZ2x5cGhzIHRvIHByb2Nlc3MuXG4gICAgICAgICAgICAgICAgbGV0IGcxID0gdGhpcy5mb250LmdldEdseXBoKGdseXBoKTtcbiAgICAgICAgICAgICAgICBpbnB1dC5wdXNoKGcxKTtcbiAgICAgICAgICAgICAgICBnbHlwaHMucHVzaChpbnB1dFtpbnB1dC5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBsaWdhdHVyZSBzdWJzdGl0dXRpb25cbiAgICAgICAgICAgICAgICBwcm9jZXNzKGdseXBoc1tnbHlwaHMubGVuZ3RoIC0gMV0sIGVudHJ5LCBnbHlwaHMubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgLy8gQWRkIGlucHV0IHRvIHJlc3VsdCBpZiBvbmx5IG9uZSBtYXRjaGluZyAobm9uLWRlbGV0ZWQpIGdseXBoIHJlbWFpbnMuXG4gICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgZm91bmQgPSAwO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoICYmIGNvdW50IDw9IDE7IGkrKylpZiAoZ2x5cGhzW2ldLmlkICE9PSAweGZmZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSBnbHlwaHNbaV0uaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gaW5wdXQubWFwKChnKT0+Zy5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjYWNoZTEgPSB0aGlzLmlucHV0Q2FjaGVbZm91bmRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGUxKSBjYWNoZTEucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMuaW5wdXRDYWNoZVtmb3VuZF0gPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXhpdDogKCk9PntcbiAgICAgICAgICAgICAgICAoeyBnbHlwaHM6IHRoaXMuZ2x5cGhzICwgbGlnYXR1cmVTdGFjazogdGhpcy5saWdhdHVyZVN0YWNrICB9ID0gc3RhY2sucG9wKCkpO1xuICAgICAgICAgICAgICAgIGlucHV0LnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZm9udCl7XG4gICAgICAgIHRoaXMucHJvY2Vzc0luZGljUmVhcnJhZ2VtZW50ID0gdGhpcy5wcm9jZXNzSW5kaWNSZWFycmFnZW1lbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzQ29udGV4dHVhbFN1YnN0aXR1dGlvbiA9IHRoaXMucHJvY2Vzc0NvbnRleHR1YWxTdWJzdGl0dXRpb24uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzTGlnYXR1cmUgPSB0aGlzLnByb2Nlc3NMaWdhdHVyZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnByb2Nlc3NOb25jb250ZXh0dWFsU3Vic3RpdHV0aW9ucyA9IHRoaXMucHJvY2Vzc05vbmNvbnRleHR1YWxTdWJzdGl0dXRpb25zLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucHJvY2Vzc0dseXBoSW5zZXJ0aW9uID0gdGhpcy5wcm9jZXNzR2x5cGhJbnNlcnRpb24uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5mb250ID0gZm9udDtcbiAgICAgICAgdGhpcy5tb3J4ID0gZm9udC5tb3J4O1xuICAgICAgICB0aGlzLmlucHV0Q2FjaGUgPSBudWxsO1xuICAgIH1cbn1cbigwLCAkNTJaSWYkc3djaGVscGVyc3NyY190c19kZWNvcmF0ZW1qcykoW1xuICAgICgwLCAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZClcbl0sICQ1NWY3MTQzM2E2MDVjODdkJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlLCBcImdldFN0YXRlTWFjaGluZVwiLCBudWxsKTtcbi8vIHN3YXBzIHRoZSBnbHlwaHMgaW4gcmFuZ2VBIHdpdGggdGhvc2UgaW4gcmFuZ2VCXG4vLyByZXZlcnNlIHRoZSBnbHlwaHMgaW5zaWRlIHRob3NlIHJhbmdlcyBpZiBzcGVjaWZpZWRcbi8vIHJhbmdlcyBhcmUgaW4gW29mZnNldCwgbGVuZ3RoXSBmb3JtYXRcbmZ1bmN0aW9uICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgcmFuZ2VBLCByYW5nZUIsIHJldmVyc2VBID0gZmFsc2UsIHJldmVyc2VCID0gZmFsc2UpIHtcbiAgICBsZXQgZW5kID0gZ2x5cGhzLnNwbGljZShyYW5nZUJbMF0gLSAocmFuZ2VCWzFdIC0gMSksIHJhbmdlQlsxXSk7XG4gICAgaWYgKHJldmVyc2VCKSBlbmQucmV2ZXJzZSgpO1xuICAgIGxldCBzdGFydCA9IGdseXBocy5zcGxpY2UocmFuZ2VBWzBdLCByYW5nZUFbMV0sIC4uLmVuZCk7XG4gICAgaWYgKHJldmVyc2VBKSBzdGFydC5yZXZlcnNlKCk7XG4gICAgZ2x5cGhzLnNwbGljZShyYW5nZUJbMF0gLSAocmFuZ2VBWzFdIC0gMSksIDAsIC4uLnN0YXJ0KTtcbiAgICByZXR1cm4gZ2x5cGhzO1xufVxuZnVuY3Rpb24gJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHJlb3JkZXJHbHlwaHMoZ2x5cGhzLCB2ZXJiLCBmaXJzdEdseXBoLCBsYXN0R2x5cGgpIHtcbiAgICBsZXQgbGVuZ3RoID0gbGFzdEdseXBoIC0gZmlyc3RHbHlwaCArIDE7XG4gICAgc3dpdGNoKHZlcmIpe1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gZ2x5cGhzO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHN3YXAoZ2x5cGhzLCBbXG4gICAgICAgICAgICAgICAgZmlyc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICBdLCBbXG4gICAgICAgICAgICAgICAgbGFzdEdseXBoLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgIF0pO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHN3YXAoZ2x5cGhzLCBbXG4gICAgICAgICAgICAgICAgZmlyc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICBdLCBbXG4gICAgICAgICAgICAgICAgbGFzdEdseXBoLFxuICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgIF0pO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHN3YXAoZ2x5cGhzLCBbXG4gICAgICAgICAgICAgICAgZmlyc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICBdLCBbXG4gICAgICAgICAgICAgICAgbGFzdEdseXBoLFxuICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgIF0pO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICByZXR1cm4gJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHN3YXAoZ2x5cGhzLCBbXG4gICAgICAgICAgICAgICAgZmlyc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdLCBbXG4gICAgICAgICAgICAgICAgbGFzdEdseXBoLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgIF0pO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICByZXR1cm4gJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHN3YXAoZ2x5cGhzLCBbXG4gICAgICAgICAgICAgICAgZmlyc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdLCBbXG4gICAgICAgICAgICAgICAgbGFzdEdseXBoLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgIF0sIHRydWUsIGZhbHNlKTtcbiAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgcmV0dXJuICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgW1xuICAgICAgICAgICAgICAgIGZpcnN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgXSwgW1xuICAgICAgICAgICAgICAgIGxhc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgcmV0dXJuICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgW1xuICAgICAgICAgICAgICAgIGZpcnN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgXSwgW1xuICAgICAgICAgICAgICAgIGxhc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIHJldHVybiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkc3dhcChnbHlwaHMsIFtcbiAgICAgICAgICAgICAgICBmaXJzdEdseXBoLFxuICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgIF0sIFtcbiAgICAgICAgICAgICAgICBsYXN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSk7XG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIHJldHVybiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkc3dhcChnbHlwaHMsIFtcbiAgICAgICAgICAgICAgICBmaXJzdEdseXBoLFxuICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgIF0sIFtcbiAgICAgICAgICAgICAgICBsYXN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSwgZmFsc2UsIHRydWUpO1xuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgcmV0dXJuICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgW1xuICAgICAgICAgICAgICAgIGZpcnN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSwgW1xuICAgICAgICAgICAgICAgIGxhc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgIHJldHVybiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkc3dhcChnbHlwaHMsIFtcbiAgICAgICAgICAgICAgICBmaXJzdEdseXBoLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIF0sIFtcbiAgICAgICAgICAgICAgICBsYXN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgXSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgcmV0dXJuICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgW1xuICAgICAgICAgICAgICAgIGZpcnN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSwgW1xuICAgICAgICAgICAgICAgIGxhc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIHJldHVybiAkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkc3dhcChnbHlwaHMsIFtcbiAgICAgICAgICAgICAgICBmaXJzdEdseXBoLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIF0sIFtcbiAgICAgICAgICAgICAgICBsYXN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgcmV0dXJuICQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwKGdseXBocywgW1xuICAgICAgICAgICAgICAgIGZpcnN0R2x5cGgsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXSwgW1xuICAgICAgICAgICAgICAgIGxhc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICByZXR1cm4gJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJHN3YXAoZ2x5cGhzLCBbXG4gICAgICAgICAgICAgICAgZmlyc3RHbHlwaCxcbiAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICBdLCBbXG4gICAgICAgICAgICAgICAgbGFzdEdseXBoLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgIF0sIHRydWUsIHRydWUpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHZlcmI6ICR7dmVyYn1gKTtcbiAgICB9XG59XG5cblxuY2xhc3MgJGJhNmRkNzQyMDNiZTg3MjgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgc3Vic3RpdHV0ZShnbHlwaFJ1bikge1xuICAgICAgICAvLyBBQVQgZXhwZWN0cyB0aGUgZ2x5cGhzIHRvIGJlIGluIHZpc3VhbCBvcmRlciBwcmlvciB0byBtb3J4IHByb2Nlc3NpbmcsXG4gICAgICAgIC8vIHNvIHJldmVyc2UgdGhlIGdseXBocyBpZiB0aGUgc2NyaXB0IGlzIHJpZ2h0LXRvLWxlZnQuXG4gICAgICAgIGlmIChnbHlwaFJ1bi5kaXJlY3Rpb24gPT09IFwicnRsXCIpIGdseXBoUnVuLmdseXBocy5yZXZlcnNlKCk7XG4gICAgICAgIHRoaXMubW9yeFByb2Nlc3Nvci5wcm9jZXNzKGdseXBoUnVuLmdseXBocywgJDNiNjMwMmI2NGVjY2MzMmMkZXhwb3J0JGI4MTNmN2QyYTE2NzdjMTYoZ2x5cGhSdW4uZmVhdHVyZXMpKTtcbiAgICB9XG4gICAgZ2V0QXZhaWxhYmxlRmVhdHVyZXMoc2NyaXB0LCBsYW5ndWFnZSkge1xuICAgICAgICByZXR1cm4gJDNiNjMwMmI2NGVjY2MzMmMkZXhwb3J0JGJkNmRmMzQ3YTRmMzkxYzQodGhpcy5tb3J4UHJvY2Vzc29yLmdldFN1cHBvcnRlZEZlYXR1cmVzKCkpO1xuICAgIH1cbiAgICBzdHJpbmdzRm9yR2x5cGgoZ2lkKSB7XG4gICAgICAgIGxldCBnbHlwaFN0cmluZ3MgPSB0aGlzLm1vcnhQcm9jZXNzb3IuZ2VuZXJhdGVJbnB1dHMoZ2lkKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBTZXQ7XG4gICAgICAgIGZvciAobGV0IGdseXBocyBvZiBnbHlwaFN0cmluZ3MpdGhpcy5fYWRkU3RyaW5ncyhnbHlwaHMsIDAsIHJlc3VsdCwgXCJcIik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIF9hZGRTdHJpbmdzKGdseXBocywgaW5kZXgsIHN0cmluZ3MsIHN0cmluZykge1xuICAgICAgICBsZXQgY29kZVBvaW50cyA9IHRoaXMuZm9udC5fY21hcFByb2Nlc3Nvci5jb2RlUG9pbnRzRm9yR2x5cGgoZ2x5cGhzW2luZGV4XSk7XG4gICAgICAgIGZvciAobGV0IGNvZGVQb2ludCBvZiBjb2RlUG9pbnRzKXtcbiAgICAgICAgICAgIGxldCBzID0gc3RyaW5nICsgU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IGdseXBocy5sZW5ndGggLSAxKSB0aGlzLl9hZGRTdHJpbmdzKGdseXBocywgaW5kZXggKyAxLCBzdHJpbmdzLCBzKTtcbiAgICAgICAgICAgIGVsc2Ugc3RyaW5ncy5hZGQocyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3RydWN0b3IoZm9udCl7XG4gICAgICAgIHRoaXMuZm9udCA9IGZvbnQ7XG4gICAgICAgIHRoaXMubW9yeFByb2Nlc3NvciA9IG5ldyAoMCwgJDU1ZjcxNDMzYTYwNWM4N2QkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZm9udCk7XG4gICAgICAgIHRoaXMuZmFsbGJhY2tQb3NpdGlvbiA9IGZhbHNlO1xuICAgIH1cbn1cblxuXG5cbmNsYXNzICQ5NGQ3YTczYmQyZWRmYzlhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIC8qKlxuICAgKiBBZGRzIHRoZSBnaXZlbiBmZWF0dXJlcyB0byB0aGUgbGFzdCBzdGFnZS5cbiAgICogSWdub3JlcyBmZWF0dXJlcyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGFwcGxpZWQuXG4gICAqLyBfYWRkRmVhdHVyZXMoZmVhdHVyZXMsIGdsb2JhbCkge1xuICAgICAgICBsZXQgc3RhZ2VJbmRleCA9IHRoaXMuc3RhZ2VzLmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBzdGFnZSA9IHRoaXMuc3RhZ2VzW3N0YWdlSW5kZXhdO1xuICAgICAgICBmb3IgKGxldCBmZWF0dXJlIG9mIGZlYXR1cmVzKWlmICh0aGlzLmFsbEZlYXR1cmVzW2ZlYXR1cmVdID09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YWdlLnB1c2goZmVhdHVyZSk7XG4gICAgICAgICAgICB0aGlzLmFsbEZlYXR1cmVzW2ZlYXR1cmVdID0gc3RhZ2VJbmRleDtcbiAgICAgICAgICAgIGlmIChnbG9iYWwpIHRoaXMuZ2xvYmFsRmVhdHVyZXNbZmVhdHVyZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgKiBBZGQgZmVhdHVyZXMgdG8gdGhlIGxhc3Qgc3RhZ2VcbiAgICovIGFkZChhcmcsIGdsb2JhbCA9IHRydWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhZ2VzLmxlbmd0aCA9PT0gMCkgdGhpcy5zdGFnZXMucHVzaChbXSk7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiKSBhcmcgPSBbXG4gICAgICAgICAgICBhcmdcbiAgICAgICAgXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkgdGhpcy5fYWRkRmVhdHVyZXMoYXJnLCBnbG9iYWwpO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJnID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRGZWF0dXJlcyhhcmcuZ2xvYmFsIHx8IFtdLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX2FkZEZlYXR1cmVzKGFyZy5sb2NhbCB8fCBbXSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgYXJndW1lbnQgdG8gU2hhcGluZ1BsYW4jYWRkXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICogQWRkIGEgbmV3IHN0YWdlXG4gICAqLyBhZGRTdGFnZShhcmcsIGdsb2JhbCkge1xuICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLnN0YWdlcy5wdXNoKGFyZywgW10pO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhZ2VzLnB1c2goW10pO1xuICAgICAgICAgICAgdGhpcy5hZGQoYXJnLCBnbG9iYWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldEZlYXR1cmVPdmVycmlkZXMoZmVhdHVyZXMpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmVhdHVyZXMpKSB0aGlzLmFkZChmZWF0dXJlcyk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBmZWF0dXJlcyA9PT0gXCJvYmplY3RcIikgZm9yKGxldCB0YWcgaW4gZmVhdHVyZXMpe1xuICAgICAgICAgICAgaWYgKGZlYXR1cmVzW3RhZ10pIHRoaXMuYWRkKHRhZyk7XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFsbEZlYXR1cmVzW3RhZ10gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxldCBzdGFnZSA9IHRoaXMuc3RhZ2VzW3RoaXMuYWxsRmVhdHVyZXNbdGFnXV07XG4gICAgICAgICAgICAgICAgc3RhZ2Uuc3BsaWNlKHN0YWdlLmluZGV4T2YodGFnKSwgMSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYWxsRmVhdHVyZXNbdGFnXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5nbG9iYWxGZWF0dXJlc1t0YWddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgKiBBc3NpZ25zIHRoZSBnbG9iYWwgZmVhdHVyZXMgdG8gdGhlIGdpdmVuIGdseXBoc1xuICAgKi8gYXNzaWduR2xvYmFsRmVhdHVyZXMoZ2x5cGhzKSB7XG4gICAgICAgIGZvciAobGV0IGdseXBoIG9mIGdseXBocylmb3IobGV0IGZlYXR1cmUgaW4gdGhpcy5nbG9iYWxGZWF0dXJlcylnbHlwaC5mZWF0dXJlc1tmZWF0dXJlXSA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgcGxhbm5lZCBzdGFnZXMgdXNpbmcgdGhlIGdpdmVuIE9UUHJvY2Vzc29yXG4gICAqLyBwcm9jZXNzKHByb2Nlc3NvciwgZ2x5cGhzLCBwb3NpdGlvbnMpIHtcbiAgICAgICAgZm9yIChsZXQgc3RhZ2Ugb2YgdGhpcy5zdGFnZXMpe1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGFnZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwb3NpdGlvbnMpIHN0YWdlKHRoaXMuZm9udCwgZ2x5cGhzLCB0aGlzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhZ2UubGVuZ3RoID4gMCkgcHJvY2Vzc29yLmFwcGx5RmVhdHVyZXMoc3RhZ2UsIGdseXBocywgcG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihmb250LCBzY3JpcHQsIGRpcmVjdGlvbil7XG4gICAgICAgIHRoaXMuZm9udCA9IGZvbnQ7XG4gICAgICAgIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5zdGFnZXMgPSBbXTtcbiAgICAgICAgdGhpcy5nbG9iYWxGZWF0dXJlcyA9IHt9O1xuICAgICAgICB0aGlzLmFsbEZlYXR1cmVzID0ge307XG4gICAgfVxufVxuXG5cblxuXG5jb25zdCAkNjQ5OTcwZDg3MzM1YjMwZiR2YXIkVkFSSUFUSU9OX0ZFQVRVUkVTID0gW1xuICAgIFwicnZyblwiXG5dO1xuY29uc3QgJDY0OTk3MGQ4NzMzNWIzMGYkdmFyJENPTU1PTl9GRUFUVVJFUyA9IFtcbiAgICBcImNjbXBcIixcbiAgICBcImxvY2xcIixcbiAgICBcInJsaWdcIixcbiAgICBcIm1hcmtcIixcbiAgICBcIm1rbWtcIlxuXTtcbmNvbnN0ICQ2NDk5NzBkODczMzViMzBmJHZhciRGUkFDVElPTkFMX0ZFQVRVUkVTID0gW1xuICAgIFwiZnJhY1wiLFxuICAgIFwibnVtclwiLFxuICAgIFwiZG5vbVwiXG5dO1xuY29uc3QgJDY0OTk3MGQ4NzMzNWIzMGYkdmFyJEhPUklaT05UQUxfRkVBVFVSRVMgPSBbXG4gICAgXCJjYWx0XCIsXG4gICAgXCJjbGlnXCIsXG4gICAgXCJsaWdhXCIsXG4gICAgXCJyY2x0XCIsXG4gICAgXCJjdXJzXCIsXG4gICAgXCJrZXJuXCJcbl07XG5jb25zdCAkNjQ5OTcwZDg3MzM1YjMwZiR2YXIkVkVSVElDQUxfRkVBVFVSRVMgPSBbXG4gICAgXCJ2ZXJ0XCJcbl07XG5jb25zdCAkNjQ5OTcwZDg3MzM1YjMwZiR2YXIkRElSRUNUSU9OQUxfRkVBVFVSRVMgPSB7XG4gICAgbHRyOiBbXG4gICAgICAgIFwibHRyYVwiLFxuICAgICAgICBcImx0cm1cIlxuICAgIF0sXG4gICAgcnRsOiBbXG4gICAgICAgIFwicnRsYVwiLFxuICAgICAgICBcInJ0bG1cIlxuICAgIF1cbn07XG5jbGFzcyAkNjQ5OTcwZDg3MzM1YjMwZiRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBzdGF0aWMgcGxhbihwbGFuLCBnbHlwaHMsIGZlYXR1cmVzKSB7XG4gICAgICAgIC8vIFBsYW4gdGhlIGZlYXR1cmVzIHdlIHdhbnQgdG8gYXBwbHlcbiAgICAgICAgdGhpcy5wbGFuUHJlcHJvY2Vzc2luZyhwbGFuKTtcbiAgICAgICAgdGhpcy5wbGFuRmVhdHVyZXMocGxhbik7XG4gICAgICAgIHRoaXMucGxhblBvc3Rwcm9jZXNzaW5nKHBsYW4sIGZlYXR1cmVzKTtcbiAgICAgICAgLy8gQXNzaWduIHRoZSBnbG9iYWwgZmVhdHVyZXMgdG8gYWxsIHRoZSBnbHlwaHNcbiAgICAgICAgcGxhbi5hc3NpZ25HbG9iYWxGZWF0dXJlcyhnbHlwaHMpO1xuICAgICAgICAvLyBBc3NpZ24gbG9jYWwgZmVhdHVyZXMgdG8gZ2x5cGhzXG4gICAgICAgIHRoaXMuYXNzaWduRmVhdHVyZXMocGxhbiwgZ2x5cGhzKTtcbiAgICB9XG4gICAgc3RhdGljIHBsYW5QcmVwcm9jZXNzaW5nKHBsYW4pIHtcbiAgICAgICAgcGxhbi5hZGQoe1xuICAgICAgICAgICAgZ2xvYmFsOiBbXG4gICAgICAgICAgICAgICAgLi4uJDY0OTk3MGQ4NzMzNWIzMGYkdmFyJFZBUklBVElPTl9GRUFUVVJFUyxcbiAgICAgICAgICAgICAgICAuLi4kNjQ5OTcwZDg3MzM1YjMwZiR2YXIkRElSRUNUSU9OQUxfRkVBVFVSRVNbcGxhbi5kaXJlY3Rpb25dXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbG9jYWw6ICQ2NDk5NzBkODczMzViMzBmJHZhciRGUkFDVElPTkFMX0ZFQVRVUkVTXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgcGxhbkZlYXR1cmVzKHBsYW4pIHtcbiAgICAvLyBEbyBub3RoaW5nIGJ5IGRlZmF1bHQuIExldCBzdWJjbGFzc2VzIG92ZXJyaWRlIHRoaXMuXG4gICAgfVxuICAgIHN0YXRpYyBwbGFuUG9zdHByb2Nlc3NpbmcocGxhbiwgdXNlckZlYXR1cmVzKSB7XG4gICAgICAgIHBsYW4uYWRkKFtcbiAgICAgICAgICAgIC4uLiQ2NDk5NzBkODczMzViMzBmJHZhciRDT01NT05fRkVBVFVSRVMsXG4gICAgICAgICAgICAuLi4kNjQ5OTcwZDg3MzM1YjMwZiR2YXIkSE9SSVpPTlRBTF9GRUFUVVJFU1xuICAgICAgICBdKTtcbiAgICAgICAgcGxhbi5zZXRGZWF0dXJlT3ZlcnJpZGVzKHVzZXJGZWF0dXJlcyk7XG4gICAgfVxuICAgIHN0YXRpYyBhc3NpZ25GZWF0dXJlcyhwbGFuLCBnbHlwaHMpIHtcbiAgICAgICAgLy8gRW5hYmxlIGNvbnRleHR1YWwgZnJhY3Rpb25zXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IGdseXBoID0gZ2x5cGhzW2ldO1xuICAgICAgICAgICAgaWYgKGdseXBoLmNvZGVQb2ludHNbMF0gPT09IDB4MjA0NCkge1xuICAgICAgICAgICAgICAgIGxldCBzdGFydCA9IGk7XG4gICAgICAgICAgICAgICAgbGV0IGVuZCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIC8vIEFwcGx5IG51bWVyYXRvclxuICAgICAgICAgICAgICAgIHdoaWxlKHN0YXJ0ID4gMCAmJiAoMCwgJDUyWklmJGlzRGlnaXQpKGdseXBoc1tzdGFydCAtIDFdLmNvZGVQb2ludHNbMF0pKXtcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhzW3N0YXJ0IC0gMV0uZmVhdHVyZXMubnVtciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGdseXBoc1tzdGFydCAtIDFdLmZlYXR1cmVzLmZyYWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzdGFydC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBcHBseSBkZW5vbWluYXRvclxuICAgICAgICAgICAgICAgIHdoaWxlKGVuZCA8IGdseXBocy5sZW5ndGggJiYgKDAsICQ1MlpJZiRpc0RpZ2l0KShnbHlwaHNbZW5kXS5jb2RlUG9pbnRzWzBdKSl7XG4gICAgICAgICAgICAgICAgICAgIGdseXBoc1tlbmRdLmZlYXR1cmVzLmRub20gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBnbHlwaHNbZW5kXS5mZWF0dXJlcy5mcmFjID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZW5kKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEFwcGx5IGZyYWN0aW9uIHNsYXNoXG4gICAgICAgICAgICAgICAgZ2x5cGguZmVhdHVyZXMuZnJhYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaSA9IGVuZCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4oMCwgJDUyWklmJHN3Y2hlbHBlcnNzcmNfZGVmaW5lX3Byb3BlcnR5bWpzKSgkNjQ5OTcwZDg3MzM1YjMwZiRleHBvcnQkMmUyYmNkODczOWFlMDM5LCBcInplcm9NYXJrV2lkdGhzXCIsIFwiQUZURVJfR1BPU1wiKTtcblxuXG5cblxuXG5cbmNvbnN0ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciR0cmllID0gbmV3ICgwLCAkNTJaSWYkdW5pY29kZXRyaWUpKCgwLCAkMTI3Mjc3MzBkZGZjOGJmZSRleHBvcnQkOTRmZGYxMWJhZmM4ZGU2YikoXCJBQkFCQUFBQUFBQ2dNUUFBQVpVQmF2N3QyQ3RQQTBFVUJlRFpCMDBwaW45QUpaSUVneVVFajBRaHdlREFnUU9KeENCUkJFbFFTQndTaWNMZ2tPQXduTktaNUdhWTJjN3V6ajRvNXlaZlpycmJlZmJ1SXgyblNxM0NHbXpBV0gvK0srVU83TUllN01NaEhNTXBuTU1GWE1JVlhJdDJ0M0NuUDA4OGlQcWpxTk44ZTRJajdSbGU0TFVIODJyTG02aS85MkErUkVSRVJFUkVSRVJObWZ6Lzg5R0RlUkFSRVJFUnpiTjhjZXBzMkl3dDlIMEM5L0FKNnlPbERrYlRjemNvdDVWU204UG0xdmNGV2ZiNytCS09MVHVPZDJVbFRYNHdHUDg1RWc5NTNsV1BGYm51TjdQa2p0TG1hbE9XYk5lbmtIT1NhN1QzS21SOU1WVFoyelprVmoxa0hhNjhNdWVWS0gwUjR6cVE0NFdFWExNOFZqY1dIUDBQdEtMZlB6UW5NdEduM1c0UVlmNnF4RnhjZVZJMzk0cjJ4blYrMXJpaDBmVjFWemYzZk8xbjNldkw1Sjc4cnV2WjVwdFgyUnd5OTJUZmIxd2xFcXV0M1Urc1ozSFhPZUo3L3pEcmJ5dVA2K1p6MGZxYTZOdjN2aFk3WXUxeFduR2V2bXN2c1VwVFQvUllJZTh3YVVIL3J2SE1XS0Z6TGZOOEwrclRmcDY0NW1mWDdmdGxuZkR0WXhONTl3MD1cIikpO1xuY29uc3QgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZFQVRVUkVTID0gW1xuICAgIFwiaXNvbFwiLFxuICAgIFwiZmluYVwiLFxuICAgIFwiZmluMlwiLFxuICAgIFwiZmluM1wiLFxuICAgIFwibWVkaVwiLFxuICAgIFwibWVkMlwiLFxuICAgIFwiaW5pdFwiXG5dO1xuY29uc3QgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJFNoYXBpbmdDbGFzc2VzID0ge1xuICAgIE5vbl9Kb2luaW5nOiAwLFxuICAgIExlZnRfSm9pbmluZzogMSxcbiAgICBSaWdodF9Kb2luaW5nOiAyLFxuICAgIER1YWxfSm9pbmluZzogMyxcbiAgICBKb2luX0NhdXNpbmc6IDMsXG4gICAgQUxBUEg6IDQsXG4gICAgXCJEQUxBVEggUklTSFwiOiA1LFxuICAgIFRyYW5zcGFyZW50OiA2XG59O1xuY29uc3QgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wgPSBcImlzb2xcIjtcbmNvbnN0ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGSU5BID0gXCJmaW5hXCI7XG5jb25zdCAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkRklOMiA9IFwiZmluMlwiO1xuY29uc3QgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTjMgPSBcImZpbjNcIjtcbmNvbnN0ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRNRURJID0gXCJtZWRpXCI7XG5jb25zdCAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkTUVEMiA9IFwibWVkMlwiO1xuY29uc3QgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElOSVQgPSBcImluaXRcIjtcbmNvbnN0ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FID0gbnVsbDtcbi8vIEVhY2ggZW50cnkgaXMgW3ByZXZBY3Rpb24sIGN1ckFjdGlvbiwgbmV4dFN0YXRlXVxuY29uc3QgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJFNUQVRFX1RBQkxFID0gW1xuICAgIC8vICAgTm9uX0pvaW5pbmcsICAgICAgICBMZWZ0X0pvaW5pbmcsICAgICAgIFJpZ2h0X0pvaW5pbmcsICAgICBEdWFsX0pvaW5pbmcsICAgICAgICAgICBBTEFQSCwgICAgICAgICAgICBEQUxBVEggUklTSFxuICAgIC8vIFN0YXRlIDA6IHByZXYgd2FzIFUsICBub3Qgd2lsbGluZyB0byBqb2luLlxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkTk9ORSxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDZcbiAgICAgICAgXVxuICAgIF0sXG4gICAgLy8gU3RhdGUgMTogcHJldiB3YXMgUiBvciBJU09ML0FMQVBILCAgbm90IHdpbGxpbmcgdG8gam9pbi5cbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTjIsXG4gICAgICAgICAgICA1XG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICA2XG4gICAgICAgIF1cbiAgICBdLFxuICAgIC8vIFN0YXRlIDI6IHByZXYgd2FzIEQvTCBpbiBJU09MIGZvcm0sICB3aWxsaW5nIHRvIGpvaW4uXG4gICAgW1xuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkTk9ORSxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkTk9ORSxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJU09MLFxuICAgICAgICAgICAgMlxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSU5JVCxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGSU5BLFxuICAgICAgICAgICAgMVxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSU5JVCxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGSU5BLFxuICAgICAgICAgICAgM1xuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSU5JVCxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGSU5BLFxuICAgICAgICAgICAgNFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSU5JVCxcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGSU5BLFxuICAgICAgICAgICAgNlxuICAgICAgICBdXG4gICAgXSxcbiAgICAvLyBTdGF0ZSAzOiBwcmV2IHdhcyBEIGluIEZJTkEgZm9ybSwgIHdpbGxpbmcgdG8gam9pbi5cbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRNRURJLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTkEsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRNRURJLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTkEsXG4gICAgICAgICAgICAzXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRNRURJLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTkEsXG4gICAgICAgICAgICA0XG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRNRURJLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTkEsXG4gICAgICAgICAgICA2XG4gICAgICAgIF1cbiAgICBdLFxuICAgIC8vIFN0YXRlIDQ6IHByZXYgd2FzIEZJTkEgQUxBUEgsICBub3Qgd2lsbGluZyB0byBqb2luLlxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkTk9ORSxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE1FRDIsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE1FRDIsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDJcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE1FRDIsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkRklOMixcbiAgICAgICAgICAgIDVcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE1FRDIsXG4gICAgICAgICAgICAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkSVNPTCxcbiAgICAgICAgICAgIDZcbiAgICAgICAgXVxuICAgIF0sXG4gICAgLy8gU3RhdGUgNTogcHJldiB3YXMgRklOMi9GSU4zIEFMQVBILCAgbm90IHdpbGxpbmcgdG8gam9pbi5cbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJU09MLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJU09MLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJU09MLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTjIsXG4gICAgICAgICAgICA1XG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJU09MLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICA2XG4gICAgICAgIF1cbiAgICBdLFxuICAgIC8vIFN0YXRlIDY6IHByZXYgd2FzIERBTEFUSC9SSVNILCAgbm90IHdpbGxpbmcgdG8gam9pbi5cbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUsXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTjMsXG4gICAgICAgICAgICA1XG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FLFxuICAgICAgICAgICAgJDc2NGViNTQ0YmJlMWNjZjAkdmFyJElTT0wsXG4gICAgICAgICAgICA2XG4gICAgICAgIF1cbiAgICBdXG5dO1xuY2xhc3MgJDc2NGViNTQ0YmJlMWNjZjAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkNjQ5OTcwZDg3MzM1YjMwZiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgc3RhdGljIHBsYW5GZWF0dXJlcyhwbGFuKSB7XG4gICAgICAgIHBsYW4uYWRkKFtcbiAgICAgICAgICAgIFwiY2NtcFwiLFxuICAgICAgICAgICAgXCJsb2NsXCJcbiAgICAgICAgXSk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkRkVBVFVSRVMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IGZlYXR1cmUgPSAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkRkVBVFVSRVNbaV07XG4gICAgICAgICAgICBwbGFuLmFkZFN0YWdlKGZlYXR1cmUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBwbGFuLmFkZFN0YWdlKFwibXNldFwiKTtcbiAgICB9XG4gICAgc3RhdGljIGFzc2lnbkZlYXR1cmVzKHBsYW4sIGdseXBocykge1xuICAgICAgICBzdXBlci5hc3NpZ25GZWF0dXJlcyhwbGFuLCBnbHlwaHMpO1xuICAgICAgICBsZXQgcHJldiA9IC0xO1xuICAgICAgICBsZXQgc3RhdGUgPSAwO1xuICAgICAgICBsZXQgYWN0aW9ucyA9IFtdO1xuICAgICAgICAvLyBBcHBseSB0aGUgc3RhdGUgbWFjaGluZSB0byBtYXAgZ2x5cGhzIHRvIGZlYXR1cmVzXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IGN1ckFjdGlvbiwgcHJldkFjdGlvbjtcbiAgICAgICAgICAgIHZhciBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICAgICAgICAgIGxldCB0eXBlID0gJDc2NGViNTQ0YmJlMWNjZjAkdmFyJGdldFNoYXBpbmdDbGFzcyhnbHlwaC5jb2RlUG9pbnRzWzBdKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkU2hhcGluZ0NsYXNzZXMuVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zW2ldID0gJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBbcHJldkFjdGlvbiwgY3VyQWN0aW9uLCBzdGF0ZV0gPSAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkU1RBVEVfVEFCTEVbc3RhdGVdW3R5cGVdO1xuICAgICAgICAgICAgaWYgKHByZXZBY3Rpb24gIT09ICQ3NjRlYjU0NGJiZTFjY2YwJHZhciROT05FICYmIHByZXYgIT09IC0xKSBhY3Rpb25zW3ByZXZdID0gcHJldkFjdGlvbjtcbiAgICAgICAgICAgIGFjdGlvbnNbaV0gPSBjdXJBY3Rpb247XG4gICAgICAgICAgICBwcmV2ID0gaTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBcHBseSB0aGUgY2hvc2VuIGZlYXR1cmVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgZ2x5cGhzXG4gICAgICAgIGZvcihsZXQgaW5kZXggPSAwOyBpbmRleCA8IGdseXBocy5sZW5ndGg7IGluZGV4Kyspe1xuICAgICAgICAgICAgbGV0IGZlYXR1cmU7XG4gICAgICAgICAgICB2YXIgZ2x5cGggPSBnbHlwaHNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKGZlYXR1cmUgPSBhY3Rpb25zW2luZGV4XSkgZ2x5cGguZmVhdHVyZXNbZmVhdHVyZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gJDc2NGViNTQ0YmJlMWNjZjAkdmFyJGdldFNoYXBpbmdDbGFzcyhjb2RlUG9pbnQpIHtcbiAgICBsZXQgcmVzID0gJDc2NGViNTQ0YmJlMWNjZjAkdmFyJHRyaWUuZ2V0KGNvZGVQb2ludCk7XG4gICAgaWYgKHJlcykgcmV0dXJuIHJlcyAtIDE7XG4gICAgbGV0IGNhdGVnb3J5ID0gKDAsICQ1MlpJZiRnZXRDYXRlZ29yeSkoY29kZVBvaW50KTtcbiAgICBpZiAoY2F0ZWdvcnkgPT09IFwiTW5cIiB8fCBjYXRlZ29yeSA9PT0gXCJNZVwiIHx8IGNhdGVnb3J5ID09PSBcIkNmXCIpIHJldHVybiAkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkU2hhcGluZ0NsYXNzZXMuVHJhbnNwYXJlbnQ7XG4gICAgcmV0dXJuICQ3NjRlYjU0NGJiZTFjY2YwJHZhciRTaGFwaW5nQ2xhc3Nlcy5Ob25fSm9pbmluZztcbn1cblxuXG5cblxuXG5jbGFzcyAkODVkNDA4NjMyMjcwMjQ4YiRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICByZXNldChvcHRpb25zID0ge30sIGluZGV4ID0gMCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmZsYWdzID0gb3B0aW9ucy5mbGFncyB8fCB7fTtcbiAgICAgICAgdGhpcy5tYXJrQXR0YWNobWVudFR5cGUgPSBvcHRpb25zLm1hcmtBdHRhY2htZW50VHlwZSB8fCAwO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgfVxuICAgIGdldCBjdXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdseXBoc1t0aGlzLmluZGV4XSB8fCBudWxsO1xuICAgIH1cbiAgICBzaG91bGRJZ25vcmUoZ2x5cGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxhZ3MuaWdub3JlTWFya3MgJiYgZ2x5cGguaXNNYXJrIHx8IHRoaXMuZmxhZ3MuaWdub3JlQmFzZUdseXBocyAmJiBnbHlwaC5pc0Jhc2UgfHwgdGhpcy5mbGFncy5pZ25vcmVMaWdhdHVyZXMgJiYgZ2x5cGguaXNMaWdhdHVyZSB8fCB0aGlzLm1hcmtBdHRhY2htZW50VHlwZSAmJiBnbHlwaC5pc01hcmsgJiYgZ2x5cGgubWFya0F0dGFjaG1lbnRUeXBlICE9PSB0aGlzLm1hcmtBdHRhY2htZW50VHlwZTtcbiAgICB9XG4gICAgbW92ZShkaXIpIHtcbiAgICAgICAgdGhpcy5pbmRleCArPSBkaXI7XG4gICAgICAgIHdoaWxlKDAgPD0gdGhpcy5pbmRleCAmJiB0aGlzLmluZGV4IDwgdGhpcy5nbHlwaHMubGVuZ3RoICYmIHRoaXMuc2hvdWxkSWdub3JlKHRoaXMuZ2x5cGhzW3RoaXMuaW5kZXhdKSl0aGlzLmluZGV4ICs9IGRpcjtcbiAgICAgICAgaWYgKDAgPiB0aGlzLmluZGV4IHx8IHRoaXMuaW5kZXggPj0gdGhpcy5nbHlwaHMubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2x5cGhzW3RoaXMuaW5kZXhdO1xuICAgIH1cbiAgICBuZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb3ZlKDEpO1xuICAgIH1cbiAgICBwcmV2KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb3ZlKC0xKTtcbiAgICB9XG4gICAgcGVlayhjb3VudCA9IDEpIHtcbiAgICAgICAgbGV0IGlkeCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIGxldCByZXMgPSB0aGlzLmluY3JlbWVudChjb3VudCk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpZHg7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIHBlZWtJbmRleChjb3VudCA9IDEpIHtcbiAgICAgICAgbGV0IGlkeCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIHRoaXMuaW5jcmVtZW50KGNvdW50KTtcbiAgICAgICAgbGV0IHJlcyA9IHRoaXMuaW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpZHg7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGluY3JlbWVudChjb3VudCA9IDEpIHtcbiAgICAgICAgbGV0IGRpciA9IGNvdW50IDwgMCA/IC0xIDogMTtcbiAgICAgICAgY291bnQgPSBNYXRoLmFicyhjb3VudCk7XG4gICAgICAgIHdoaWxlKGNvdW50LS0pdGhpcy5tb3ZlKGRpcik7XG4gICAgICAgIHJldHVybiB0aGlzLmdseXBoc1t0aGlzLmluZGV4XTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZ2x5cGhzLCBvcHRpb25zKXtcbiAgICAgICAgdGhpcy5nbHlwaHMgPSBnbHlwaHM7XG4gICAgICAgIHRoaXMucmVzZXQob3B0aW9ucyk7XG4gICAgfVxufVxuXG5cblxuY29uc3QgJGE4M2I5YzM2YWFhOTRmZDMkdmFyJERFRkFVTFRfU0NSSVBUUyA9IFtcbiAgICBcIkRGTFRcIixcbiAgICBcImRmbHRcIixcbiAgICBcImxhdG5cIlxuXTtcbmNsYXNzICRhODNiOWMzNmFhYTk0ZmQzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIGZpbmRTY3JpcHQoc2NyaXB0KSB7XG4gICAgICAgIGlmICh0aGlzLnRhYmxlLnNjcmlwdExpc3QgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzY3JpcHQpKSBzY3JpcHQgPSBbXG4gICAgICAgICAgICBzY3JpcHRcbiAgICAgICAgXTtcbiAgICAgICAgZm9yIChsZXQgcyBvZiBzY3JpcHQpZm9yIChsZXQgZW50cnkgb2YgdGhpcy50YWJsZS5zY3JpcHRMaXN0KXtcbiAgICAgICAgICAgIGlmIChlbnRyeS50YWcgPT09IHMpIHJldHVybiBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2VsZWN0U2NyaXB0KHNjcmlwdCwgbGFuZ3VhZ2UsIGRpcmVjdGlvbikge1xuICAgICAgICBsZXQgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgZW50cnk7XG4gICAgICAgIGlmICghdGhpcy5zY3JpcHQgfHwgc2NyaXB0ICE9PSB0aGlzLnNjcmlwdFRhZykge1xuICAgICAgICAgICAgZW50cnkgPSB0aGlzLmZpbmRTY3JpcHQoc2NyaXB0KTtcbiAgICAgICAgICAgIGlmICghZW50cnkpIGVudHJ5ID0gdGhpcy5maW5kU2NyaXB0KCRhODNiOWMzNmFhYTk0ZmQzJHZhciRERUZBVUxUX1NDUklQVFMpO1xuICAgICAgICAgICAgaWYgKCFlbnRyeSkgcmV0dXJuIHRoaXMuc2NyaXB0VGFnO1xuICAgICAgICAgICAgdGhpcy5zY3JpcHRUYWcgPSBlbnRyeS50YWc7XG4gICAgICAgICAgICB0aGlzLnNjcmlwdCA9IGVudHJ5LnNjcmlwdDtcbiAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5sYW5ndWFnZVRhZyA9IG51bGw7XG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRpcmVjdGlvbiB8fCBkaXJlY3Rpb24gIT09IHRoaXMuZGlyZWN0aW9uKSB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbiB8fCAkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkOWZkZGI5ZDBkZDdkOGE1NChzY3JpcHQpO1xuICAgICAgICBpZiAobGFuZ3VhZ2UgJiYgbGFuZ3VhZ2UubGVuZ3RoIDwgNCkgbGFuZ3VhZ2UgKz0gXCIgXCIucmVwZWF0KDQgLSBsYW5ndWFnZS5sZW5ndGgpO1xuICAgICAgICBpZiAoIWxhbmd1YWdlIHx8IGxhbmd1YWdlICE9PSB0aGlzLmxhbmd1YWdlVGFnKSB7XG4gICAgICAgICAgICB0aGlzLmxhbmd1YWdlID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAobGV0IGxhbmcgb2YgdGhpcy5zY3JpcHQubGFuZ1N5c1JlY29yZHMpaWYgKGxhbmcudGFnID09PSBsYW5ndWFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5nLmxhbmdTeXM7XG4gICAgICAgICAgICAgICAgdGhpcy5sYW5ndWFnZVRhZyA9IGxhbmcudGFnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYW5ndWFnZSA9IHRoaXMuc2NyaXB0LmRlZmF1bHRMYW5nU3lzO1xuICAgICAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2VUYWcgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQnVpbGQgYSBmZWF0dXJlIGxvb2t1cCB0YWJsZVxuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5mZWF0dXJlcyA9IHt9O1xuICAgICAgICAgICAgaWYgKHRoaXMubGFuZ3VhZ2UpIGZvciAobGV0IGZlYXR1cmVJbmRleCBvZiB0aGlzLmxhbmd1YWdlLmZlYXR1cmVJbmRleGVzKXtcbiAgICAgICAgICAgICAgICBsZXQgcmVjb3JkID0gdGhpcy50YWJsZS5mZWF0dXJlTGlzdFtmZWF0dXJlSW5kZXhdO1xuICAgICAgICAgICAgICAgIGxldCBzdWJzdGl0dXRlRmVhdHVyZSA9IHRoaXMuc3Vic3RpdHV0ZUZlYXR1cmVGb3JWYXJpYXRpb25zKGZlYXR1cmVJbmRleCk7XG4gICAgICAgICAgICAgICAgdGhpcy5mZWF0dXJlc1tyZWNvcmQudGFnXSA9IHN1YnN0aXR1dGVGZWF0dXJlIHx8IHJlY29yZC5mZWF0dXJlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNjcmlwdFRhZztcbiAgICB9XG4gICAgbG9va3Vwc0ZvckZlYXR1cmVzKHVzZXJGZWF0dXJlcyA9IFtdLCBleGNsdWRlKSB7XG4gICAgICAgIGxldCBsb29rdXBzID0gW107XG4gICAgICAgIGZvciAobGV0IHRhZyBvZiB1c2VyRmVhdHVyZXMpe1xuICAgICAgICAgICAgbGV0IGZlYXR1cmUgPSB0aGlzLmZlYXR1cmVzW3RhZ107XG4gICAgICAgICAgICBpZiAoIWZlYXR1cmUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yIChsZXQgbG9va3VwSW5kZXggb2YgZmVhdHVyZS5sb29rdXBMaXN0SW5kZXhlcyl7XG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGUgJiYgZXhjbHVkZS5pbmRleE9mKGxvb2t1cEluZGV4KSAhPT0gLTEpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGxvb2t1cHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmU6IHRhZyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGxvb2t1cEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBsb29rdXA6IHRoaXMudGFibGUubG9va3VwTGlzdC5nZXQobG9va3VwSW5kZXgpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9va3Vwcy5zb3J0KChhLCBiKT0+YS5pbmRleCAtIGIuaW5kZXgpO1xuICAgICAgICByZXR1cm4gbG9va3VwcztcbiAgICB9XG4gICAgc3Vic3RpdHV0ZUZlYXR1cmVGb3JWYXJpYXRpb25zKGZlYXR1cmVJbmRleCkge1xuICAgICAgICBpZiAodGhpcy52YXJpYXRpb25zSW5kZXggPT09IC0xKSByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMudGFibGUuZmVhdHVyZVZhcmlhdGlvbnMuZmVhdHVyZVZhcmlhdGlvblJlY29yZHNbdGhpcy52YXJpYXRpb25zSW5kZXhdO1xuICAgICAgICBsZXQgc3Vic3RpdHV0aW9ucyA9IHJlY29yZC5mZWF0dXJlVGFibGVTdWJzdGl0dXRpb24uc3Vic3RpdHV0aW9ucztcbiAgICAgICAgZm9yIChsZXQgc3Vic3RpdHV0aW9uIG9mIHN1YnN0aXR1dGlvbnMpe1xuICAgICAgICAgICAgaWYgKHN1YnN0aXR1dGlvbi5mZWF0dXJlSW5kZXggPT09IGZlYXR1cmVJbmRleCkgcmV0dXJuIHN1YnN0aXR1dGlvbi5hbHRlcm5hdGVGZWF0dXJlVGFibGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZpbmRWYXJpYXRpb25zSW5kZXgoY29vcmRzKSB7XG4gICAgICAgIGxldCB2YXJpYXRpb25zID0gdGhpcy50YWJsZS5mZWF0dXJlVmFyaWF0aW9ucztcbiAgICAgICAgaWYgKCF2YXJpYXRpb25zKSByZXR1cm4gLTE7XG4gICAgICAgIGxldCByZWNvcmRzID0gdmFyaWF0aW9ucy5mZWF0dXJlVmFyaWF0aW9uUmVjb3JkcztcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHJlY29yZHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IGNvbmRpdGlvbnMgPSByZWNvcmRzW2ldLmNvbmRpdGlvblNldC5jb25kaXRpb25UYWJsZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnZhcmlhdGlvbkNvbmRpdGlvbnNNYXRjaChjb25kaXRpb25zLCBjb29yZHMpKSByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHZhcmlhdGlvbkNvbmRpdGlvbnNNYXRjaChjb25kaXRpb25zLCBjb29yZHMpIHtcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbnMuZXZlcnkoKGNvbmRpdGlvbik9PntcbiAgICAgICAgICAgIGxldCBjb29yZCA9IGNvbmRpdGlvbi5heGlzSW5kZXggPCBjb29yZHMubGVuZ3RoID8gY29vcmRzW2NvbmRpdGlvbi5heGlzSW5kZXhdIDogMDtcbiAgICAgICAgICAgIHJldHVybiBjb25kaXRpb24uZmlsdGVyUmFuZ2VNaW5WYWx1ZSA8PSBjb29yZCAmJiBjb29yZCA8PSBjb25kaXRpb24uZmlsdGVyUmFuZ2VNYXhWYWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFwcGx5RmVhdHVyZXModXNlckZlYXR1cmVzLCBnbHlwaHMsIGFkdmFuY2VzKSB7XG4gICAgICAgIGxldCBsb29rdXBzID0gdGhpcy5sb29rdXBzRm9yRmVhdHVyZXModXNlckZlYXR1cmVzKTtcbiAgICAgICAgdGhpcy5hcHBseUxvb2t1cHMobG9va3VwcywgZ2x5cGhzLCBhZHZhbmNlcyk7XG4gICAgfVxuICAgIGFwcGx5TG9va3Vwcyhsb29rdXBzLCBnbHlwaHMsIHBvc2l0aW9ucykge1xuICAgICAgICB0aGlzLmdseXBocyA9IGdseXBocztcbiAgICAgICAgdGhpcy5wb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgICAgIHRoaXMuZ2x5cGhJdGVyYXRvciA9IG5ldyAoMCwgJDg1ZDQwODYzMjI3MDI0OGIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZ2x5cGhzKTtcbiAgICAgICAgZm9yIChsZXQgeyBmZWF0dXJlOiBmZWF0dXJlICwgbG9va3VwOiBsb29rdXAgIH0gb2YgbG9va3Vwcyl7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRGZWF0dXJlID0gZmVhdHVyZTtcbiAgICAgICAgICAgIHRoaXMuZ2x5cGhJdGVyYXRvci5yZXNldChsb29rdXAuZmxhZ3MpO1xuICAgICAgICAgICAgd2hpbGUodGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4IDwgZ2x5cGhzLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgaWYgKCEoZmVhdHVyZSBpbiB0aGlzLmdseXBoSXRlcmF0b3IuY3VyLmZlYXR1cmVzKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdseXBoSXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbG9va3VwLnN1YlRhYmxlcyl7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXMgPSB0aGlzLmFwcGx5TG9va3VwKGxvb2t1cC5sb29rdXBUeXBlLCB0YWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMpIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmdseXBoSXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFwcGx5TG9va3VwKGxvb2t1cCwgdGFibGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXBwbHlMb29rdXAgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzc2VzXCIpO1xuICAgIH1cbiAgICBhcHBseUxvb2t1cExpc3QobG9va3VwUmVjb3Jkcykge1xuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2x5cGhJdGVyYXRvci5vcHRpb25zO1xuICAgICAgICBsZXQgZ2x5cGhJbmRleCA9IHRoaXMuZ2x5cGhJdGVyYXRvci5pbmRleDtcbiAgICAgICAgZm9yIChsZXQgbG9va3VwUmVjb3JkIG9mIGxvb2t1cFJlY29yZHMpe1xuICAgICAgICAgICAgLy8gUmVzZXQgZmxhZ3MgYW5kIGZpbmQgZ2x5cGggaW5kZXggZm9yIHRoaXMgbG9va3VwIHJlY29yZFxuICAgICAgICAgICAgdGhpcy5nbHlwaEl0ZXJhdG9yLnJlc2V0KG9wdGlvbnMsIGdseXBoSW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5nbHlwaEl0ZXJhdG9yLmluY3JlbWVudChsb29rdXBSZWNvcmQuc2VxdWVuY2VJbmRleCk7XG4gICAgICAgICAgICAvLyBHZXQgdGhlIGxvb2t1cCBhbmQgc2V0dXAgZmxhZ3MgZm9yIHN1YnRhYmxlc1xuICAgICAgICAgICAgbGV0IGxvb2t1cCA9IHRoaXMudGFibGUubG9va3VwTGlzdC5nZXQobG9va3VwUmVjb3JkLmxvb2t1cExpc3RJbmRleCk7XG4gICAgICAgICAgICB0aGlzLmdseXBoSXRlcmF0b3IucmVzZXQobG9va3VwLmZsYWdzLCB0aGlzLmdseXBoSXRlcmF0b3IuaW5kZXgpO1xuICAgICAgICAgICAgLy8gQXBwbHkgbG9va3VwIHN1YnRhYmxlcyB1bnRpbCBvbmUgbWF0Y2hlc1xuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbG9va3VwLnN1YlRhYmxlcyl7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXBwbHlMb29rdXAobG9va3VwLmxvb2t1cFR5cGUsIHRhYmxlKSkgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nbHlwaEl0ZXJhdG9yLnJlc2V0KG9wdGlvbnMsIGdseXBoSW5kZXgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY292ZXJhZ2VJbmRleChjb3ZlcmFnZSwgZ2x5cGgpIHtcbiAgICAgICAgaWYgKGdseXBoID09IG51bGwpIGdseXBoID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmN1ci5pZDtcbiAgICAgICAgc3dpdGNoKGNvdmVyYWdlLnZlcnNpb24pe1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBjb3ZlcmFnZS5nbHlwaHMuaW5kZXhPZihnbHlwaCk7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcmFuZ2Ugb2YgY292ZXJhZ2UucmFuZ2VSZWNvcmRzKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0IDw9IGdseXBoICYmIGdseXBoIDw9IHJhbmdlLmVuZCkgcmV0dXJuIHJhbmdlLnN0YXJ0Q292ZXJhZ2VJbmRleCArIGdseXBoIC0gcmFuZ2Uuc3RhcnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgbWF0Y2goc2VxdWVuY2VJbmRleCwgc2VxdWVuY2UsIGZuLCBtYXRjaGVkKSB7XG4gICAgICAgIGxldCBwb3MgPSB0aGlzLmdseXBoSXRlcmF0b3IuaW5kZXg7XG4gICAgICAgIGxldCBnbHlwaCA9IHRoaXMuZ2x5cGhJdGVyYXRvci5pbmNyZW1lbnQoc2VxdWVuY2VJbmRleCk7XG4gICAgICAgIGxldCBpZHggPSAwO1xuICAgICAgICB3aGlsZShpZHggPCBzZXF1ZW5jZS5sZW5ndGggJiYgZ2x5cGggJiYgZm4oc2VxdWVuY2VbaWR4XSwgZ2x5cGgpKXtcbiAgICAgICAgICAgIGlmIChtYXRjaGVkKSBtYXRjaGVkLnB1c2godGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4KTtcbiAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICAgICAgZ2x5cGggPSB0aGlzLmdseXBoSXRlcmF0b3IubmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2x5cGhJdGVyYXRvci5pbmRleCA9IHBvcztcbiAgICAgICAgaWYgKGlkeCA8IHNlcXVlbmNlLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gbWF0Y2hlZCB8fCB0cnVlO1xuICAgIH1cbiAgICBzZXF1ZW5jZU1hdGNoZXMoc2VxdWVuY2VJbmRleCwgc2VxdWVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2goc2VxdWVuY2VJbmRleCwgc2VxdWVuY2UsIChjb21wb25lbnQsIGdseXBoKT0+Y29tcG9uZW50ID09PSBnbHlwaC5pZCk7XG4gICAgfVxuICAgIHNlcXVlbmNlTWF0Y2hJbmRpY2VzKHNlcXVlbmNlSW5kZXgsIHNlcXVlbmNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoKHNlcXVlbmNlSW5kZXgsIHNlcXVlbmNlLCAoY29tcG9uZW50LCBnbHlwaCk9PntcbiAgICAgICAgICAgIC8vIElmIHRoZSBjdXJyZW50IGZlYXR1cmUgZG9lc24ndCBhcHBseSB0byB0aGlzIGdseXBoLFxuICAgICAgICAgICAgaWYgKCEodGhpcy5jdXJyZW50RmVhdHVyZSBpbiBnbHlwaC5mZWF0dXJlcykpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQgPT09IGdseXBoLmlkO1xuICAgICAgICB9LCBbXSk7XG4gICAgfVxuICAgIGNvdmVyYWdlU2VxdWVuY2VNYXRjaGVzKHNlcXVlbmNlSW5kZXgsIHNlcXVlbmNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoKHNlcXVlbmNlSW5kZXgsIHNlcXVlbmNlLCAoY292ZXJhZ2UsIGdseXBoKT0+dGhpcy5jb3ZlcmFnZUluZGV4KGNvdmVyYWdlLCBnbHlwaC5pZCkgPj0gMCk7XG4gICAgfVxuICAgIGdldENsYXNzSUQoZ2x5cGgsIGNsYXNzRGVmKSB7XG4gICAgICAgIHN3aXRjaChjbGFzc0RlZi52ZXJzaW9uKXtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBsZXQgaSA9IGdseXBoIC0gY2xhc3NEZWYuc3RhcnRHbHlwaDtcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSAwICYmIGkgPCBjbGFzc0RlZi5jbGFzc1ZhbHVlQXJyYXkubGVuZ3RoKSByZXR1cm4gY2xhc3NEZWYuY2xhc3NWYWx1ZUFycmF5W2ldO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGZvciAobGV0IHJhbmdlIG9mIGNsYXNzRGVmLmNsYXNzUmFuZ2VSZWNvcmQpe1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnQgPD0gZ2x5cGggJiYgZ2x5cGggPD0gcmFuZ2UuZW5kKSByZXR1cm4gcmFuZ2UuY2xhc3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjbGFzc1NlcXVlbmNlTWF0Y2hlcyhzZXF1ZW5jZUluZGV4LCBzZXF1ZW5jZSwgY2xhc3NEZWYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2goc2VxdWVuY2VJbmRleCwgc2VxdWVuY2UsIChjbGFzc0lELCBnbHlwaCk9PmNsYXNzSUQgPT09IHRoaXMuZ2V0Q2xhc3NJRChnbHlwaC5pZCwgY2xhc3NEZWYpKTtcbiAgICB9XG4gICAgYXBwbHlDb250ZXh0KHRhYmxlKSB7XG4gICAgICAgIGxldCBpbmRleCwgc2V0O1xuICAgICAgICBzd2l0Y2godGFibGUudmVyc2lvbil7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuY292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZXQgPSB0YWJsZS5ydWxlU2V0c1tpbmRleF07XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcnVsZSBvZiBzZXQpe1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXF1ZW5jZU1hdGNoZXMoMSwgcnVsZS5pbnB1dCkpIHJldHVybiB0aGlzLmFwcGx5TG9va3VwTGlzdChydWxlLmxvb2t1cFJlY29yZHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb3ZlcmFnZUluZGV4KHRhYmxlLmNvdmVyYWdlKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuZ2V0Q2xhc3NJRCh0aGlzLmdseXBoSXRlcmF0b3IuY3VyLmlkLCB0YWJsZS5jbGFzc0RlZik7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIHNldCA9IHRhYmxlLmNsYXNzU2V0W2luZGV4XTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBydWxlMSBvZiBzZXQpe1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGFzc1NlcXVlbmNlTWF0Y2hlcygxLCBydWxlMS5jbGFzc2VzLCB0YWJsZS5jbGFzc0RlZikpIHJldHVybiB0aGlzLmFwcGx5TG9va3VwTGlzdChydWxlMS5sb29rdXBSZWNvcmRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY292ZXJhZ2VTZXF1ZW5jZU1hdGNoZXMoMCwgdGFibGUuY292ZXJhZ2VzKSkgcmV0dXJuIHRoaXMuYXBwbHlMb29rdXBMaXN0KHRhYmxlLmxvb2t1cFJlY29yZHMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYXBwbHlDaGFpbmluZ0NvbnRleHQodGFibGUpIHtcbiAgICAgICAgbGV0IGluZGV4O1xuICAgICAgICBzd2l0Y2godGFibGUudmVyc2lvbil7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuY292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBsZXQgc2V0ID0gdGFibGUuY2hhaW5SdWxlU2V0c1tpbmRleF07XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcnVsZSBvZiBzZXQpe1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXF1ZW5jZU1hdGNoZXMoLXJ1bGUuYmFja3RyYWNrLmxlbmd0aCwgcnVsZS5iYWNrdHJhY2spICYmIHRoaXMuc2VxdWVuY2VNYXRjaGVzKDEsIHJ1bGUuaW5wdXQpICYmIHRoaXMuc2VxdWVuY2VNYXRjaGVzKDEgKyBydWxlLmlucHV0Lmxlbmd0aCwgcnVsZS5sb29rYWhlYWQpKSByZXR1cm4gdGhpcy5hcHBseUxvb2t1cExpc3QocnVsZS5sb29rdXBSZWNvcmRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5jb3ZlcmFnZSkgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLmdldENsYXNzSUQodGhpcy5nbHlwaEl0ZXJhdG9yLmN1ci5pZCwgdGFibGUuaW5wdXRDbGFzc0RlZik7XG4gICAgICAgICAgICAgICAgbGV0IHJ1bGVzID0gdGFibGUuY2hhaW5DbGFzc1NldFtpbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKCFydWxlcykgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHJ1bGUyIG9mIHJ1bGVzKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xhc3NTZXF1ZW5jZU1hdGNoZXMoLXJ1bGUyLmJhY2t0cmFjay5sZW5ndGgsIHJ1bGUyLmJhY2t0cmFjaywgdGFibGUuYmFja3RyYWNrQ2xhc3NEZWYpICYmIHRoaXMuY2xhc3NTZXF1ZW5jZU1hdGNoZXMoMSwgcnVsZTIuaW5wdXQsIHRhYmxlLmlucHV0Q2xhc3NEZWYpICYmIHRoaXMuY2xhc3NTZXF1ZW5jZU1hdGNoZXMoMSArIHJ1bGUyLmlucHV0Lmxlbmd0aCwgcnVsZTIubG9va2FoZWFkLCB0YWJsZS5sb29rYWhlYWRDbGFzc0RlZikpIHJldHVybiB0aGlzLmFwcGx5TG9va3VwTGlzdChydWxlMi5sb29rdXBSZWNvcmRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY292ZXJhZ2VTZXF1ZW5jZU1hdGNoZXMoLXRhYmxlLmJhY2t0cmFja0dseXBoQ291bnQsIHRhYmxlLmJhY2t0cmFja0NvdmVyYWdlKSAmJiB0aGlzLmNvdmVyYWdlU2VxdWVuY2VNYXRjaGVzKDAsIHRhYmxlLmlucHV0Q292ZXJhZ2UpICYmIHRoaXMuY292ZXJhZ2VTZXF1ZW5jZU1hdGNoZXModGFibGUuaW5wdXRHbHlwaENvdW50LCB0YWJsZS5sb29rYWhlYWRDb3ZlcmFnZSkpIHJldHVybiB0aGlzLmFwcGx5TG9va3VwTGlzdCh0YWJsZS5sb29rdXBSZWNvcmRzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZvbnQsIHRhYmxlKXtcbiAgICAgICAgdGhpcy5mb250ID0gZm9udDtcbiAgICAgICAgdGhpcy50YWJsZSA9IHRhYmxlO1xuICAgICAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2NyaXB0VGFnID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYW5ndWFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMubGFuZ3VhZ2VUYWcgPSBudWxsO1xuICAgICAgICB0aGlzLmZlYXR1cmVzID0ge307XG4gICAgICAgIHRoaXMubG9va3VwcyA9IHt9O1xuICAgICAgICAvLyBTZXR1cCB2YXJpYXRpb24gc3Vic3RpdHV0aW9uc1xuICAgICAgICB0aGlzLnZhcmlhdGlvbnNJbmRleCA9IGZvbnQuX3ZhcmlhdGlvblByb2Nlc3NvciA/IHRoaXMuZmluZFZhcmlhdGlvbnNJbmRleChmb250Ll92YXJpYXRpb25Qcm9jZXNzb3Iubm9ybWFsaXplZENvb3JkcykgOiAtMTtcbiAgICAgICAgLy8gaW5pdGlhbGl6ZSB0byBkZWZhdWx0IHNjcmlwdCArIGxhbmd1YWdlXG4gICAgICAgIHRoaXMuc2VsZWN0U2NyaXB0KCk7XG4gICAgICAgIC8vIGN1cnJlbnQgY29udGV4dCAoc2V0IGJ5IGFwcGx5RmVhdHVyZXMpXG4gICAgICAgIHRoaXMuZ2x5cGhzID0gW107XG4gICAgICAgIHRoaXMucG9zaXRpb25zID0gW107IC8vIG9ubHkgdXNlZCBieSBHUE9TXG4gICAgICAgIHRoaXMubGlnYXR1cmVJRCA9IDE7XG4gICAgICAgIHRoaXMuY3VycmVudEZlYXR1cmUgPSBudWxsO1xuICAgIH1cbn1cblxuXG5jbGFzcyAkMTBlN2IyNTdlMWE5YTc1NiRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG4gICAgc2V0IGlkKGlkKSB7XG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XG4gICAgICAgIHRoaXMuc3Vic3RpdHV0ZWQgPSB0cnVlO1xuICAgICAgICBsZXQgR0RFRiA9IHRoaXMuX2ZvbnQuR0RFRjtcbiAgICAgICAgaWYgKEdERUYgJiYgR0RFRi5nbHlwaENsYXNzRGVmKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBjbGVhbiB0aGlzIHVwXG4gICAgICAgICAgICBsZXQgY2xhc3NJRCA9ICgwLCAkYTgzYjljMzZhYWE5NGZkMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5wcm90b3R5cGUuZ2V0Q2xhc3NJRChpZCwgR0RFRi5nbHlwaENsYXNzRGVmKTtcbiAgICAgICAgICAgIHRoaXMuaXNCYXNlID0gY2xhc3NJRCA9PT0gMTtcbiAgICAgICAgICAgIHRoaXMuaXNMaWdhdHVyZSA9IGNsYXNzSUQgPT09IDI7XG4gICAgICAgICAgICB0aGlzLmlzTWFyayA9IGNsYXNzSUQgPT09IDM7XG4gICAgICAgICAgICB0aGlzLm1hcmtBdHRhY2htZW50VHlwZSA9IEdERUYubWFya0F0dGFjaENsYXNzRGVmID8gKDAsICRhODNiOWMzNmFhYTk0ZmQzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLnByb3RvdHlwZS5nZXRDbGFzc0lEKGlkLCBHREVGLm1hcmtBdHRhY2hDbGFzc0RlZikgOiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc01hcmsgPSB0aGlzLmNvZGVQb2ludHMubGVuZ3RoID4gMCAmJiB0aGlzLmNvZGVQb2ludHMuZXZlcnkoKDAsICQ1MlpJZiRpc01hcmspKTtcbiAgICAgICAgICAgIHRoaXMuaXNCYXNlID0gIXRoaXMuaXNNYXJrO1xuICAgICAgICAgICAgdGhpcy5pc0xpZ2F0dXJlID0gdGhpcy5jb2RlUG9pbnRzLmxlbmd0aCA+IDE7XG4gICAgICAgICAgICB0aGlzLm1hcmtBdHRhY2htZW50VHlwZSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29weSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyAkMTBlN2IyNTdlMWE5YTc1NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KHRoaXMuX2ZvbnQsIHRoaXMuaWQsIHRoaXMuY29kZVBvaW50cywgdGhpcy5mZWF0dXJlcyk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZvbnQsIGlkLCBjb2RlUG9pbnRzID0gW10sIGZlYXR1cmVzKXtcbiAgICAgICAgdGhpcy5fZm9udCA9IGZvbnQ7XG4gICAgICAgIHRoaXMuY29kZVBvaW50cyA9IGNvZGVQb2ludHM7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5mZWF0dXJlcyA9IHt9O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmZWF0dXJlcykpIGZvcihsZXQgaSA9IDA7IGkgPCBmZWF0dXJlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgZmVhdHVyZSA9IGZlYXR1cmVzW2ldO1xuICAgICAgICAgICAgdGhpcy5mZWF0dXJlc1tmZWF0dXJlXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGZlYXR1cmVzID09PSBcIm9iamVjdFwiKSBPYmplY3QuYXNzaWduKHRoaXMuZmVhdHVyZXMsIGZlYXR1cmVzKTtcbiAgICAgICAgdGhpcy5saWdhdHVyZUlEID0gbnVsbDtcbiAgICAgICAgdGhpcy5saWdhdHVyZUNvbXBvbmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNMaWdhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3Vyc2l2ZUF0dGFjaG1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLm1hcmtBdHRhY2htZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zaGFwZXJJbmZvID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdWJzdGl0dXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzTXVsdGlwbGllZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuXG5jbGFzcyAkZTFjNmJiYzhjYjQxNmY4YyRleHBvcnQkMmUyYmNkODczOWFlMDM5IGV4dGVuZHMgKDAsICQ2NDk5NzBkODczMzViMzBmJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpIHtcbiAgICBzdGF0aWMgcGxhbkZlYXR1cmVzKHBsYW4pIHtcbiAgICAgICAgcGxhbi5hZGQoW1xuICAgICAgICAgICAgXCJsam1vXCIsXG4gICAgICAgICAgICBcInZqbW9cIixcbiAgICAgICAgICAgIFwidGptb1wiXG4gICAgICAgIF0sIGZhbHNlKTtcbiAgICB9XG4gICAgc3RhdGljIGFzc2lnbkZlYXR1cmVzKHBsYW4sIGdseXBocykge1xuICAgICAgICBsZXQgc3RhdGUgPSAwO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHdoaWxlKGkgPCBnbHlwaHMubGVuZ3RoKXtcbiAgICAgICAgICAgIGxldCBhY3Rpb247XG4gICAgICAgICAgICBsZXQgZ2x5cGggPSBnbHlwaHNbaV07XG4gICAgICAgICAgICBsZXQgY29kZSA9IGdseXBoLmNvZGVQb2ludHNbMF07XG4gICAgICAgICAgICBsZXQgdHlwZSA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRUeXBlKGNvZGUpO1xuICAgICAgICAgICAgW2FjdGlvbiwgc3RhdGVdID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFNUQVRFX1RBQkxFW3N0YXRlXVt0eXBlXTtcbiAgICAgICAgICAgIHN3aXRjaChhY3Rpb24pe1xuICAgICAgICAgICAgICAgIGNhc2UgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERFQ09NUE9TRTpcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVjb21wb3NlIHRoZSBjb21wb3NlZCBzeWxsYWJsZSBpZiBpdCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBmb250LlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBsYW4uZm9udC5oYXNHbHlwaEZvckNvZGVQb2ludChjb2RlKSkgaSA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRkZWNvbXBvc2UoZ2x5cGhzLCBpLCBwbGFuLmZvbnQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRDT01QT1NFOlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3VuZCBhIGRlY29tcG9zZWQgc3lsbGFibGUuIFRyeSB0byBjb21wb3NlIGlmIHN1cHBvcnRlZCBieSB0aGUgZm9udC5cbiAgICAgICAgICAgICAgICAgICAgaSA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRjb21wb3NlKGdseXBocywgaSwgcGxhbi5mb250KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVE9ORV9NQVJLOlxuICAgICAgICAgICAgICAgICAgICAvLyBHb3QgYSB2YWxpZCBzeWxsYWJsZSwgZm9sbG93ZWQgYnkgYSB0b25lIG1hcmsuIE1vdmUgdGhlIHRvbmUgbWFyayB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzeWxsYWJsZS5cbiAgICAgICAgICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJHJlb3JkZXJUb25lTWFyayhnbHlwaHMsIGksIHBsYW4uZm9udCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJElOVkFMSUQ6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRvbmUgbWFyayBoYXMgbm8gdmFsaWQgc3lsbGFibGUgdG8gYXR0YWNoIHRvLCBzbyBpbnNlcnQgYSBkb3R0ZWQgY2lyY2xlXG4gICAgICAgICAgICAgICAgICAgIGkgPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaW5zZXJ0RG90dGVkQ2lyY2xlKGdseXBocywgaSwgcGxhbi5mb250KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9XG59XG4oMCwgJDUyWklmJHN3Y2hlbHBlcnNzcmNfZGVmaW5lX3Byb3BlcnR5bWpzKSgkZTFjNmJiYzhjYjQxNmY4YyRleHBvcnQkMmUyYmNkODczOWFlMDM5LCBcInplcm9NYXJrV2lkdGhzXCIsIFwiTk9ORVwiKTtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRIQU5HVUxfQkFTRSA9IDB4YWMwMDtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRIQU5HVUxfRU5EID0gMHhkN2E0O1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9DT1VOVCA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRIQU5HVUxfRU5EIC0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9CQVNFICsgMTtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMX0JBU0UgPSAweDExMDA7IC8vIGxlYWRcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWX0JBU0UgPSAweDExNjE7IC8vIHZvd2VsXG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9CQVNFID0gMHgxMWE3OyAvLyB0cmFpbFxuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExfQ09VTlQgPSAxOTtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWX0NPVU5UID0gMjE7XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9DT1VOVCA9IDI4O1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExfRU5EID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExfQkFTRSArICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMX0NPVU5UIC0gMTtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWX0VORCA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWX0JBU0UgKyAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVl9DT1VOVCAtIDE7XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9FTkQgPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9CQVNFICsgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRfQ09VTlQgLSAxO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERPVFRFRF9DSVJDTEUgPSAweDI1Y2M7XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNMID0gKGNvZGUpPT4weDExMDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4MTE1ZiB8fCAweGE5NjAgPD0gY29kZSAmJiBjb2RlIDw9IDB4YTk3YztcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc1YgPSAoY29kZSk9PjB4MTE2MCA8PSBjb2RlICYmIGNvZGUgPD0gMHgxMWE3IHx8IDB4ZDdiMCA8PSBjb2RlICYmIGNvZGUgPD0gMHhkN2M2O1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzVCA9IChjb2RlKT0+MHgxMWE4IDw9IGNvZGUgJiYgY29kZSA8PSAweDExZmYgfHwgMHhkN2NiIDw9IGNvZGUgJiYgY29kZSA8PSAweGQ3ZmI7XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNUb25lID0gKGNvZGUpPT4weDMwMmUgPD0gY29kZSAmJiBjb2RlIDw9IDB4MzAyZjtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0xWVCA9IChjb2RlKT0+JGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9CQVNFIDw9IGNvZGUgJiYgY29kZSA8PSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkSEFOR1VMX0VORDtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0xWID0gKGNvZGUpPT5jb2RlIC0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9CQVNFIDwgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9DT1VOVCAmJiAoY29kZSAtICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRIQU5HVUxfQkFTRSkgJSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9DT1VOVCA9PT0gMDtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0NvbWJpbmluZ0wgPSAoY29kZSk9PiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMX0JBU0UgPD0gY29kZSAmJiBjb2RlIDw9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMX0VORDtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0NvbWJpbmluZ1YgPSAoY29kZSk9PiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWX0JBU0UgPD0gY29kZSAmJiBjb2RlIDw9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWX0VORDtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0NvbWJpbmluZ1QgPSAoY29kZSk9PiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0JBU0UgKyAxICYmIDEgPD0gY29kZSAmJiBjb2RlIDw9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0VORDtcbi8vIENoYXJhY3RlciBjYXRlZ29yaWVzXG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkWCA9IDA7IC8vIE90aGVyIGNoYXJhY3RlclxuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEwgPSAxOyAvLyBMZWFkaW5nIGNvbnNvbmFudFxuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFYgPSAyOyAvLyBNZWRpYWwgdm93ZWxcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUID0gMzsgLy8gVHJhaWxpbmcgY29uc29uYW50XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTFYgPSA0OyAvLyBDb21wb3NlZCA8TFY+IHN5bGxhYmxlXG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTFZUID0gNTsgLy8gQ29tcG9zZWQgPExWVD4gc3lsbGFibGVcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRNID0gNjsgLy8gVG9uZSBtYXJrXG4vLyBUaGlzIGZ1bmN0aW9uIGNsYXNzaWZpZXMgYSBjaGFyYWN0ZXIgdXNpbmcgdGhlIGFib3ZlIGNhdGVnb3JpZXMuXG5mdW5jdGlvbiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZ2V0VHlwZShjb2RlKSB7XG4gICAgaWYgKCRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0woY29kZSkpIHJldHVybiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTDtcbiAgICBpZiAoJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzVihjb2RlKSkgcmV0dXJuICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWO1xuICAgIGlmICgkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNUKGNvZGUpKSByZXR1cm4gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFQ7XG4gICAgaWYgKCRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0xWKGNvZGUpKSByZXR1cm4gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExWO1xuICAgIGlmICgkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNMVlQoY29kZSkpIHJldHVybiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTFZUO1xuICAgIGlmICgkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNUb25lKGNvZGUpKSByZXR1cm4gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE07XG4gICAgcmV0dXJuICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRYO1xufVxuLy8gU3RhdGUgbWFjaGluZSBhY3Rpb25zXG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTk9fQUNUSU9OID0gMDtcbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRERUNPTVBPU0UgPSAxO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJENPTVBPU0UgPSAyO1xuY29uc3QgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRPTkVfTUFSSyA9IDQ7XG5jb25zdCAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkSU5WQUxJRCA9IDU7XG4vLyBCdWlsZCBhIHN0YXRlIG1hY2hpbmUgdGhhdCBhY2NlcHRzIHZhbGlkIHN5bGxhYmxlcywgYW5kIGFwcGxpZXMgYWN0aW9ucyBhbG9uZyB0aGUgd2F5LlxuLy8gVGhlIGxvZ2ljIHRoaXMgaXMgaW1wbGVtZW50aW5nIGlzIGRvY3VtZW50ZWQgYXQgdGhlIHRvcCBvZiB0aGUgZmlsZS5cbmNvbnN0ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRTVEFURV9UQUJMRSA9IFtcbiAgICAvLyAgICAgICBYICAgICAgICAgICAgICAgICBMICAgICAgICAgICAgICAgICBWICAgICAgICAgICAgICAgIFQgICAgICAgICAgICAgICAgICBMViAgICAgICAgICAgICAgICBMVlQgICAgICAgICAgICAgICBNXG4gICAgLy8gU3RhdGUgMDogc3RhcnQgc3RhdGVcbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04sXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04sXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04sXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04sXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRERUNPTVBPU0UsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRERUNPTVBPU0UsXG4gICAgICAgICAgICAzXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRJTlZBTElELFxuICAgICAgICAgICAgMFxuICAgICAgICBdXG4gICAgXSxcbiAgICAvLyBTdGF0ZSAxOiA8TD5cbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04sXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04sXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRDT01QT1NFLFxuICAgICAgICAgICAgMlxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTk9fQUNUSU9OLFxuICAgICAgICAgICAgMFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkREVDT01QT1NFLFxuICAgICAgICAgICAgMlxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkREVDT01QT1NFLFxuICAgICAgICAgICAgM1xuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkSU5WQUxJRCxcbiAgICAgICAgICAgIDBcbiAgICAgICAgXVxuICAgIF0sXG4gICAgLy8gU3RhdGUgMjogPEwsVj4gb3IgPExWPlxuICAgIFtcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE5PX0FDVElPTixcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJENPTVBPU0UsXG4gICAgICAgICAgICAzXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRERUNPTVBPU0UsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRERUNPTVBPU0UsXG4gICAgICAgICAgICAzXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUT05FX01BUkssXG4gICAgICAgICAgICAwXG4gICAgICAgIF1cbiAgICBdLFxuICAgIC8vIFN0YXRlIDM6IDxMLFYsVD4gb3IgPExWVD5cbiAgICBbXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04sXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04sXG4gICAgICAgICAgICAxXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04sXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciROT19BQ1RJT04sXG4gICAgICAgICAgICAwXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRERUNPTVBPU0UsXG4gICAgICAgICAgICAyXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRERUNPTVBPU0UsXG4gICAgICAgICAgICAzXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUT05FX01BUkssXG4gICAgICAgICAgICAwXG4gICAgICAgIF1cbiAgICBdXG5dO1xuZnVuY3Rpb24gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGdldEdseXBoKGZvbnQsIGNvZGUsIGZlYXR1cmVzKSB7XG4gICAgcmV0dXJuIG5ldyAoMCwgJDEwZTdiMjU3ZTFhOWE3NTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZm9udCwgZm9udC5nbHlwaEZvckNvZGVQb2ludChjb2RlKS5pZCwgW1xuICAgICAgICBjb2RlXG4gICAgXSwgZmVhdHVyZXMpO1xufVxuZnVuY3Rpb24gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGRlY29tcG9zZShnbHlwaHMsIGksIGZvbnQpIHtcbiAgICBsZXQgZ2x5cGggPSBnbHlwaHNbaV07XG4gICAgbGV0IGNvZGUgPSBnbHlwaC5jb2RlUG9pbnRzWzBdO1xuICAgIGxldCBzID0gY29kZSAtICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRIQU5HVUxfQkFTRTtcbiAgICBsZXQgdCA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0JBU0UgKyBzICUgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRfQ09VTlQ7XG4gICAgcyA9IHMgLyAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9DT1VOVCB8IDA7XG4gICAgbGV0IGwgPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTF9CQVNFICsgcyAvICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWX0NPVU5UIHwgMDtcbiAgICBsZXQgdiA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWX0JBU0UgKyBzICUgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfQ09VTlQ7XG4gICAgLy8gRG9uJ3QgZGVjb21wb3NlIGlmIGFsbCBvZiB0aGUgY29tcG9uZW50cyBhcmUgbm90IGF2YWlsYWJsZVxuICAgIGlmICghZm9udC5oYXNHbHlwaEZvckNvZGVQb2ludChsKSB8fCAhZm9udC5oYXNHbHlwaEZvckNvZGVQb2ludCh2KSB8fCB0ICE9PSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9CQVNFICYmICFmb250Lmhhc0dseXBoRm9yQ29kZVBvaW50KHQpKSByZXR1cm4gaTtcbiAgICAvLyBSZXBsYWNlIHRoZSBjdXJyZW50IGdseXBoIHdpdGggZGVjb21wb3NlZCBMLCBWLCBhbmQgVCBnbHlwaHMsXG4gICAgLy8gYW5kIGFwcGx5IHRoZSBwcm9wZXIgT3BlblR5cGUgZmVhdHVyZXMgdG8gZWFjaCBjb21wb25lbnQuXG4gICAgbGV0IGxqbW8gPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZ2V0R2x5cGgoZm9udCwgbCwgZ2x5cGguZmVhdHVyZXMpO1xuICAgIGxqbW8uZmVhdHVyZXMubGptbyA9IHRydWU7XG4gICAgbGV0IHZqbW8gPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZ2V0R2x5cGgoZm9udCwgdiwgZ2x5cGguZmVhdHVyZXMpO1xuICAgIHZqbW8uZmVhdHVyZXMudmptbyA9IHRydWU7XG4gICAgbGV0IGluc2VydCA9IFtcbiAgICAgICAgbGptbyxcbiAgICAgICAgdmptb1xuICAgIF07XG4gICAgaWYgKHQgPiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9CQVNFKSB7XG4gICAgICAgIGxldCB0am1vID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGdldEdseXBoKGZvbnQsIHQsIGdseXBoLmZlYXR1cmVzKTtcbiAgICAgICAgdGptby5mZWF0dXJlcy50am1vID0gdHJ1ZTtcbiAgICAgICAgaW5zZXJ0LnB1c2godGptbyk7XG4gICAgfVxuICAgIGdseXBocy5zcGxpY2UoaSwgMSwgLi4uaW5zZXJ0KTtcbiAgICByZXR1cm4gaSArIGluc2VydC5sZW5ndGggLSAxO1xufVxuZnVuY3Rpb24gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGNvbXBvc2UoZ2x5cGhzLCBpLCBmb250KSB7XG4gICAgbGV0IGdseXBoID0gZ2x5cGhzW2ldO1xuICAgIGxldCBjb2RlID0gZ2x5cGhzW2ldLmNvZGVQb2ludHNbMF07XG4gICAgbGV0IHR5cGUgPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZ2V0VHlwZShjb2RlKTtcbiAgICBsZXQgcHJldiA9IGdseXBoc1tpIC0gMV0uY29kZVBvaW50c1swXTtcbiAgICBsZXQgcHJldlR5cGUgPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZ2V0VHlwZShwcmV2KTtcbiAgICAvLyBGaWd1cmUgb3V0IHdoYXQgdHlwZSBvZiBzeWxsYWJsZSB3ZSdyZSBkZWFsaW5nIHdpdGhcbiAgICBsZXQgbHYsIGxqbW8sIHZqbW8sIHRqbW87XG4gICAgaWYgKHByZXZUeXBlID09PSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTFYgJiYgdHlwZSA9PT0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFQpIHtcbiAgICAgICAgLy8gPExWLFQ+XG4gICAgICAgIGx2ID0gcHJldjtcbiAgICAgICAgdGptbyA9IGdseXBoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlID09PSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVikge1xuICAgICAgICAgICAgLy8gPEwsVj5cbiAgICAgICAgICAgIGxqbW8gPSBnbHlwaHNbaSAtIDFdO1xuICAgICAgICAgICAgdmptbyA9IGdseXBoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gPEwsVixUPlxuICAgICAgICAgICAgbGptbyA9IGdseXBoc1tpIC0gMl07XG4gICAgICAgICAgICB2am1vID0gZ2x5cGhzW2kgLSAxXTtcbiAgICAgICAgICAgIHRqbW8gPSBnbHlwaDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbCA9IGxqbW8uY29kZVBvaW50c1swXTtcbiAgICAgICAgbGV0IHYgPSB2am1vLmNvZGVQb2ludHNbMF07XG4gICAgICAgIC8vIE1ha2Ugc3VyZSBMIGFuZCBWIGFyZSBjb21iaW5pbmcgY2hhcmFjdGVyc1xuICAgICAgICBpZiAoJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzQ29tYmluaW5nTChsKSAmJiAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNDb21iaW5pbmdWKHYpKSBsdiA9ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRIQU5HVUxfQkFTRSArICgobCAtICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMX0JBU0UpICogJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfQ09VTlQgKyAodiAtICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWX0JBU0UpKSAqICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0NPVU5UO1xuICAgIH1cbiAgICBsZXQgdCA9IHRqbW8gJiYgdGptby5jb2RlUG9pbnRzWzBdIHx8ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0JBU0U7XG4gICAgaWYgKGx2ICE9IG51bGwgJiYgKHQgPT09ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0JBU0UgfHwgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzQ29tYmluaW5nVCh0KSkpIHtcbiAgICAgICAgbGV0IHMgPSBsdiArICh0IC0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRfQkFTRSk7XG4gICAgICAgIC8vIFJlcGxhY2Ugd2l0aCBhIGNvbXBvc2VkIGdseXBoIGlmIHN1cHBvcnRlZCBieSB0aGUgZm9udCxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIGFwcGx5IHRoZSBwcm9wZXIgT3BlblR5cGUgZmVhdHVyZXMgdG8gZWFjaCBjb21wb25lbnQuXG4gICAgICAgIGlmIChmb250Lmhhc0dseXBoRm9yQ29kZVBvaW50KHMpKSB7XG4gICAgICAgICAgICBsZXQgZGVsID0gcHJldlR5cGUgPT09ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWID8gMyA6IDI7XG4gICAgICAgICAgICBnbHlwaHMuc3BsaWNlKGkgLSBkZWwgKyAxLCBkZWwsICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRHbHlwaChmb250LCBzLCBnbHlwaC5mZWF0dXJlcykpO1xuICAgICAgICAgICAgcmV0dXJuIGkgLSBkZWwgKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIERpZG4ndCBjb21wb3NlIChlaXRoZXIgYSBub24tY29tYmluaW5nIGNvbXBvbmVudCBvciB1bnN1cHBvcnRlZCBieSBmb250KS5cbiAgICBpZiAobGptbykgbGptby5mZWF0dXJlcy5sam1vID0gdHJ1ZTtcbiAgICBpZiAodmptbykgdmptby5mZWF0dXJlcy52am1vID0gdHJ1ZTtcbiAgICBpZiAodGptbykgdGptby5mZWF0dXJlcy50am1vID0gdHJ1ZTtcbiAgICBpZiAocHJldlR5cGUgPT09ICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMVikge1xuICAgICAgICAvLyBTZXF1ZW5jZSB3YXMgb3JpZ2luYWxseSA8TCxWPiwgd2hpY2ggZ290IGNvbWJpbmVkIGVhcmxpZXIuXG4gICAgICAgIC8vIEVpdGhlciB0aGUgVCB3YXMgbm9uLWNvbWJpbmluZywgb3IgdGhlIExWVCBnbHlwaCB3YXNuJ3Qgc3VwcG9ydGVkLlxuICAgICAgICAvLyBEZWNvbXBvc2UgdGhlIGdseXBoIGFnYWluIGFuZCBhcHBseSBPVCBmZWF0dXJlcy5cbiAgICAgICAgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGRlY29tcG9zZShnbHlwaHMsIGkgLSAxLCBmb250KTtcbiAgICAgICAgcmV0dXJuIGkgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbn1cbmZ1bmN0aW9uICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRMZW5ndGgoY29kZSkge1xuICAgIHN3aXRjaCgkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZ2V0VHlwZShjb2RlKSl7XG4gICAgICAgIGNhc2UgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJExWOlxuICAgICAgICBjYXNlICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMVlQ6XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgY2FzZSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVjpcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICBjYXNlICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUOlxuICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgfVxufVxuZnVuY3Rpb24gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJHJlb3JkZXJUb25lTWFyayhnbHlwaHMsIGksIGZvbnQpIHtcbiAgICBsZXQgZ2x5cGggPSBnbHlwaHNbaV07XG4gICAgbGV0IGNvZGUgPSBnbHlwaHNbaV0uY29kZVBvaW50c1swXTtcbiAgICAvLyBNb3ZlIHRvbmUgbWFyayB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBwcmV2aW91cyBzeWxsYWJsZSwgdW5sZXNzIGl0IGlzIHplcm8gd2lkdGhcbiAgICBpZiAoZm9udC5nbHlwaEZvckNvZGVQb2ludChjb2RlKS5hZHZhbmNlV2lkdGggPT09IDApIHJldHVybjtcbiAgICBsZXQgcHJldiA9IGdseXBoc1tpIC0gMV0uY29kZVBvaW50c1swXTtcbiAgICBsZXQgbGVuID0gJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGdldExlbmd0aChwcmV2KTtcbiAgICBnbHlwaHMuc3BsaWNlKGksIDEpO1xuICAgIHJldHVybiBnbHlwaHMuc3BsaWNlKGkgLSBsZW4sIDAsIGdseXBoKTtcbn1cbmZ1bmN0aW9uICRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpbnNlcnREb3R0ZWRDaXJjbGUoZ2x5cGhzLCBpLCBmb250KSB7XG4gICAgbGV0IGdseXBoID0gZ2x5cGhzW2ldO1xuICAgIGxldCBjb2RlID0gZ2x5cGhzW2ldLmNvZGVQb2ludHNbMF07XG4gICAgaWYgKGZvbnQuaGFzR2x5cGhGb3JDb2RlUG9pbnQoJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERPVFRFRF9DSVJDTEUpKSB7XG4gICAgICAgIGxldCBkb3R0ZWRDaXJjbGUgPSAkZTFjNmJiYzhjYjQxNmY4YyR2YXIkZ2V0R2x5cGgoZm9udCwgJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERPVFRFRF9DSVJDTEUsIGdseXBoLmZlYXR1cmVzKTtcbiAgICAgICAgLy8gSWYgdGhlIHRvbmUgbWFyayBpcyB6ZXJvIHdpZHRoLCBpbnNlcnQgdGhlIGRvdHRlZCBjaXJjbGUgYmVmb3JlLCBvdGhlcndpc2UgYWZ0ZXJcbiAgICAgICAgbGV0IGlkeCA9IGZvbnQuZ2x5cGhGb3JDb2RlUG9pbnQoY29kZSkuYWR2YW5jZVdpZHRoID09PSAwID8gaSA6IGkgKyAxO1xuICAgICAgICBnbHlwaHMuc3BsaWNlKGlkeCwgMCwgZG90dGVkQ2lyY2xlKTtcbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbn1cblxuXG5cblxuXG5cblxuXG5cbnZhciAkNGIwNzM1Y2E2YzY5MmVhNSRleHBvcnRzID0ge307XG4kNGIwNzM1Y2E2YzY5MmVhNSRleHBvcnRzID0gSlNPTi5wYXJzZSgne1wic3RhdGVUYWJsZVwiOltbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMiwzLDQsNSw2LDcsOCw5LDAsMTAsMTEsMTEsMTIsMTMsMTQsMTUsMTYsMTddLFswLDAsMCwxOCwxOSwyMCwyMSwyMiwyMywwLDI0LDAsMCwyNSwyNiwwLDAsMjcsMF0sWzAsMCwwLDI4LDI5LDMwLDMxLDMyLDMzLDAsMzQsMCwwLDM1LDM2LDAsMCwzNywwXSxbMCwwLDAsMzgsNSw3LDcsOCw5LDAsMTAsMCwwLDAsMTMsMCwwLDE2LDBdLFswLDM5LDAsMCwwLDQwLDQxLDAsOSwwLDEwLDAsMCwwLDQyLDAsMzksMCwwXSxbMCwwLDAsMCw0Myw0NCw0NCw4LDksMCwwLDAsMCwxMiw0MywwLDAsMCwwXSxbMCwwLDAsMCw0Myw0NCw0NCw4LDksMCwwLDAsMCwwLDQzLDAsMCwwLDBdLFswLDAsMCw0NSw0Niw0Nyw0OCw0OSw5LDAsMTAsMCwwLDAsNDIsMCwwLDAsMF0sWzAsMCwwLDAsMCw1MCwwLDAsNTEsMCwxMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDUyLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDUzLDU0LDU1LDU2LDU3LDU4LDAsNTksMCwwLDYwLDYxLDAsMCw2MiwwXSxbMCwwLDAsNCw1LDcsNyw4LDksMCwxMCwwLDAsMCwxMywwLDAsMTYsMF0sWzAsNjMsNjQsMCwwLDQwLDQxLDAsOSwwLDEwLDAsMCwwLDQyLDAsNjMsMCwwXSxbMCwyLDMsNCw1LDYsNyw4LDksMCwxMCwxMSwxMSwxMiwxMywwLDIsMTYsMF0sWzAsMCwwLDE4LDY1LDIwLDIxLDIyLDIzLDAsMjQsMCwwLDI1LDI2LDAsMCwyNywwXSxbMCwwLDAsMCw2Niw2Nyw2Nyw4LDksMCwxMCwwLDAsMCw2OCwwLDAsMCwwXSxbMCwwLDAsNjksMCw3MCw3MCwwLDcxLDAsNzIsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsNzMsMTksNzQsNzQsMjIsMjMsMCwyNCwwLDAsMCwyNiwwLDAsMjcsMF0sWzAsNzUsMCwwLDAsNzYsNzcsMCwyMywwLDI0LDAsMCwwLDc4LDAsNzUsMCwwXSxbMCwwLDAsMCw3OSw4MCw4MCwyMiwyMywwLDAsMCwwLDI1LDc5LDAsMCwwLDBdLFswLDAsMCwxOCwxOSwyMCw3NCwyMiwyMywwLDI0LDAsMCwyNSwyNiwwLDAsMjcsMF0sWzAsMCwwLDgxLDgyLDgzLDg0LDg1LDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDAsMCw4NiwwLDAsODcsMCwyNCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDg4LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDE4LDE5LDc0LDc0LDIyLDIzLDAsMjQsMCwwLDAsMjYsMCwwLDI3LDBdLFswLDg5LDkwLDAsMCw3Niw3NywwLDIzLDAsMjQsMCwwLDAsNzgsMCw4OSwwLDBdLFswLDAsMCwwLDkxLDkyLDkyLDIyLDIzLDAsMjQsMCwwLDAsOTMsMCwwLDAsMF0sWzAsMCwwLDk0LDI5LDk1LDMxLDMyLDMzLDAsMzQsMCwwLDAsMzYsMCwwLDM3LDBdLFswLDk2LDAsMCwwLDk3LDk4LDAsMzMsMCwzNCwwLDAsMCw5OSwwLDk2LDAsMF0sWzAsMCwwLDAsMTAwLDEwMSwxMDEsMzIsMzMsMCwwLDAsMCwzNSwxMDAsMCwwLDAsMF0sWzAsMCwwLDAsMTAwLDEwMSwxMDEsMzIsMzMsMCwwLDAsMCwwLDEwMCwwLDAsMCwwXSxbMCwwLDAsMTAyLDEwMywxMDQsMTA1LDEwNiwzMywwLDM0LDAsMCwwLDk5LDAsMCwwLDBdLFswLDAsMCwwLDAsMTA3LDAsMCwxMDgsMCwzNCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDEwOSwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwyOCwyOSw5NSwzMSwzMiwzMywwLDM0LDAsMCwwLDM2LDAsMCwzNywwXSxbMCwxMTAsMTExLDAsMCw5Nyw5OCwwLDMzLDAsMzQsMCwwLDAsOTksMCwxMTAsMCwwXSxbMCwwLDAsMCwxMTIsMTEzLDExMywzMiwzMywwLDM0LDAsMCwwLDExNCwwLDAsMCwwXSxbMCwwLDAsMCw1LDcsNyw4LDksMCwxMCwwLDAsMCwxMywwLDAsMTYsMF0sWzAsMCwwLDExNSwxMTYsMTE3LDExOCw4LDksMCwxMCwwLDAsMTE5LDEyMCwwLDAsMTYsMF0sWzAsMCwwLDAsMCwxMjEsMTIxLDAsOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDM5LDAsMTIyLDAsMTIzLDEyMyw4LDksMCwxMCwwLDAsMCw0MiwwLDM5LDAsMF0sWzAsMTI0LDY0LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMTI0LDAsMF0sWzAsMzksMCwwLDAsMTIxLDEyNSwwLDksMCwxMCwwLDAsMCw0MiwwLDM5LDAsMF0sWzAsMCwwLDAsMCwxMjYsMTI2LDgsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw0Niw0Nyw0OCw0OSw5LDAsMTAsMCwwLDAsNDIsMCwwLDAsMF0sWzAsMCwwLDAsMCw0Nyw0Nyw0OSw5LDAsMTAsMCwwLDAsNDIsMCwwLDAsMF0sWzAsMCwwLDAsMCwxMjcsMTI3LDQ5LDksMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMTI4LDEyNywxMjcsNDksOSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMTI5LDEzMCwxMzEsMTMyLDEzMyw5LDAsMTAsMCwwLDAsNDIsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMTAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDUwLDAsMCwwLDAsMTAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwxMzQsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMTM1LDU0LDU2LDU2LDU3LDU4LDAsNTksMCwwLDAsNjEsMCwwLDYyLDBdLFswLDEzNiwwLDAsMCwxMzcsMTM4LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwxMzYsMCwwXSxbMCwwLDAsMCwxNDAsMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDYwLDE0MCwwLDAsMCwwXSxbMCwwLDAsMCwxNDAsMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDAsMTQwLDAsMCwwLDBdLFswLDAsMCwxNDIsMTQzLDE0NCwxNDUsMTQ2LDU4LDAsNTksMCwwLDAsMTM5LDAsMCwwLDBdLFswLDAsMCwwLDAsMTQ3LDAsMCwxNDgsMCw1OSwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDE0OSwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCw1Myw1NCw1Niw1Niw1Nyw1OCwwLDU5LDAsMCwwLDYxLDAsMCw2MiwwXSxbMCwxNTAsMTUxLDAsMCwxMzcsMTM4LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwxNTAsMCwwXSxbMCwwLDAsMCwxNTIsMTUzLDE1Myw1Nyw1OCwwLDU5LDAsMCwwLDE1NCwwLDAsMCwwXSxbMCwwLDAsMTU1LDExNiwxNTYsMTU3LDgsOSwwLDEwLDAsMCwxNTgsMTIwLDAsMCwxNiwwXSxbMCwwLDAsMCwwLDEyMSwxMjEsMCw5LDAsMTAsMCwwLDAsMCwwLDAsMCwwXSxbMCw3NSwzLDQsNSwxNTksMTYwLDgsMTYxLDAsMTYyLDAsMTEsMTIsMTYzLDAsNzUsMTYsMF0sWzAsMCwwLDAsMCw0MCwxNjQsMCw5LDAsMTAsMCwwLDAsNDIsMCwwLDAsMF0sWzAsMCwwLDAsMTY1LDQ0LDQ0LDgsOSwwLDAsMCwwLDAsMTY1LDAsMCwwLDBdLFswLDEyNCw2NCwwLDAsNDAsMTY0LDAsOSwwLDEwLDAsMCwwLDQyLDAsMTI0LDAsMF0sWzAsMCwwLDAsMCw3MCw3MCwwLDcxLDAsNzIsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDcxLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMTY2LDAsMCwxNjcsMCw3MiwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDE2OCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDE5LDc0LDc0LDIyLDIzLDAsMjQsMCwwLDAsMjYsMCwwLDI3LDBdLFswLDAsMCwwLDc5LDgwLDgwLDIyLDIzLDAsMCwwLDAsMCw3OSwwLDAsMCwwXSxbMCwwLDAsMTY5LDE3MCwxNzEsMTcyLDIyLDIzLDAsMjQsMCwwLDE3MywxNzQsMCwwLDI3LDBdLFswLDAsMCwwLDAsMTc1LDE3NSwwLDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsNzUsMCwxNzYsMCwxNzcsMTc3LDIyLDIzLDAsMjQsMCwwLDAsNzgsMCw3NSwwLDBdLFswLDE3OCw5MCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDE3OCwwLDBdLFswLDc1LDAsMCwwLDE3NSwxNzksMCwyMywwLDI0LDAsMCwwLDc4LDAsNzUsMCwwXSxbMCwwLDAsMCwwLDE4MCwxODAsMjIsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw4Miw4Myw4NCw4NSwyMywwLDI0LDAsMCwwLDc4LDAsMCwwLDBdLFswLDAsMCwwLDAsODMsODMsODUsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsMCwwLDE4MSwxODEsODUsMjMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMTgyLDE4MSwxODEsODUsMjMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDE4MywxODQsMTg1LDE4NiwxODcsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwyNCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsODYsMCwwLDAsMCwyNCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDE4OCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwxODksMTcwLDE5MCwxOTEsMjIsMjMsMCwyNCwwLDAsMTkyLDE3NCwwLDAsMjcsMF0sWzAsMCwwLDAsMCwxNzUsMTc1LDAsMjMsMCwyNCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsNzYsMTkzLDAsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsMCwxOTQsODAsODAsMjIsMjMsMCwwLDAsMCwwLDE5NCwwLDAsMCwwXSxbMCwxNzgsOTAsMCwwLDc2LDE5MywwLDIzLDAsMjQsMCwwLDAsNzgsMCwxNzgsMCwwXSxbMCwwLDAsMCwyOSw5NSwzMSwzMiwzMywwLDM0LDAsMCwwLDM2LDAsMCwzNywwXSxbMCwwLDAsMCwxMDAsMTAxLDEwMSwzMiwzMywwLDAsMCwwLDAsMTAwLDAsMCwwLDBdLFswLDAsMCwxOTUsMTk2LDE5NywxOTgsMzIsMzMsMCwzNCwwLDAsMTk5LDIwMCwwLDAsMzcsMF0sWzAsMCwwLDAsMCwyMDEsMjAxLDAsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCw5NiwwLDIwMiwwLDIwMywyMDMsMzIsMzMsMCwzNCwwLDAsMCw5OSwwLDk2LDAsMF0sWzAsMjA0LDExMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIwNCwwLDBdLFswLDk2LDAsMCwwLDIwMSwyMDUsMCwzMywwLDM0LDAsMCwwLDk5LDAsOTYsMCwwXSxbMCwwLDAsMCwwLDIwNiwyMDYsMzIsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwxMDMsMTA0LDEwNSwxMDYsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsMCwwLDEwNCwxMDQsMTA2LDMzLDAsMzQsMCwwLDAsOTksMCwwLDAsMF0sWzAsMCwwLDAsMCwyMDcsMjA3LDEwNiwzMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwyMDgsMjA3LDIwNywxMDYsMzMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDIwOSwyMTAsMjExLDIxMiwyMTMsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwzNCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMTA3LDAsMCwwLDAsMzQsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwyMTQsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMjE1LDE5NiwyMTYsMjE3LDMyLDMzLDAsMzQsMCwwLDIxOCwyMDAsMCwwLDM3LDBdLFswLDAsMCwwLDAsMjAxLDIwMSwwLDMzLDAsMzQsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDk3LDIxOSwwLDMzLDAsMzQsMCwwLDAsOTksMCwwLDAsMF0sWzAsMCwwLDAsMjIwLDEwMSwxMDEsMzIsMzMsMCwwLDAsMCwwLDIyMCwwLDAsMCwwXSxbMCwyMDQsMTExLDAsMCw5NywyMTksMCwzMywwLDM0LDAsMCwwLDk5LDAsMjA0LDAsMF0sWzAsMCwwLDIyMSwxMTYsMjIyLDIyMiw4LDksMCwxMCwwLDAsMCwxMjAsMCwwLDE2LDBdLFswLDIyMywwLDAsMCw0MCwyMjQsMCw5LDAsMTAsMCwwLDAsNDIsMCwyMjMsMCwwXSxbMCwwLDAsMCwyMjUsNDQsNDQsOCw5LDAsMCwwLDAsMTE5LDIyNSwwLDAsMCwwXSxbMCwwLDAsMTE1LDExNiwxMTcsMjIyLDgsOSwwLDEwLDAsMCwxMTksMTIwLDAsMCwxNiwwXSxbMCwwLDAsMTE1LDExNiwyMjIsMjIyLDgsOSwwLDEwLDAsMCwwLDEyMCwwLDAsMTYsMF0sWzAsMjI2LDY0LDAsMCw0MCwyMjQsMCw5LDAsMTAsMCwwLDAsNDIsMCwyMjYsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDksMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMzksMCwwLDAsMTIxLDEyMSwwLDksMCwxMCwwLDAsMCw0MiwwLDM5LDAsMF0sWzAsMCwwLDAsMCw0NCw0NCw4LDksMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDIyNywwLDIyOCwyMjksMCw5LDAsMTAsMCwwLDIzMCwwLDAsMCwwLDBdLFswLDM5LDAsMTIyLDAsMTIxLDEyMSwwLDksMCwxMCwwLDAsMCw0MiwwLDM5LDAsMF0sWzAsMCwwLDAsMCwwLDAsOCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMjMxLDIzMSw0OSwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwyMzIsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDEzMCwxMzEsMTMyLDEzMyw5LDAsMTAsMCwwLDAsNDIsMCwwLDAsMF0sWzAsMCwwLDAsMCwxMzEsMTMxLDEzMyw5LDAsMTAsMCwwLDAsNDIsMCwwLDAsMF0sWzAsMCwwLDAsMCwyMzMsMjMzLDEzMyw5LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDIzNCwyMzMsMjMzLDEzMyw5LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwyMzUsMjM2LDIzNywyMzgsMjM5LDksMCwxMCwwLDAsMCw0MiwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsNTQsNTYsNTYsNTcsNTgsMCw1OSwwLDAsMCw2MSwwLDAsNjIsMF0sWzAsMCwwLDI0MCwyNDEsMjQyLDI0Myw1Nyw1OCwwLDU5LDAsMCwyNDQsMjQ1LDAsMCw2MiwwXSxbMCwwLDAsMCwwLDI0NiwyNDYsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwxMzYsMCwyNDcsMCwyNDgsMjQ4LDU3LDU4LDAsNTksMCwwLDAsMTM5LDAsMTM2LDAsMF0sWzAsMjQ5LDE1MSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDI0OSwwLDBdLFswLDEzNiwwLDAsMCwyNDYsMjUwLDAsNTgsMCw1OSwwLDAsMCwxMzksMCwxMzYsMCwwXSxbMCwwLDAsMCwwLDI1MSwyNTEsNTcsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwxNDMsMTQ0LDE0NSwxNDYsNTgsMCw1OSwwLDAsMCwxMzksMCwwLDAsMF0sWzAsMCwwLDAsMCwxNDQsMTQ0LDE0Niw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMCwwLDI1MiwyNTIsMTQ2LDU4LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDI1MywyNTIsMjUyLDE0Niw1OCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMjU0LDI1NSwyNTYsMjU3LDI1OCw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCw1OSwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMTQ3LDAsMCwwLDAsNTksMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwyNTksMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMjYwLDI0MSwyNjEsMjYyLDU3LDU4LDAsNTksMCwwLDI2MywyNDUsMCwwLDYyLDBdLFswLDAsMCwwLDAsMjQ2LDI0NiwwLDU4LDAsNTksMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDEzNywyNjQsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMCwyNjUsMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDAsMjY1LDAsMCwwLDBdLFswLDI0OSwxNTEsMCwwLDEzNywyNjQsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDI0OSwwLDBdLFswLDAsMCwyMjEsMTE2LDIyMiwyMjIsOCw5LDAsMTAsMCwwLDAsMTIwLDAsMCwxNiwwXSxbMCwwLDAsMCwyMjUsNDQsNDQsOCw5LDAsMCwwLDAsMTU4LDIyNSwwLDAsMCwwXSxbMCwwLDAsMTU1LDExNiwxNTYsMjIyLDgsOSwwLDEwLDAsMCwxNTgsMTIwLDAsMCwxNiwwXSxbMCwwLDAsMTU1LDExNiwyMjIsMjIyLDgsOSwwLDEwLDAsMCwwLDEyMCwwLDAsMTYsMF0sWzAsMCwwLDAsNDMsMjY2LDI2Niw4LDE2MSwwLDI0LDAsMCwxMiwyNjcsMCwwLDAsMF0sWzAsNzUsMCwxNzYsNDMsMjY4LDI2OCwyNjksMTYxLDAsMjQsMCwwLDAsMjY3LDAsNzUsMCwwXSxbMCwwLDAsMCwwLDI3MCwwLDAsMjcxLDAsMTYyLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMjcyLDAsMCwwLDAsMCwwLDAsMF0sWzAsMjczLDI3NCwwLDAsNDAsNDEsMCw5LDAsMTAsMCwwLDAsNDIsMCwyNzMsMCwwXSxbMCwwLDAsNDAsMCwxMjMsMTIzLDgsOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwwLDAsMTIxLDI3NSwwLDksMCwxMCwwLDAsMCw0MiwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCw3MiwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMTY2LDAsMCwwLDAsNzIsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwyNzYsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMjc3LDE3MCwyNzgsMjc4LDIyLDIzLDAsMjQsMCwwLDAsMTc0LDAsMCwyNywwXSxbMCwyNzksMCwwLDAsNzYsMjgwLDAsMjMsMCwyNCwwLDAsMCw3OCwwLDI3OSwwLDBdLFswLDAsMCwwLDI4MSw4MCw4MCwyMiwyMywwLDAsMCwwLDE3MywyODEsMCwwLDAsMF0sWzAsMCwwLDE2OSwxNzAsMTcxLDI3OCwyMiwyMywwLDI0LDAsMCwxNzMsMTc0LDAsMCwyNywwXSxbMCwwLDAsMTY5LDE3MCwyNzgsMjc4LDIyLDIzLDAsMjQsMCwwLDAsMTc0LDAsMCwyNywwXSxbMCwyODIsOTAsMCwwLDc2LDI4MCwwLDIzLDAsMjQsMCwwLDAsNzgsMCwyODIsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDIzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDc1LDAsMCwwLDE3NSwxNzUsMCwyMywwLDI0LDAsMCwwLDc4LDAsNzUsMCwwXSxbMCwwLDAsMCwwLDgwLDgwLDIyLDIzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwyODMsMCwyODQsMjg1LDAsMjMsMCwyNCwwLDAsMjg2LDAsMCwwLDAsMF0sWzAsNzUsMCwxNzYsMCwxNzUsMTc1LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDc1LDAsMF0sWzAsMCwwLDAsMCwwLDAsMjIsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI4NywyODcsODUsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMjg4LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwxODQsMTg1LDE4NiwxODcsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsMCwwLDE4NSwxODUsMTg3LDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDAsMCwyODksMjg5LDE4NywyMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwyOTAsMjg5LDI4OSwxODcsMjMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDI5MSwyOTIsMjkzLDI5NCwyOTUsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDI3NywxNzAsMjc4LDI3OCwyMiwyMywwLDI0LDAsMCwwLDE3NCwwLDAsMjcsMF0sWzAsMCwwLDAsMjgxLDgwLDgwLDIyLDIzLDAsMCwwLDAsMTkyLDI4MSwwLDAsMCwwXSxbMCwwLDAsMTg5LDE3MCwxOTAsMjc4LDIyLDIzLDAsMjQsMCwwLDE5MiwxNzQsMCwwLDI3LDBdLFswLDAsMCwxODksMTcwLDI3OCwyNzgsMjIsMjMsMCwyNCwwLDAsMCwxNzQsMCwwLDI3LDBdLFswLDAsMCw3NiwwLDE3NywxNzcsMjIsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsMCwwLDE3NSwyOTYsMCwyMywwLDI0LDAsMCwwLDc4LDAsMCwwLDBdLFswLDAsMCwyOTcsMTk2LDI5OCwyOTgsMzIsMzMsMCwzNCwwLDAsMCwyMDAsMCwwLDM3LDBdLFswLDI5OSwwLDAsMCw5NywzMDAsMCwzMywwLDM0LDAsMCwwLDk5LDAsMjk5LDAsMF0sWzAsMCwwLDAsMzAxLDEwMSwxMDEsMzIsMzMsMCwwLDAsMCwxOTksMzAxLDAsMCwwLDBdLFswLDAsMCwxOTUsMTk2LDE5NywyOTgsMzIsMzMsMCwzNCwwLDAsMTk5LDIwMCwwLDAsMzcsMF0sWzAsMCwwLDE5NSwxOTYsMjk4LDI5OCwzMiwzMywwLDM0LDAsMCwwLDIwMCwwLDAsMzcsMF0sWzAsMzAyLDExMSwwLDAsOTcsMzAwLDAsMzMsMCwzNCwwLDAsMCw5OSwwLDMwMiwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMzMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsOTYsMCwwLDAsMjAxLDIwMSwwLDMzLDAsMzQsMCwwLDAsOTksMCw5NiwwLDBdLFswLDAsMCwwLDAsMTAxLDEwMSwzMiwzMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMzAzLDAsMzA0LDMwNSwwLDMzLDAsMzQsMCwwLDMwNiwwLDAsMCwwLDBdLFswLDk2LDAsMjAyLDAsMjAxLDIwMSwwLDMzLDAsMzQsMCwwLDAsOTksMCw5NiwwLDBdLFswLDAsMCwwLDAsMCwwLDMyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwzMDcsMzA3LDEwNiwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwzMDgsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDIxMCwyMTEsMjEyLDIxMywzMywwLDM0LDAsMCwwLDk5LDAsMCwwLDBdLFswLDAsMCwwLDAsMjExLDIxMSwyMTMsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsMCwwLDMwOSwzMDksMjEzLDMzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDMxMCwzMDksMzA5LDIxMywzMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMzExLDMxMiwzMTMsMzE0LDMxNSwzMywwLDM0LDAsMCwwLDk5LDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMjk3LDE5NiwyOTgsMjk4LDMyLDMzLDAsMzQsMCwwLDAsMjAwLDAsMCwzNywwXSxbMCwwLDAsMCwzMDEsMTAxLDEwMSwzMiwzMywwLDAsMCwwLDIxOCwzMDEsMCwwLDAsMF0sWzAsMCwwLDIxNSwxOTYsMjE2LDI5OCwzMiwzMywwLDM0LDAsMCwyMTgsMjAwLDAsMCwzNywwXSxbMCwwLDAsMjE1LDE5NiwyOTgsMjk4LDMyLDMzLDAsMzQsMCwwLDAsMjAwLDAsMCwzNywwXSxbMCwwLDAsOTcsMCwyMDMsMjAzLDMyLDMzLDAsMzQsMCwwLDAsOTksMCwwLDAsMF0sWzAsMCwwLDAsMCwyMDEsMzE2LDAsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsMCwxMTYsMjIyLDIyMiw4LDksMCwxMCwwLDAsMCwxMjAsMCwwLDE2LDBdLFswLDAsMCwwLDIyNSw0NCw0NCw4LDksMCwwLDAsMCwwLDIyNSwwLDAsMCwwXSxbMCwwLDAsMzE3LDMxOCwzMTksMzIwLDgsOSwwLDEwLDAsMCwzMjEsMzIyLDAsMCwxNiwwXSxbMCwyMjMsMCwzMjMsMCwxMjMsMTIzLDgsOSwwLDEwLDAsMCwwLDQyLDAsMjIzLDAsMF0sWzAsMjIzLDAsMCwwLDEyMSwzMjQsMCw5LDAsMTAsMCwwLDAsNDIsMCwyMjMsMCwwXSxbMCwwLDAsMzI1LDMxOCwzMjYsMzI3LDgsOSwwLDEwLDAsMCwzMjgsMzIyLDAsMCwxNiwwXSxbMCwwLDAsNjQsMCwxMjEsMTIxLDAsOSwwLDEwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCw5LDAsMCwwLDAsMjMwLDAsMCwwLDAsMF0sWzAsMCwwLDIyNywwLDIyOCwxMjEsMCw5LDAsMTAsMCwwLDIzMCwwLDAsMCwwLDBdLFswLDAsMCwyMjcsMCwxMjEsMTIxLDAsOSwwLDEwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsNDksMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw0NiwwLDBdLFswLDAsMCwwLDAsMzI5LDMyOSwxMzMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMzMwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwyMzYsMjM3LDIzOCwyMzksOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwwLDAsMjM3LDIzNywyMzksOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwwLDAsMzMxLDMzMSwyMzksOSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwzMzIsMzMxLDMzMSwyMzksOSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMzMzLDQwLDEyMSwzMzQsMCw5LDAsMTAsMCwwLDAsNDIsMCwwLDAsMF0sWzAsMCwwLDMzNSwyNDEsMzM2LDMzNiw1Nyw1OCwwLDU5LDAsMCwwLDI0NSwwLDAsNjIsMF0sWzAsMzM3LDAsMCwwLDEzNywzMzgsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDMzNywwLDBdLFswLDAsMCwwLDMzOSwxNDEsMTQxLDU3LDU4LDAsMCwwLDAsMjQ0LDMzOSwwLDAsMCwwXSxbMCwwLDAsMjQwLDI0MSwyNDIsMzM2LDU3LDU4LDAsNTksMCwwLDI0NCwyNDUsMCwwLDYyLDBdLFswLDAsMCwyNDAsMjQxLDMzNiwzMzYsNTcsNTgsMCw1OSwwLDAsMCwyNDUsMCwwLDYyLDBdLFswLDM0MCwxNTEsMCwwLDEzNywzMzgsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDM0MCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsNTgsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMTM2LDAsMCwwLDI0NiwyNDYsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDEzNiwwLDBdLFswLDAsMCwwLDAsMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMzQxLDAsMzQyLDM0MywwLDU4LDAsNTksMCwwLDM0NCwwLDAsMCwwLDBdLFswLDEzNiwwLDI0NywwLDI0NiwyNDYsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDEzNiwwLDBdLFswLDAsMCwwLDAsMCwwLDU3LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwzNDUsMzQ1LDE0NiwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwzNDYsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDI1NSwyNTYsMjU3LDI1OCw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMCwwLDI1NiwyNTYsMjU4LDU4LDAsNTksMCwwLDAsMTM5LDAsMCwwLDBdLFswLDAsMCwwLDAsMzQ3LDM0NywyNTgsNTgsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMzQ4LDM0NywzNDcsMjU4LDU4LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwzNDksMzUwLDM1MSwzNTIsMzUzLDU4LDAsNTksMCwwLDAsMTM5LDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMzM1LDI0MSwzMzYsMzM2LDU3LDU4LDAsNTksMCwwLDAsMjQ1LDAsMCw2MiwwXSxbMCwwLDAsMCwzMzksMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDI2MywzMzksMCwwLDAsMF0sWzAsMCwwLDI2MCwyNDEsMjYxLDMzNiw1Nyw1OCwwLDU5LDAsMCwyNjMsMjQ1LDAsMCw2MiwwXSxbMCwwLDAsMjYwLDI0MSwzMzYsMzM2LDU3LDU4LDAsNTksMCwwLDAsMjQ1LDAsMCw2MiwwXSxbMCwwLDAsMTM3LDAsMjQ4LDI0OCw1Nyw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMCwwLDI0NiwzNTQsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMCwwLDEyNiwxMjYsOCwyMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwzNTUsOTAsMCwwLDEyMSwxMjUsMCw5LDAsMTAsMCwwLDAsNDIsMCwzNTUsMCwwXSxbMCwwLDAsMCwwLDM1NiwzNTYsMjY5LDIzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwzNTcsMzU4LDM1OSwzNjAsMzYxLDE2MSwwLDE2MiwwLDAsMCwzNjIsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMTYyLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwyNzAsMCwwLDAsMCwxNjIsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwzNjMsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMzY0LDExNiwzNjUsMzY2LDgsMTYxLDAsMTYyLDAsMCwzNjcsMTIwLDAsMCwxNiwwXSxbMCwwLDAsMCwwLDM2OCwzNjgsMCwxNjEsMCwxNjIsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsNDAsMCwxMjEsMTIxLDAsOSwwLDEwLDAsMCwwLDQyLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwxNzAsMjc4LDI3OCwyMiwyMywwLDI0LDAsMCwwLDE3NCwwLDAsMjcsMF0sWzAsMCwwLDAsMjgxLDgwLDgwLDIyLDIzLDAsMCwwLDAsMCwyODEsMCwwLDAsMF0sWzAsMCwwLDM2OSwzNzAsMzcxLDM3MiwyMiwyMywwLDI0LDAsMCwzNzMsMzc0LDAsMCwyNywwXSxbMCwyNzksMCwzNzUsMCwxNzcsMTc3LDIyLDIzLDAsMjQsMCwwLDAsNzgsMCwyNzksMCwwXSxbMCwyNzksMCwwLDAsMTc1LDM3NiwwLDIzLDAsMjQsMCwwLDAsNzgsMCwyNzksMCwwXSxbMCwwLDAsMzc3LDM3MCwzNzgsMzc5LDIyLDIzLDAsMjQsMCwwLDM4MCwzNzQsMCwwLDI3LDBdLFswLDAsMCw5MCwwLDE3NSwxNzUsMCwyMywwLDI0LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwyMywwLDAsMCwwLDI4NiwwLDAsMCwwLDBdLFswLDAsMCwyODMsMCwyODQsMTc1LDAsMjMsMCwyNCwwLDAsMjg2LDAsMCwwLDAsMF0sWzAsMCwwLDI4MywwLDE3NSwxNzUsMCwyMywwLDI0LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsODUsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw4MiwwLDBdLFswLDAsMCwwLDAsMzgxLDM4MSwxODcsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMzgyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwyOTIsMjkzLDI5NCwyOTUsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5MywyOTMsMjk1LDIzLDAsMjQsMCwwLDAsNzgsMCwwLDAsMF0sWzAsMCwwLDAsMCwzODMsMzgzLDI5NSwyMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwzODQsMzgzLDM4MywyOTUsMjMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDM4NSw3NiwxNzUsMzg2LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsNzYsMCwxNzUsMTc1LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDAsMCwwXSxbMCwwLDAsMCwxOTYsMjk4LDI5OCwzMiwzMywwLDM0LDAsMCwwLDIwMCwwLDAsMzcsMF0sWzAsMCwwLDAsMzAxLDEwMSwxMDEsMzIsMzMsMCwwLDAsMCwwLDMwMSwwLDAsMCwwXSxbMCwwLDAsMzg3LDM4OCwzODksMzkwLDMyLDMzLDAsMzQsMCwwLDM5MSwzOTIsMCwwLDM3LDBdLFswLDI5OSwwLDM5MywwLDIwMywyMDMsMzIsMzMsMCwzNCwwLDAsMCw5OSwwLDI5OSwwLDBdLFswLDI5OSwwLDAsMCwyMDEsMzk0LDAsMzMsMCwzNCwwLDAsMCw5OSwwLDI5OSwwLDBdLFswLDAsMCwzOTUsMzg4LDM5NiwzOTcsMzIsMzMsMCwzNCwwLDAsMzk4LDM5MiwwLDAsMzcsMF0sWzAsMCwwLDExMSwwLDIwMSwyMDEsMCwzMywwLDM0LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwzMywwLDAsMCwwLDMwNiwwLDAsMCwwLDBdLFswLDAsMCwzMDMsMCwzMDQsMjAxLDAsMzMsMCwzNCwwLDAsMzA2LDAsMCwwLDAsMF0sWzAsMCwwLDMwMywwLDIwMSwyMDEsMCwzMywwLDM0LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMTA2LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMTAzLDAsMF0sWzAsMCwwLDAsMCwzOTksMzk5LDIxMywwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCw0MDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDMxMiwzMTMsMzE0LDMxNSwzMywwLDM0LDAsMCwwLDk5LDAsMCwwLDBdLFswLDAsMCwwLDAsMzEzLDMxMywzMTUsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsMCwwLDQwMSw0MDEsMzE1LDMzLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDQwMiw0MDEsNDAxLDMxNSwzMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsNDAzLDk3LDIwMSw0MDQsMCwzMywwLDM0LDAsMCwwLDk5LDAsMCwwLDBdLFswLDAsMCw5NywwLDIwMSwyMDEsMCwzMywwLDM0LDAsMCwwLDk5LDAsMCwwLDBdLFswLDAsMCw0MDUsMzE4LDQwNiw0MDYsOCw5LDAsMTAsMCwwLDAsMzIyLDAsMCwxNiwwXSxbMCw0MDcsMCwwLDAsNDAsNDA4LDAsOSwwLDEwLDAsMCwwLDQyLDAsNDA3LDAsMF0sWzAsMCwwLDAsNDA5LDQ0LDQ0LDgsOSwwLDAsMCwwLDMyMSw0MDksMCwwLDAsMF0sWzAsMCwwLDMxNywzMTgsMzE5LDQwNiw4LDksMCwxMCwwLDAsMzIxLDMyMiwwLDAsMTYsMF0sWzAsMCwwLDMxNywzMTgsNDA2LDQwNiw4LDksMCwxMCwwLDAsMCwzMjIsMCwwLDE2LDBdLFswLDQxMCw2NCwwLDAsNDAsNDA4LDAsOSwwLDEwLDAsMCwwLDQyLDAsNDEwLDAsMF0sWzAsMjIzLDAsMCwwLDEyMSwxMjEsMCw5LDAsMTAsMCwwLDAsNDIsMCwyMjMsMCwwXSxbMCwyMjMsMCwzMjMsMCwxMjEsMTIxLDAsOSwwLDEwLDAsMCwwLDQyLDAsMjIzLDAsMF0sWzAsMCwwLDQwNSwzMTgsNDA2LDQwNiw4LDksMCwxMCwwLDAsMCwzMjIsMCwwLDE2LDBdLFswLDAsMCwwLDQwOSw0NCw0NCw4LDksMCwwLDAsMCwzMjgsNDA5LDAsMCwwLDBdLFswLDAsMCwzMjUsMzE4LDMyNiw0MDYsOCw5LDAsMTAsMCwwLDMyOCwzMjIsMCwwLDE2LDBdLFswLDAsMCwzMjUsMzE4LDQwNiw0MDYsOCw5LDAsMTAsMCwwLDAsMzIyLDAsMCwxNiwwXSxbMCwwLDAsMCwwLDAsMCwxMzMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxMzAsMCwwXSxbMCwwLDAsMCwwLDQxMSw0MTEsMjM5LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDQxMiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsNDAsMTIxLDMzNCwwLDksMCwxMCwwLDAsMCw0MiwwLDAsMCwwXSxbMCwwLDAsMCw0MTMsMCwwLDAsOSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwyNDEsMzM2LDMzNiw1Nyw1OCwwLDU5LDAsMCwwLDI0NSwwLDAsNjIsMF0sWzAsMCwwLDAsMzM5LDE0MSwxNDEsNTcsNTgsMCwwLDAsMCwwLDMzOSwwLDAsMCwwXSxbMCwwLDAsNDE0LDQxNSw0MTYsNDE3LDU3LDU4LDAsNTksMCwwLDQxOCw0MTksMCwwLDYyLDBdLFswLDMzNywwLDQyMCwwLDI0OCwyNDgsNTcsNTgsMCw1OSwwLDAsMCwxMzksMCwzMzcsMCwwXSxbMCwzMzcsMCwwLDAsMjQ2LDQyMSwwLDU4LDAsNTksMCwwLDAsMTM5LDAsMzM3LDAsMF0sWzAsMCwwLDQyMiw0MTUsNDIzLDQyNCw1Nyw1OCwwLDU5LDAsMCw0MjUsNDE5LDAsMCw2MiwwXSxbMCwwLDAsMTUxLDAsMjQ2LDI0NiwwLDU4LDAsNTksMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDU4LDAsMCwwLDAsMzQ0LDAsMCwwLDAsMF0sWzAsMCwwLDM0MSwwLDM0MiwyNDYsMCw1OCwwLDU5LDAsMCwzNDQsMCwwLDAsMCwwXSxbMCwwLDAsMzQxLDAsMjQ2LDI0NiwwLDU4LDAsNTksMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwxNDYsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxNDMsMCwwXSxbMCwwLDAsMCwwLDQyNiw0MjYsMjU4LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDQyNywwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMzUwLDM1MSwzNTIsMzUzLDU4LDAsNTksMCwwLDAsMTM5LDAsMCwwLDBdLFswLDAsMCwwLDAsMzUxLDM1MSwzNTMsNTgsMCw1OSwwLDAsMCwxMzksMCwwLDAsMF0sWzAsMCwwLDAsMCw0MjgsNDI4LDM1Myw1OCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw0MjksNDI4LDQyOCwzNTMsNTgsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDQzMCwxMzcsMjQ2LDQzMSwwLDU4LDAsNTksMCwwLDAsMTM5LDAsMCwwLDBdLFswLDAsMCwxMzcsMCwyNDYsMjQ2LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwwLDAsMF0sWzAsMCwwLDQzMiwxMTYsNDMzLDQzNCw4LDE2MSwwLDE2MiwwLDAsNDM1LDEyMCwwLDAsMTYsMF0sWzAsMCwwLDAsMCwxODAsMTgwLDI2OSwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDM1OCwzNTksMzYwLDM2MSwxNjEsMCwxNjIsMCwwLDAsMzYyLDAsMCwwLDBdLFswLDAsMCwwLDAsMzU5LDM1OSwzNjEsMTYxLDAsMTYyLDAsMCwwLDM2MiwwLDAsMCwwXSxbMCwwLDAsMCwwLDQzNiw0MzYsMzYxLDE2MSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw0MzcsNDM2LDQzNiwzNjEsMTYxLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCw0MzgsNDM5LDQ0MCw0NDEsNDQyLDE2MSwwLDE2MiwwLDAsMCwzNjIsMCwwLDAsMF0sWzAsNDQzLDI3NCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDQ0MywwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsNDQ0LDExNiw0NDUsNDQ1LDgsMTYxLDAsMTYyLDAsMCwwLDEyMCwwLDAsMTYsMF0sWzAsMCwwLDAsMjI1LDQ0LDQ0LDgsMTYxLDAsMCwwLDAsMzY3LDIyNSwwLDAsMCwwXSxbMCwwLDAsMzY0LDExNiwzNjUsNDQ1LDgsMTYxLDAsMTYyLDAsMCwzNjcsMTIwLDAsMCwxNiwwXSxbMCwwLDAsMzY0LDExNiw0NDUsNDQ1LDgsMTYxLDAsMTYyLDAsMCwwLDEyMCwwLDAsMTYsMF0sWzAsMCwwLDAsMCwwLDAsMCwxNjEsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDQ0NiwzNzAsNDQ3LDQ0NywyMiwyMywwLDI0LDAsMCwwLDM3NCwwLDAsMjcsMF0sWzAsNDQ4LDAsMCwwLDc2LDQ0OSwwLDIzLDAsMjQsMCwwLDAsNzgsMCw0NDgsMCwwXSxbMCwwLDAsMCw0NTAsODAsODAsMjIsMjMsMCwwLDAsMCwzNzMsNDUwLDAsMCwwLDBdLFswLDAsMCwzNjksMzcwLDM3MSw0NDcsMjIsMjMsMCwyNCwwLDAsMzczLDM3NCwwLDAsMjcsMF0sWzAsMCwwLDM2OSwzNzAsNDQ3LDQ0NywyMiwyMywwLDI0LDAsMCwwLDM3NCwwLDAsMjcsMF0sWzAsNDUxLDkwLDAsMCw3Niw0NDksMCwyMywwLDI0LDAsMCwwLDc4LDAsNDUxLDAsMF0sWzAsMjc5LDAsMCwwLDE3NSwxNzUsMCwyMywwLDI0LDAsMCwwLDc4LDAsMjc5LDAsMF0sWzAsMjc5LDAsMzc1LDAsMTc1LDE3NSwwLDIzLDAsMjQsMCwwLDAsNzgsMCwyNzksMCwwXSxbMCwwLDAsNDQ2LDM3MCw0NDcsNDQ3LDIyLDIzLDAsMjQsMCwwLDAsMzc0LDAsMCwyNywwXSxbMCwwLDAsMCw0NTAsODAsODAsMjIsMjMsMCwwLDAsMCwzODAsNDUwLDAsMCwwLDBdLFswLDAsMCwzNzcsMzcwLDM3OCw0NDcsMjIsMjMsMCwyNCwwLDAsMzgwLDM3NCwwLDAsMjcsMF0sWzAsMCwwLDM3NywzNzAsNDQ3LDQ0NywyMiwyMywwLDI0LDAsMCwwLDM3NCwwLDAsMjcsMF0sWzAsMCwwLDAsMCwwLDAsMTg3LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMTg0LDAsMF0sWzAsMCwwLDAsMCw0NTIsNDUyLDI5NSwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCw0NTMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDc2LDE3NSwzODYsMCwyMywwLDI0LDAsMCwwLDc4LDAsMCwwLDBdLFswLDAsMCwwLDQ1NCwwLDAsMCwyMywwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsNDU1LDM4OCw0NTYsNDU2LDMyLDMzLDAsMzQsMCwwLDAsMzkyLDAsMCwzNywwXSxbMCw0NTcsMCwwLDAsOTcsNDU4LDAsMzMsMCwzNCwwLDAsMCw5OSwwLDQ1NywwLDBdLFswLDAsMCwwLDQ1OSwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsMzkxLDQ1OSwwLDAsMCwwXSxbMCwwLDAsMzg3LDM4OCwzODksNDU2LDMyLDMzLDAsMzQsMCwwLDM5MSwzOTIsMCwwLDM3LDBdLFswLDAsMCwzODcsMzg4LDQ1Niw0NTYsMzIsMzMsMCwzNCwwLDAsMCwzOTIsMCwwLDM3LDBdLFswLDQ2MCwxMTEsMCwwLDk3LDQ1OCwwLDMzLDAsMzQsMCwwLDAsOTksMCw0NjAsMCwwXSxbMCwyOTksMCwwLDAsMjAxLDIwMSwwLDMzLDAsMzQsMCwwLDAsOTksMCwyOTksMCwwXSxbMCwyOTksMCwzOTMsMCwyMDEsMjAxLDAsMzMsMCwzNCwwLDAsMCw5OSwwLDI5OSwwLDBdLFswLDAsMCw0NTUsMzg4LDQ1Niw0NTYsMzIsMzMsMCwzNCwwLDAsMCwzOTIsMCwwLDM3LDBdLFswLDAsMCwwLDQ1OSwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsMzk4LDQ1OSwwLDAsMCwwXSxbMCwwLDAsMzk1LDM4OCwzOTYsNDU2LDMyLDMzLDAsMzQsMCwwLDM5OCwzOTIsMCwwLDM3LDBdLFswLDAsMCwzOTUsMzg4LDQ1Niw0NTYsMzIsMzMsMCwzNCwwLDAsMCwzOTIsMCwwLDM3LDBdLFswLDAsMCwwLDAsMCwwLDIxMywwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIxMCwwLDBdLFswLDAsMCwwLDAsNDYxLDQ2MSwzMTUsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsNDYyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw5NywyMDEsNDA0LDAsMzMsMCwzNCwwLDAsMCw5OSwwLDAsMCwwXSxbMCwwLDAsMCw0NjMsMCwwLDAsMzMsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMzE4LDQwNiw0MDYsOCw5LDAsMTAsMCwwLDAsMzIyLDAsMCwxNiwwXSxbMCwwLDAsMCw0MDksNDQsNDQsOCw5LDAsMCwwLDAsMCw0MDksMCwwLDAsMF0sWzAsMCwwLDQ2NCw0NjUsNDY2LDQ2Nyw4LDksMCwxMCwwLDAsNDY4LDQ2OSwwLDAsMTYsMF0sWzAsNDA3LDAsNDcwLDAsMTIzLDEyMyw4LDksMCwxMCwwLDAsMCw0MiwwLDQwNywwLDBdLFswLDQwNywwLDAsMCwxMjEsNDcxLDAsOSwwLDEwLDAsMCwwLDQyLDAsNDA3LDAsMF0sWzAsMCwwLDQ3Miw0NjUsNDczLDQ3NCw4LDksMCwxMCwwLDAsNDc1LDQ2OSwwLDAsMTYsMF0sWzAsMCwwLDAsMCwwLDAsMjM5LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMjM2LDAsMF0sWzAsMCwwLDAsMCwwLDQ3NiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDQ3Nyw0MTUsNDc4LDQ3OCw1Nyw1OCwwLDU5LDAsMCwwLDQxOSwwLDAsNjIsMF0sWzAsNDc5LDAsMCwwLDEzNyw0ODAsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDQ3OSwwLDBdLFswLDAsMCwwLDQ4MSwxNDEsMTQxLDU3LDU4LDAsMCwwLDAsNDE4LDQ4MSwwLDAsMCwwXSxbMCwwLDAsNDE0LDQxNSw0MTYsNDc4LDU3LDU4LDAsNTksMCwwLDQxOCw0MTksMCwwLDYyLDBdLFswLDAsMCw0MTQsNDE1LDQ3OCw0NzgsNTcsNTgsMCw1OSwwLDAsMCw0MTksMCwwLDYyLDBdLFswLDQ4MiwxNTEsMCwwLDEzNyw0ODAsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDQ4MiwwLDBdLFswLDMzNywwLDAsMCwyNDYsMjQ2LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwzMzcsMCwwXSxbMCwzMzcsMCw0MjAsMCwyNDYsMjQ2LDAsNTgsMCw1OSwwLDAsMCwxMzksMCwzMzcsMCwwXSxbMCwwLDAsNDc3LDQxNSw0NzgsNDc4LDU3LDU4LDAsNTksMCwwLDAsNDE5LDAsMCw2MiwwXSxbMCwwLDAsMCw0ODEsMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDQyNSw0ODEsMCwwLDAsMF0sWzAsMCwwLDQyMiw0MTUsNDIzLDQ3OCw1Nyw1OCwwLDU5LDAsMCw0MjUsNDE5LDAsMCw2MiwwXSxbMCwwLDAsNDIyLDQxNSw0NzgsNDc4LDU3LDU4LDAsNTksMCwwLDAsNDE5LDAsMCw2MiwwXSxbMCwwLDAsMCwwLDAsMCwyNTgsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyNTUsMCwwXSxbMCwwLDAsMCwwLDQ4Myw0ODMsMzUzLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDQ4NCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMTM3LDI0Niw0MzEsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDAsMCwwXSxbMCwwLDAsMCw0ODUsMCwwLDAsNTgsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDQ0NCwxMTYsNDQ1LDQ0NSw4LDE2MSwwLDE2MiwwLDAsMCwxMjAsMCwwLDE2LDBdLFswLDAsMCwwLDIyNSw0NCw0NCw4LDE2MSwwLDAsMCwwLDQzNSwyMjUsMCwwLDAsMF0sWzAsMCwwLDQzMiwxMTYsNDMzLDQ0NSw4LDE2MSwwLDE2MiwwLDAsNDM1LDEyMCwwLDAsMTYsMF0sWzAsMCwwLDQzMiwxMTYsNDQ1LDQ0NSw4LDE2MSwwLDE2MiwwLDAsMCwxMjAsMCwwLDE2LDBdLFswLDAsMCwwLDAsNDg2LDQ4NiwzNjEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsNDg3LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw0MzksNDQwLDQ0MSw0NDIsMTYxLDAsMTYyLDAsMCwwLDM2MiwwLDAsMCwwXSxbMCwwLDAsMCwwLDQ0MCw0NDAsNDQyLDE2MSwwLDE2MiwwLDAsMCwzNjIsMCwwLDAsMF0sWzAsMCwwLDAsMCw0ODgsNDg4LDQ0MiwxNjEsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsNDg5LDQ4OCw0ODgsNDQyLDE2MSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsNDkwLDQ5MSw0OTIsNDkzLDQ5NCwxNjEsMCwxNjIsMCwwLDAsMzYyLDAsMCwwLDBdLFswLDAsMCw0OTUsMCw0OTYsNDk3LDAsMTYxLDAsMTYyLDAsMCw0OTgsMCwwLDAsMCwwXSxbMCwwLDAsMCwxMTYsNDQ1LDQ0NSw4LDE2MSwwLDE2MiwwLDAsMCwxMjAsMCwwLDE2LDBdLFswLDAsMCwwLDIyNSw0NCw0NCw4LDE2MSwwLDAsMCwwLDAsMjI1LDAsMCwwLDBdLFswLDAsMCwwLDM3MCw0NDcsNDQ3LDIyLDIzLDAsMjQsMCwwLDAsMzc0LDAsMCwyNywwXSxbMCwwLDAsMCw0NTAsODAsODAsMjIsMjMsMCwwLDAsMCwwLDQ1MCwwLDAsMCwwXSxbMCwwLDAsNDk5LDUwMCw1MDEsNTAyLDIyLDIzLDAsMjQsMCwwLDUwMyw1MDQsMCwwLDI3LDBdLFswLDQ0OCwwLDUwNSwwLDE3NywxNzcsMjIsMjMsMCwyNCwwLDAsMCw3OCwwLDQ0OCwwLDBdLFswLDQ0OCwwLDAsMCwxNzUsNTA2LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDQ0OCwwLDBdLFswLDAsMCw1MDcsNTAwLDUwOCw1MDksMjIsMjMsMCwyNCwwLDAsNTEwLDUwNCwwLDAsMjcsMF0sWzAsMCwwLDAsMCwwLDAsMjk1LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMjkyLDAsMF0sWzAsMCwwLDAsMCwwLDUxMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMzg4LDQ1Niw0NTYsMzIsMzMsMCwzNCwwLDAsMCwzOTIsMCwwLDM3LDBdLFswLDAsMCwwLDQ1OSwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsMCw0NTksMCwwLDAsMF0sWzAsMCwwLDUxMiw1MTMsNTE0LDUxNSwzMiwzMywwLDM0LDAsMCw1MTYsNTE3LDAsMCwzNywwXSxbMCw0NTcsMCw1MTgsMCwyMDMsMjAzLDMyLDMzLDAsMzQsMCwwLDAsOTksMCw0NTcsMCwwXSxbMCw0NTcsMCwwLDAsMjAxLDUxOSwwLDMzLDAsMzQsMCwwLDAsOTksMCw0NTcsMCwwXSxbMCwwLDAsNTIwLDUxMyw1MjEsNTIyLDMyLDMzLDAsMzQsMCwwLDUyMyw1MTcsMCwwLDM3LDBdLFswLDAsMCwwLDAsMCwwLDMxNSwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDMxMiwwLDBdLFswLDAsMCwwLDAsMCw1MjQsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCw1MjUsNDY1LDUyNiw1MjYsOCw5LDAsMTAsMCwwLDAsNDY5LDAsMCwxNiwwXSxbMCw1MjcsMCwwLDAsNDAsNTI4LDAsOSwwLDEwLDAsMCwwLDQyLDAsNTI3LDAsMF0sWzAsMCwwLDAsNTI5LDQ0LDQ0LDgsOSwwLDAsMCwwLDQ2OCw1MjksMCwwLDAsMF0sWzAsMCwwLDQ2NCw0NjUsNDY2LDUyNiw4LDksMCwxMCwwLDAsNDY4LDQ2OSwwLDAsMTYsMF0sWzAsMCwwLDQ2NCw0NjUsNTI2LDUyNiw4LDksMCwxMCwwLDAsMCw0NjksMCwwLDE2LDBdLFswLDUzMCw2NCwwLDAsNDAsNTI4LDAsOSwwLDEwLDAsMCwwLDQyLDAsNTMwLDAsMF0sWzAsNDA3LDAsMCwwLDEyMSwxMjEsMCw5LDAsMTAsMCwwLDAsNDIsMCw0MDcsMCwwXSxbMCw0MDcsMCw0NzAsMCwxMjEsMTIxLDAsOSwwLDEwLDAsMCwwLDQyLDAsNDA3LDAsMF0sWzAsMCwwLDUyNSw0NjUsNTI2LDUyNiw4LDksMCwxMCwwLDAsMCw0NjksMCwwLDE2LDBdLFswLDAsMCwwLDUyOSw0NCw0NCw4LDksMCwwLDAsMCw0NzUsNTI5LDAsMCwwLDBdLFswLDAsMCw0NzIsNDY1LDQ3Myw1MjYsOCw5LDAsMTAsMCwwLDQ3NSw0NjksMCwwLDE2LDBdLFswLDAsMCw0NzIsNDY1LDUyNiw1MjYsOCw5LDAsMTAsMCwwLDAsNDY5LDAsMCwxNiwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw0MCwwLDBdLFswLDAsMCwwLDQxNSw0NzgsNDc4LDU3LDU4LDAsNTksMCwwLDAsNDE5LDAsMCw2MiwwXSxbMCwwLDAsMCw0ODEsMTQxLDE0MSw1Nyw1OCwwLDAsMCwwLDAsNDgxLDAsMCwwLDBdLFswLDAsMCw1MzEsNTMyLDUzMyw1MzQsNTcsNTgsMCw1OSwwLDAsNTM1LDUzNiwwLDAsNjIsMF0sWzAsNDc5LDAsNTM3LDAsMjQ4LDI0OCw1Nyw1OCwwLDU5LDAsMCwwLDEzOSwwLDQ3OSwwLDBdLFswLDQ3OSwwLDAsMCwyNDYsNTM4LDAsNTgsMCw1OSwwLDAsMCwxMzksMCw0NzksMCwwXSxbMCwwLDAsNTM5LDUzMiw1NDAsNTQxLDU3LDU4LDAsNTksMCwwLDU0Miw1MzYsMCwwLDYyLDBdLFswLDAsMCwwLDAsMCwwLDM1MywwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDM1MCwwLDBdLFswLDAsMCwwLDAsMCw1NDMsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDM2MSwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDM1OCwwLDBdLFswLDAsMCwwLDAsNTQ0LDU0NCw0NDIsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsNTQ1LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw0OTEsNDkyLDQ5Myw0OTQsMTYxLDAsMTYyLDAsMCwwLDM2MiwwLDAsMCwwXSxbMCwwLDAsMCwwLDQ5Miw0OTIsNDk0LDE2MSwwLDE2MiwwLDAsMCwzNjIsMCwwLDAsMF0sWzAsMCwwLDAsMCw1NDYsNTQ2LDQ5NCwxNjEsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsNTQ3LDU0Niw1NDYsNDk0LDE2MSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsNTQ4LDU0OSwzNjgsNTUwLDAsMTYxLDAsMTYyLDAsMCwwLDM2MiwwLDAsMCwwXSxbMCwwLDAsMjc0LDAsMzY4LDM2OCwwLDE2MSwwLDE2MiwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMTYxLDAsMCwwLDAsNDk4LDAsMCwwLDAsMF0sWzAsMCwwLDQ5NSwwLDQ5NiwzNjgsMCwxNjEsMCwxNjIsMCwwLDQ5OCwwLDAsMCwwLDBdLFswLDAsMCw0OTUsMCwzNjgsMzY4LDAsMTYxLDAsMTYyLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDU1MSw1MDAsNTUyLDU1MiwyMiwyMywwLDI0LDAsMCwwLDUwNCwwLDAsMjcsMF0sWzAsNTUzLDAsMCwwLDc2LDU1NCwwLDIzLDAsMjQsMCwwLDAsNzgsMCw1NTMsMCwwXSxbMCwwLDAsMCw1NTUsODAsODAsMjIsMjMsMCwwLDAsMCw1MDMsNTU1LDAsMCwwLDBdLFswLDAsMCw0OTksNTAwLDUwMSw1NTIsMjIsMjMsMCwyNCwwLDAsNTAzLDUwNCwwLDAsMjcsMF0sWzAsMCwwLDQ5OSw1MDAsNTUyLDU1MiwyMiwyMywwLDI0LDAsMCwwLDUwNCwwLDAsMjcsMF0sWzAsNTU2LDkwLDAsMCw3Niw1NTQsMCwyMywwLDI0LDAsMCwwLDc4LDAsNTU2LDAsMF0sWzAsNDQ4LDAsMCwwLDE3NSwxNzUsMCwyMywwLDI0LDAsMCwwLDc4LDAsNDQ4LDAsMF0sWzAsNDQ4LDAsNTA1LDAsMTc1LDE3NSwwLDIzLDAsMjQsMCwwLDAsNzgsMCw0NDgsMCwwXSxbMCwwLDAsNTUxLDUwMCw1NTIsNTUyLDIyLDIzLDAsMjQsMCwwLDAsNTA0LDAsMCwyNywwXSxbMCwwLDAsMCw1NTUsODAsODAsMjIsMjMsMCwwLDAsMCw1MTAsNTU1LDAsMCwwLDBdLFswLDAsMCw1MDcsNTAwLDUwOCw1NTIsMjIsMjMsMCwyNCwwLDAsNTEwLDUwNCwwLDAsMjcsMF0sWzAsMCwwLDUwNyw1MDAsNTUyLDU1MiwyMiwyMywwLDI0LDAsMCwwLDUwNCwwLDAsMjcsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNzYsMCwwXSxbMCwwLDAsNTU3LDUxMyw1NTgsNTU4LDMyLDMzLDAsMzQsMCwwLDAsNTE3LDAsMCwzNywwXSxbMCw1NTksMCwwLDAsOTcsNTYwLDAsMzMsMCwzNCwwLDAsMCw5OSwwLDU1OSwwLDBdLFswLDAsMCwwLDU2MSwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsNTE2LDU2MSwwLDAsMCwwXSxbMCwwLDAsNTEyLDUxMyw1MTQsNTU4LDMyLDMzLDAsMzQsMCwwLDUxNiw1MTcsMCwwLDM3LDBdLFswLDAsMCw1MTIsNTEzLDU1OCw1NTgsMzIsMzMsMCwzNCwwLDAsMCw1MTcsMCwwLDM3LDBdLFswLDU2MiwxMTEsMCwwLDk3LDU2MCwwLDMzLDAsMzQsMCwwLDAsOTksMCw1NjIsMCwwXSxbMCw0NTcsMCwwLDAsMjAxLDIwMSwwLDMzLDAsMzQsMCwwLDAsOTksMCw0NTcsMCwwXSxbMCw0NTcsMCw1MTgsMCwyMDEsMjAxLDAsMzMsMCwzNCwwLDAsMCw5OSwwLDQ1NywwLDBdLFswLDAsMCw1NTcsNTEzLDU1OCw1NTgsMzIsMzMsMCwzNCwwLDAsMCw1MTcsMCwwLDM3LDBdLFswLDAsMCwwLDU2MSwxMDEsMTAxLDMyLDMzLDAsMCwwLDAsNTIzLDU2MSwwLDAsMCwwXSxbMCwwLDAsNTIwLDUxMyw1MjEsNTU4LDMyLDMzLDAsMzQsMCwwLDUyMyw1MTcsMCwwLDM3LDBdLFswLDAsMCw1MjAsNTEzLDU1OCw1NTgsMzIsMzMsMCwzNCwwLDAsMCw1MTcsMCwwLDM3LDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDk3LDAsMF0sWzAsMCwwLDAsNDY1LDUyNiw1MjYsOCw5LDAsMTAsMCwwLDAsNDY5LDAsMCwxNiwwXSxbMCwwLDAsMCw1MjksNDQsNDQsOCw5LDAsMCwwLDAsMCw1MjksMCwwLDAsMF0sWzAsMCwwLDU2Myw2Niw1NjQsNTY1LDgsOSwwLDEwLDAsMCw1NjYsNjgsMCwwLDE2LDBdLFswLDUyNywwLDU2NywwLDEyMywxMjMsOCw5LDAsMTAsMCwwLDAsNDIsMCw1MjcsMCwwXSxbMCw1MjcsMCwwLDAsMTIxLDU2OCwwLDksMCwxMCwwLDAsMCw0MiwwLDUyNywwLDBdLFswLDAsMCw1NjksNjYsNTcwLDU3MSw4LDksMCwxMCwwLDAsNTcyLDY4LDAsMCwxNiwwXSxbMCwwLDAsNTczLDUzMiw1NzQsNTc0LDU3LDU4LDAsNTksMCwwLDAsNTM2LDAsMCw2MiwwXSxbMCw1NzUsMCwwLDAsMTM3LDU3NiwwLDU4LDAsNTksMCwwLDAsMTM5LDAsNTc1LDAsMF0sWzAsMCwwLDAsNTc3LDE0MSwxNDEsNTcsNTgsMCwwLDAsMCw1MzUsNTc3LDAsMCwwLDBdLFswLDAsMCw1MzEsNTMyLDUzMyw1NzQsNTcsNTgsMCw1OSwwLDAsNTM1LDUzNiwwLDAsNjIsMF0sWzAsMCwwLDUzMSw1MzIsNTc0LDU3NCw1Nyw1OCwwLDU5LDAsMCwwLDUzNiwwLDAsNjIsMF0sWzAsNTc4LDE1MSwwLDAsMTM3LDU3NiwwLDU4LDAsNTksMCwwLDAsMTM5LDAsNTc4LDAsMF0sWzAsNDc5LDAsMCwwLDI0NiwyNDYsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDQ3OSwwLDBdLFswLDQ3OSwwLDUzNywwLDI0NiwyNDYsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDQ3OSwwLDBdLFswLDAsMCw1NzMsNTMyLDU3NCw1NzQsNTcsNTgsMCw1OSwwLDAsMCw1MzYsMCwwLDYyLDBdLFswLDAsMCwwLDU3NywxNDEsMTQxLDU3LDU4LDAsMCwwLDAsNTQyLDU3NywwLDAsMCwwXSxbMCwwLDAsNTM5LDUzMiw1NDAsNTc0LDU3LDU4LDAsNTksMCwwLDU0Miw1MzYsMCwwLDYyLDBdLFswLDAsMCw1MzksNTMyLDU3NCw1NzQsNTcsNTgsMCw1OSwwLDAsMCw1MzYsMCwwLDYyLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDEzNywwLDBdLFswLDAsMCwwLDAsMCwwLDQ0MiwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDQzOSwwLDBdLFswLDAsMCwwLDAsNTc5LDU3OSw0OTQsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsNTgwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw1NDksMzY4LDU1MCwwLDE2MSwwLDE2MiwwLDAsMCwzNjIsMCwwLDAsMF0sWzAsMCwwLDAsMCwzNjgsMzY4LDAsMTYxLDAsMTYyLDAsMCwwLDM2MiwwLDAsMCwwXSxbMCwwLDAsMCw1ODEsMCwwLDAsMTYxLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDUwMCw1NTIsNTUyLDIyLDIzLDAsMjQsMCwwLDAsNTA0LDAsMCwyNywwXSxbMCwwLDAsMCw1NTUsODAsODAsMjIsMjMsMCwwLDAsMCwwLDU1NSwwLDAsMCwwXSxbMCwwLDAsNTgyLDkxLDU4Myw1ODQsMjIsMjMsMCwyNCwwLDAsNTg1LDkzLDAsMCwyNywwXSxbMCw1NTMsMCw1ODYsMCwxNzcsMTc3LDIyLDIzLDAsMjQsMCwwLDAsNzgsMCw1NTMsMCwwXSxbMCw1NTMsMCwwLDAsMTc1LDU4NywwLDIzLDAsMjQsMCwwLDAsNzgsMCw1NTMsMCwwXSxbMCwwLDAsNTg4LDkxLDU4OSw1OTAsMjIsMjMsMCwyNCwwLDAsNTkxLDkzLDAsMCwyNywwXSxbMCwwLDAsMCw1MTMsNTU4LDU1OCwzMiwzMywwLDM0LDAsMCwwLDUxNywwLDAsMzcsMF0sWzAsMCwwLDAsNTYxLDEwMSwxMDEsMzIsMzMsMCwwLDAsMCwwLDU2MSwwLDAsMCwwXSxbMCwwLDAsNTkyLDExMiw1OTMsNTk0LDMyLDMzLDAsMzQsMCwwLDU5NSwxMTQsMCwwLDM3LDBdLFswLDU1OSwwLDU5NiwwLDIwMywyMDMsMzIsMzMsMCwzNCwwLDAsMCw5OSwwLDU1OSwwLDBdLFswLDU1OSwwLDAsMCwyMDEsNTk3LDAsMzMsMCwzNCwwLDAsMCw5OSwwLDU1OSwwLDBdLFswLDAsMCw1OTgsMTEyLDU5OSw2MDAsMzIsMzMsMCwzNCwwLDAsNjAxLDExNCwwLDAsMzcsMF0sWzAsMCwwLDYwMiw2Niw2Nyw2Nyw4LDksMCwxMCwwLDAsMCw2OCwwLDAsMTYsMF0sWzAsMCwwLDAsMTY1LDQ0LDQ0LDgsOSwwLDAsMCwwLDU2NiwxNjUsMCwwLDAsMF0sWzAsMCwwLDU2Myw2Niw1NjQsNjcsOCw5LDAsMTAsMCwwLDU2Niw2OCwwLDAsMTYsMF0sWzAsMCwwLDU2Myw2Niw2Nyw2Nyw4LDksMCwxMCwwLDAsMCw2OCwwLDAsMTYsMF0sWzAsNTI3LDAsMCwwLDEyMSwxMjEsMCw5LDAsMTAsMCwwLDAsNDIsMCw1MjcsMCwwXSxbMCw1MjcsMCw1NjcsMCwxMjEsMTIxLDAsOSwwLDEwLDAsMCwwLDQyLDAsNTI3LDAsMF0sWzAsMCwwLDYwMiw2Niw2Nyw2Nyw4LDksMCwxMCwwLDAsMCw2OCwwLDAsMTYsMF0sWzAsMCwwLDAsMTY1LDQ0LDQ0LDgsOSwwLDAsMCwwLDU3MiwxNjUsMCwwLDAsMF0sWzAsMCwwLDU2OSw2Niw1NzAsNjcsOCw5LDAsMTAsMCwwLDU3Miw2OCwwLDAsMTYsMF0sWzAsMCwwLDU2OSw2Niw2Nyw2Nyw4LDksMCwxMCwwLDAsMCw2OCwwLDAsMTYsMF0sWzAsMCwwLDAsNTMyLDU3NCw1NzQsNTcsNTgsMCw1OSwwLDAsMCw1MzYsMCwwLDYyLDBdLFswLDAsMCwwLDU3NywxNDEsMTQxLDU3LDU4LDAsMCwwLDAsMCw1NzcsMCwwLDAsMF0sWzAsMCwwLDYwMywxNTIsNjA0LDYwNSw1Nyw1OCwwLDU5LDAsMCw2MDYsMTU0LDAsMCw2MiwwXSxbMCw1NzUsMCw2MDcsMCwyNDgsMjQ4LDU3LDU4LDAsNTksMCwwLDAsMTM5LDAsNTc1LDAsMF0sWzAsNTc1LDAsMCwwLDI0Niw2MDgsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDU3NSwwLDBdLFswLDAsMCw2MDksMTUyLDYxMCw2MTEsNTcsNTgsMCw1OSwwLDAsNjEyLDE1NCwwLDAsNjIsMF0sWzAsMCwwLDAsMCwwLDAsNDk0LDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNDkxLDAsMF0sWzAsMCwwLDAsMCwwLDYxMywwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDYxNCw5MSw5Miw5MiwyMiwyMywwLDI0LDAsMCwwLDkzLDAsMCwyNywwXSxbMCwwLDAsMCwxOTQsODAsODAsMjIsMjMsMCwwLDAsMCw1ODUsMTk0LDAsMCwwLDBdLFswLDAsMCw1ODIsOTEsNTgzLDkyLDIyLDIzLDAsMjQsMCwwLDU4NSw5MywwLDAsMjcsMF0sWzAsMCwwLDU4Miw5MSw5Miw5MiwyMiwyMywwLDI0LDAsMCwwLDkzLDAsMCwyNywwXSxbMCw1NTMsMCwwLDAsMTc1LDE3NSwwLDIzLDAsMjQsMCwwLDAsNzgsMCw1NTMsMCwwXSxbMCw1NTMsMCw1ODYsMCwxNzUsMTc1LDAsMjMsMCwyNCwwLDAsMCw3OCwwLDU1MywwLDBdLFswLDAsMCw2MTQsOTEsOTIsOTIsMjIsMjMsMCwyNCwwLDAsMCw5MywwLDAsMjcsMF0sWzAsMCwwLDAsMTk0LDgwLDgwLDIyLDIzLDAsMCwwLDAsNTkxLDE5NCwwLDAsMCwwXSxbMCwwLDAsNTg4LDkxLDU4OSw5MiwyMiwyMywwLDI0LDAsMCw1OTEsOTMsMCwwLDI3LDBdLFswLDAsMCw1ODgsOTEsOTIsOTIsMjIsMjMsMCwyNCwwLDAsMCw5MywwLDAsMjcsMF0sWzAsMCwwLDYxNSwxMTIsMTEzLDExMywzMiwzMywwLDM0LDAsMCwwLDExNCwwLDAsMzcsMF0sWzAsMCwwLDAsMjIwLDEwMSwxMDEsMzIsMzMsMCwwLDAsMCw1OTUsMjIwLDAsMCwwLDBdLFswLDAsMCw1OTIsMTEyLDU5MywxMTMsMzIsMzMsMCwzNCwwLDAsNTk1LDExNCwwLDAsMzcsMF0sWzAsMCwwLDU5MiwxMTIsMTEzLDExMywzMiwzMywwLDM0LDAsMCwwLDExNCwwLDAsMzcsMF0sWzAsNTU5LDAsMCwwLDIwMSwyMDEsMCwzMywwLDM0LDAsMCwwLDk5LDAsNTU5LDAsMF0sWzAsNTU5LDAsNTk2LDAsMjAxLDIwMSwwLDMzLDAsMzQsMCwwLDAsOTksMCw1NTksMCwwXSxbMCwwLDAsNjE1LDExMiwxMTMsMTEzLDMyLDMzLDAsMzQsMCwwLDAsMTE0LDAsMCwzNywwXSxbMCwwLDAsMCwyMjAsMTAxLDEwMSwzMiwzMywwLDAsMCwwLDYwMSwyMjAsMCwwLDAsMF0sWzAsMCwwLDU5OCwxMTIsNTk5LDExMywzMiwzMywwLDM0LDAsMCw2MDEsMTE0LDAsMCwzNywwXSxbMCwwLDAsNTk4LDExMiwxMTMsMTEzLDMyLDMzLDAsMzQsMCwwLDAsMTE0LDAsMCwzNywwXSxbMCwwLDAsMCw2Niw2Nyw2Nyw4LDksMCwxMCwwLDAsMCw2OCwwLDAsMTYsMF0sWzAsMCwwLDYxNiwxNTIsMTUzLDE1Myw1Nyw1OCwwLDU5LDAsMCwwLDE1NCwwLDAsNjIsMF0sWzAsMCwwLDAsMjY1LDE0MSwxNDEsNTcsNTgsMCwwLDAsMCw2MDYsMjY1LDAsMCwwLDBdLFswLDAsMCw2MDMsMTUyLDYwNCwxNTMsNTcsNTgsMCw1OSwwLDAsNjA2LDE1NCwwLDAsNjIsMF0sWzAsMCwwLDYwMywxNTIsMTUzLDE1Myw1Nyw1OCwwLDU5LDAsMCwwLDE1NCwwLDAsNjIsMF0sWzAsNTc1LDAsMCwwLDI0NiwyNDYsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDU3NSwwLDBdLFswLDU3NSwwLDYwNywwLDI0NiwyNDYsMCw1OCwwLDU5LDAsMCwwLDEzOSwwLDU3NSwwLDBdLFswLDAsMCw2MTYsMTUyLDE1MywxNTMsNTcsNTgsMCw1OSwwLDAsMCwxNTQsMCwwLDYyLDBdLFswLDAsMCwwLDI2NSwxNDEsMTQxLDU3LDU4LDAsMCwwLDAsNjEyLDI2NSwwLDAsMCwwXSxbMCwwLDAsNjA5LDE1Miw2MTAsMTUzLDU3LDU4LDAsNTksMCwwLDYxMiwxNTQsMCwwLDYyLDBdLFswLDAsMCw2MDksMTUyLDE1MywxNTMsNTcsNTgsMCw1OSwwLDAsMCwxNTQsMCwwLDYyLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDU0OSwwLDBdLFswLDAsMCwwLDkxLDkyLDkyLDIyLDIzLDAsMjQsMCwwLDAsOTMsMCwwLDI3LDBdLFswLDAsMCwwLDExMiwxMTMsMTEzLDMyLDMzLDAsMzQsMCwwLDAsMTE0LDAsMCwzNywwXSxbMCwwLDAsMCwxNTIsMTUzLDE1Myw1Nyw1OCwwLDU5LDAsMCwwLDE1NCwwLDAsNjIsMF1dLFwiYWNjZXB0aW5nXCI6W2ZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLGZhbHNlLGZhbHNlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZSx0cnVlLHRydWVdLFwidGFnc1wiOltbXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJzeW1ib2xfY2x1c3RlclwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXSxbXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtdLFtdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wic3ltYm9sX2NsdXN0ZXJcIl0sW10sW1wic3ltYm9sX2NsdXN0ZXJcIl0sW1wic3ltYm9sX2NsdXN0ZXJcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW10sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW10sW1widm93ZWxfc3lsbGFibGVcIl0sW10sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW10sW10sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW10sW1widm93ZWxfc3lsbGFibGVcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW10sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtdLFtdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIixcImJyb2tlbl9jbHVzdGVyXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wic3ltYm9sX2NsdXN0ZXJcIl0sW1wic3ltYm9sX2NsdXN0ZXJcIl0sW1wic3ltYm9sX2NsdXN0ZXJcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW10sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXSxbXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXSxbXSxbXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXSxbXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXSxbXSxbXSxbXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXSxbXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtdLFtdLFtdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW10sW10sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW10sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCIsXCJicm9rZW5fY2x1c3RlclwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIixcImJyb2tlbl9jbHVzdGVyXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCIsXCJicm9rZW5fY2x1c3RlclwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIixcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcInN5bWJvbF9jbHVzdGVyXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW10sW10sW10sW10sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtdLFtdLFtdLFtdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtdLFtdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtdLFtdLFtdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW10sW10sW10sW10sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXSxbXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wiY29uc29uYW50X3N5bGxhYmxlXCIsXCJicm9rZW5fY2x1c3RlclwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIixcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wiY29uc29uYW50X3N5bGxhYmxlXCIsXCJicm9rZW5fY2x1c3RlclwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIixcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCIsXCJicm9rZW5fY2x1c3RlclwiXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW10sW10sW10sW10sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtdLFtdLFtdLFtdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtdLFtdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW10sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW10sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXSxbXSxbXSxbXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW10sW1wiY29uc29uYW50X3N5bGxhYmxlXCIsXCJicm9rZW5fY2x1c3RlclwiXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIixcImJyb2tlbl9jbHVzdGVyXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW10sW10sW1wiY29uc29uYW50X3N5bGxhYmxlXCIsXCJicm9rZW5fY2x1c3RlclwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIixcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCIsXCJicm9rZW5fY2x1c3RlclwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIixcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW10sW10sW10sW1widm93ZWxfc3lsbGFibGVcIl0sW10sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW10sW10sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXSxbXSxbXSxbXSxbXSxbXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIixcImJyb2tlbl9jbHVzdGVyXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW10sW10sW1wiY29uc29uYW50X3N5bGxhYmxlXCIsXCJicm9rZW5fY2x1c3RlclwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIixcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCIsXCJicm9rZW5fY2x1c3RlclwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW10sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW10sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW10sW1widm93ZWxfc3lsbGFibGVcIl0sW1widm93ZWxfc3lsbGFibGVcIl0sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtdLFtdLFtdLFtdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiLFwiYnJva2VuX2NsdXN0ZXJcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCIsXCJicm9rZW5fY2x1c3RlclwiXSxbXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW10sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcInZvd2VsX3N5bGxhYmxlXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW10sW10sW10sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJjb25zb25hbnRfc3lsbGFibGVcIl0sW10sW1wiY29uc29uYW50X3N5bGxhYmxlXCJdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW10sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtcInN0YW5kYWxvbmVfY2x1c3RlclwiXSxbXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl0sW1wic3RhbmRhbG9uZV9jbHVzdGVyXCJdLFtdLFtcImNvbnNvbmFudF9zeWxsYWJsZVwiXSxbXCJ2b3dlbF9zeWxsYWJsZVwiXSxbXCJzdGFuZGFsb25lX2NsdXN0ZXJcIl1dfScpO1xuXG5cbnZhciAkYWEzMzNhOTYwNzQ3MTI5NiRleHBvcnRzID0ge307XG4kYWEzMzNhOTYwNzQ3MTI5NiRleHBvcnRzID0gSlNPTi5wYXJzZSgne1wiY2F0ZWdvcmllc1wiOltcIk9cIixcIklORFwiLFwiU1wiLFwiR0JcIixcIkJcIixcIkZNXCIsXCJDR0pcIixcIlZNQWJ2XCIsXCJWTVBzdFwiLFwiVkFidlwiLFwiVlBzdFwiLFwiQ01CbHdcIixcIlZQcmVcIixcIlZCbHdcIixcIkhcIixcIlZNQmx3XCIsXCJDTUFidlwiLFwiTUJsd1wiLFwiQ1NcIixcIlJcIixcIlNVQlwiLFwiTVBzdFwiLFwiTVByZVwiLFwiRkFidlwiLFwiRlBzdFwiLFwiRkJsd1wiLFwiU01BYnZcIixcIlNNQmx3XCIsXCJWTVByZVwiLFwiWldOSlwiLFwiWldKXCIsXCJXSlwiLFwiVlNcIixcIk5cIixcIkhOXCIsXCJNQWJ2XCJdLFwiZGVjb21wb3NpdGlvbnNcIjp7XCIyNTA3XCI6WzI1MDMsMjQ5NF0sXCIyNTA4XCI6WzI1MDMsMjUxOV0sXCIyODg4XCI6WzI4ODcsMjkwMl0sXCIyODkxXCI6WzI4ODcsMjg3OF0sXCIyODkyXCI6WzI4ODcsMjkwM10sXCIzMDE4XCI6WzMwMTQsMzAwNl0sXCIzMDE5XCI6WzMwMTUsMzAwNl0sXCIzMDIwXCI6WzMwMTQsMzAzMV0sXCIzMTQ0XCI6WzMxNDIsMzE1OF0sXCIzMjY0XCI6WzMyNjMsMzI4NV0sXCIzMjcxXCI6WzMyNzAsMzI4NV0sXCIzMjcyXCI6WzMyNzAsMzI4Nl0sXCIzMjc0XCI6WzMyNzAsMzI2Nl0sXCIzMjc1XCI6WzMyNzAsMzI2NiwzMjg1XSxcIjM0MDJcIjpbMzM5OCwzMzkwXSxcIjM0MDNcIjpbMzM5OSwzMzkwXSxcIjM0MDRcIjpbMzM5OCwzNDE1XSxcIjM1NDZcIjpbMzU0NSwzNTMwXSxcIjM1NDhcIjpbMzU0NSwzNTM1XSxcIjM1NDlcIjpbMzU0NSwzNTM1LDM1MzBdLFwiMzU1MFwiOlszNTQ1LDM1NTFdLFwiMzYzNVwiOlszNjYxLDM2MzRdLFwiMzc2M1wiOlszNzg5LDM3NjJdLFwiMzk1NVwiOlszOTUzLDM5NTRdLFwiMzk1N1wiOlszOTUzLDM5NTZdLFwiMzk1OFwiOls0MDE4LDM5NjhdLFwiMzk1OVwiOls0MDE4LDM5NTMsMzk2OF0sXCIzOTYwXCI6WzQwMTksMzk2OF0sXCIzOTYxXCI6WzQwMTksMzk1MywzOTY4XSxcIjM5NjlcIjpbMzk1MywzOTY4XSxcIjY5NzFcIjpbNjk3MCw2OTY1XSxcIjY5NzNcIjpbNjk3Miw2OTY1XSxcIjY5NzZcIjpbNjk3NCw2OTY1XSxcIjY5NzdcIjpbNjk3NSw2OTY1XSxcIjY5NzlcIjpbNjk3OCw2OTY1XSxcIjY5OTM0XCI6WzY5OTM3LDY5OTI3XSxcIjY5OTM1XCI6WzY5OTM4LDY5OTI3XSxcIjcwNDc1XCI6WzcwNDcxLDcwNDYyXSxcIjcwNDc2XCI6WzcwNDcxLDcwNDg3XSxcIjcwODQzXCI6WzcwODQxLDcwODQyXSxcIjcwODQ0XCI6WzcwODQxLDcwODMyXSxcIjcwODQ2XCI6WzcwODQxLDcwODQ1XSxcIjcxMDk4XCI6WzcxMDk2LDcxMDg3XSxcIjcxMDk5XCI6WzcxMDk3LDcxMDg3XX0sXCJzdGF0ZVRhYmxlXCI6W1swLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzIsMiwzLDQsNCw1LDAsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwwLDE3LDE4LDExLDE5LDIwLDIxLDIyLDAsMCwyMywwLDAsMiwwLDI0LDAsMjVdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMjYsMCwwLDBdLFswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMjcsMjgsMCwwLDAsMCwyNywwLDAsMF0sWzAsMCwwLDAsMCwyOSwwLDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDAsMCw0MSwzNSw0Miw0Myw0NCw0NSwwLDAsNDYsMCwwLDAsMzksMCwwLDQ3XSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsNSwwLDYsNywwLDAsMCwwLDAsMCwxNCwwLDAsMCwwLDAsMCwwLDIwLDIxLDIyLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsNSwwLDAsNywwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMjAsMjEsMjIsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw1LDAsNiw3LDgsOSwwLDAsMTIsMCwxNCwwLDAsMCwwLDAsMCwwLDIwLDIxLDIyLDAsMCwyMywwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDUsMCw2LDcsMCw5LDAsMCwwLDAsMTQsMCwwLDAsMCwwLDAsMCwyMCwyMSwyMiwwLDAsMjMsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw1LDAsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwwLDE2LDAsMCwxOCwxMSwxOSwyMCwyMSwyMiwwLDAsMjMsMCwwLDAsMCwwLDAsMjVdLFswLDAsMCwwLDAsNSwwLDYsNyw4LDksMCwxMSwxMiwwLDE0LDAsMCwwLDAsMCwwLDAsMjAsMjEsMjIsMCwwLDIzLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsNSwwLDYsNywwLDksMCwwLDEyLDAsMTQsMCwwLDAsMCwwLDAsMCwyMCwyMSwyMiwwLDAsMjMsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMTgsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw1LDAsMCw3LDAsMCwwLDAsMCwwLDE0LDAsMCwwLDAsMCwwLDAsMjAsMjEsMjIsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCw1LDAsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwwLDAsMTgsMTEsMTksMjAsMjEsMjIsMCwwLDIzLDAsMCwwLDAsMCwwLDI1XSxbMCwwLDAsMCwwLDUsMCw2LDcsOCw5LDAsMTEsMTIsMCwxNCwwLDAsMCwwLDAsMTEsMCwyMCwyMSwyMiwwLDAsMjMsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDQsNCw1LDAsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwwLDAsMTgsMTEsMTksMjAsMjEsMjIsMCwwLDIzLDAsMCwwLDAsMCwwLDI1XSxbMCwwLDAsMCwwLDUsMCw2LDcsOCw5LDQ4LDExLDEyLDEzLDE0LDQ4LDE2LDAsMCwxOCwxMSwxOSwyMCwyMSwyMiwwLDAsMjMsMCwwLDAsNDksMCwwLDI1XSxbMCwwLDAsMCwwLDUsMCw2LDcsOCw5LDAsMTEsMTIsMCwxNCwwLDE2LDAsMCwwLDExLDAsMjAsMjEsMjIsMCwwLDIzLDAsMCwwLDAsMCwwLDI1XSxbMCwwLDAsMCwwLDUsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIwLDIxLDIyLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsNSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsNSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyMSwyMiwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDUsMCw2LDcsMCwwLDAsMCwwLDAsMTQsMCwwLDAsMCwwLDAsMCwyMCwyMSwyMiwwLDAsMjMsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw1MCwwLDUxLDBdLFswLDAsMCwwLDAsNSwwLDYsNyw4LDksMCwxMSwxMiwwLDE0LDAsMTYsMCwwLDAsMTEsMCwyMCwyMSwyMiwwLDAsMjMsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDI3LDI4LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDI4LDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMCwwLDAsMCwwLDAsMzgsMCwwLDAsMCwwLDAsMCw0Myw0NCw0NSwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMCwzMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNDMsNDQsNDUsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwyOSwwLDMwLDMxLDMyLDMzLDAsMCwzNiwwLDM4LDAsMCwwLDAsMCwwLDAsNDMsNDQsNDUsMCwwLDQ2LDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMjksMCwzMCwzMSwwLDMzLDAsMCwwLDAsMzgsMCwwLDAsMCwwLDAsMCw0Myw0NCw0NSwwLDAsNDYsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwyOSwwLDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDAsNDAsMCwwLDQxLDM1LDQyLDQzLDQ0LDQ1LDAsMCw0NiwwLDAsMCwwLDAsMCw0N10sWzAsMCwwLDAsMCwyOSwwLDMwLDMxLDMyLDMzLDAsMzUsMzYsMCwzOCwwLDAsMCwwLDAsMCwwLDQzLDQ0LDQ1LDAsMCw0NiwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMCwzMywwLDAsMzYsMCwzOCwwLDAsMCwwLDAsMCwwLDQzLDQ0LDQ1LDAsMCw0NiwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCw0MSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMCwzMSwwLDAsMCwwLDAsMCwzOCwwLDAsMCwwLDAsMCwwLDQzLDQ0LDQ1LDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMjksMCwzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCwwLDAsNDEsMzUsNDIsNDMsNDQsNDUsMCwwLDQ2LDAsMCwwLDAsMCwwLDQ3XSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMzIsMzMsMCwzNSwzNiwwLDM4LDAsMCwwLDAsMCwzNSwwLDQzLDQ0LDQ1LDAsMCw0NiwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMzIsMzMsNTIsMzUsMzYsMzcsMzgsNTIsNDAsMCwwLDQxLDM1LDQyLDQzLDQ0LDQ1LDAsMCw0NiwwLDAsMCw1MywwLDAsNDddLFswLDAsMCwwLDAsMjksMCwzMCwzMSwzMiwzMywwLDM1LDM2LDAsMzgsMCw0MCwwLDAsMCwzNSwwLDQzLDQ0LDQ1LDAsMCw0NiwwLDAsMCwwLDAsMCw0N10sWzAsMCwwLDAsMCwyOSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNDMsNDQsNDUsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwyOSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw0NCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMjksMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNDQsNDUsMCwwLDAsMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwyOSwwLDMwLDMxLDAsMCwwLDAsMCwwLDM4LDAsMCwwLDAsMCwwLDAsNDMsNDQsNDUsMCwwLDQ2LDAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMjksMCwzMCwzMSwzMiwzMywwLDM1LDM2LDAsMzgsMCw0MCwwLDAsMCwzNSwwLDQzLDQ0LDQ1LDAsMCw0NiwwLDAsMCwwLDAsMCwwXSxbMCwwLDAsMCwwLDUsMCw2LDcsOCw5LDQ4LDExLDEyLDEzLDE0LDAsMTYsMCwwLDE4LDExLDE5LDIwLDIxLDIyLDAsMCwyMywwLDAsMCwwLDAsMCwyNV0sWzAsMCwwLDAsMCw1LDAsNiw3LDgsOSw0OCwxMSwxMiwxMywxNCw0OCwxNiwwLDAsMTgsMTEsMTksMjAsMjEsMjIsMCwwLDIzLDAsMCwwLDAsMCwwLDI1XSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw1MSwwXSxbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNTQsMCwwXSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMzIsMzMsNTIsMzUsMzYsMzcsMzgsMCw0MCwwLDAsNDEsMzUsNDIsNDMsNDQsNDUsMCwwLDQ2LDAsMCwwLDAsMCwwLDQ3XSxbMCwwLDAsMCwwLDI5LDAsMzAsMzEsMzIsMzMsNTIsMzUsMzYsMzcsMzgsNTIsNDAsMCwwLDQxLDM1LDQyLDQzLDQ0LDQ1LDAsMCw0NiwwLDAsMCwwLDAsMCw0N10sWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw1MCwwLDUxLDBdXSxcImFjY2VwdGluZ1wiOltmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWVdLFwidGFnc1wiOltbXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJpbmRlcGVuZGVudF9jbHVzdGVyXCJdLFtcInN5bWJvbF9jbHVzdGVyXCJdLFtcInN0YW5kYXJkX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW10sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wiYnJva2VuX2NsdXN0ZXJcIl0sW1wibnVtZXJhbF9jbHVzdGVyXCJdLFtcImJyb2tlbl9jbHVzdGVyXCJdLFtcImluZGVwZW5kZW50X2NsdXN0ZXJcIl0sW1wic3ltYm9sX2NsdXN0ZXJcIl0sW1wic3ltYm9sX2NsdXN0ZXJcIl0sW1wic3RhbmRhcmRfY2x1c3RlclwiXSxbXCJzdGFuZGFyZF9jbHVzdGVyXCJdLFtcInN0YW5kYXJkX2NsdXN0ZXJcIl0sW1wic3RhbmRhcmRfY2x1c3RlclwiXSxbXCJzdGFuZGFyZF9jbHVzdGVyXCJdLFtcInN0YW5kYXJkX2NsdXN0ZXJcIl0sW1wic3RhbmRhcmRfY2x1c3RlclwiXSxbXCJzdGFuZGFyZF9jbHVzdGVyXCJdLFtcInZpcmFtYV90ZXJtaW5hdGVkX2NsdXN0ZXJcIl0sW1wic3RhbmRhcmRfY2x1c3RlclwiXSxbXCJzdGFuZGFyZF9jbHVzdGVyXCJdLFtcInN0YW5kYXJkX2NsdXN0ZXJcIl0sW1wic3RhbmRhcmRfY2x1c3RlclwiXSxbXCJzdGFuZGFyZF9jbHVzdGVyXCJdLFtcInN0YW5kYXJkX2NsdXN0ZXJcIl0sW1wic3RhbmRhcmRfY2x1c3RlclwiXSxbXCJzdGFuZGFyZF9jbHVzdGVyXCJdLFtcInN0YW5kYXJkX2NsdXN0ZXJcIl0sW1wic3RhbmRhcmRfY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJicm9rZW5fY2x1c3RlclwiXSxbXCJudW1lcmFsX2NsdXN0ZXJcIl0sW1wibnVtYmVyX2pvaW5lcl90ZXJtaW5hdGVkX2NsdXN0ZXJcIl0sW1wic3RhbmRhcmRfY2x1c3RlclwiXSxbXCJzdGFuZGFyZF9jbHVzdGVyXCJdLFtcIm51bWVyYWxfY2x1c3RlclwiXV19Jyk7XG5cblxuY29uc3QgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMgPSB7XG4gICAgWDogMSxcbiAgICBDOiAyLFxuICAgIFY6IDQsXG4gICAgTjogOCxcbiAgICBIOiAxNixcbiAgICBaV05KOiAzMixcbiAgICBaV0o6IDY0LFxuICAgIE06IDEyOCxcbiAgICBTTTogMjU2LFxuICAgIFZEOiA1MTIsXG4gICAgQTogMTAyNCxcbiAgICBQbGFjZWhvbGRlcjogMjA0OCxcbiAgICBEb3R0ZWRfQ2lyY2xlOiA0MDk2LFxuICAgIFJTOiA4MTkyLFxuICAgIENvZW5nOiAxNjM4NCxcbiAgICBSZXBoYTogMzI3NjgsXG4gICAgUmE6IDY1NTM2LFxuICAgIENNOiAxMzEwNzIsXG4gICAgU3ltYm9sOiAyNjIxNDQgLy8gQXZhZ3JhaGEsIGV0YyB0aGF0IHRha2UgbWFya3MgKFNNLEEsVkQpLlxufTtcbmNvbnN0ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwID0ge1xuICAgIFN0YXJ0OiAxLFxuICAgIFJhX1RvX0JlY29tZV9SZXBoOiAyLFxuICAgIFByZV9NOiA0LFxuICAgIFByZV9DOiA4LFxuICAgIEJhc2VfQzogMTYsXG4gICAgQWZ0ZXJfTWFpbjogMzIsXG4gICAgQWJvdmVfQzogNjQsXG4gICAgQmVmb3JlX1N1YjogMTI4LFxuICAgIEJlbG93X0M6IDI1NixcbiAgICBBZnRlcl9TdWI6IDUxMixcbiAgICBCZWZvcmVfUG9zdDogMTAyNCxcbiAgICBQb3N0X0M6IDIwNDgsXG4gICAgQWZ0ZXJfUG9zdDogNDA5NixcbiAgICBGaW5hbF9DOiA4MTkyLFxuICAgIFNNVkQ6IDE2Mzg0LFxuICAgIEVuZDogMzI3Njhcbn07XG5jb25zdCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkODUxOWRlYWE3ZGUyYjA3ID0gJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMuQyB8ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjLlJhIHwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMuQ00gfCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYy5WIHwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMuUGxhY2Vob2xkZXIgfCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYy5Eb3R0ZWRfQ2lyY2xlO1xuY29uc3QgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGJiY2Q5Mjg3NjczMzhlMGQgPSAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYy5aV0ogfCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYy5aV05KO1xuY29uc3QgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGNhOTU5OWIyYTMwMGFmYyA9ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjLkggfCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYy5Db2VuZztcbmNvbnN0ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRlOTlkMTE5ZGE3NmEwZmM1ID0ge1xuICAgIERlZmF1bHQ6IHtcbiAgICAgICAgaGFzT2xkU3BlYzogZmFsc2UsXG4gICAgICAgIHZpcmFtYTogMCxcbiAgICAgICAgYmFzZVBvczogXCJMYXN0XCIsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkJlZm9yZV9Qb3N0LFxuICAgICAgICByZXBoTW9kZTogXCJJbXBsaWNpdFwiLFxuICAgICAgICBibHdmTW9kZTogXCJQcmVfQW5kX1Bvc3RcIlxuICAgIH0sXG4gICAgRGV2YW5hZ2FyaToge1xuICAgICAgICBoYXNPbGRTcGVjOiB0cnVlLFxuICAgICAgICB2aXJhbWE6IDB4MDk0RCxcbiAgICAgICAgYmFzZVBvczogXCJMYXN0XCIsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkJlZm9yZV9Qb3N0LFxuICAgICAgICByZXBoTW9kZTogXCJJbXBsaWNpdFwiLFxuICAgICAgICBibHdmTW9kZTogXCJQcmVfQW5kX1Bvc3RcIlxuICAgIH0sXG4gICAgQmVuZ2FsaToge1xuICAgICAgICBoYXNPbGRTcGVjOiB0cnVlLFxuICAgICAgICB2aXJhbWE6IDB4MDlDRCxcbiAgICAgICAgYmFzZVBvczogXCJMYXN0XCIsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkFmdGVyX1N1YixcbiAgICAgICAgcmVwaE1vZGU6IFwiSW1wbGljaXRcIixcbiAgICAgICAgYmx3Zk1vZGU6IFwiUHJlX0FuZF9Qb3N0XCJcbiAgICB9LFxuICAgIEd1cm11a2hpOiB7XG4gICAgICAgIGhhc09sZFNwZWM6IHRydWUsXG4gICAgICAgIHZpcmFtYTogMHgwQTRELFxuICAgICAgICBiYXNlUG9zOiBcIkxhc3RcIixcbiAgICAgICAgcmVwaFBvczogJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjAuQmVmb3JlX1N1YixcbiAgICAgICAgcmVwaE1vZGU6IFwiSW1wbGljaXRcIixcbiAgICAgICAgYmx3Zk1vZGU6IFwiUHJlX0FuZF9Qb3N0XCJcbiAgICB9LFxuICAgIEd1amFyYXRpOiB7XG4gICAgICAgIGhhc09sZFNwZWM6IHRydWUsXG4gICAgICAgIHZpcmFtYTogMHgwQUNELFxuICAgICAgICBiYXNlUG9zOiBcIkxhc3RcIixcbiAgICAgICAgcmVwaFBvczogJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjAuQmVmb3JlX1Bvc3QsXG4gICAgICAgIHJlcGhNb2RlOiBcIkltcGxpY2l0XCIsXG4gICAgICAgIGJsd2ZNb2RlOiBcIlByZV9BbmRfUG9zdFwiXG4gICAgfSxcbiAgICBPcml5YToge1xuICAgICAgICBoYXNPbGRTcGVjOiB0cnVlLFxuICAgICAgICB2aXJhbWE6IDB4MEI0RCxcbiAgICAgICAgYmFzZVBvczogXCJMYXN0XCIsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkFmdGVyX01haW4sXG4gICAgICAgIHJlcGhNb2RlOiBcIkltcGxpY2l0XCIsXG4gICAgICAgIGJsd2ZNb2RlOiBcIlByZV9BbmRfUG9zdFwiXG4gICAgfSxcbiAgICBUYW1pbDoge1xuICAgICAgICBoYXNPbGRTcGVjOiB0cnVlLFxuICAgICAgICB2aXJhbWE6IDB4MEJDRCxcbiAgICAgICAgYmFzZVBvczogXCJMYXN0XCIsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkFmdGVyX1Bvc3QsXG4gICAgICAgIHJlcGhNb2RlOiBcIkltcGxpY2l0XCIsXG4gICAgICAgIGJsd2ZNb2RlOiBcIlByZV9BbmRfUG9zdFwiXG4gICAgfSxcbiAgICBUZWx1Z3U6IHtcbiAgICAgICAgaGFzT2xkU3BlYzogdHJ1ZSxcbiAgICAgICAgdmlyYW1hOiAweDBDNEQsXG4gICAgICAgIGJhc2VQb3M6IFwiTGFzdFwiLFxuICAgICAgICByZXBoUG9zOiAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMC5BZnRlcl9Qb3N0LFxuICAgICAgICByZXBoTW9kZTogXCJFeHBsaWNpdFwiLFxuICAgICAgICBibHdmTW9kZTogXCJQb3N0X09ubHlcIlxuICAgIH0sXG4gICAgS2FubmFkYToge1xuICAgICAgICBoYXNPbGRTcGVjOiB0cnVlLFxuICAgICAgICB2aXJhbWE6IDB4MENDRCxcbiAgICAgICAgYmFzZVBvczogXCJMYXN0XCIsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLkFmdGVyX1Bvc3QsXG4gICAgICAgIHJlcGhNb2RlOiBcIkltcGxpY2l0XCIsXG4gICAgICAgIGJsd2ZNb2RlOiBcIlBvc3RfT25seVwiXG4gICAgfSxcbiAgICBNYWxheWFsYW06IHtcbiAgICAgICAgaGFzT2xkU3BlYzogdHJ1ZSxcbiAgICAgICAgdmlyYW1hOiAweDBENEQsXG4gICAgICAgIGJhc2VQb3M6IFwiTGFzdFwiLFxuICAgICAgICByZXBoUG9zOiAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMC5BZnRlcl9NYWluLFxuICAgICAgICByZXBoTW9kZTogXCJMb2dfUmVwaGFcIixcbiAgICAgICAgYmx3Zk1vZGU6IFwiUHJlX0FuZF9Qb3N0XCJcbiAgICB9LFxuICAgIC8vIEhhbmRsZWQgYnkgVW5pdmVyc2FsU2hhcGVyXG4gICAgLy8gU2luaGFsYToge1xuICAgIC8vICAgaGFzT2xkU3BlYzogZmFsc2UsXG4gICAgLy8gICB2aXJhbWE6IDB4MERDQSxcbiAgICAvLyAgIGJhc2VQb3M6ICdMYXN0X1NpbmhhbGEnLFxuICAgIC8vICAgcmVwaFBvczogUE9TSVRJT05TLkFmdGVyX01haW4sXG4gICAgLy8gICByZXBoTW9kZTogJ0V4cGxpY2l0JyxcbiAgICAvLyAgIGJsd2ZNb2RlOiAnUHJlX0FuZF9Qb3N0J1xuICAgIC8vIH0sXG4gICAgS2htZXI6IHtcbiAgICAgICAgaGFzT2xkU3BlYzogZmFsc2UsXG4gICAgICAgIHZpcmFtYTogMHgxN0QyLFxuICAgICAgICBiYXNlUG9zOiBcIkZpcnN0XCIsXG4gICAgICAgIHJlcGhQb3M6ICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwLlJhX1RvX0JlY29tZV9SZXBoLFxuICAgICAgICByZXBoTW9kZTogXCJWaXNfUmVwaGFcIixcbiAgICAgICAgYmx3Zk1vZGU6IFwiUHJlX0FuZF9Qb3N0XCJcbiAgICB9XG59O1xuY29uc3QgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGY2NDdjOWNmZGQ3N2Q5NWEgPSB7XG4gICAgLy8gS2htZXJcbiAgICAweDE3QkU6IFtcbiAgICAgICAgMHgxN0MxLFxuICAgICAgICAweDE3QkVcbiAgICBdLFxuICAgIDB4MTdCRjogW1xuICAgICAgICAweDE3QzEsXG4gICAgICAgIDB4MTdCRlxuICAgIF0sXG4gICAgMHgxN0MwOiBbXG4gICAgICAgIDB4MTdDMSxcbiAgICAgICAgMHgxN0MwXG4gICAgXSxcbiAgICAweDE3QzQ6IFtcbiAgICAgICAgMHgxN0MxLFxuICAgICAgICAweDE3QzRcbiAgICBdLFxuICAgIDB4MTdDNTogW1xuICAgICAgICAweDE3QzEsXG4gICAgICAgIDB4MTdDNVxuICAgIF1cbn07XG5cblxuXG5jb25zdCB7IGRlY29tcG9zaXRpb25zOiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkZGVjb21wb3NpdGlvbnMgIH0gPSAoMCwgKC8qQF9fUFVSRV9fKi8kcGFyY2VsJGludGVyb3BEZWZhdWx0KCRhYTMzM2E5NjA3NDcxMjk2JGV4cG9ydHMpKSk7XG5jb25zdCAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkdHJpZSA9IG5ldyAoMCwgJDUyWklmJHVuaWNvZGV0cmllKSgoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDk0ZmRmMTFiYWZjOGRlNmIpKFwiQUFBUkFBQUFBQUNnd2dBQUFiRU5Udkx0blgrc0hVVVZ4L2YxM25kL3ZIZjdibCtGUkdMN1IwT0pNY1dZcGhCcmlta1ZDU0pSMnhpRWFMRUdRN0FrQkdvd2JZUlNnajhLMkIvR2twUllFNndsUVN5SktDYWdyU2xHa21xc3FVWk1ZN1MyQ1drZ3FRVmlRU2t0NEhmdXpyeDc3dHlaMmZtMXUrL1JQY2tudXpzN08zUG1uRE96czdONzN6dGVTNUtYd0t2Z0RUQ25uaVR2QmZQQkplQVZwUDJ2RnI2OUdHVXRBa3ZBTW9keXIwRGVUNEJyd0Nwd1BWZ0RiZ2EzZ2ErRGpZYnlsdUxjQ3ZCTjhGMndHV3dITzhFajREanlQSWJ0ejBEQ2VacHZENENENEUvZ2IrQW9PQUZPZ3RQZ0xLaU5Ka2tiVElLTHdBTHdmdkFoOEdHd0hGd0ZQZzJ1QXplQ204RnQ0RTV3TjdnUFBBaStEMzRBZmdSK0FwN2t4OCtBWjhIdndaL0JFWEFNdkFoZUFhK0JjNk9wenZWR2tuVEFCWTMwZUI2MkM4R2xZREZZQ3BhRHEvbjV6Mko3UFZnRGJnRzNOMUtick9kYld6YnkvTi9HOWk2d2xSOC93TGViVU5jT2xsN3ZYN1BMc1E0YmRwQXk5MkIvTDNnSzdBTy9BMzhFZndYL0FDK0FreVQvbTN4N21xZHRZejdHZnEyWkpPUGdQYzNVWHUvRDl1Sm1tbWNSVDF1QzdUSndaVE9OSnhGTDErSjRKYmdCckFHM2dOdjVOZXY1ZGhPMm0zbDU0cnF0T043Uk5MZDFWOFo1YXVNZkkrOFdidnYxMlA0VXg3OEF2eVpsL0JiN2Z3RDM0SHdIL0VWUi90OHQ2clJscllnRmxIbk1zZHlYSXVwUkZQK0d6djhCYjRDa2xTU2pyVFI5YnoyMXVaeC9Oajh2K3VJRk9KNEhGbkpvM2tXdE5HNldrUFN6QmwxWWJDOGplVmZ4K3ErUjlQZzQ4bHhOOGpGZGhkOCswMUxyTFRDZHE2aW84R05iMWE4cUtpb3FLaW9xS2lvYzJjYlhHY3JXUTJZbmY5YTlybVYvelZ1YTlEYzE2Vi9nejhwZnh2YXI0QTZ3QWR3TDdnZGJ3VVBnaCtCUjhBUjRxcFd1TGUzRDlnQTRDQTZESStBb09BRk90ZEwxbk5leGZZczkzN2Z4REE4dWJLZjF6bXYzZFZpSS9VdmI5bTJzcUtpb3FBaUhyVnRlaHJIM1RLMi8zbDRXWmR1aW9xSWlEcStSZDFKYmVmOWVobkhtU25DdE5OZjduT1BjcjhQSGlsTzhqcmZCRjl2OTk2bGZ3ZjZ0VXBsM3RQdnZkU2pzdmN3R25MdDNHc3cva3prcEs4Q2RZSDgzbXkzSWQwaVQ5MVdrTDV4TWt0WGdJZkQ4NU9ENTR6amZtWXU1T0ZnTjdoMUxrbWRCTWc1ZmdidkFDaHp2NDl1amZFdVozeGxPazdrUmVUYVNmTC9CL2psK2ZNWHNKTGtiN0FjUGo4VGxIQy96c2duWWN5TGQzelNoMXZHQUpyMmlvcUtpSW4vZUtYa01qbjMvY1dGNXQvejZ5MzcrSzV1cndQMllCMzZ2UGZ3OHlyN3plUmpwdThnOGNUZjJIMituODlFdGl2TEU5M2ZzMjdFei9CcjJ2TTIrcVdQbC9aeVg5U3RGZlF4VzV2NzI0UFB4elh6N1hIdTRQcHM1SnZ0bWlxMTNzem16ZlAwaGxIa1lIR24zNThiSGVEMHZZdnN5K0sra3o5dnQvank4Z1Q0MEcxdzRSdWEwUE45OG5uYUdmL2UxRyttWElPMkRZOFA2WHo3V1B6N0t5LzdvbUowUEJmZjQrQjkxZkFxc0FwOEhYd0kzZ1IwNHR4YmJkV0REV0RwUC9nN1l4czZCWFdBUDJBdWVKSG8rTTViT3B3K0N3K0FJT0FwT2dGTVc3WGtkZWM2QWtYSDErUWZneXpiT1RZNzNqeS9DL2dKKy9DQ09QNEQ5eGZ6NEk5aCtURk1XdGY5U1JXelp3cTdmMHlpL0w5dm9XU1JiRGZWL2NseC8zVHVLZmpvVDI2L2lYODEzVVJ4NHRpVkczYXkvc2ZGdUplbmI3SjUwQTRtcjFkaS9DWnpMS1o2eTJyZXVudXA0cXpUK2ZNMHdIcDBQVUQ5K0E3YllOSjVmbjNlTlAvRnQ1YmMwK1M0bjkvbDFHaitLODJ6ZXNkMXdmajNmWjc5aDJZeXlWdkxqN2RqZkNSNHhqSkV5dXkxK1MvRnlEdC9NUHdvZG41aEI4YXhyeHk5blNCdFlqT3lIcnMrQlErQjU4RSt1K3dzV2JXQnRwYi9oWUw4UnVBL3BKOGZUMkdmZlgrd2wrZGFTYTA4ano5bnhORzJrNDk2M1hCRy9aVmhwVVM1NzNtaDNCdFBvN3gvRWI3cEUyeWQ1WHZac3NZL00vUlpMYzlTTGVEc2ZENWdmVGlkaTkvL3B3cnpXdTd0OWxLY043ZHh5bnRoQWg4dmNLclF1MWZySFRHS0JORjY2Mktmb09YVTFGc2FGeGU2eDJrakNsa0JuR3ZYeHdYMGJ5dFo1dW5LK1M5bjJqeGFiVGM1TTBIVWFJeVRyZkZhK0xqbWZsYzlYejdKdE5kUGE0ZUt6NldBUGxiNWw2eGZMQnpvcFd4Y2ZuY3ZTZjdySFJKazJLU04yYktSc3ZjdTJVWm14VkliOXFkNTUxZThyWmNURVJHdVErcXdJakVSa2psMitkak9saFdmcGlibnAvcXhtUDkyRlZyMS9iYzlHWXh4dUk1bzNVemR1a3pZcGorSDZuT3hyYTluSGlha3NqaERkc2FzUGU5Y2EvQ3ZPVTFHVndVVDR0OFA5MjFINFQ4Z3Nua2RJaCtkbi9wWHJVMG1uT1p3MjFDYkp2MVA1TFAwcjRqdGtiTEgxNzFCYkN2YXZuRmZlWjhMOEsyd3YvQ3VRUlU2bi9xV1NOU2JyMm1POHh0Sy9VK01xNlkvMXlReUZKSEh0djhLbjJ1T0MvR3ZiZjJWRVB4SjlTdmhZNWQrUSt5MjFpUnhMcnVPenNZNk1XR3JPa1BIWjFiK2pGdVB6cUVYL1ZjbW9aa3lJUFQ1M2szNi9EWm5yTWQrSy9EYmpzNmt2Nis2VllsOU9VK1dUMDdUcGx2TXZXV2hmVm8zZjR0NDhTK3JiaklabC8xYjVYeWQ1dkpkUWlUeWY3dFVkTWxibjBKOWQvY242YzdNNURPMVRORjArYm1UMFozcWRLYWFvWGVnMUx2N05FaHVmenlULzZ2SUtFZU8xalgvcHNkaTM4YTg4OXFwa1N0Y0kvdTEyVTN6RTFSZSsvWXY2UU53dmRUREpHaTl0MnBzMVh0S1lESjBQbWNaS2NVODEyc1J4dm1zN0o0N21aNWMrU1dKRDVMUFJnNHFxaituV0w4UTVzUlZyR2FyMUVHMHNPSTZuZEgzRFZXTDd3cGV1d2FZNk8xTmgxOU4rT3FzNXVJN0V0bzNhSUN4TnJDbjVyQXVaN0NuMmJkSnRmWlBsTC9rOExkK2tpNnY5RTU2WFBVdlQ1Mm1WL1lWdm1NajJaejhURXVOTVR4Zkh1RmZGVUo2ME9McnoxdXRPRG5GRzQ3ZkxiU2pYeTB4U3k0Z042M0V5d2xoTXhXY05tSzcxc3Zzemk1T0dUdmRKZTNydGQ4aWZCNkkvbUtCcjFhcDd1VS9zcXFUc01iK0g1ZnhCRnl1cSt5cUxuZDdjbWozM1R3eU9WVk93dWozblZYUnRRdFVHV1I5anpJNmtlY1pyS1NLUHVGYWtVMmhabVhYWk1EbHNTMVc5akJhdnY2ZUhwZjNFdGZKN21Ld1lWMGxYMmc5RlZZNU4rVW5nOWFIMTU5MCtuM0tMZ0VyZWRmaWV6NnU5c3Zpc1kvU3VrOUpzbmtsaTFhK0MxbS9UN3J6cWQ1VVk5bWZpWFg5UjkyaWJkWlVJYXdUQzk2YjFHQm42ckRHMUpzUHYvYjM5MlNraVhWVUdteU4wTE81TFlpNDZaZi9BZGMvUU1hQ284VHRHL2JIMVovVHNXMVFmVVBSam0yY1plZTVQUmFUMzNsRWJuaGxNYXg0cWUxby9ZOGEwaWNkYW9Pdjlic2grSGo2am9udWVvR3RIdW1jTWxYOWx4THhYcTcvRDg0ZlN6em5HdDZydFVlclh4WVU0Ny9JY1BlRzN2cUJiSjFTdEVUWnFnOWZTMkFrZC8wT3ZwKy9DeEQzUCsvNmJRd3pKdHN2eWg1dytYamVYSDlLZlhHSDMvVmJTWDR0UzRYb2Z0UFpibnZjeXhYMUc1UXZXMXdiV1RrYnM3YzNtVGNvNk5XT0RiZHhrM1I5bEdaby9hR3hoaWtuVG1FVFhMVnMxYzkwdTkrbUJHQ2Y2aHM2ZnNtVHEyOXN4UHY4ZDgyQ3VoQ3BOakdOamczMWJsR0hyejFpNDFoZDZudVl6YlUzWGhMUXpqN0p0NjdPdHcwdVhVZERvSDhlNEYvam9NZFZ1aTJkTUpjM0UrVGV0dnI2akV0UG5QaEphVnd6OVk3VERWbHgxcW5maXRsRWJ0emxUVkQwcVgvcGNtMWVzeEk2NVBPM21VNGVOcnI1U1pNejQ2RkRFK2FJbGI1dG50YjFvL1dPVUVUc1c4NDdwdk5wYVpIMjI1ZVVwTm5yUzl5RHk5d1R5c3lyOVhWT2U2MytxZDNNNmU0WDZQdGQxRHBjMVNkVjUzWnFGYWcxaHBQK2JFNWY0aXZZNzRCelhpbHpXV1cxK1MwVGpKbmc5MUdkOXdtYk5ncE1WejZXOGQ3R0pad1d0V3A4cCsrYzhmcGpXMFZ6ZmYzZEpmekd1b2Vyc0V0bm1walZMdXBZNDhINm83bjgvQytrdkpuK0xjZDZxM1FIeDN1c3ZaYXgzVzhhcHZQNnJlditVSlNIZmlDWWUvaDJhVHdUYVJpNURPMjhaU2Q5ek5oVGZKOGIyamU3ZHJPbzlIdE5OYlBNVzAzek9wcTJxTnFuS0ZOKzBodWhsTXllMlBlOVRkemZDZWRmeE1sUmZHN3hqbmNhSjdmaVhNWVprM1grWnZ1S2JYQ0doOHk4WEg4VHliYWpQVGZxNHRqRzIvcWIwUkpPM1NCMTliYTJTTXVvTmJXOFIvZzY1M3FhOXNkc1JZc3NzdStaeFBzcyt0bmF5RmQ5NHlqb2ZFaStoWmR2bzczcTlqZDN5aXNVWWJmRXBROVhtTXFVSW0yZkZaaDR4a1plRTFCTkRMNXYrWmNxWGgvOTBiU3dqZmx6OFUwUWNGV0h6UE9weTBhbU0rc3RxZjFhZDdMbHRWUHFXbUczcDMrR2lJdkxKZjhkdVlBM05jQndiV1Jwa0RYbW83UlArejVFNis4WHN3ejUxMmRiclcyYU1OcnBLYUJ0OXk0NVZSMmo5ZWZoQVFML1BGMzhYYWRxOTA3TllDNWRwWkx5M2tNWDZQVUhnZUdHUzNuZm9QbjlyT2JKOXMvNHVNbnRuU3QvSjVUWCsyWlJodEZjQjhaZ1ZteVpiaXQ4R0NkLzcvQzdFT2NZSzdMZHlqTmhJbEw4MW5xTi9YZjltT0h0L2Fub3ZQNFgwdHllbS9PVVpGOVRtc2NZMm56RXVscTk2WmVWd3YyQnh4bndrM3M5bmpUOG0vWVdPS2wxOTlmZTUzdFRYeXU1RExvamZLV1hlajZSM1JBUHREZjFleC9QdnRkSjhRN2FQN0h0NlhwZFhTSmY4L3dNZFF1Uy9qMC9IdEtueTlLYlQrb1QySzJFVHVXN1R0MDlVc3M1bkNkV2hqUHVNVFh6cnp0TzRGSE15K1Y2VEphSDlJNisyQzVIUHE5b2M4eGxLUnZhNXJGOE0vN3RDMjYvNkJzTkZpdlEvL2UxcFZzeVAxOVZyTnJIMUQ1V2k3b1VEZFZwOFE1SFZyMXp0bHpYUHRIMkdjMzArbE1YM2VkSDNlY20zZnAwK1BzL0lQdldINk9waVY3bWVFTWxienlJa3BpMWp0RFUwUG1tNm5NZDBqVThiWEs3TjBqV2tiL2pvSHlOZWJmV2d0ckpwYzBoN1FpUVAyNGFLcWN3WVBuVFJJVW1HNjNmUlE1VlhMc2VrZ3k1TnRWWFZhZExmcGp6VjlTNnhZbnVOcmkxNTlabXNtTENwSjgvNlhTUkdPYUg2NTlIK0dMWXR3aGQ1MXh2cTMxQjlRbTBVYXZNODRxaG9LYU5PbmZ3ZlwiKSk7XG5jb25zdCAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkc3RhdGVNYWNoaW5lID0gbmV3ICgwLCAkNTJaSWYkZGZhKSgoMCwgKC8qQF9fUFVSRV9fKi8kcGFyY2VsJGludGVyb3BEZWZhdWx0KCQ0YjA3MzVjYTZjNjkyZWE1JGV4cG9ydHMpKSkpO1xuY2xhc3MgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkNjQ5OTcwZDg3MzM1YjMwZiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgc3RhdGljIHBsYW5GZWF0dXJlcyhwbGFuKSB7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHNldHVwU3lsbGFibGVzKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZShbXG4gICAgICAgICAgICBcImxvY2xcIixcbiAgICAgICAgICAgIFwiY2NtcFwiXG4gICAgICAgIF0pO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpbml0aWFsUmVvcmRlcmluZyk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoXCJudWt0XCIpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKFwiYWtoblwiKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZShcInJwaGZcIiwgZmFsc2UpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKFwicmtyZlwiKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZShcInByZWZcIiwgZmFsc2UpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKFwiYmx3ZlwiLCBmYWxzZSk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoXCJhYnZmXCIsIGZhbHNlKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZShcImhhbGZcIiwgZmFsc2UpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKFwicHN0ZlwiLCBmYWxzZSk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoXCJ2YXR1XCIpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKFwiY2pjdFwiKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZShcImNmYXJcIiwgZmFsc2UpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRmaW5hbFJlb3JkZXJpbmcpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKHtcbiAgICAgICAgICAgIGxvY2FsOiBbXG4gICAgICAgICAgICAgICAgXCJpbml0XCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBnbG9iYWw6IFtcbiAgICAgICAgICAgICAgICBcInByZXNcIixcbiAgICAgICAgICAgICAgICBcImFidnNcIixcbiAgICAgICAgICAgICAgICBcImJsd3NcIixcbiAgICAgICAgICAgICAgICBcInBzdHNcIixcbiAgICAgICAgICAgICAgICBcImhhbG5cIixcbiAgICAgICAgICAgICAgICBcImRpc3RcIixcbiAgICAgICAgICAgICAgICBcImFidm1cIixcbiAgICAgICAgICAgICAgICBcImJsd21cIixcbiAgICAgICAgICAgICAgICBcImNhbHRcIixcbiAgICAgICAgICAgICAgICBcImNsaWdcIlxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gU2V0dXAgdGhlIGluZGljIGNvbmZpZyBmb3IgdGhlIHNlbGVjdGVkIHNjcmlwdFxuICAgICAgICBwbGFuLnVuaWNvZGVTY3JpcHQgPSAkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkY2U1MGU4MmYxMmE4MjdhNChwbGFuLnNjcmlwdCk7XG4gICAgICAgIHBsYW4uaW5kaWNDb25maWcgPSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGU5OWQxMTlkYTc2YTBmYzUpW3BsYW4udW5pY29kZVNjcmlwdF0gfHwgKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRlOTlkMTE5ZGE3NmEwZmM1KS5EZWZhdWx0O1xuICAgICAgICBwbGFuLmlzT2xkU3BlYyA9IHBsYW4uaW5kaWNDb25maWcuaGFzT2xkU3BlYyAmJiBwbGFuLnNjcmlwdFtwbGFuLnNjcmlwdC5sZW5ndGggLSAxXSAhPT0gXCIyXCI7XG4gICAgLy8gVE9ETzogdHVybiBvZmYga2VybiAoS2htZXIpIGFuZCBsaWdhIGZlYXR1cmVzLlxuICAgIH1cbiAgICBzdGF0aWMgYXNzaWduRmVhdHVyZXMocGxhbiwgZ2x5cGhzKSB7XG4gICAgICAgIC8vIERlY29tcG9zZSBzcGxpdCBtYXRyYXNcbiAgICAgICAgLy8gVE9ETzogZG8gdGhpcyBpbiBhIG1vcmUgZ2VuZXJhbCB1bmljb2RlIG5vcm1hbGl6ZXJcbiAgICAgICAgZm9yKGxldCBpID0gZ2x5cGhzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgICAgICAgIGxldCBjb2RlcG9pbnQgPSBnbHlwaHNbaV0uY29kZVBvaW50c1swXTtcbiAgICAgICAgICAgIGxldCBkID0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRmNjQ3YzljZmRkNzdkOTVhKVtjb2RlcG9pbnRdIHx8ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRkZWNvbXBvc2l0aW9uc1tjb2RlcG9pbnRdO1xuICAgICAgICAgICAgaWYgKGQpIHtcbiAgICAgICAgICAgICAgICBsZXQgZGVjb21wb3NlZCA9IGQubWFwKChjKT0+e1xuICAgICAgICAgICAgICAgICAgICBsZXQgZyA9IHBsYW4uZm9udC5nbHlwaEZvckNvZGVQb2ludChjKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAoMCwgJDEwZTdiMjU3ZTFhOWE3NTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkocGxhbi5mb250LCBnLmlkLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBjXG4gICAgICAgICAgICAgICAgICAgIF0sIGdseXBoc1tpXS5mZWF0dXJlcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ2x5cGhzLnNwbGljZShpLCAxLCAuLi5kZWNvbXBvc2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbigwLCAkNTJaSWYkc3djaGVscGVyc3NyY19kZWZpbmVfcHJvcGVydHltanMpKCQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzksIFwiemVyb01hcmtXaWR0aHNcIiwgXCJOT05FXCIpO1xuZnVuY3Rpb24gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGluZGljQ2F0ZWdvcnkoZ2x5cGgpIHtcbiAgICByZXR1cm4gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHRyaWUuZ2V0KGdseXBoLmNvZGVQb2ludHNbMF0pID4+IDg7XG59XG5mdW5jdGlvbiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaW5kaWNQb3NpdGlvbihnbHlwaCkge1xuICAgIHJldHVybiAxIDw8ICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkdHJpZS5nZXQoZ2x5cGguY29kZVBvaW50c1swXSkgJiAweGZmKTtcbn1cbmNsYXNzICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRJbmRpY0luZm8ge1xuICAgIGNvbnN0cnVjdG9yKGNhdGVnb3J5LCBwb3NpdGlvbiwgc3lsbGFibGVUeXBlLCBzeWxsYWJsZSl7XG4gICAgICAgIHRoaXMuY2F0ZWdvcnkgPSBjYXRlZ29yeTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgICB0aGlzLnN5bGxhYmxlVHlwZSA9IHN5bGxhYmxlVHlwZTtcbiAgICAgICAgdGhpcy5zeWxsYWJsZSA9IHN5bGxhYmxlO1xuICAgIH1cbn1cbmZ1bmN0aW9uICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRzZXR1cFN5bGxhYmxlcyhmb250LCBnbHlwaHMpIHtcbiAgICBsZXQgc3lsbGFibGUgPSAwO1xuICAgIGxldCBsYXN0ID0gMDtcbiAgICBmb3IgKGxldCBbc3RhcnQsIGVuZCwgdGFnc10gb2YgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHN0YXRlTWFjaGluZS5tYXRjaChnbHlwaHMubWFwKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpbmRpY0NhdGVnb3J5KSkpe1xuICAgICAgICBpZiAoc3RhcnQgPiBsYXN0KSB7XG4gICAgICAgICAgICArK3N5bGxhYmxlO1xuICAgICAgICAgICAgZm9yKGxldCBpID0gbGFzdDsgaSA8IHN0YXJ0OyBpKyspZ2x5cGhzW2ldLnNoYXBlckluZm8gPSBuZXcgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJEluZGljSW5mbygoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLlgsICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuRW5kLCBcIm5vbl9pbmRpY19jbHVzdGVyXCIsIHN5bGxhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICArK3N5bGxhYmxlO1xuICAgICAgICAvLyBDcmVhdGUgc2hhcGVyIGluZm9cbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspZ2x5cGhzW2ldLnNoYXBlckluZm8gPSBuZXcgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJEluZGljSW5mbygxIDw8ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpbmRpY0NhdGVnb3J5KGdseXBoc1tpXSksICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpbmRpY1Bvc2l0aW9uKGdseXBoc1tpXSksIHRhZ3NbMF0sIHN5bGxhYmxlKTtcbiAgICAgICAgbGFzdCA9IGVuZCArIDE7XG4gICAgfVxuICAgIGlmIChsYXN0IDwgZ2x5cGhzLmxlbmd0aCkge1xuICAgICAgICArK3N5bGxhYmxlO1xuICAgICAgICBmb3IobGV0IGkgPSBsYXN0OyBpIDwgZ2x5cGhzLmxlbmd0aDsgaSsrKWdseXBoc1tpXS5zaGFwZXJJbmZvID0gbmV3ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRJbmRpY0luZm8oKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5YLCAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkVuZCwgXCJub25faW5kaWNfY2x1c3RlclwiLCBzeWxsYWJsZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzQ29uc29uYW50KGdseXBoKSB7XG4gICAgcmV0dXJuIGdseXBoLnNoYXBlckluZm8uY2F0ZWdvcnkgJiAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDg1MTlkZWFhN2RlMmIwNyk7XG59XG5mdW5jdGlvbiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNKb2luZXIoZ2x5cGgpIHtcbiAgICByZXR1cm4gZ2x5cGguc2hhcGVySW5mby5jYXRlZ29yeSAmICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYmJjZDkyODc2NzMzOGUwZCk7XG59XG5mdW5jdGlvbiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNIYWxhbnRPckNvZW5nKGdseXBoKSB7XG4gICAgcmV0dXJuIGdseXBoLnNoYXBlckluZm8uY2F0ZWdvcnkgJiAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGNhOTU5OWIyYTMwMGFmYyk7XG59XG5mdW5jdGlvbiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkd291bGRTdWJzdGl0dXRlKGdseXBocywgZmVhdHVyZSkge1xuICAgIGZvciAobGV0IGdseXBoIG9mIGdseXBocylnbHlwaC5mZWF0dXJlcyA9IHtcbiAgICAgICAgW2ZlYXR1cmVdOiB0cnVlXG4gICAgfTtcbiAgICBsZXQgR1NVQiA9IGdseXBoc1swXS5fZm9udC5fbGF5b3V0RW5naW5lLmVuZ2luZS5HU1VCUHJvY2Vzc29yO1xuICAgIEdTVUIuYXBwbHlGZWF0dXJlcyhbXG4gICAgICAgIGZlYXR1cmVcbiAgICBdLCBnbHlwaHMpO1xuICAgIHJldHVybiBnbHlwaHMubGVuZ3RoID09PSAxO1xufVxuZnVuY3Rpb24gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGNvbnNvbmFudFBvc2l0aW9uKGZvbnQsIGNvbnNvbmFudCwgdmlyYW1hKSB7XG4gICAgbGV0IGdseXBocyA9IFtcbiAgICAgICAgdmlyYW1hLFxuICAgICAgICBjb25zb25hbnQsXG4gICAgICAgIHZpcmFtYVxuICAgIF07XG4gICAgaWYgKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciR3b3VsZFN1YnN0aXR1dGUoZ2x5cGhzLnNsaWNlKDAsIDIpLCBcImJsd2ZcIikgfHwgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHdvdWxkU3Vic3RpdHV0ZShnbHlwaHMuc2xpY2UoMSwgMyksIFwiYmx3ZlwiKSkgcmV0dXJuICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmVsb3dfQztcbiAgICBlbHNlIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkd291bGRTdWJzdGl0dXRlKGdseXBocy5zbGljZSgwLCAyKSwgXCJwc3RmXCIpIHx8ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciR3b3VsZFN1YnN0aXR1dGUoZ2x5cGhzLnNsaWNlKDEsIDMpLCBcInBzdGZcIikpIHJldHVybiAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlBvc3RfQztcbiAgICBlbHNlIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkd291bGRTdWJzdGl0dXRlKGdseXBocy5zbGljZSgwLCAyKSwgXCJwcmVmXCIpIHx8ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciR3b3VsZFN1YnN0aXR1dGUoZ2x5cGhzLnNsaWNlKDEsIDMpLCBcInByZWZcIikpIHJldHVybiAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlBvc3RfQztcbiAgICByZXR1cm4gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5CYXNlX0M7XG59XG5mdW5jdGlvbiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaW5pdGlhbFJlb3JkZXJpbmcoZm9udCwgZ2x5cGhzLCBwbGFuKSB7XG4gICAgbGV0IGluZGljQ29uZmlnID0gcGxhbi5pbmRpY0NvbmZpZztcbiAgICBsZXQgZmVhdHVyZXMgPSBmb250Ll9sYXlvdXRFbmdpbmUuZW5naW5lLkdTVUJQcm9jZXNzb3IuZmVhdHVyZXM7XG4gICAgbGV0IGRvdHRlZENpcmNsZSA9IGZvbnQuZ2x5cGhGb3JDb2RlUG9pbnQoMHgyNWNjKS5pZDtcbiAgICBsZXQgdmlyYW1hID0gZm9udC5nbHlwaEZvckNvZGVQb2ludChpbmRpY0NvbmZpZy52aXJhbWEpLmlkO1xuICAgIGlmICh2aXJhbWEpIHtcbiAgICAgICAgbGV0IGluZm8gPSBuZXcgKDAsICQxMGU3YjI1N2UxYTlhNzU2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKGZvbnQsIHZpcmFtYSwgW1xuICAgICAgICAgICAgaW5kaWNDb25maWcudmlyYW1hXG4gICAgICAgIF0pO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZ2x5cGhzLmxlbmd0aDsgaSsrKWlmIChnbHlwaHNbaV0uc2hhcGVySW5mby5wb3NpdGlvbiA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5CYXNlX0MpIGdseXBoc1tpXS5zaGFwZXJJbmZvLnBvc2l0aW9uID0gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGNvbnNvbmFudFBvc2l0aW9uKGZvbnQsIGdseXBoc1tpXS5jb3B5KCksIGluZm8pO1xuICAgIH1cbiAgICBmb3IobGV0IHN0YXJ0ID0gMCwgZW5kID0gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJG5leHRTeWxsYWJsZShnbHlwaHMsIDApOyBzdGFydCA8IGdseXBocy5sZW5ndGg7IHN0YXJ0ID0gZW5kLCBlbmQgPSAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkbmV4dFN5bGxhYmxlKGdseXBocywgc3RhcnQpKXtcbiAgICAgICAgbGV0IHsgY2F0ZWdvcnk6IGNhdGVnb3J5ICwgc3lsbGFibGVUeXBlOiBzeWxsYWJsZVR5cGUgIH0gPSBnbHlwaHNbc3RhcnRdLnNoYXBlckluZm87XG4gICAgICAgIGlmIChzeWxsYWJsZVR5cGUgPT09IFwic3ltYm9sX2NsdXN0ZXJcIiB8fCBzeWxsYWJsZVR5cGUgPT09IFwibm9uX2luZGljX2NsdXN0ZXJcIikgY29udGludWU7XG4gICAgICAgIGlmIChzeWxsYWJsZVR5cGUgPT09IFwiYnJva2VuX2NsdXN0ZXJcIiAmJiBkb3R0ZWRDaXJjbGUpIHtcbiAgICAgICAgICAgIGxldCBnID0gbmV3ICgwLCAkMTBlN2IyNTdlMWE5YTc1NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KShmb250LCBkb3R0ZWRDaXJjbGUsIFtcbiAgICAgICAgICAgICAgICAweDI1Y2NcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgZy5zaGFwZXJJbmZvID0gbmV3ICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRJbmRpY0luZm8oMSA8PCAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaW5kaWNDYXRlZ29yeShnKSwgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGluZGljUG9zaXRpb24oZyksIGdseXBoc1tzdGFydF0uc2hhcGVySW5mby5zeWxsYWJsZVR5cGUsIGdseXBoc1tzdGFydF0uc2hhcGVySW5mby5zeWxsYWJsZSk7XG4gICAgICAgICAgICAvLyBJbnNlcnQgYWZ0ZXIgcG9zc2libGUgUmVwaGEuXG4gICAgICAgICAgICBsZXQgaSA9IHN0YXJ0O1xuICAgICAgICAgICAgd2hpbGUoaSA8IGVuZCAmJiBnbHlwaHNbaV0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5SZXBoYSlpKys7XG4gICAgICAgICAgICBnbHlwaHMuc3BsaWNlKGkrKywgMCwgZyk7XG4gICAgICAgICAgICBlbmQrKztcbiAgICAgICAgfVxuICAgICAgICAvLyAxLiBGaW5kIGJhc2UgY29uc29uYW50OlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGUgc2hhcGluZyBlbmdpbmUgZmluZHMgdGhlIGJhc2UgY29uc29uYW50IG9mIHRoZSBzeWxsYWJsZSwgdXNpbmcgdGhlXG4gICAgICAgIC8vIGZvbGxvd2luZyBhbGdvcml0aG06IHN0YXJ0aW5nIGZyb20gdGhlIGVuZCBvZiB0aGUgc3lsbGFibGUsIG1vdmUgYmFja3dhcmRzXG4gICAgICAgIC8vIHVudGlsIGEgY29uc29uYW50IGlzIGZvdW5kIHRoYXQgZG9lcyBub3QgaGF2ZSBhIGJlbG93LWJhc2Ugb3IgcG9zdC1iYXNlXG4gICAgICAgIC8vIGZvcm0gKHBvc3QtYmFzZSBmb3JtcyBoYXZlIHRvIGZvbGxvdyBiZWxvdy1iYXNlIGZvcm1zKSwgb3IgdGhhdCBpcyBub3QgYVxuICAgICAgICAvLyBwcmUtYmFzZSByZW9yZGVyaW5nIFJhLCBvciBhcnJpdmUgYXQgdGhlIGZpcnN0IGNvbnNvbmFudC4gVGhlIGNvbnNvbmFudFxuICAgICAgICAvLyBzdG9wcGVkIGF0IHdpbGwgYmUgdGhlIGJhc2UuXG4gICAgICAgIGxldCBiYXNlID0gZW5kO1xuICAgICAgICBsZXQgbGltaXQgPSBzdGFydDtcbiAgICAgICAgbGV0IGhhc1JlcGggPSBmYWxzZTtcbiAgICAgICAgLy8gSWYgdGhlIHN5bGxhYmxlIHN0YXJ0cyB3aXRoIFJhICsgSGFsYW50IChpbiBhIHNjcmlwdCB0aGF0IGhhcyBSZXBoKVxuICAgICAgICAvLyBhbmQgaGFzIG1vcmUgdGhhbiBvbmUgY29uc29uYW50LCBSYSBpcyBleGNsdWRlZCBmcm9tIGNhbmRpZGF0ZXMgZm9yXG4gICAgICAgIC8vIGJhc2UgY29uc29uYW50cy5cbiAgICAgICAgaWYgKGluZGljQ29uZmlnLnJlcGhQb3MgIT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUmFfVG9fQmVjb21lX1JlcGggJiYgZmVhdHVyZXMucnBoZiAmJiBzdGFydCArIDMgPD0gZW5kICYmIChpbmRpY0NvbmZpZy5yZXBoTW9kZSA9PT0gXCJJbXBsaWNpdFwiICYmICEkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNKb2luZXIoZ2x5cGhzW3N0YXJ0ICsgMl0pIHx8IGluZGljQ29uZmlnLnJlcGhNb2RlID09PSBcIkV4cGxpY2l0XCIgJiYgZ2x5cGhzW3N0YXJ0ICsgMl0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5aV0opKSB7XG4gICAgICAgICAgICAvLyBTZWUgaWYgaXQgbWF0Y2hlcyB0aGUgJ3JwaGYnIGZlYXR1cmUuXG4gICAgICAgICAgICBsZXQgZyA9IFtcbiAgICAgICAgICAgICAgICBnbHlwaHNbc3RhcnRdLmNvcHkoKSxcbiAgICAgICAgICAgICAgICBnbHlwaHNbc3RhcnQgKyAxXS5jb3B5KCksXG4gICAgICAgICAgICAgICAgZ2x5cGhzW3N0YXJ0ICsgMl0uY29weSgpXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaWYgKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciR3b3VsZFN1YnN0aXR1dGUoZy5zbGljZSgwLCAyKSwgXCJycGhmXCIpIHx8IGluZGljQ29uZmlnLnJlcGhNb2RlID09PSBcIkV4cGxpY2l0XCIgJiYgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHdvdWxkU3Vic3RpdHV0ZShnLCBcInJwaGZcIikpIHtcbiAgICAgICAgICAgICAgICBsaW1pdCArPSAyO1xuICAgICAgICAgICAgICAgIHdoaWxlKGxpbWl0IDwgZW5kICYmICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0pvaW5lcihnbHlwaHNbbGltaXRdKSlsaW1pdCsrO1xuICAgICAgICAgICAgICAgIGJhc2UgPSBzdGFydDtcbiAgICAgICAgICAgICAgICBoYXNSZXBoID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpbmRpY0NvbmZpZy5yZXBoTW9kZSA9PT0gXCJMb2dfUmVwaGFcIiAmJiBnbHlwaHNbc3RhcnRdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuUmVwaGEpIHtcbiAgICAgICAgICAgIGxpbWl0Kys7XG4gICAgICAgICAgICB3aGlsZShsaW1pdCA8IGVuZCAmJiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNKb2luZXIoZ2x5cGhzW2xpbWl0XSkpbGltaXQrKztcbiAgICAgICAgICAgIGJhc2UgPSBzdGFydDtcbiAgICAgICAgICAgIGhhc1JlcGggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaChpbmRpY0NvbmZpZy5iYXNlUG9zKXtcbiAgICAgICAgICAgIGNhc2UgXCJMYXN0XCI6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAvLyBzdGFydGluZyBmcm9tIHRoZSBlbmQgb2YgdGhlIHN5bGxhYmxlLCBtb3ZlIGJhY2t3YXJkc1xuICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IGVuZDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlZW5CZWxvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5mbyA9IGdseXBoc1stLWldLnNoYXBlckluZm87XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1bnRpbCBhIGNvbnNvbmFudCBpcyBmb3VuZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0NvbnNvbmFudChnbHlwaHNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCBkb2VzIG5vdCBoYXZlIGEgYmVsb3ctYmFzZSBvciBwb3N0LWJhc2UgZm9ybVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChwb3N0LWJhc2UgZm9ybXMgaGF2ZSB0byBmb2xsb3cgYmVsb3ctYmFzZSBmb3JtcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8ucG9zaXRpb24gIT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmVsb3dfQyAmJiAoaW5mby5wb3NpdGlvbiAhPT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5Qb3N0X0MgfHwgc2VlbkJlbG93KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9yIHRoYXQgaXMgbm90IGEgcHJlLWJhc2UgcmVvcmRlcmluZyBSYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElNUExFTUVOVEFUSU9OIE5PVEVTOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3VyIHByZS1iYXNlIHJlb3JkZXJpbmcgUmEncyBhcmUgbWFya2VkIFBPU19QT1NUX0MsIHNvIHdpbGwgYmUgc2tpcHBlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ5IHRoZSBsb2dpYyBhYm92ZSBhbHJlYWR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3IgYXJyaXZlIGF0IHRoZSBmaXJzdCBjb25zb25hbnQuIFRoZSBjb25zb25hbnQgc3RvcHBlZCBhdCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmUgdGhlIGJhc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8ucG9zaXRpb24gPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmVsb3dfQykgc2VlbkJlbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnQgPCBpICYmIGluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuWldKICYmIGdseXBoc1tpIC0gMV0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5IKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfXdoaWxlIChpID4gbGltaXQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiRmlyc3RcIjpcbiAgICAgICAgICAgICAgICAvLyBUaGUgZmlyc3QgY29uc29uYW50IGlzIGFsd2F5cyB0aGUgYmFzZS5cbiAgICAgICAgICAgICAgICBiYXNlID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgLy8gTWFyayBhbGwgc3Vic2VxdWVudCBjb25zb25hbnRzIGFzIGJlbG93LlxuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IGJhc2UgKyAxOyBpIDwgZW5kOyBpKyspaWYgKCQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0NvbnNvbmFudChnbHlwaHNbaV0pKSBnbHlwaHNbaV0uc2hhcGVySW5mby5wb3NpdGlvbiA9ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmVsb3dfQztcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgc3lsbGFibGUgc3RhcnRzIHdpdGggUmEgKyBIYWxhbnQgKGluIGEgc2NyaXB0IHRoYXQgaGFzIFJlcGgpXG4gICAgICAgIC8vIGFuZCBoYXMgbW9yZSB0aGFuIG9uZSBjb25zb25hbnQsIFJhIGlzIGV4Y2x1ZGVkIGZyb20gY2FuZGlkYXRlcyBmb3JcbiAgICAgICAgLy8gYmFzZSBjb25zb25hbnRzLlxuICAgICAgICAvL1xuICAgICAgICAvLyAgT25seSBkbyB0aGlzIGZvciB1bmZvcmNlZCBSZXBoLiAoaWUuIG5vdCBmb3IgUmEsSCxaV0opXG4gICAgICAgIGlmIChoYXNSZXBoICYmIGJhc2UgPT09IHN0YXJ0ICYmIGxpbWl0IC0gYmFzZSA8PSAyKSBoYXNSZXBoID0gZmFsc2U7XG4gICAgICAgIC8vIDIuIERlY29tcG9zZSBhbmQgcmVvcmRlciBNYXRyYXM6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEVhY2ggbWF0cmEgYW5kIGFueSBzeWxsYWJsZSBtb2RpZmllciBzaWduIGluIHRoZSBjbHVzdGVyIGFyZSBtb3ZlZCB0byB0aGVcbiAgICAgICAgLy8gYXBwcm9wcmlhdGUgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIGNvbnNvbmFudChzKSBpbiB0aGUgY2x1c3Rlci4gVGhlXG4gICAgICAgIC8vIHNoYXBpbmcgZW5naW5lIGRlY29tcG9zZXMgdHdvLSBvciB0aHJlZS1wYXJ0IG1hdHJhcyBpbnRvIHRoZWlyIGNvbnN0aXR1ZW50XG4gICAgICAgIC8vIHBhcnRzIGJlZm9yZSBhbnkgcmVwb3NpdGlvbmluZy4gTWF0cmEgY2hhcmFjdGVycyBhcmUgY2xhc3NpZmllZCBieSB3aGljaFxuICAgICAgICAvLyBjb25zb25hbnQgaW4gYSBjb25qdW5jdCB0aGV5IGhhdmUgYWZmaW5pdHkgZm9yIGFuZCBhcmUgcmVvcmRlcmVkIHRvIHRoZVxuICAgICAgICAvLyBmb2xsb3dpbmcgcG9zaXRpb25zOlxuICAgICAgICAvL1xuICAgICAgICAvLyAgIG8gQmVmb3JlIGZpcnN0IGhhbGYgZm9ybSBpbiB0aGUgc3lsbGFibGVcbiAgICAgICAgLy8gICBvIEFmdGVyIHN1YmpvaW5lZCBjb25zb25hbnRzXG4gICAgICAgIC8vICAgbyBBZnRlciBwb3N0LWZvcm0gY29uc29uYW50XG4gICAgICAgIC8vICAgbyBBZnRlciBtYWluIGNvbnNvbmFudCAoZm9yIGFib3ZlIG1hcmtzKVxuICAgICAgICAvL1xuICAgICAgICAvLyBJTVBMRU1FTlRBVElPTiBOT1RFUzpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIG5vcm1hbGl6ZSgpIHJvdXRpbmUgaGFzIGFscmVhZHkgZGVjb21wb3NlZCBtYXRyYXMgZm9yIHVzLCBzbyB3ZSBkb24ndFxuICAgICAgICAvLyBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoYXQuXG4gICAgICAgIC8vIDMuICBSZW9yZGVyIG1hcmtzIHRvIGNhbm9uaWNhbCBvcmRlcjpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gQWRqYWNlbnQgbnVrdGEgYW5kIGhhbGFudCBvciBudWt0YSBhbmQgdmVkaWMgc2lnbiBhcmUgYWx3YXlzIHJlcG9zaXRpb25lZFxuICAgICAgICAvLyBpZiBuZWNlc3NhcnksIHNvIHRoYXQgdGhlIG51a3RhIGlzIGZpcnN0LlxuICAgICAgICAvL1xuICAgICAgICAvLyBJTVBMRU1FTlRBVElPTiBOT1RFUzpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBkbyB0aGlzOiB0aGUgbm9ybWFsaXplKCkgcm91dGluZSBhbHJlYWR5IGRpZCB0aGlzIGZvciB1cy5cbiAgICAgICAgLy8gUmVvcmRlciBjaGFyYWN0ZXJzXG4gICAgICAgIGZvcihsZXQgaTEgPSBzdGFydDsgaTEgPCBiYXNlOyBpMSsrKXtcbiAgICAgICAgICAgIGxldCBpbmZvID0gZ2x5cGhzW2kxXS5zaGFwZXJJbmZvO1xuICAgICAgICAgICAgaW5mby5wb3NpdGlvbiA9IE1hdGgubWluKCgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUHJlX0MsIGluZm8ucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYXNlIDwgZW5kKSBnbHlwaHNbYmFzZV0uc2hhcGVySW5mby5wb3NpdGlvbiA9ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmFzZV9DO1xuICAgICAgICAvLyBNYXJrIGZpbmFsIGNvbnNvbmFudHMuICBBIGZpbmFsIGNvbnNvbmFudCBpcyBvbmUgYXBwZWFyaW5nIGFmdGVyIGEgbWF0cmEsXG4gICAgICAgIC8vIGxpa2UgaW4gS2htZXIuXG4gICAgICAgIGZvcihsZXQgaTIgPSBiYXNlICsgMTsgaTIgPCBlbmQ7IGkyKyspaWYgKGdseXBoc1tpMl0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5NKSB7XG4gICAgICAgICAgICBmb3IobGV0IGogPSBpMiArIDE7IGogPCBlbmQ7IGorKylpZiAoJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzQ29uc29uYW50KGdseXBoc1tqXSkpIHtcbiAgICAgICAgICAgICAgICBnbHlwaHNbal0uc2hhcGVySW5mby5wb3NpdGlvbiA9ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuRmluYWxfQztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsZSBiZWdpbm5pbmcgUmFcbiAgICAgICAgaWYgKGhhc1JlcGgpIGdseXBoc1tzdGFydF0uc2hhcGVySW5mby5wb3NpdGlvbiA9ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUmFfVG9fQmVjb21lX1JlcGg7XG4gICAgICAgIC8vIEZvciBvbGQtc3R5bGUgSW5kaWMgc2NyaXB0IHRhZ3MsIG1vdmUgdGhlIGZpcnN0IHBvc3QtYmFzZSBIYWxhbnQgYWZ0ZXJcbiAgICAgICAgLy8gbGFzdCBjb25zb25hbnQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFJlcG9ydHMgc3VnZ2VzdCB0aGF0IGluIHNvbWUgc2NyaXB0cyBVbmlzY3JpYmUgZG9lcyB0aGlzIG9ubHkgaWYgdGhlcmVcbiAgICAgICAgLy8gaXMgKm5vdCogYSBIYWxhbnQgYWZ0ZXIgbGFzdCBjb25zb25hbnQgYWxyZWFkeSAoZWcuIEthbm5hZGEpLCB3aGlsZSBpdFxuICAgICAgICAvLyBkb2VzIGl0IHVuY29uZGl0aW9uYWxseSBpbiBvdGhlciBzY3JpcHRzIChlZy4gTWFsYXlhbGFtKS4gIFdlIGRvbid0XG4gICAgICAgIC8vIGN1cnJlbnRseSBrbm93IGFib3V0IG90aGVyIHNjcmlwdHMsIHNvIHdlIHNpbmdsZSBvdXQgTWFsYXlhbGFtIGZvciBub3cuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEthbm5hZGEgdGVzdCBjYXNlOlxuICAgICAgICAvLyBVKzBDOUEsVSswQ0NELFUrMEM5QSxVKzBDQ0RcbiAgICAgICAgLy8gV2l0aCBzb21lIHZlcnNpb25zIG9mIExvaGl0IEthbm5hZGEuXG4gICAgICAgIC8vIGh0dHBzOi8vYnVncy5mcmVlZGVza3RvcC5vcmcvc2hvd19idWcuY2dpP2lkPTU5MTE4XG4gICAgICAgIC8vXG4gICAgICAgIC8vIE1hbGF5YWxhbSB0ZXN0IGNhc2U6XG4gICAgICAgIC8vIFUrMEQzOCxVKzBENEQsVSswRDMxLFUrMEQ0RCxVKzBEMzEsVSswRDREXG4gICAgICAgIC8vIFdpdGggbG9oaXQtdHRmLTIwMTIxMTIyL0xvaGl0LU1hbGF5YWxhbS50dGZcbiAgICAgICAgaWYgKHBsYW4uaXNPbGRTcGVjKSB7XG4gICAgICAgICAgICBsZXQgZGlzYWxsb3dEb3VibGVIYWxhbnRzID0gcGxhbi51bmljb2RlU2NyaXB0ICE9PSBcIk1hbGF5YWxhbVwiO1xuICAgICAgICAgICAgZm9yKGxldCBpID0gYmFzZSArIDE7IGkgPCBlbmQ7IGkrKylpZiAoZ2x5cGhzW2ldLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuSCkge1xuICAgICAgICAgICAgICAgIGxldCBqO1xuICAgICAgICAgICAgICAgIGZvcihqID0gZW5kIC0gMTsgaiA+IGk7IGotLSl7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNDb25zb25hbnQoZ2x5cGhzW2pdKSB8fCBkaXNhbGxvd0RvdWJsZUhhbGFudHMgJiYgZ2x5cGhzW2pdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuSCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChnbHlwaHNbal0uc2hhcGVySW5mby5jYXRlZ29yeSAhPT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5IICYmIGogPiBpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgSGFsYW50IHRvIGFmdGVyIGxhc3QgY29uc29uYW50LlxuICAgICAgICAgICAgICAgICAgICBsZXQgdCA9IGdseXBoc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhzLnNwbGljZShpLCAwLCAuLi5nbHlwaHMuc3BsaWNlKGkgKyAxLCBqIC0gaSkpO1xuICAgICAgICAgICAgICAgICAgICBnbHlwaHNbal0gPSB0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBdHRhY2ggbWlzYyBtYXJrcyB0byBwcmV2aW91cyBjaGFyIHRvIG1vdmUgd2l0aCB0aGVtLlxuICAgICAgICBsZXQgbGFzdFBvcyA9ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuU3RhcnQ7XG4gICAgICAgIGZvcihsZXQgaTMgPSBzdGFydDsgaTMgPCBlbmQ7IGkzKyspe1xuICAgICAgICAgICAgbGV0IGluZm8gPSBnbHlwaHNbaTNdLnNoYXBlckluZm87XG4gICAgICAgICAgICBpZiAoaW5mby5jYXRlZ29yeSAmICgoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGJiY2Q5Mjg3NjczMzhlMGQpIHwgKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5OIHwgKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5SUyB8ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuQ00gfCAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGNhOTU5OWIyYTMwMGFmYykgJiBpbmZvLmNhdGVnb3J5KSkge1xuICAgICAgICAgICAgICAgIGluZm8ucG9zaXRpb24gPSBsYXN0UG9zO1xuICAgICAgICAgICAgICAgIGlmIChpbmZvLmNhdGVnb3J5ID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLkggJiYgaW5mby5wb3NpdGlvbiA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5QcmVfTSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBVbmlzY3JpYmUgZG9lc24ndCBtb3ZlIHRoZSBIYWxhbnQgd2l0aCBMZWZ0IE1hdHJhLlxuICAgICAgICAgICAgICAgICAgICAvLyBURVNUOiBVKzA5MkIsVSswOTNGLFUrMDk0REVcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZm9sbG93LiAgVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHRoZSBTaW5oYWxhXG4gICAgICAgICAgICAgICAgICAgIC8vIFUrMEREQSBzcGxpdCBtYXRyYSBzaW5jZSBpdCBkZWNvbXBvc2VzIHRvIFUrMEREOSxVKzBEQ0FcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlcmUgVSswREQ5IGlzIGEgbGVmdCBtYXRyYSBhbmQgVSswRENBIGlzIHRoZSB2aXJhbWEuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gbW92ZSB0aGUgdmlyYW1hIHdpdGggdGhlIGxlZnQgbWF0cmEuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRFU1Q6IFUrMEQ5QSxVKzBEREFcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBqID0gaTM7IGogPiBzdGFydDsgai0tKWlmIChnbHlwaHNbaiAtIDFdLnNoYXBlckluZm8ucG9zaXRpb24gIT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUHJlX00pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm8ucG9zaXRpb24gPSBnbHlwaHNbaiAtIDFdLnNoYXBlckluZm8ucG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5mby5wb3NpdGlvbiAhPT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5TTVZEKSBsYXN0UG9zID0gaW5mby5wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICAvLyBGb3IgcG9zdC1iYXNlIGNvbnNvbmFudHMgbGV0IHRoZW0gb3duIGFueXRoaW5nIGJlZm9yZSB0aGVtXG4gICAgICAgIC8vIHNpbmNlIHRoZSBsYXN0IGNvbnNvbmFudCBvciBtYXRyYS5cbiAgICAgICAgbGV0IGxhc3QgPSBiYXNlO1xuICAgICAgICBmb3IobGV0IGk0ID0gYmFzZSArIDE7IGk0IDwgZW5kOyBpNCsrKXtcbiAgICAgICAgICAgIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNDb25zb25hbnQoZ2x5cGhzW2k0XSkpIHtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGogPSBsYXN0ICsgMTsgaiA8IGk0OyBqKyspaWYgKGdseXBoc1tqXS5zaGFwZXJJbmZvLnBvc2l0aW9uIDwgKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5TTVZEKSBnbHlwaHNbal0uc2hhcGVySW5mby5wb3NpdGlvbiA9IGdseXBoc1tpNF0uc2hhcGVySW5mby5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICBsYXN0ID0gaTQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdseXBoc1tpNF0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5NKSBsYXN0ID0gaTQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFyciA9IGdseXBocy5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgICAgYXJyLnNvcnQoKGEsIGIpPT5hLnNoYXBlckluZm8ucG9zaXRpb24gLSBiLnNoYXBlckluZm8ucG9zaXRpb24pO1xuICAgICAgICBnbHlwaHMuc3BsaWNlKHN0YXJ0LCBhcnIubGVuZ3RoLCAuLi5hcnIpO1xuICAgICAgICAvLyBGaW5kIGJhc2UgYWdhaW5cbiAgICAgICAgZm9yKGxldCBpNSA9IHN0YXJ0OyBpNSA8IGVuZDsgaTUrKylpZiAoZ2x5cGhzW2k1XS5zaGFwZXJJbmZvLnBvc2l0aW9uID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkJhc2VfQykge1xuICAgICAgICAgICAgYmFzZSA9IGk1O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0dXAgZmVhdHVyZXMgbm93XG4gICAgICAgIC8vIFJlcGhcbiAgICAgICAgZm9yKGxldCBpNiA9IHN0YXJ0OyBpNiA8IGVuZCAmJiBnbHlwaHNbaTZdLnNoYXBlckluZm8ucG9zaXRpb24gPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUmFfVG9fQmVjb21lX1JlcGg7IGk2KyspZ2x5cGhzW2k2XS5mZWF0dXJlcy5ycGhmID0gdHJ1ZTtcbiAgICAgICAgLy8gUHJlLWJhc2VcbiAgICAgICAgbGV0IGJsd2YgPSAhcGxhbi5pc09sZFNwZWMgJiYgaW5kaWNDb25maWcuYmx3Zk1vZGUgPT09IFwiUHJlX0FuZF9Qb3N0XCI7XG4gICAgICAgIGZvcihsZXQgaTcgPSBzdGFydDsgaTcgPCBiYXNlOyBpNysrKXtcbiAgICAgICAgICAgIGdseXBoc1tpN10uZmVhdHVyZXMuaGFsZiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoYmx3ZikgZ2x5cGhzW2k3XS5mZWF0dXJlcy5ibHdmID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQb3N0LWJhc2VcbiAgICAgICAgZm9yKGxldCBpOCA9IGJhc2UgKyAxOyBpOCA8IGVuZDsgaTgrKyl7XG4gICAgICAgICAgICBnbHlwaHNbaThdLmZlYXR1cmVzLmFidmYgPSB0cnVlO1xuICAgICAgICAgICAgZ2x5cGhzW2k4XS5mZWF0dXJlcy5wc3RmID0gdHJ1ZTtcbiAgICAgICAgICAgIGdseXBoc1tpOF0uZmVhdHVyZXMuYmx3ZiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBsYW4uaXNPbGRTcGVjICYmIHBsYW4udW5pY29kZVNjcmlwdCA9PT0gXCJEZXZhbmFnYXJpXCIpIHtcbiAgICAgICAgICAgIC8vIE9sZC1zcGVjIGV5ZS1sYXNoIFJhIG5lZWRzIHNwZWNpYWwgaGFuZGxpbmcuICBGcm9tIHRoZVxuICAgICAgICAgICAgLy8gc3BlYzpcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBcIlRoZSBmZWF0dXJlICdiZWxvdy1iYXNlIGZvcm0nIGlzIGFwcGxpZWQgdG8gY29uc29uYW50c1xuICAgICAgICAgICAgLy8gaGF2aW5nIGJlbG93LWJhc2UgZm9ybXMgYW5kIGZvbGxvd2luZyB0aGUgYmFzZSBjb25zb25hbnQuXG4gICAgICAgICAgICAvLyBUaGUgZXhjZXB0aW9uIGlzIHZhdHR1LCB3aGljaCBtYXkgYXBwZWFyIGJlbG93IGhhbGYgZm9ybXNcbiAgICAgICAgICAgIC8vIGFzIHdlbGwgYXMgYmVsb3cgdGhlIGJhc2UgZ2x5cGguIFRoZSBmZWF0dXJlICdiZWxvdy1iYXNlXG4gICAgICAgICAgICAvLyBmb3JtJyB3aWxsIGJlIGFwcGxpZWQgdG8gYWxsIHN1Y2ggb2NjdXJyZW5jZXMgb2YgUmEgYXMgd2VsbC5cIlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFRlc3QgY2FzZTogVSswOTI0LFUrMDk0RCxVKzA5MzAsVSswOTRkLFUrMDkxNVxuICAgICAgICAgICAgLy8gd2l0aCBTYW5za3JpdCAyMDAzIGZvbnQuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gSG93ZXZlciwgbm90ZSB0aGF0IFJhLEhhbGFudCxaV0ogaXMgdGhlIGNvcnJlY3Qgd2F5IHRvXG4gICAgICAgICAgICAvLyByZXF1ZXN0IGV5ZWxhc2ggZm9ybSBvZiBSYSwgc28gd2Ugd291bGRibid0IGluaGliaXQgaXRcbiAgICAgICAgICAgIC8vIGluIHRoYXQgc2VxdWVuY2UuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gVGVzdCBjYXNlOiBVKzA5MjQsVSswOTRELFUrMDkzMCxVKzA5NGQsVSsyMDBELFUrMDkxNVxuICAgICAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgKyAxIDwgYmFzZTsgaSsrKWlmIChnbHlwaHNbaV0uc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5SYSAmJiBnbHlwaHNbaSArIDFdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuSCAmJiAoaSArIDEgPT09IGJhc2UgfHwgZ2x5cGhzW2kgKyAyXS5zaGFwZXJJbmZvLmNhdGVnb3J5ID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLlpXSikpIHtcbiAgICAgICAgICAgICAgICBnbHlwaHNbaV0uZmVhdHVyZXMuYmx3ZiA9IHRydWU7XG4gICAgICAgICAgICAgICAgZ2x5cGhzW2kgKyAxXS5mZWF0dXJlcy5ibHdmID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgcHJlZkxlbiA9IDI7XG4gICAgICAgIGlmIChmZWF0dXJlcy5wcmVmICYmIGJhc2UgKyBwcmVmTGVuIDwgZW5kKSAvLyBGaW5kIGEgSGFsYW50LFJhIHNlcXVlbmNlIGFuZCBtYXJrIGl0IGZvciBwcmUtYmFzZSByZW9yZGVyaW5nIHByb2Nlc3NpbmcuXG4gICAgICAgIGZvcihsZXQgaTkgPSBiYXNlICsgMTsgaTkgKyBwcmVmTGVuIC0gMSA8IGVuZDsgaTkrKyl7XG4gICAgICAgICAgICBsZXQgZyA9IFtcbiAgICAgICAgICAgICAgICBnbHlwaHNbaTldLmNvcHkoKSxcbiAgICAgICAgICAgICAgICBnbHlwaHNbaTkgKyAxXS5jb3B5KClcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHdvdWxkU3Vic3RpdHV0ZShnLCBcInByZWZcIikpIHtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgcHJlZkxlbjsgaisrKWdseXBoc1tpOSsrXS5mZWF0dXJlcy5wcmVmID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSBzdWJzZXF1ZW50IHN0dWZmIHdpdGggJ2NmYXInLiAgVXNlZCBpbiBLaG1lci5cbiAgICAgICAgICAgICAgICAvLyBSZWFkIHRoZSBmZWF0dXJlIHNwZWMuXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBhbGxvd3MgZGlzdGluZ3Vpc2hpbmcgdGhlIGZvbGxvd2luZyBjYXNlcyB3aXRoIE1TIEtobWVyIGZvbnRzOlxuICAgICAgICAgICAgICAgIC8vIFUrMTc4NCxVKzE3RDIsVSsxNzlBLFUrMTdEMixVKzE3ODJcbiAgICAgICAgICAgICAgICAvLyBVKzE3ODQsVSsxN0QyLFUrMTc4MixVKzE3RDIsVSsxNzlBXG4gICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVzLmNmYXIpIGZvcig7IGk5IDwgZW5kOyBpOSsrKWdseXBoc1tpOV0uZmVhdHVyZXMuY2ZhciA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXBwbHkgWldKL1pXTkogZWZmZWN0c1xuICAgICAgICBmb3IobGV0IGkxMCA9IHN0YXJ0ICsgMTsgaTEwIDwgZW5kOyBpMTArKylpZiAoJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzSm9pbmVyKGdseXBoc1tpMTBdKSkge1xuICAgICAgICAgICAgbGV0IG5vbkpvaW5lciA9IGdseXBoc1tpMTBdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuWldOSjtcbiAgICAgICAgICAgIGxldCBqID0gaTEwO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgICAgICAvLyBaV0ovWldOSiBzaG91bGQgZGlzYWJsZSBDSkNULiAgVGhleSBkbyB0aGF0IGJ5IHNpbXBseVxuICAgICAgICAgICAgICAgIC8vIGJlaW5nIHRoZXJlLCBzaW5jZSB3ZSBkb24ndCBza2lwIHRoZW0gZm9yIHRoZSBDSkNUXG4gICAgICAgICAgICAgICAgLy8gZmVhdHVyZSAoaWUuIEZfTUFOVUFMX1pXSilcbiAgICAgICAgICAgICAgICAvLyBBIFpXTkogZGlzYWJsZXMgSEFMRi5cbiAgICAgICAgICAgICAgICBpZiAobm9uSm9pbmVyKSBkZWxldGUgZ2x5cGhzW2pdLmZlYXR1cmVzLmhhbGY7XG4gICAgICAgICAgICB9d2hpbGUgKGogPiBzdGFydCAmJiAhJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzQ29uc29uYW50KGdseXBoc1tqXSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGZpbmFsUmVvcmRlcmluZyhmb250LCBnbHlwaHMsIHBsYW4pIHtcbiAgICBsZXQgaW5kaWNDb25maWcgPSBwbGFuLmluZGljQ29uZmlnO1xuICAgIGxldCBmZWF0dXJlcyA9IGZvbnQuX2xheW91dEVuZ2luZS5lbmdpbmUuR1NVQlByb2Nlc3Nvci5mZWF0dXJlcztcbiAgICBmb3IobGV0IHN0YXJ0ID0gMCwgZW5kID0gJDc4MjZmOTBmNmYwY2VjYzkkdmFyJG5leHRTeWxsYWJsZShnbHlwaHMsIDApOyBzdGFydCA8IGdseXBocy5sZW5ndGg7IHN0YXJ0ID0gZW5kLCBlbmQgPSAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkbmV4dFN5bGxhYmxlKGdseXBocywgc3RhcnQpKXtcbiAgICAgICAgLy8gNC4gRmluYWwgcmVvcmRlcmluZzpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gQWZ0ZXIgdGhlIGxvY2FsaXplZCBmb3JtcyBhbmQgYmFzaWMgc2hhcGluZyBmb3JtcyBHU1VCIGZlYXR1cmVzIGhhdmUgYmVlblxuICAgICAgICAvLyBhcHBsaWVkIChzZWUgYmVsb3cpLCB0aGUgc2hhcGluZyBlbmdpbmUgcGVyZm9ybXMgc29tZSBmaW5hbCBnbHlwaFxuICAgICAgICAvLyByZW9yZGVyaW5nIGJlZm9yZSBhcHBseWluZyBhbGwgdGhlIHJlbWFpbmluZyBmb250IGZlYXR1cmVzIHRvIHRoZSBlbnRpcmVcbiAgICAgICAgLy8gY2x1c3Rlci5cbiAgICAgICAgbGV0IHRyeVByZWYgPSAhIWZlYXR1cmVzLnByZWY7XG4gICAgICAgIC8vIEZpbmQgYmFzZSBhZ2FpblxuICAgICAgICBsZXQgYmFzZSA9IHN0YXJ0O1xuICAgICAgICBmb3IoOyBiYXNlIDwgZW5kOyBiYXNlKyspaWYgKGdseXBoc1tiYXNlXS5zaGFwZXJJbmZvLnBvc2l0aW9uID49ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmFzZV9DKSB7XG4gICAgICAgICAgICBpZiAodHJ5UHJlZiAmJiBiYXNlICsgMSA8IGVuZCkge1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IGJhc2UgKyAxOyBpIDwgZW5kOyBpKyspaWYgKGdseXBoc1tpXS5mZWF0dXJlcy5wcmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGdseXBoc1tpXS5zdWJzdGl0dXRlZCAmJiBnbHlwaHNbaV0uaXNMaWdhdGVkICYmICFnbHlwaHNbaV0uaXNNdWx0aXBsaWVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2ssIHRoaXMgd2FzIGEgJ3ByZWYnIGNhbmRpZGF0ZSBidXQgZGlkbid0IGZvcm0gYW55LlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFzZSBpcyBhcm91bmQgaGVyZS4uLlxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZSA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShiYXNlIDwgZW5kICYmICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0hhbGFudE9yQ29lbmcoZ2x5cGhzW2Jhc2VdKSliYXNlKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbHlwaHNbYmFzZV0uc2hhcGVySW5mby5wb3NpdGlvbiA9ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQkFTRV9DO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5UHJlZiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZvciBNYWxheWFsYW0sIHNraXAgb3ZlciB1bmZvcm1lZCBiZWxvdy0gKGJ1dCBOT1QgcG9zdC0pIGZvcm1zLlxuICAgICAgICAgICAgaWYgKHBsYW4udW5pY29kZVNjcmlwdCA9PT0gXCJNYWxheWFsYW1cIikgZm9yKGxldCBpID0gYmFzZSArIDE7IGkgPCBlbmQ7IGkrKyl7XG4gICAgICAgICAgICAgICAgd2hpbGUoaSA8IGVuZCAmJiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNKb2luZXIoZ2x5cGhzW2ldKSlpKys7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGVuZCB8fCAhJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzSGFsYW50T3JDb2VuZyhnbHlwaHNbaV0pKSBicmVhaztcbiAgICAgICAgICAgICAgICBpKys7IC8vIFNraXAgaGFsYW50LlxuICAgICAgICAgICAgICAgIHdoaWxlKGkgPCBlbmQgJiYgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzSm9pbmVyKGdseXBoc1tpXSkpaSsrO1xuICAgICAgICAgICAgICAgIGlmIChpIDwgZW5kICYmICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0NvbnNvbmFudChnbHlwaHNbaV0pICYmIGdseXBoc1tpXS5zaGFwZXJJbmZvLnBvc2l0aW9uID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkJlbG93X0MpIHtcbiAgICAgICAgICAgICAgICAgICAgYmFzZSA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGdseXBoc1tiYXNlXS5zaGFwZXJJbmZvLnBvc2l0aW9uID0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5CYXNlX0M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXJ0IDwgYmFzZSAmJiBnbHlwaHNbYmFzZV0uc2hhcGVySW5mby5wb3NpdGlvbiA+ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuQmFzZV9DKSBiYXNlLS07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZSA9PT0gZW5kICYmIHN0YXJ0IDwgYmFzZSAmJiBnbHlwaHNbYmFzZSAtIDFdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuWldKKSBiYXNlLS07XG4gICAgICAgIGlmIChiYXNlIDwgZW5kKSB3aGlsZShzdGFydCA8IGJhc2UgJiYgZ2x5cGhzW2Jhc2VdLnNoYXBlckluZm8uY2F0ZWdvcnkgJiAoKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5OIHwgKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRjYTk1OTliMmEzMDBhZmMpKSliYXNlLS07XG4gICAgICAgIC8vIG8gUmVvcmRlciBtYXRyYXM6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIElmIGEgcHJlLWJhc2UgbWF0cmEgY2hhcmFjdGVyIGhhZCBiZWVuIHJlb3JkZXJlZCBiZWZvcmUgYXBwbHlpbmcgYmFzaWNcbiAgICAgICAgLy8gZmVhdHVyZXMsIHRoZSBnbHlwaCBjYW4gYmUgbW92ZWQgY2xvc2VyIHRvIHRoZSBtYWluIGNvbnNvbmFudCBiYXNlZCBvblxuICAgICAgICAvLyB3aGV0aGVyIGhhbGYtZm9ybXMgaGFkIGJlZW4gZm9ybWVkLiBBY3R1YWwgcG9zaXRpb24gZm9yIHRoZSBtYXRyYSBpc1xuICAgICAgICAvLyBkZWZpbmVkIGFzIOKAnGFmdGVyIGxhc3Qgc3RhbmRhbG9uZSBoYWxhbnQgZ2x5cGgsIGFmdGVyIGluaXRpYWwgbWF0cmFcbiAgICAgICAgLy8gcG9zaXRpb24gYW5kIGJlZm9yZSB0aGUgbWFpbiBjb25zb25hbnTigJ0uIElmIFpXSiBvciBaV05KIGZvbGxvdyB0aGlzXG4gICAgICAgIC8vIGhhbGFudCwgcG9zaXRpb24gaXMgbW92ZWQgYWZ0ZXIgaXQuXG4gICAgICAgIC8vXG4gICAgICAgIGlmIChzdGFydCArIDEgPCBlbmQgJiYgc3RhcnQgPCBiYXNlKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBsb3N0IHRyYWNrIG9mIGJhc2UsIGFsYXMsIHBvc2l0aW9uIGJlZm9yZSBsYXN0IHRoaW5neS5cbiAgICAgICAgICAgIGxldCBuZXdQb3MgPSBiYXNlID09PSBlbmQgPyBiYXNlIC0gMiA6IGJhc2UgLSAxO1xuICAgICAgICAgICAgLy8gTWFsYXlhbGFtIC8gVGFtaWwgZG8gbm90IGhhdmUgXCJoYWxmXCIgZm9ybXMgb3IgZXhwbGljaXQgdmlyYW1hIGZvcm1zLlxuICAgICAgICAgICAgLy8gVGhlIGdseXBocyBmb3JtZWQgYnkgJ2hhbGYnIGFyZSBDaGlsbHVzIG9yIGxpZ2F0ZWQgZXhwbGljaXQgdmlyYW1hcy5cbiAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gcG9zaXRpb24gbWF0cmEgYWZ0ZXIgdGhlbS5cbiAgICAgICAgICAgIGlmIChwbGFuLnVuaWNvZGVTY3JpcHQgIT09IFwiTWFsYXlhbGFtXCIgJiYgcGxhbi51bmljb2RlU2NyaXB0ICE9PSBcIlRhbWlsXCIpIHtcbiAgICAgICAgICAgICAgICB3aGlsZShuZXdQb3MgPiBzdGFydCAmJiAhKGdseXBoc1tuZXdQb3NdLnNoYXBlckluZm8uY2F0ZWdvcnkgJiAoKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjKS5NIHwgKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRjYTk1OTliMmEzMDBhZmMpKSkpbmV3UG9zLS07XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZm91bmQgbm8gSGFsYW50IHdlIGFyZSBkb25lLlxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSBvbmx5IHByb2NlZWQgaWYgdGhlIEhhbGFudCBkb2VzXG4gICAgICAgICAgICAgICAgLy8gbm90IGJlbG9uZyB0byB0aGUgTWF0cmEgaXRzZWxmIVxuICAgICAgICAgICAgICAgIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNIYWxhbnRPckNvZW5nKGdseXBoc1tuZXdQb3NdKSAmJiBnbHlwaHNbbmV3UG9zXS5zaGFwZXJJbmZvLnBvc2l0aW9uICE9PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlByZV9NKSAvLyBJZiBaV0ogb3IgWldOSiBmb2xsb3cgdGhpcyBoYWxhbnQsIHBvc2l0aW9uIGlzIG1vdmVkIGFmdGVyIGl0LlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1BvcyArIDEgPCBlbmQgJiYgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzSm9pbmVyKGdseXBoc1tuZXdQb3MgKyAxXSkpIG5ld1BvcysrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBuZXdQb3MgPSBzdGFydDsgLy8gTm8gbW92ZS5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFydCA8IG5ld1BvcyAmJiBnbHlwaHNbbmV3UG9zXS5zaGFwZXJJbmZvLnBvc2l0aW9uICE9PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlByZV9NKSB7XG4gICAgICAgICAgICAgICAgLy8gTm93IGdvIHNlZSBpZiB0aGVyZSdzIGFjdHVhbGx5IGFueSBtYXRyYXMuLi5cbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSBuZXdQb3M7IGkgPiBzdGFydDsgaS0tKWlmIChnbHlwaHNbaSAtIDFdLnNoYXBlckluZm8ucG9zaXRpb24gPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkMWExZjYxYzljNGRkOWRmMCkuUHJlX00pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9sZFBvcyA9IGkgLSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkUG9zIDwgYmFzZSAmJiBiYXNlIDw9IG5ld1BvcykgYmFzZS0tO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdG1wID0gZ2x5cGhzW29sZFBvc107XG4gICAgICAgICAgICAgICAgICAgIGdseXBocy5zcGxpY2Uob2xkUG9zLCAwLCAuLi5nbHlwaHMuc3BsaWNlKG9sZFBvcyArIDEsIG5ld1BvcyAtIG9sZFBvcykpO1xuICAgICAgICAgICAgICAgICAgICBnbHlwaHNbbmV3UG9zXSA9IHRtcDtcbiAgICAgICAgICAgICAgICAgICAgbmV3UG9zLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG8gUmVvcmRlciByZXBoOlxuICAgICAgICAvL1xuICAgICAgICAvLyBSZXBo4oCZcyBvcmlnaW5hbCBwb3NpdGlvbiBpcyBhbHdheXMgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3lsbGFibGUsXG4gICAgICAgIC8vIChpLmUuIGl0IGlzIG5vdCByZW9yZGVyZWQgYXQgdGhlIGNoYXJhY3RlciByZW9yZGVyaW5nIHN0YWdlKS4gSG93ZXZlcixcbiAgICAgICAgLy8gaXQgd2lsbCBiZSByZW9yZGVyZWQgYWNjb3JkaW5nIHRvIHRoZSBiYXNpYy1mb3JtcyBzaGFwaW5nIHJlc3VsdHMuXG4gICAgICAgIC8vIFBvc3NpYmxlIHBvc2l0aW9ucyBmb3IgcmVwaCwgZGVwZW5kaW5nIG9uIHRoZSBzY3JpcHQsIGFyZTsgYWZ0ZXIgbWFpbixcbiAgICAgICAgLy8gYmVmb3JlIHBvc3QtYmFzZSBjb25zb25hbnQgZm9ybXMsIGFuZCBhZnRlciBwb3N0LWJhc2UgY29uc29uYW50IGZvcm1zLlxuICAgICAgICAvLyBUd28gY2FzZXM6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIC0gSWYgcmVwaGEgaXMgZW5jb2RlZCBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgKFJhLEggb3IgUmEsSCxaV0opLCB0aGVuXG4gICAgICAgIC8vICAgd2Ugc2hvdWxkIG9ubHkgbW92ZSBpdCBpZiB0aGUgc2VxdWVuY2UgbGlnYXRlZCB0byB0aGUgcmVwaGEgZm9ybS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gLSBJZiByZXBoYSBpcyBlbmNvZGVkIHNlcGFyYXRlbHkgYW5kIGluIHRoZSBsb2dpY2FsIHBvc2l0aW9uLCB3ZSBzaG91bGQgb25seVxuICAgICAgICAvLyAgIG1vdmUgaXQgaWYgaXQgZGlkIE5PVCBsaWdhdGUuICBJZiBpdCBsaWdhdGVkLCBpdCdzIHByb2JhYmx5IHRoZSBmb250IHRyeWluZ1xuICAgICAgICAvLyAgIHRvIG1ha2UgaXQgd29yayB3aXRob3V0IHRoZSByZW9yZGVyaW5nLlxuICAgICAgICBpZiAoc3RhcnQgKyAxIDwgZW5kICYmIGdseXBoc1tzdGFydF0uc2hhcGVySW5mby5wb3NpdGlvbiA9PT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5SYV9Ub19CZWNvbWVfUmVwaCAmJiBnbHlwaHNbc3RhcnRdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuUmVwaGEgIT09IChnbHlwaHNbc3RhcnRdLmlzTGlnYXRlZCAmJiAhZ2x5cGhzW3N0YXJ0XS5pc011bHRpcGxpZWQpKSB7XG4gICAgICAgICAgICBsZXQgbmV3UmVwaFBvcztcbiAgICAgICAgICAgIGxldCByZXBoUG9zID0gaW5kaWNDb25maWcucmVwaFBvcztcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gMS4gSWYgcmVwaCBzaG91bGQgYmUgcG9zaXRpb25lZCBhZnRlciBwb3N0LWJhc2UgY29uc29uYW50IGZvcm1zLFxuICAgICAgICAgICAgLy8gICAgcHJvY2VlZCB0byBzdGVwIDUuXG4gICAgICAgICAgICBpZiAocmVwaFBvcyAhPT0gKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5BZnRlcl9Qb3N0KSB7XG4gICAgICAgICAgICAgICAgLy8gIDIuIElmIHRoZSByZXBoIHJlcG9zaXRpb25pbmcgY2xhc3MgaXMgbm90IGFmdGVyIHBvc3QtYmFzZTogdGFyZ2V0XG4gICAgICAgICAgICAgICAgLy8gICAgIHBvc2l0aW9uIGlzIGFmdGVyIHRoZSBmaXJzdCBleHBsaWNpdCBoYWxhbnQgZ2x5cGggYmV0d2VlbiB0aGVcbiAgICAgICAgICAgICAgICAvLyAgICAgZmlyc3QgcG9zdC1yZXBoIGNvbnNvbmFudCBhbmQgbGFzdCBtYWluIGNvbnNvbmFudC4gSWYgWldKIG9yIFpXTkpcbiAgICAgICAgICAgICAgICAvLyAgICAgYXJlIGZvbGxvd2luZyB0aGlzIGhhbGFudCwgcG9zaXRpb24gaXMgbW92ZWQgYWZ0ZXIgaXQuIElmIHN1Y2hcbiAgICAgICAgICAgICAgICAvLyAgICAgcG9zaXRpb24gaXMgZm91bmQsIHRoaXMgaXMgdGhlIHRhcmdldCBwb3NpdGlvbi4gT3RoZXJ3aXNlLFxuICAgICAgICAgICAgICAgIC8vICAgICBwcm9jZWVkIHRvIHRoZSBuZXh0IHN0ZXAuXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICAgTm90ZTogaW4gb2xkLWltcGxlbWVudGF0aW9uIGZvbnRzLCB3aGVyZSBjbGFzc2lmaWNhdGlvbnMgd2VyZVxuICAgICAgICAgICAgICAgIC8vICAgICBmaXhlZCBpbiBzaGFwaW5nIGVuZ2luZSwgdGhlcmUgd2FzIG5vIGNhc2Ugd2hlcmUgcmVwaCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIC8vICAgICB3aWxsIGJlIGZvdW5kIG9uIHRoaXMgc3RlcC5cbiAgICAgICAgICAgICAgICBuZXdSZXBoUG9zID0gc3RhcnQgKyAxO1xuICAgICAgICAgICAgICAgIHdoaWxlKG5ld1JlcGhQb3MgPCBiYXNlICYmICEkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNIYWxhbnRPckNvZW5nKGdseXBoc1tuZXdSZXBoUG9zXSkpbmV3UmVwaFBvcysrO1xuICAgICAgICAgICAgICAgIGlmIChuZXdSZXBoUG9zIDwgYmFzZSAmJiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNIYWxhbnRPckNvZW5nKGdseXBoc1tuZXdSZXBoUG9zXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gLT5JZiBaV0ogb3IgWldOSiBhcmUgZm9sbG93aW5nIHRoaXMgaGFsYW50LCBwb3NpdGlvbiBpcyBtb3ZlZCBhZnRlciBpdC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1JlcGhQb3MgKyAxIDwgYmFzZSAmJiAkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNKb2luZXIoZ2x5cGhzW25ld1JlcGhQb3MgKyAxXSkpIG5ld1JlcGhQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAzLiBJZiByZXBoIHNob3VsZCBiZSByZXBvc2l0aW9uZWQgYWZ0ZXIgdGhlIG1haW4gY29uc29uYW50OiBmaW5kIHRoZVxuICAgICAgICAgICAgICAgIC8vICAgIGZpcnN0IGNvbnNvbmFudCBub3QgbGlnYXRlZCB3aXRoIG1haW4sIG9yIGZpbmQgdGhlIGZpcnN0XG4gICAgICAgICAgICAgICAgLy8gICAgY29uc29uYW50IHRoYXQgaXMgbm90IGEgcG90ZW50aWFsIHByZS1iYXNlIHJlb3JkZXJpbmcgUmEuXG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZCAmJiByZXBoUG9zID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkFmdGVyX01haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3UmVwaFBvcyA9IGJhc2U7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKG5ld1JlcGhQb3MgKyAxIDwgZW5kICYmIGdseXBoc1tuZXdSZXBoUG9zICsgMV0uc2hhcGVySW5mby5wb3NpdGlvbiA8PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkFmdGVyX01haW4pbmV3UmVwaFBvcysrO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IG5ld1JlcGhQb3MgPCBlbmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIDQuIElmIHJlcGggc2hvdWxkIGJlIHBvc2l0aW9uZWQgYmVmb3JlIHBvc3QtYmFzZSBjb25zb25hbnQsIGZpbmRcbiAgICAgICAgICAgICAgICAvLyAgICBmaXJzdCBwb3N0LWJhc2UgY2xhc3NpZmllZCBjb25zb25hbnQgbm90IGxpZ2F0ZWQgd2l0aCBtYWluLiBJZiBub1xuICAgICAgICAgICAgICAgIC8vICAgIGNvbnNvbmFudCBpcyBmb3VuZCwgdGhlIHRhcmdldCBwb3NpdGlvbiBzaG91bGQgYmUgYmVmb3JlIHRoZVxuICAgICAgICAgICAgICAgIC8vICAgIGZpcnN0IG1hdHJhLCBzeWxsYWJsZSBtb2RpZmllciBzaWduIG9yIHZlZGljIHNpZ24uXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIG91ciB0YWtlIG9uIHdoYXQgc3RlcCA0IGlzIHRyeWluZyB0byBzYXkgKGFuZCBmYWlsaW5nLCBCQURMWSkuXG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZCAmJiByZXBoUG9zID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkFmdGVyX1N1Yikge1xuICAgICAgICAgICAgICAgICAgICBuZXdSZXBoUG9zID0gYmFzZTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUobmV3UmVwaFBvcyArIDEgPCBlbmQgJiYgIShnbHlwaHNbbmV3UmVwaFBvcyArIDFdLnNoYXBlckluZm8ucG9zaXRpb24gJiAoKDAsICQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwKS5Qb3N0X0MgfCAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLkFmdGVyX1Bvc3QgfCAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlNNVkQpKSluZXdSZXBoUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gbmV3UmVwaFBvcyA8IGVuZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAgNS4gSWYgbm8gY29uc29uYW50IGlzIGZvdW5kIGluIHN0ZXBzIDMgb3IgNCwgbW92ZSByZXBoIHRvIGEgcG9zaXRpb25cbiAgICAgICAgICAgIC8vICAgICBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGZpcnN0IHBvc3QtYmFzZSBtYXRyYSwgc3lsbGFibGUgbW9kaWZpZXJcbiAgICAgICAgICAgIC8vICAgICBzaWduIG9yIHZlZGljIHNpZ24gdGhhdCBoYXMgYSByZW9yZGVyaW5nIGNsYXNzIGFmdGVyIHRoZSBpbnRlbmRlZFxuICAgICAgICAgICAgLy8gICAgIHJlcGggcG9zaXRpb24uIEZvciBleGFtcGxlLCBpZiB0aGUgcmVvcmRlcmluZyBwb3NpdGlvbiBmb3IgcmVwaFxuICAgICAgICAgICAgLy8gICAgIGlzIHBvc3QtbWFpbiwgaXQgd2lsbCBza2lwIGFib3ZlLWJhc2UgbWF0cmFzIHRoYXQgYWxzbyBoYXZlIGFcbiAgICAgICAgICAgIC8vICAgICBwb3N0LW1haW4gcG9zaXRpb24uXG4gICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29waWVkIGZyb20gc3RlcCAyLlxuICAgICAgICAgICAgICAgIG5ld1JlcGhQb3MgPSBzdGFydCArIDE7XG4gICAgICAgICAgICAgICAgd2hpbGUobmV3UmVwaFBvcyA8IGJhc2UgJiYgISQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0hhbGFudE9yQ29lbmcoZ2x5cGhzW25ld1JlcGhQb3NdKSluZXdSZXBoUG9zKys7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1JlcGhQb3MgPCBiYXNlICYmICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0hhbGFudE9yQ29lbmcoZ2x5cGhzW25ld1JlcGhQb3NdKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAtPklmIFpXSiBvciBaV05KIGFyZSBmb2xsb3dpbmcgdGhpcyBoYWxhbnQsIHBvc2l0aW9uIGlzIG1vdmVkIGFmdGVyIGl0LlxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3UmVwaFBvcyArIDEgPCBiYXNlICYmICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0pvaW5lcihnbHlwaHNbbmV3UmVwaFBvcyArIDFdKSkgbmV3UmVwaFBvcysrO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gNi4gT3RoZXJ3aXNlLCByZW9yZGVyIHJlcGggdG8gdGhlIGVuZCBvZiB0aGUgc3lsbGFibGUuXG4gICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgbmV3UmVwaFBvcyA9IGVuZCAtIDE7XG4gICAgICAgICAgICAgICAgd2hpbGUobmV3UmVwaFBvcyA+IHN0YXJ0ICYmIGdseXBoc1tuZXdSZXBoUG9zXS5zaGFwZXJJbmZvLnBvc2l0aW9uID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlNNVkQpbmV3UmVwaFBvcy0tO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBSZXBoIGlzIHRvIGJlIGVuZGluZyB1cCBhZnRlciBhIE1hdHJhLEhhbGFudCBzZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICAvLyBwb3NpdGlvbiBpdCBiZWZvcmUgdGhhdCBIYWxhbnQgc28gaXQgY2FuIGludGVyYWN0IHdpdGggdGhlIE1hdHJhLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIGlmIGl0J3MgYSBwbGFpbiBDb25zb25hbnQsSGFsYW50IHdlIHNob3VsZG4ndCBkbyB0aGF0LlxuICAgICAgICAgICAgICAgIC8vIFVuaXNjcmliZSBkb2Vzbid0IGRvIHRoaXMuXG4gICAgICAgICAgICAgICAgLy8gVEVTVDogVSswOTMwLFUrMDk0RCxVKzA5MTUsVSswOTRCLFUrMDk0RFxuICAgICAgICAgICAgICAgIGlmICgkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNIYWxhbnRPckNvZW5nKGdseXBoc1tuZXdSZXBoUG9zXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gYmFzZSArIDE7IGkgPCBuZXdSZXBoUG9zOyBpKyspaWYgKGdseXBoc1tpXS5zaGFwZXJJbmZvLmNhdGVnb3J5ID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLk0pIG5ld1JlcGhQb3MtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcmVwaCA9IGdseXBoc1tzdGFydF07XG4gICAgICAgICAgICBnbHlwaHMuc3BsaWNlKHN0YXJ0LCAwLCAuLi5nbHlwaHMuc3BsaWNlKHN0YXJ0ICsgMSwgbmV3UmVwaFBvcyAtIHN0YXJ0KSk7XG4gICAgICAgICAgICBnbHlwaHNbbmV3UmVwaFBvc10gPSByZXBoO1xuICAgICAgICAgICAgaWYgKHN0YXJ0IDwgYmFzZSAmJiBiYXNlIDw9IG5ld1JlcGhQb3MpIGJhc2UtLTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvIFJlb3JkZXIgcHJlLWJhc2UgcmVvcmRlcmluZyBjb25zb25hbnRzOlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiBhIHByZS1iYXNlIHJlb3JkZXJpbmcgY29uc29uYW50IGlzIGZvdW5kLCByZW9yZGVyIGl0IGFjY29yZGluZyB0b1xuICAgICAgICAvLyB0aGUgZm9sbG93aW5nIHJ1bGVzOlxuICAgICAgICBpZiAodHJ5UHJlZiAmJiBiYXNlICsgMSA8IGVuZCkge1xuICAgICAgICAgICAgZm9yKGxldCBpID0gYmFzZSArIDE7IGkgPCBlbmQ7IGkrKylpZiAoZ2x5cGhzW2ldLmZlYXR1cmVzLnByZWYpIHtcbiAgICAgICAgICAgICAgICAvLyAxLiBPbmx5IHJlb3JkZXIgYSBnbHlwaCBwcm9kdWNlZCBieSBzdWJzdGl0dXRpb24gZHVyaW5nIGFwcGxpY2F0aW9uXG4gICAgICAgICAgICAgICAgLy8gICAgb2YgdGhlIDxwcmVmPiBmZWF0dXJlLiAoTm90ZSB0aGF0IGEgZm9udCBtYXkgc2hhcGUgYSBSYSBjb25zb25hbnQgd2l0aFxuICAgICAgICAgICAgICAgIC8vICAgIHRoZSBmZWF0dXJlIGdlbmVyYWxseSBidXQgYmxvY2sgaXQgaW4gY2VydGFpbiBjb250ZXh0cy4pXG4gICAgICAgICAgICAgICAgLy8gTm90ZTogV2UganVzdCBjaGVjayB0aGF0IHNvbWV0aGluZyBnb3Qgc3Vic3RpdHV0ZWQuICBXZSBkb24ndCBjaGVjayB0aGF0XG4gICAgICAgICAgICAgICAgLy8gdGhlIDxwcmVmPiBmZWF0dXJlIGFjdHVhbGx5IGRpZCBpdC4uLlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gUmVvcmRlciBwcmVmIG9ubHkgaWYgaXQgbGlnYXRlZC5cbiAgICAgICAgICAgICAgICBpZiAoZ2x5cGhzW2ldLmlzTGlnYXRlZCAmJiAhZ2x5cGhzW2ldLmlzTXVsdGlwbGllZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAyLiBUcnkgdG8gZmluZCBhIHRhcmdldCBwb3NpdGlvbiB0aGUgc2FtZSB3YXkgYXMgZm9yIHByZS1iYXNlIG1hdHJhLlxuICAgICAgICAgICAgICAgICAgICAvLyAgICBJZiBpdCBpcyBmb3VuZCwgcmVvcmRlciBwcmUtYmFzZSBjb25zb25hbnQgZ2x5cGguXG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vIDMuIElmIHBvc2l0aW9uIGlzIG5vdCBmb3VuZCwgcmVvcmRlciBpbW1lZGlhdGVseSBiZWZvcmUgbWFpblxuICAgICAgICAgICAgICAgICAgICAvLyAgICBjb25zb25hbnQuXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdQb3MgPSBiYXNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBNYWxheWFsYW0gLyBUYW1pbCBkbyBub3QgaGF2ZSBcImhhbGZcIiBmb3JtcyBvciBleHBsaWNpdCB2aXJhbWEgZm9ybXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBnbHlwaHMgZm9ybWVkIGJ5ICdoYWxmJyBhcmUgQ2hpbGx1cyBvciBsaWdhdGVkIGV4cGxpY2l0IHZpcmFtYXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gcG9zaXRpb24gbWF0cmEgYWZ0ZXIgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYW4udW5pY29kZVNjcmlwdCAhPT0gXCJNYWxheWFsYW1cIiAmJiBwbGFuLnVuaWNvZGVTY3JpcHQgIT09IFwiVGFtaWxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUobmV3UG9zID4gc3RhcnQgJiYgIShnbHlwaHNbbmV3UG9zIC0gMV0uc2hhcGVySW5mby5jYXRlZ29yeSAmICgoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLk0gfCAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGNhOTU5OWIyYTMwMGFmYykpKSluZXdQb3MtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIEtobWVyIGNvZW5nIG1vZGVsLCBhIEgsUmEgY2FuIGdvICphZnRlciogbWF0cmFzLiAgSWYgaXQgZ29lcyBhZnRlciBhXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzcGxpdCBtYXRyYSwgaXQgc2hvdWxkIGJlIHJlb3JkZXJlZCB0byAqYmVmb3JlKiB0aGUgbGVmdCBwYXJ0IG9mIHN1Y2ggbWF0cmEuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3UG9zID4gc3RhcnQgJiYgZ2x5cGhzW25ld1BvcyAtIDFdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09ICgwLCAkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkYTUxM2VhNjFhN2JlZTkxYykuTSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvbGRQb3MgPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IGJhc2UgKyAxOyBqIDwgb2xkUG9zOyBqKyspaWYgKGdseXBoc1tqXS5zaGFwZXJJbmZvLmNhdGVnb3J5ID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGE1MTNlYTYxYTdiZWU5MWMpLk0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UG9zLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3UG9zID4gc3RhcnQgJiYgJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGlzSGFsYW50T3JDb2VuZyhnbHlwaHNbbmV3UG9zIC0gMV0pKSAvLyAtPiBJZiBaV0ogb3IgWldOSiBmb2xsb3cgdGhpcyBoYWxhbnQsIHBvc2l0aW9uIGlzIG1vdmVkIGFmdGVyIGl0LlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3UG9zIDwgZW5kICYmICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRpc0pvaW5lcihnbHlwaHNbbmV3UG9zXSkpIG5ld1BvcysrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBvbGRQb3MgPSBpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdG1wID0gZ2x5cGhzW29sZFBvc107XG4gICAgICAgICAgICAgICAgICAgIGdseXBocy5zcGxpY2UobmV3UG9zICsgMSwgMCwgLi4uZ2x5cGhzLnNwbGljZShuZXdQb3MsIG9sZFBvcyAtIG5ld1BvcykpO1xuICAgICAgICAgICAgICAgICAgICBnbHlwaHNbbmV3UG9zXSA9IHRtcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1BvcyA8PSBiYXNlICYmIGJhc2UgPCBvbGRQb3MpIGJhc2UrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXBwbHkgJ2luaXQnIHRvIHRoZSBMZWZ0IE1hdHJhIGlmIGl0J3MgYSB3b3JkIHN0YXJ0LlxuICAgICAgICBpZiAoZ2x5cGhzW3N0YXJ0XS5zaGFwZXJJbmZvLnBvc2l0aW9uID09PSAoMCwgJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JDFhMWY2MWM5YzRkZDlkZjApLlByZV9NICYmICghc3RhcnQgfHwgIS9DZnxNbi8udGVzdCgoMCwgJDUyWklmJGdldENhdGVnb3J5KShnbHlwaHNbc3RhcnQgLSAxXS5jb2RlUG9pbnRzWzBdKSkpKSBnbHlwaHNbc3RhcnRdLmZlYXR1cmVzLmluaXQgPSB0cnVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uICQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRuZXh0U3lsbGFibGUoZ2x5cGhzLCBzdGFydCkge1xuICAgIGlmIChzdGFydCA+PSBnbHlwaHMubGVuZ3RoKSByZXR1cm4gc3RhcnQ7XG4gICAgbGV0IHN5bGxhYmxlID0gZ2x5cGhzW3N0YXJ0XS5zaGFwZXJJbmZvLnN5bGxhYmxlO1xuICAgIHdoaWxlKCsrc3RhcnQgPCBnbHlwaHMubGVuZ3RoICYmIGdseXBoc1tzdGFydF0uc2hhcGVySW5mby5zeWxsYWJsZSA9PT0gc3lsbGFibGUpO1xuICAgIHJldHVybiBzdGFydDtcbn1cblxuXG5cblxuXG5cblxuXG5cbmNvbnN0IHsgY2F0ZWdvcmllczogJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGNhdGVnb3JpZXMgLCBkZWNvbXBvc2l0aW9uczogJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGRlY29tcG9zaXRpb25zICB9ID0gKDAsICgvKkBfX1BVUkVfXyovJHBhcmNlbCRpbnRlcm9wRGVmYXVsdCgkYWEzMzNhOTYwNzQ3MTI5NiRleHBvcnRzKSkpO1xuY29uc3QgJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJHRyaWUgPSBuZXcgKDAsICQ1MlpJZiR1bmljb2RldHJpZSkoKDAsICQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCQ5NGZkZjExYmFmYzhkZTZiKShcIkFBQUNBQUFBQUFEUXFRQUFBVkVNcnZQdG5IK29IVWNWeCtmZDk5Nzk5VzVlOG14KzlOa1ltN1lVSTJLdGlta1ZERzNGV2dWVEZZMUZxYTJWSmlyWUIwSWFVRkxCYUtHSlZpWGlyNm94S0NTQm9pMFVUS3RnMnlBMjZoK21pbFlOdE1IKzBXSzFWUXl2dEJTLzQ4N2hubmN5TXp1enU3TjduN2tIUHN6dTdPek1tVE56ZG1kbWZ6emZVbXBpVXFrZW1BTWJ3U1p3S2JqY3hNMVhFTDRWdkIyOEczekFrKzU2Y0xNbGZnZFlBRHZCYnZCRjhHV3dIOXhsK0NGTGZ3ajhCUHdVL01LUzM4L0FNZkE4NnY5cm85dWNRY2RSK0NqQ1A0Q1Q0RW53RFBnM2VBRk1UaWsxQStiQVBOZ0lOb0ZMd0dhd1pTcExmelhDcldBYitBallEbTRCTzhGdXNBZnNBL3ZCWGVBZ09BTHVOZnYzZzRmQWNYQUNQQWFlQUUrQjU4QnA4TkpVcG5ON1dxbFpzSFk2MjkrQThHTHdXdkFHOEJad0pYaW5PZjVlaEI4RU40QWRZR0U2cTdkbUY5dXVnczhodnowVjU4blpLL0wrS3ZhL0JYNEFEb043cHJQNkhnVVBna2ZBNzNMMGVRekhud0JQZ1grWTgwK0RGOEZVVzZsQk80dGJqWEE5dUFpOHBqM3NTMi9FOW1hd0JWd050b0p0NXB6clRYZ3p3aytCN2F3UDdzVCs3blk2V3hGZlFCbGZBbDhIM3dVL0FuZXpjdS9EOXMvQk1STjNIT0VKOEVkd01rQy9KNUhtbVhabXEyZkJJamdFVkVlcGJpZUxYNEZ3ME1uU3J6UnhtclZzbTdNQjhSZURWNHZqcjNla0p5N3JaR1ZQTWIxOTZYbTZvdWc4M29SeXQ0Q3J3RFZnSzlnR1B0enhuM3VUT0Q2WVBEUE5KNUhtMCtBem5hemZmSjdaNEtTblhuY2czVmZBTjhFQmh4NDIvei9VR2Ricng1MnNyOXlIOEFGVHJ0NSsyR3pmbldQYkt1dzdac3paeU5oL3hvd1pNMmJNbURGanhzUXlaNWxQTnMzaDluQk5ZSHVBZnI5aWM5ZmZpSG5zSnp6blU5MS9qM1ArMnNuV1lmNkc4Ty9nbitBMGVNbkV0N3ZRcDV1bFg0TndIbXdFbTdyWjhVc1JYZzZ1TVB2WElId1B1SzdyTGwrbnU5RnpmTXlZTVdQR3BHVnVzbG1hcnYrWU1XUFNrTnEvZDJEOHVORE5uZ3ZkaXZBMnkzank5bTcyYkY5djN5bU9mMk1FeHA4ZkcyVHNBY2ZBMndKWUJKZXRXQnEzaSswZndQYWZ3TG16U2wwTEZtWk5QTUxIWjRmcG5zWDJBZGpnY1hCK1Q2a1BnZStBRzdEL3ZYWVcvdExzYzlyOU0rTWtWeUxOUjFtNmc5ZytaZll2bU1FeGNIQ20rZnRQMCtUNXkvZTE3VXcvUFlMd0huQzBtODBUSCt6RzMwLzNtalNEblBTMi9CNHBVSjRyWDNuK2I1SDNvOTJsNlVqZnZaN3kvb0p6VG9HbnU4TzY2WFRQWWY4L0pyOFhXTDZUUFhmOWJQbkh0bVZzKzg5QW54VmdEVmdQTGdLdkFnK1kvRjZIN2MxZ0M3aktISDhYZUoveDE1dkFqdDR3dndWczd3S2ZCWHZBUHZBMThHMXdzSmV2ajM2ZjVnalMzZXRJcStmdDkrUFlRNzNoL25Gc24yRDdmKzVsNzViby9WUFlmdHBUYmxGYjIvSm8ycGRqZkwwdVhPWC9xeGZucDh2WlZrMlh2OWhibXUrTHh2WXQzQS83L1dac1BvcHRQa3I5YmRDdjF5YStkNFR1TU84VHJlNW40WGtJTHdTYnpQNGwvV0hhelgxLy9yMk8vejdjRkhudlNZVzhSL1ZtMDJaWElIeEh6ZTFYZGY5YmJuN3AwejJrRHJvTnIyWDlXTCs3OTM3c1g5ZlArdjloOW42alRyZkkzakc5RWZzZk4zRzM1UFIvRzR1UmZZM2VNVHdka0ZhL0MzaHJmMmtjZnkveFlUT21wcnJmWnNMYkVlN3JEUFcvVTlScnY5ay9haG1UTDBjV1d4UC9ZeFJrZ3RFUyt6d05oWlBzK0ZRZ01qL2xpRXN0bzJIeHNaQlFYMnBab0xacVdjNXJpWERhUUJMU3QxTDNoY25FK1ZjdDdhWVZLQ0VoYlhrMitiN05aODRtbVhBd0NpTDE0TmU4NVM2Mk1ZUGNYaTVTdE0vWXhsSkYybGZhYnpuWnNDNi9DODA3eHZaVit5RnZlOWQxS1kvL2QzSE5POHBLVVh1VERoMEdwcDdCODUycTZRRk1nZFdNMmRmYkF4T3VFUFFFZmNFc081ZnF1Skxack1meUN0V1AwaGVaRjZvU2RpSDl1NGFRdkpSSUovZUw2QkJ5bkl0THA1RDJKUmtZNUw1dTN4QWY2bHZpWEhXU1pjZmFLTy8rNXp2Ty9jOVh0cTh1UlhTT2JkKzhiUzB6SnJTMXJ4VHlYN2svYTBucms1RCttSGVPQzkwdXExUTIxNlg1N2x5a2ZxSHQ2MnVUR0oycmF0K2kva3R0eXEvUlNpMjlQbGNsWmYyWHhxNTVaZVNWMzRUOTZkNVg1UHFaSjlJM1pYMmxua1h0M3hMMUt5cmF2L0x1dGJaNnVHeHVTNnNzNlYzcFhPWFk0a1A3RUJmeUpUNys0VEpRUzl1Zjc0ZjZuKzMrNlpJaTliQ3RpZWF0RmZDeFVNeDRLTVlmeS9wenJCMzB2bTg4cTlTWjExSytuOWVlTk42MTJVRktXWDh1STlUbVJjYTdUYld2S3kySnZGNm5hRitiLzB1UnVwWnAzNWNaaWtoWnZ5bmlZMlIvQ2JkQjN2WHluSUM2aGJSQkhmNGwxeHBzNnc0eC9sVkV0eFJ0R1pNdVJBOHVOaC9qZllWOGtkcHNCVXN6Y09EckQ3RTJKVDJLckIzVjZYTWhiZE5qY1hJdHh6YU9KV2twZjk3Ni9JNWdsUW4xc2JMUDg2VTlGUXZ6NGwwUzI4L2xjV1VKYmJyRTJsK1ovVGxIdmk0L2t2WlhMTXlybXkxUFc3eDhobDZVRmd2bG1OTTFKcTNhSjNTZTB5SmNwZHdTNm1PcC9aZ0xYNU4xcmRGS2FJekg5enRxdU1icXErL3FDRlJrK2hSb3ladnJUSHVPOGZOZC9kam1FelpKM1RkaXNOMWJOUU5sN3k5NkRWLzNtVmtUdHdhc1ZkazFhaTZ5YkdsRGVrOG5UMWZYYzRNNXRWU1B2aHFPc1dRZVhRczhMMW4zSXJhZFU4T3hDZVZqSzdkcjdEcGwwY01IblV2dDE4VHpmVnNmYi9wWlk1NmZWMkduVlBWSVlhT2k5eGNaSjhjbUtjdTN3Y3VQc1ZIVjVjZEtGZlpYTlplZnA1c1dmdCt3elIxY2N6S0N4aDk5TlJ4NzZIdndPcFdOdjZZWnRBYWp0NldQeVBzd3RWVnMvVk9KN3hwWXgzVlIzMWVyN2dNeE51VjlRNDQzQ0RsVzQzS3VZU1hibHN5YmZLWXQ1OHRyZmV6N0ExWDdUZG0rVjdUY291ZEwrTHBWR2Yya2hONjNVNU95RDVBZjBOb1V2MDZsN0pjMFJ0ZStzbzR4TDlBeXkzUnorU3VmWTVKZjI2N3hjbTdKNGRkM2t1bUlPcm1rN1BsNTQ5YlVZMXB1STkxR2RiOFRwdSs5dGptaFhGZHd0ZlZzVHY1U1F2WEtXMGNLNGVYZ1BCTzZpSjA3Tk5WT0hINy90RjFqeUpkbldiclUvVWF1M1ZOSTE1NlFaMlphWkZ1NzZpNnZRWHk5WUoySDlRWjk3YUYzcDF4bHgxeWZ1WVJjZDBLbDdOeWFYMTkwK3BVT0tJMHR2dXM1ajcvblNXS0xvM0ZFUjhSM0xIRXg4Z3F3Z2UxUE9naTFsMXlmaXJWM3pIcElTSHhzM3ZMZUZYT2VsbGNHMURGR2JHUDAwUFBrZUtFT2FYSXNxaHpicnVPaDlRazVMMDhuVzJnckowYXZzdldvY3YwelJoL2ZHQ0cwVFYzNWhCNHYwcmRzNVZkZGptL3NGQ0t4K2FYU3QyeWFsUFpzb2x4WFc0NkNEblhwMFlRMHJkc285T1VZUFNZVDYreXp1eHh6bHJWZkZmYXZRL0xLcXNQK2RiVnpFLzBxUmI4cEtpbjZWOVU2Rm5uMjRwcUh1ZkxNV3k5MG5WKzBEa1htY3JiMFVxKzZwVTcvcWNzLzY3U0hUZVRhYUJrOWlweVhRdkxxVzFVN3VQS3B1eC9FU2xQOXVteWRSOEgzVWp6SG9YeGowL0oxWXI1dWJIc1ByV09KcXhLK2hrNXIrRVZ0SDNwZTFYV0lYYSsxdlE5WUovb1pyZTFiR1JlaDN4S1dlWDdCeGZZc3R3aDVlcnJHSmk1OWJlODQ4MmNTc2ZVUFFUNFhsYzlLK1hNbWF0Y1kwZm8yK1N4WVFzLzRYTzhNMDNOZy9UeHVqWUgrRlJFTFNkSCs2bXR2ZXU4aXRiMUN5N0M5WDhHZnNWT2NmTjg2UkhnNTZ3SjBvYjVxT3ovRS9ySWRxN1loRjM0LzBjZm9lV0tWZnRKakliV0RiRGZYZVhSL3ByQk9LV0ovM2RkNDMrc3IrMzJUdmdFSUVaNi83WnQ1L2w3Z2hNbTc3dStleTRnY3o1eGZrdEE1dkU5QzV2eTJZM2xwWGVYNDB0SGNMTVg0MnFaSFMvbHRabHVYaVNsRHhpbGx0M1ZkSXZ1ZmJjMGo3NXd5NWFXYU94V1JVWm1mbDVuRFNoM0x6b1diWEpPZzh1dW1La25kcDFQbkgySVBmZStVMzN6N3ZqV2hkUFF1V01oNHJhcXhXTWg5WDg5Ulp0U1o3L0pweVhzM05XUWNFVE4zQ1pIVS9sbVZuc3RaQjErWmZNNUEvMVZKMlY5dDh3VFhOMVMrZjI3bXphdWxiQ3hKSGVQd0MxVHovMEsxL1ZkUHZ0T3NiYSt2TDdaeE0xL2pha0ovVjkveWZkdE54K2k3YmhWUlJsbC9ycksrc2szcUx0LzNUMGFmSCt0enoxSERmeHpaL0hsR0RkdUsxeS9HTDIxenZLcHRRR1dGU3BWbEZtMHorWnhEL3ZkQXQ5RXFROTcxTmtSSFc3cXl0b2c1MytjZlZmZUZHTFN0ZmRkZllrYTV4NmRsK3lpLy80ejYvNTU5YVVuNC8rL2sycHY4QnFmTS8wcVZDbnUrSWYyT0pQUlpVY3l6SkYvNVJRbTV4dE05bG4rTFJOKzhVOStpTVFTMVZlZzlxMnovVGxWM0V0dDMvckxPSVhPb29raWR5LzVYM0dZRCtTOGExejJlMHZINjk1VDl2aEVxZGJZLy8wZFUzaldaMnJZcS9jdkNSVDhyMDgvTkxsVDUvenlTZFN1cnYxeWJMaXVwNXRBcDUrTk56ZlBKNXI2MXdhcmFwYWpJdGZUUU5lSzYxMC9yV0VNUHliK3VPby9pZXJSTmJHVTAxWitycW5lSVBXTnNUOXQxckQrT1lyOHJtMGVLdnAvQ2gxUDRZZXB5eStoV1ZEL2YrVldYWDVYK1RaZGZaWitLTGI5SitTOD1cIikpO1xuY29uc3QgJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJHN0YXRlTWFjaGluZSA9IG5ldyAoMCwgJDUyWklmJGRmYSkoKDAsICgvKkBfX1BVUkVfXyovJHBhcmNlbCRpbnRlcm9wRGVmYXVsdCgkYWEzMzNhOTYwNzQ3MTI5NiRleHBvcnRzKSkpKTtcbmNsYXNzICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgZXh0ZW5kcyAoMCwgJDY0OTk3MGQ4NzMzNWIzMGYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkge1xuICAgIHN0YXRpYyBwbGFuRmVhdHVyZXMocGxhbikge1xuICAgICAgICBwbGFuLmFkZFN0YWdlKCQ3YWI0OTRmZTk3NzE0M2M2JHZhciRzZXR1cFN5bGxhYmxlcyk7XG4gICAgICAgIC8vIERlZmF1bHQgZ2x5cGggcHJlLXByb2Nlc3NpbmcgZ3JvdXBcbiAgICAgICAgcGxhbi5hZGRTdGFnZShbXG4gICAgICAgICAgICBcImxvY2xcIixcbiAgICAgICAgICAgIFwiY2NtcFwiLFxuICAgICAgICAgICAgXCJudWt0XCIsXG4gICAgICAgICAgICBcImFraG5cIlxuICAgICAgICBdKTtcbiAgICAgICAgLy8gUmVvcmRlcmluZyBncm91cFxuICAgICAgICBwbGFuLmFkZFN0YWdlKCQ3YWI0OTRmZTk3NzE0M2M2JHZhciRjbGVhclN1YnN0aXR1dGlvbkZsYWdzKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZShbXG4gICAgICAgICAgICBcInJwaGZcIlxuICAgICAgICBdLCBmYWxzZSk7XG4gICAgICAgIHBsYW4uYWRkU3RhZ2UoJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJHJlY29yZFJwaGYpO1xuICAgICAgICBwbGFuLmFkZFN0YWdlKCQ3YWI0OTRmZTk3NzE0M2M2JHZhciRjbGVhclN1YnN0aXR1dGlvbkZsYWdzKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZShbXG4gICAgICAgICAgICBcInByZWZcIlxuICAgICAgICBdKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZSgkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkcmVjb3JkUHJlZik7XG4gICAgICAgIC8vIE9ydGhvZ3JhcGhpYyB1bml0IHNoYXBpbmcgZ3JvdXBcbiAgICAgICAgcGxhbi5hZGRTdGFnZShbXG4gICAgICAgICAgICBcInJrcmZcIixcbiAgICAgICAgICAgIFwiYWJ2ZlwiLFxuICAgICAgICAgICAgXCJibHdmXCIsXG4gICAgICAgICAgICBcImhhbGZcIixcbiAgICAgICAgICAgIFwicHN0ZlwiLFxuICAgICAgICAgICAgXCJ2YXR1XCIsXG4gICAgICAgICAgICBcImNqY3RcIlxuICAgICAgICBdKTtcbiAgICAgICAgcGxhbi5hZGRTdGFnZSgkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkcmVvcmRlcik7XG4gICAgICAgIC8vIFRvcG9ncmFwaGljYWwgZmVhdHVyZXNcbiAgICAgICAgLy8gU2NyaXB0cyB0aGF0IG5lZWQgdGhpcyBhcmUgaGFuZGxlZCBieSB0aGUgQXJhYmljIHNoYXBlciwgbm90IGltcGxlbWVudGVkIGhlcmUgZm9yIG5vdy5cbiAgICAgICAgLy8gcGxhbi5hZGRTdGFnZShbJ2lzb2wnLCAnaW5pdCcsICdtZWRpJywgJ2ZpbmEnLCAnbWVkMicsICdmaW4yJywgJ2ZpbjMnXSwgZmFsc2UpO1xuICAgICAgICAvLyBTdGFuZGFyZCB0b3BvZ3JhcGhpYyBwcmVzZW50YXRpb24gYW5kIHBvc2l0aW9uYWwgZmVhdHVyZSBhcHBsaWNhdGlvblxuICAgICAgICBwbGFuLmFkZFN0YWdlKFtcbiAgICAgICAgICAgIFwiYWJ2c1wiLFxuICAgICAgICAgICAgXCJibHdzXCIsXG4gICAgICAgICAgICBcInByZXNcIixcbiAgICAgICAgICAgIFwicHN0c1wiLFxuICAgICAgICAgICAgXCJkaXN0XCIsXG4gICAgICAgICAgICBcImFidm1cIixcbiAgICAgICAgICAgIFwiYmx3bVwiXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBzdGF0aWMgYXNzaWduRmVhdHVyZXMocGxhbiwgZ2x5cGhzKSB7XG4gICAgICAgIC8vIERlY29tcG9zZSBzcGxpdCB2b3dlbHNcbiAgICAgICAgLy8gVE9ETzogZG8gdGhpcyBpbiBhIG1vcmUgZ2VuZXJhbCB1bmljb2RlIG5vcm1hbGl6ZXJcbiAgICAgICAgZm9yKGxldCBpID0gZ2x5cGhzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgICAgICAgIGxldCBjb2RlcG9pbnQgPSBnbHlwaHNbaV0uY29kZVBvaW50c1swXTtcbiAgICAgICAgICAgIGlmICgkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkZGVjb21wb3NpdGlvbnNbY29kZXBvaW50XSkge1xuICAgICAgICAgICAgICAgIGxldCBkZWNvbXBvc2VkID0gJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGRlY29tcG9zaXRpb25zW2NvZGVwb2ludF0ubWFwKChjKT0+e1xuICAgICAgICAgICAgICAgICAgICBsZXQgZyA9IHBsYW4uZm9udC5nbHlwaEZvckNvZGVQb2ludChjKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAoMCwgJDEwZTdiMjU3ZTFhOWE3NTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkocGxhbi5mb250LCBnLmlkLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBjXG4gICAgICAgICAgICAgICAgICAgIF0sIGdseXBoc1tpXS5mZWF0dXJlcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ2x5cGhzLnNwbGljZShpLCAxLCAuLi5kZWNvbXBvc2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbigwLCAkNTJaSWYkc3djaGVscGVyc3NyY19kZWZpbmVfcHJvcGVydHltanMpKCQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzksIFwiemVyb01hcmtXaWR0aHNcIiwgXCJCRUZPUkVfR1BPU1wiKTtcbmZ1bmN0aW9uICQ3YWI0OTRmZTk3NzE0M2M2JHZhciR1c2VDYXRlZ29yeShnbHlwaCkge1xuICAgIHJldHVybiAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkdHJpZS5nZXQoZ2x5cGguY29kZVBvaW50c1swXSk7XG59XG5jbGFzcyAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkVVNFSW5mbyB7XG4gICAgY29uc3RydWN0b3IoY2F0ZWdvcnksIHN5bGxhYmxlVHlwZSwgc3lsbGFibGUpe1xuICAgICAgICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgICAgIHRoaXMuc3lsbGFibGVUeXBlID0gc3lsbGFibGVUeXBlO1xuICAgICAgICB0aGlzLnN5bGxhYmxlID0gc3lsbGFibGU7XG4gICAgfVxufVxuZnVuY3Rpb24gJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJHNldHVwU3lsbGFibGVzKGZvbnQsIGdseXBocykge1xuICAgIGxldCBzeWxsYWJsZSA9IDA7XG4gICAgZm9yIChsZXQgW3N0YXJ0LCBlbmQsIHRhZ3NdIG9mICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRzdGF0ZU1hY2hpbmUubWF0Y2goZ2x5cGhzLm1hcCgkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkdXNlQ2F0ZWdvcnkpKSl7XG4gICAgICAgICsrc3lsbGFibGU7XG4gICAgICAgIC8vIENyZWF0ZSBzaGFwZXIgaW5mb1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKylnbHlwaHNbaV0uc2hhcGVySW5mbyA9IG5ldyAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkVVNFSW5mbygkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkY2F0ZWdvcmllc1skN2FiNDk0ZmU5NzcxNDNjNiR2YXIkdXNlQ2F0ZWdvcnkoZ2x5cGhzW2ldKV0sIHRhZ3NbMF0sIHN5bGxhYmxlKTtcbiAgICAgICAgLy8gQXNzaWduIHJwaGYgZmVhdHVyZVxuICAgICAgICBsZXQgbGltaXQgPSBnbHlwaHNbc3RhcnRdLnNoYXBlckluZm8uY2F0ZWdvcnkgPT09IFwiUlwiID8gMSA6IE1hdGgubWluKDMsIGVuZCAtIHN0YXJ0KTtcbiAgICAgICAgZm9yKGxldCBpMSA9IHN0YXJ0OyBpMSA8IHN0YXJ0ICsgbGltaXQ7IGkxKyspZ2x5cGhzW2kxXS5mZWF0dXJlcy5ycGhmID0gdHJ1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkY2xlYXJTdWJzdGl0dXRpb25GbGFncyhmb250LCBnbHlwaHMpIHtcbiAgICBmb3IgKGxldCBnbHlwaCBvZiBnbHlwaHMpZ2x5cGguc3Vic3RpdHV0ZWQgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRyZWNvcmRScGhmKGZvbnQsIGdseXBocykge1xuICAgIGZvciAobGV0IGdseXBoIG9mIGdseXBocylpZiAoZ2x5cGguc3Vic3RpdHV0ZWQgJiYgZ2x5cGguZmVhdHVyZXMucnBoZikgLy8gTWFyayBhIHN1YnN0aXR1dGVkIHJlcGhhLlxuICAgIGdseXBoLnNoYXBlckluZm8uY2F0ZWdvcnkgPSBcIlJcIjtcbn1cbmZ1bmN0aW9uICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRyZWNvcmRQcmVmKGZvbnQsIGdseXBocykge1xuICAgIGZvciAobGV0IGdseXBoIG9mIGdseXBocylpZiAoZ2x5cGguc3Vic3RpdHV0ZWQpIC8vIE1hcmsgYSBzdWJzdGl0dXRlZCBwcmVmIGFzIFZQcmUsIGFzIHRoZXkgYmVoYXZlIHRoZSBzYW1lIHdheS5cbiAgICBnbHlwaC5zaGFwZXJJbmZvLmNhdGVnb3J5ID0gXCJWUHJlXCI7XG59XG5mdW5jdGlvbiAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkcmVvcmRlcihmb250LCBnbHlwaHMpIHtcbiAgICBsZXQgZG90dGVkQ2lyY2xlID0gZm9udC5nbHlwaEZvckNvZGVQb2ludCgweDI1Y2MpLmlkO1xuICAgIGZvcihsZXQgc3RhcnQgPSAwLCBlbmQgPSAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkbmV4dFN5bGxhYmxlKGdseXBocywgMCk7IHN0YXJ0IDwgZ2x5cGhzLmxlbmd0aDsgc3RhcnQgPSBlbmQsIGVuZCA9ICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRuZXh0U3lsbGFibGUoZ2x5cGhzLCBzdGFydCkpe1xuICAgICAgICBsZXQgaSwgajtcbiAgICAgICAgbGV0IGluZm8gPSBnbHlwaHNbc3RhcnRdLnNoYXBlckluZm87XG4gICAgICAgIGxldCB0eXBlID0gaW5mby5zeWxsYWJsZVR5cGU7XG4gICAgICAgIC8vIE9ubHkgYSBmZXcgc3lsbGFibGUgdHlwZXMgbmVlZCByZW9yZGVyaW5nLlxuICAgICAgICBpZiAodHlwZSAhPT0gXCJ2aXJhbWFfdGVybWluYXRlZF9jbHVzdGVyXCIgJiYgdHlwZSAhPT0gXCJzdGFuZGFyZF9jbHVzdGVyXCIgJiYgdHlwZSAhPT0gXCJicm9rZW5fY2x1c3RlclwiKSBjb250aW51ZTtcbiAgICAgICAgLy8gSW5zZXJ0IGEgZG90dGVkIGNpcmNsZSBnbHlwaCBpbiBicm9rZW4gY2x1c3RlcnMuXG4gICAgICAgIGlmICh0eXBlID09PSBcImJyb2tlbl9jbHVzdGVyXCIgJiYgZG90dGVkQ2lyY2xlKSB7XG4gICAgICAgICAgICBsZXQgZyA9IG5ldyAoMCwgJDEwZTdiMjU3ZTFhOWE3NTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZm9udCwgZG90dGVkQ2lyY2xlLCBbXG4gICAgICAgICAgICAgICAgMHgyNWNjXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGcuc2hhcGVySW5mbyA9IGluZm87XG4gICAgICAgICAgICAvLyBJbnNlcnQgYWZ0ZXIgcG9zc2libGUgUmVwaGEuXG4gICAgICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgZW5kICYmIGdseXBoc1tpXS5zaGFwZXJJbmZvLmNhdGVnb3J5ID09PSBcIlJcIjsgaSsrKTtcbiAgICAgICAgICAgIGdseXBocy5zcGxpY2UoKytpLCAwLCBnKTtcbiAgICAgICAgICAgIGVuZCsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1vdmUgdGhpbmdzIGZvcndhcmQuXG4gICAgICAgIGlmIChpbmZvLmNhdGVnb3J5ID09PSBcIlJcIiAmJiBlbmQgLSBzdGFydCA+IDEpIC8vIEdvdCBhIHJlcGhhLiBSZW9yZGVyIGl0IHRvIGFmdGVyIGZpcnN0IGJhc2UsIGJlZm9yZSBmaXJzdCBoYWxhbnQuXG4gICAgICAgIGZvcihpID0gc3RhcnQgKyAxOyBpIDwgZW5kOyBpKyspe1xuICAgICAgICAgICAgaW5mbyA9IGdseXBoc1tpXS5zaGFwZXJJbmZvO1xuICAgICAgICAgICAgaWYgKCQ3YWI0OTRmZTk3NzE0M2M2JHZhciRpc0Jhc2UoaW5mbykgfHwgJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJGlzSGFsYW50KGdseXBoc1tpXSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBoaXQgYSBoYWxhbnQsIG1vdmUgYmVmb3JlIGl0OyBvdGhlcndpc2UgaXQncyBhIGJhc2U6IG1vdmUgdG8gaXQnc1xuICAgICAgICAgICAgICAgIC8vIHBsYWNlLCBhbmQgc2hpZnQgdGhpbmdzIGluIGJldHdlZW4gYmFja3dhcmQuXG4gICAgICAgICAgICAgICAgaWYgKCQ3YWI0OTRmZTk3NzE0M2M2JHZhciRpc0hhbGFudChnbHlwaHNbaV0pKSBpLS07XG4gICAgICAgICAgICAgICAgZ2x5cGhzLnNwbGljZShzdGFydCwgMCwgLi4uZ2x5cGhzLnNwbGljZShzdGFydCArIDEsIGkgLSBzdGFydCksIGdseXBoc1tpXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTW92ZSB0aGluZ3MgYmFjay5cbiAgICAgICAgZm9yKGkgPSBzdGFydCwgaiA9IGVuZDsgaSA8IGVuZDsgaSsrKXtcbiAgICAgICAgICAgIGluZm8gPSBnbHlwaHNbaV0uc2hhcGVySW5mbztcbiAgICAgICAgICAgIGlmICgkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkaXNCYXNlKGluZm8pIHx8ICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRpc0hhbGFudChnbHlwaHNbaV0pKSAvLyBJZiB3ZSBoaXQgYSBoYWxhbnQsIG1vdmUgYWZ0ZXIgaXQ7IG90aGVyd2lzZSBpdCdzIGEgYmFzZTogbW92ZSB0byBpdCdzXG4gICAgICAgICAgICAvLyBwbGFjZSwgYW5kIHNoaWZ0IHRoaW5ncyBpbiBiZXR3ZWVuIGJhY2t3YXJkLlxuICAgICAgICAgICAgaiA9ICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRpc0hhbGFudChnbHlwaHNbaV0pID8gaSArIDEgOiBpO1xuICAgICAgICAgICAgZWxzZSBpZiAoKGluZm8uY2F0ZWdvcnkgPT09IFwiVlByZVwiIHx8IGluZm8uY2F0ZWdvcnkgPT09IFwiVk1QcmVcIikgJiYgaiA8IGkpIGdseXBocy5zcGxpY2UoaiwgMSwgZ2x5cGhzW2ldLCAuLi5nbHlwaHMuc3BsaWNlKGosIGkgLSBqKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkbmV4dFN5bGxhYmxlKGdseXBocywgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPj0gZ2x5cGhzLmxlbmd0aCkgcmV0dXJuIHN0YXJ0O1xuICAgIGxldCBzeWxsYWJsZSA9IGdseXBoc1tzdGFydF0uc2hhcGVySW5mby5zeWxsYWJsZTtcbiAgICB3aGlsZSgrK3N0YXJ0IDwgZ2x5cGhzLmxlbmd0aCAmJiBnbHlwaHNbc3RhcnRdLnNoYXBlckluZm8uc3lsbGFibGUgPT09IHN5bGxhYmxlKTtcbiAgICByZXR1cm4gc3RhcnQ7XG59XG5mdW5jdGlvbiAkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkaXNIYWxhbnQoZ2x5cGgpIHtcbiAgICByZXR1cm4gZ2x5cGguc2hhcGVySW5mby5jYXRlZ29yeSA9PT0gXCJIXCIgJiYgIWdseXBoLmlzTGlnYXRlZDtcbn1cbmZ1bmN0aW9uICQ3YWI0OTRmZTk3NzE0M2M2JHZhciRpc0Jhc2UoaW5mbykge1xuICAgIHJldHVybiBpbmZvLmNhdGVnb3J5ID09PSBcIkJcIiB8fCBpbmZvLmNhdGVnb3J5ID09PSBcIkdCXCI7XG59XG5cblxuY29uc3QgJDEwMmI2ZmU1MGYxZDUwYjQkdmFyJFNIQVBFUlMgPSB7XG4gICAgYXJhYjogKDAsICQ3NjRlYjU0NGJiZTFjY2YwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIG1vbmc6ICgwLCAkNzY0ZWI1NDRiYmUxY2NmMCRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBzeXJjOiAoMCwgJDc2NGViNTQ0YmJlMWNjZjAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgXCJua28gXCI6ICgwLCAkNzY0ZWI1NDRiYmUxY2NmMCRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBwaGFnOiAoMCwgJDc2NGViNTQ0YmJlMWNjZjAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgbWFuZDogKDAsICQ3NjRlYjU0NGJiZTFjY2YwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIG1hbmk6ICgwLCAkNzY0ZWI1NDRiYmUxY2NmMCRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBwaGxwOiAoMCwgJDc2NGViNTQ0YmJlMWNjZjAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgaGFuZzogKDAsICRlMWM2YmJjOGNiNDE2ZjhjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGJuZzI6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBiZW5nOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgZGV2MjogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGRldmE6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBnanIyOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgZ3VqcjogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGd1cnU6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBndXIyOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAga25kYTogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGtuZDI6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBtbG0yOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgbWx5bTogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIG9yeTI6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBvcnlhOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgdGFtbDogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHRtbDI6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICB0ZWx1OiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgdGVsMjogKDAsICQ3ODI2ZjkwZjZmMGNlY2M5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGtobXI6ICgwLCAkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBiYWxpOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgYmF0azogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGJyYWg6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBidWdpOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgYnVoZDogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGNha206ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBjaGFtOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgZHVwbDogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGVneXA6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBncmFuOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgaGFubzogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGphdmE6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBrdGhpOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAga2FsaTogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGtoYXI6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBraG9qOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgc2luZDogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIGxlcGM6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBsaW1iOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgbWFoajogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIC8vIG1hbmQ6IFVuaXZlcnNhbFNoYXBlciwgLy8gTWFuZGFpY1xuICAgIC8vIG1hbmk6IFVuaXZlcnNhbFNoYXBlciwgLy8gTWFuaWNoYWVhblxuICAgIG10ZWk6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBtb2RpOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgLy8gbW9uZzogVW5pdmVyc2FsU2hhcGVyLCAvLyBNb25nb2xpYW5cbiAgICAvLyAnbmtvICc6IFVuaXZlcnNhbFNoYXBlciwgLy8gTuKAmUtvXG4gICAgaG1uZzogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIC8vIHBoYWc6IFVuaXZlcnNhbFNoYXBlciwgLy8gUGhhZ3MtcGFcbiAgICAvLyBwaGxwOiBVbml2ZXJzYWxTaGFwZXIsIC8vIFBzYWx0ZXIgUGFobGF2aVxuICAgIHJqbmc6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBzYXVyOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgc2hyZDogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHNpZGQ6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBzaW5oOiAoMCwgJDc4MjZmOTBmNmYwY2VjYzkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgc3VuZDogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHN5bG86ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICB0Z2xnOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgdGFnYjogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHRhbGU6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBsYW5hOiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgdGF2dDogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHRha3I6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICB0aWJ0OiAoMCwgJDdhYjQ5NGZlOTc3MTQzYzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgdGZuZzogKDAsICQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLFxuICAgIHRpcmg6ICgwLCAkN2FiNDk0ZmU5NzcxNDNjNiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSxcbiAgICBsYXRuOiAoMCwgJDY0OTk3MGQ4NzMzNWIzMGYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSksXG4gICAgREZMVDogKDAsICQ2NDk5NzBkODczMzViMzBmJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgLy8gRGVmYXVsdFxuICAgIClcbn07XG5mdW5jdGlvbiAkMTAyYjZmZTUwZjFkNTBiNCRleHBvcnQkNzg3N2E0NzhkZDMwZmQzZChzY3JpcHQpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2NyaXB0KSkgc2NyaXB0ID0gW1xuICAgICAgICBzY3JpcHRcbiAgICBdO1xuICAgIGZvciAobGV0IHMgb2Ygc2NyaXB0KXtcbiAgICAgICAgbGV0IHNoYXBlciA9ICQxMDJiNmZlNTBmMWQ1MGI0JHZhciRTSEFQRVJTW3NdO1xuICAgICAgICBpZiAoc2hhcGVyKSByZXR1cm4gc2hhcGVyO1xuICAgIH1cbiAgICByZXR1cm4gMCwgJDY0OTk3MGQ4NzMzNWIzMGYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOTtcbn1cblxuXG5cblxuXG5jbGFzcyAkMGE4NzZjNDVmMWY3YzQxYyRleHBvcnQkMmUyYmNkODczOWFlMDM5IGV4dGVuZHMgKDAsICRhODNiOWMzNmFhYTk0ZmQzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpIHtcbiAgICBhcHBseUxvb2t1cChsb29rdXBUeXBlLCB0YWJsZSkge1xuICAgICAgICBzd2l0Y2gobG9va3VwVHlwZSl7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuY292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxldCBnbHlwaCA9IHRoaXMuZ2x5cGhJdGVyYXRvci5jdXI7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCh0YWJsZS52ZXJzaW9uKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaC5pZCA9IGdseXBoLmlkICsgdGFibGUuZGVsdGFHbHlwaElEICYgMHhmZmZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdseXBoLmlkID0gdGFibGUuc3Vic3RpdHV0ZS5nZXQoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5jb3ZlcmFnZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZXF1ZW5jZSA9IHRhYmxlLnNlcXVlbmNlcy5nZXQoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBzZXF1ZW5jZSBsZW5ndGggaXMgemVybywgZGVsZXRlIHRoZSBnbHlwaC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgT3BlblR5cGUgc3BlYyBkaXNhbGxvd3MgdGhpcywgYnV0IHNlZW1zIGxpa2UgSGFyZmJ1enogYW5kIFVuaXNjcmliZSBhbGxvdyBpdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdseXBocy5zcGxpY2UodGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhJdGVyYXRvci5jdXIuaWQgPSBzZXF1ZW5jZVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhJdGVyYXRvci5jdXIubGlnYXR1cmVDb21wb25lbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZlYXR1cmVzID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmN1ci5mZWF0dXJlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjdXJHbHlwaCA9IHRoaXMuZ2x5cGhJdGVyYXRvci5jdXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVwbGFjZW1lbnQgPSBzZXF1ZW5jZS5zbGljZSgxKS5tYXAoKGdpZCwgaSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ2x5cGggPSBuZXcgKDAsICQxMGU3YjI1N2UxYTlhNzU2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHRoaXMuZm9udCwgZ2lkLCB1bmRlZmluZWQsIGZlYXR1cmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaC5zaGFwZXJJbmZvID0gY3VyR2x5cGguc2hhcGVySW5mbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaC5pc0xpZ2F0ZWQgPSBjdXJHbHlwaC5pc0xpZ2F0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2x5cGgubGlnYXR1cmVDb21wb25lbnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaC5zdWJzdGl0dXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2x5cGguaXNNdWx0aXBsaWVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2x5cGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhzLnNwbGljZSh0aGlzLmdseXBoSXRlcmF0b3IuaW5kZXggKyAxLCAwLCAuLi5yZXBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jb3ZlcmFnZUluZGV4KHRhYmxlLmNvdmVyYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IFVTRVJfSU5ERVggPSAwOyAvLyBUT0RPXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdseXBoSXRlcmF0b3IuY3VyLmlkID0gdGFibGUuYWx0ZXJuYXRlU2V0LmdldChpbmRleClbVVNFUl9JTkRFWF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5jb3ZlcmFnZUluZGV4KHRhYmxlLmNvdmVyYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBsaWdhdHVyZSBvZiB0YWJsZS5saWdhdHVyZVNldHMuZ2V0KGluZGV4KSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2hlZCA9IHRoaXMuc2VxdWVuY2VNYXRjaEluZGljZXMoMSwgbGlnYXR1cmUuY29tcG9uZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1ckdseXBoID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmN1cjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbmNhdGVuYXRlIGFsbCBvZiB0aGUgY2hhcmFjdGVycyB0aGUgbmV3IGxpZ2F0dXJlIHdpbGwgcmVwcmVzZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcmFjdGVycyA9IGN1ckdseXBoLmNvZGVQb2ludHMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4IG9mIG1hdGNoZWQpY2hhcmFjdGVycy5wdXNoKC4uLnRoaXMuZ2x5cGhzW2luZGV4XS5jb2RlUG9pbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgcmVwbGFjZW1lbnQgbGlnYXR1cmUgZ2x5cGhcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaWdhdHVyZUdseXBoID0gbmV3ICgwLCAkMTBlN2IyNTdlMWE5YTc1NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzLmZvbnQsIGxpZ2F0dXJlLmdseXBoLCBjaGFyYWN0ZXJzLCBjdXJHbHlwaC5mZWF0dXJlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdhdHVyZUdseXBoLnNoYXBlckluZm8gPSBjdXJHbHlwaC5zaGFwZXJJbmZvO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlnYXR1cmVHbHlwaC5pc0xpZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlnYXR1cmVHbHlwaC5zdWJzdGl0dXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGcm9tIEhhcmZidXp6OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBJZiBpdCAqaXMqIGEgbWFyayBsaWdhdHVyZSwgd2UgZG9uJ3QgYWxsb2NhdGUgYSBuZXcgbGlnYXR1cmUgaWQsIGFuZCBsZWF2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB0aGUgbGlnYXR1cmUgdG8ga2VlcCBpdHMgb2xkIGxpZ2F0dXJlIGlkLiAgVGhpcyB3aWxsIGFsbG93IGl0IHRvIGF0dGFjaCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBhIGJhc2UgbGlnYXR1cmUgaW4gR1BPUy4gIEVnLiBpZiB0aGUgc2VxdWVuY2UgaXM6IExBTSxMQU0sU0hBRERBLEZBVEhBLEhFSCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgYW5kIExBTSxMQU0sSEVIIGZvciBhIGxpZ2F0dXJlLCB0aGV5IHdpbGwgbGVhdmUgU0hBRERBIGFuZCBGQVRIQSB3aXRoIGFcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgbGlnYXR1cmUgaWQgYW5kIGNvbXBvbmVudCB2YWx1ZSBvZiAyLiAgVGhlbiBpZiBTSEFEREEsRkFUSEEgZm9ybSBhIGxpZ2F0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGxhdGVyLCB3ZSBkb24ndCB3YW50IHRoZW0gdG8gbG9zZSB0aGVpciBsaWdhdHVyZSBpZC9jb21wb25lbnQsIG90aGVyd2lzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBHUE9TIHdpbGwgZmFpbCB0byBjb3JyZWN0bHkgcG9zaXRpb24gdGhlIG1hcmsgbGlnYXR1cmUgb24gdG9wIG9mIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBMQU0sTEFNLEhFSCBsaWdhdHVyZS4gU2VlIGh0dHBzOi8vYnVnemlsbGEuZ25vbWUub3JnL3Nob3dfYnVnLmNnaT9pZD02NzYzNDNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAtIElmIGEgbGlnYXR1cmUgaXMgZm9ybWVkIG9mIGNvbXBvbmVudHMgdGhhdCBzb21lIG9mIHdoaWNoIGFyZSBhbHNvIGxpZ2F0dXJlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB0aGVtc2VsdmVzLCBhbmQgdGhvc2UgbGlnYXR1cmUgY29tcG9uZW50cyBoYWQgbWFya3MgYXR0YWNoZWQgdG8gKnRoZWlyKlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjb21wb25lbnRzLCB3ZSBoYXZlIHRvIGF0dGFjaCB0aGUgbWFya3MgdG8gdGhlIG5ldyBsaWdhdHVyZSBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgcG9zaXRpb25zISAgTm93ICp0aGF0KidzIHRyaWNreSEgIEFuZCB0aGVzZSBtYXJrcyBtYXkgYmUgZm9sbG93aW5nIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBsYXN0IGNvbXBvbmVudCBvZiB0aGUgd2hvbGUgc2VxdWVuY2UsIHNvIHdlIHNob3VsZCBsb29wIGZvcndhcmQgbG9va2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBmb3IgdGhlbSBhbmQgdXBkYXRlIHRoZW0uXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBFZy4gdGhlIHNlcXVlbmNlIGlzIExBTSxMQU0sU0hBRERBLEZBVEhBLEhFSCwgYW5kIHRoZSBmb250IGZpcnN0IGZvcm1zIGFcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgJ2NhbHQnIGxpZ2F0dXJlIG9mIExBTSxIRUgsIGxlYXZpbmcgdGhlIFNIQUREQSBhbmQgRkFUSEEgd2l0aCBhIGxpZ2F0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGlkIGFuZCBjb21wb25lbnQgPT0gMS4gIE5vdywgZHVyaW5nICdsaWdhJywgdGhlIExBTSBhbmQgdGhlIExBTS1IRUggbGlnYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZm9ybSBhIExBTS1MQU0tSEVIIGxpZ2F0dXJlLiAgV2UgbmVlZCB0byByZWFzc2lnbiB0aGUgU0hBRERBIGFuZCBGQVRIQSB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICB0aGUgbmV3IGxpZ2F0dXJlIHdpdGggYSBjb21wb25lbnQgdmFsdWUgb2YgMi5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIFRoaXMgaW4gZmFjdCBoYXBwZW5lZCB0byBhIGZvbnQuLi4gIFNlZSBodHRwczovL2J1Z3ppbGxhLmdub21lLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDM3NjMzXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNNYXJrTGlnYXR1cmUgPSBjdXJHbHlwaC5pc01hcms7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbWF0Y2hlZC5sZW5ndGggJiYgaXNNYXJrTGlnYXR1cmU7IGkrKylpc01hcmtMaWdhdHVyZSA9IHRoaXMuZ2x5cGhzW21hdGNoZWRbaV1dLmlzTWFyaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2F0dXJlR2x5cGgubGlnYXR1cmVJRCA9IGlzTWFya0xpZ2F0dXJlID8gbnVsbCA6IHRoaXMubGlnYXR1cmVJRCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3RMaWdJRCA9IGN1ckdseXBoLmxpZ2F0dXJlSUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdE51bUNvbXBzID0gY3VyR2x5cGguY29kZVBvaW50cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VyQ29tcHMgPSBsYXN0TnVtQ29tcHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWR4ID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBsaWdhdHVyZUlEIGFuZCBsaWdhdHVyZUNvbXBvbmVudCBvbiBnbHlwaHMgdGhhdCB3ZXJlIHNraXBwZWQgaW4gdGhlIG1hdGNoZWQgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGFsbG93cyBHUE9TIHRvIGF0dGFjaCBtYXJrcyB0byB0aGUgY29ycmVjdCBsaWdhdHVyZSBjb21wb25lbnRzLlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWF0Y2hJbmRleCBvZiBtYXRjaGVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBhc3NpZ24gbmV3IGxpZ2F0dXJlIGNvbXBvbmVudHMgZm9yIG1hcmsgbGlnYXR1cmVzIChzZWUgYWJvdmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFya0xpZ2F0dXJlKSBpZHggPSBtYXRjaEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugd2hpbGUoaWR4IDwgbWF0Y2hJbmRleCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaWdhdHVyZUNvbXBvbmVudCA9IGN1ckNvbXBzIC0gbGFzdE51bUNvbXBzICsgTWF0aC5taW4odGhpcy5nbHlwaHNbaWR4XS5saWdhdHVyZUNvbXBvbmVudCB8fCAxLCBsYXN0TnVtQ29tcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdseXBoc1tpZHhdLmxpZ2F0dXJlSUQgPSBsaWdhdHVyZUdseXBoLmxpZ2F0dXJlSUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhzW2lkeF0ubGlnYXR1cmVDb21wb25lbnQgPSBsaWdhdHVyZUNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWR4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RMaWdJRCA9IHRoaXMuZ2x5cGhzW2lkeF0ubGlnYXR1cmVJRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0TnVtQ29tcHMgPSB0aGlzLmdseXBoc1tpZHhdLmNvZGVQb2ludHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNvbXBzICs9IGxhc3ROdW1Db21wcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHgrKzsgLy8gc2tpcCBiYXNlIGdseXBoXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGp1c3QgbGlnYXR1cmUgY29tcG9uZW50cyBmb3IgYW55IG1hcmtzIGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RMaWdJRCAmJiAhaXNNYXJrTGlnYXR1cmUpIGZvcihsZXQgaTEgPSBpZHg7IGkxIDwgdGhpcy5nbHlwaHMubGVuZ3RoOyBpMSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nbHlwaHNbaTFdLmxpZ2F0dXJlSUQgPT09IGxhc3RMaWdJRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlnYXR1cmVDb21wb25lbnQgPSBjdXJDb21wcyAtIGxhc3ROdW1Db21wcyArIE1hdGgubWluKHRoaXMuZ2x5cGhzW2kxXS5saWdhdHVyZUNvbXBvbmVudCB8fCAxLCBsYXN0TnVtQ29tcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdseXBoc1tpMV0ubGlnYXR1cmVDb21wb25lbnQgPSBsaWdhdHVyZUNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxldGUgdGhlIG1hdGNoZWQgZ2x5cGhzLCBhbmQgcmVwbGFjZSB0aGUgY3VycmVudCBnbHlwaCB3aXRoIHRoZSBsaWdhdHVyZSBnbHlwaFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpMiA9IG1hdGNoZWQubGVuZ3RoIC0gMTsgaTIgPj0gMDsgaTItLSl0aGlzLmdseXBocy5zcGxpY2UobWF0Y2hlZFtpMl0sIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbHlwaHNbdGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4XSA9IGxpZ2F0dXJlR2x5cGg7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5Q29udGV4dCh0YWJsZSk7XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlDaGFpbmluZ0NvbnRleHQodGFibGUpO1xuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5TG9va3VwKHRhYmxlLmxvb2t1cFR5cGUsIHRhYmxlLmV4dGVuc2lvbik7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgR1NVQiBsb29rdXBUeXBlICR7bG9va3VwVHlwZX0gaXMgbm90IHN1cHBvcnRlZGApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuY2xhc3MgJGM5NmM5MzU4N2Q0OWMxNGQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkYTgzYjljMzZhYWE5NGZkMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgYXBwbHlQb3NpdGlvblZhbHVlKHNlcXVlbmNlSW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIGxldCBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb25zW3RoaXMuZ2x5cGhJdGVyYXRvci5wZWVrSW5kZXgoc2VxdWVuY2VJbmRleCldO1xuICAgICAgICBpZiAodmFsdWUueEFkdmFuY2UgIT0gbnVsbCkgcG9zaXRpb24ueEFkdmFuY2UgKz0gdmFsdWUueEFkdmFuY2U7XG4gICAgICAgIGlmICh2YWx1ZS55QWR2YW5jZSAhPSBudWxsKSBwb3NpdGlvbi55QWR2YW5jZSArPSB2YWx1ZS55QWR2YW5jZTtcbiAgICAgICAgaWYgKHZhbHVlLnhQbGFjZW1lbnQgIT0gbnVsbCkgcG9zaXRpb24ueE9mZnNldCArPSB2YWx1ZS54UGxhY2VtZW50O1xuICAgICAgICBpZiAodmFsdWUueVBsYWNlbWVudCAhPSBudWxsKSBwb3NpdGlvbi55T2Zmc2V0ICs9IHZhbHVlLnlQbGFjZW1lbnQ7XG4gICAgICAgIC8vIEFkanVzdG1lbnRzIGZvciBmb250IHZhcmlhdGlvbnNcbiAgICAgICAgbGV0IHZhcmlhdGlvblByb2Nlc3NvciA9IHRoaXMuZm9udC5fdmFyaWF0aW9uUHJvY2Vzc29yO1xuICAgICAgICBsZXQgdmFyaWF0aW9uU3RvcmUgPSB0aGlzLmZvbnQuR0RFRiAmJiB0aGlzLmZvbnQuR0RFRi5pdGVtVmFyaWF0aW9uU3RvcmU7XG4gICAgICAgIGlmICh2YXJpYXRpb25Qcm9jZXNzb3IgJiYgdmFyaWF0aW9uU3RvcmUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS54UGxhRGV2aWNlKSBwb3NpdGlvbi54T2Zmc2V0ICs9IHZhcmlhdGlvblByb2Nlc3Nvci5nZXREZWx0YSh2YXJpYXRpb25TdG9yZSwgdmFsdWUueFBsYURldmljZS5hLCB2YWx1ZS54UGxhRGV2aWNlLmIpO1xuICAgICAgICAgICAgaWYgKHZhbHVlLnlQbGFEZXZpY2UpIHBvc2l0aW9uLnlPZmZzZXQgKz0gdmFyaWF0aW9uUHJvY2Vzc29yLmdldERlbHRhKHZhcmlhdGlvblN0b3JlLCB2YWx1ZS55UGxhRGV2aWNlLmEsIHZhbHVlLnlQbGFEZXZpY2UuYik7XG4gICAgICAgICAgICBpZiAodmFsdWUueEFkdkRldmljZSkgcG9zaXRpb24ueEFkdmFuY2UgKz0gdmFyaWF0aW9uUHJvY2Vzc29yLmdldERlbHRhKHZhcmlhdGlvblN0b3JlLCB2YWx1ZS54QWR2RGV2aWNlLmEsIHZhbHVlLnhBZHZEZXZpY2UuYik7XG4gICAgICAgICAgICBpZiAodmFsdWUueUFkdkRldmljZSkgcG9zaXRpb24ueUFkdmFuY2UgKz0gdmFyaWF0aW9uUHJvY2Vzc29yLmdldERlbHRhKHZhcmlhdGlvblN0b3JlLCB2YWx1ZS55QWR2RGV2aWNlLmEsIHZhbHVlLnlBZHZEZXZpY2UuYik7XG4gICAgICAgIH1cbiAgICAvLyBUT0RPOiBkZXZpY2UgdGFibGVzXG4gICAgfVxuICAgIGFwcGx5TG9va3VwKGxvb2t1cFR5cGUsIHRhYmxlKSB7XG4gICAgICAgIHN3aXRjaChsb29rdXBUeXBlKXtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5jb3ZlcmFnZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKHRhYmxlLnZlcnNpb24pe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlQb3NpdGlvblZhbHVlKDAsIHRhYmxlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5UG9zaXRpb25WYWx1ZSgwLCB0YWJsZS52YWx1ZXMuZ2V0KGluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRHbHlwaCA9IHRoaXMuZ2x5cGhJdGVyYXRvci5wZWVrKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dEdseXBoKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5jb3ZlcmFnZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKHRhYmxlLnZlcnNpb24pe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZXQgPSB0YWJsZS5wYWlyU2V0cy5nZXQoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHBhaXIgb2Ygc2V0KWlmIChwYWlyLnNlY29uZEdseXBoID09PSBuZXh0R2x5cGguaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBseVBvc2l0aW9uVmFsdWUoMCwgcGFpci52YWx1ZTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5UG9zaXRpb25WYWx1ZSgxLCBwYWlyLnZhbHVlMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNsYXNzMSA9IHRoaXMuZ2V0Q2xhc3NJRCh0aGlzLmdseXBoSXRlcmF0b3IuY3VyLmlkLCB0YWJsZS5jbGFzc0RlZjEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjbGFzczIgPSB0aGlzLmdldENsYXNzSUQobmV4dEdseXBoLmlkLCB0YWJsZS5jbGFzc0RlZjIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGFzczEgPT09IC0xIHx8IGNsYXNzMiA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFpcjEgPSB0YWJsZS5jbGFzc1JlY29yZHMuZ2V0KGNsYXNzMSkuZ2V0KGNsYXNzMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBseVBvc2l0aW9uVmFsdWUoMCwgcGFpcjEudmFsdWUxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5UG9zaXRpb25WYWx1ZSgxLCBwYWlyMS52YWx1ZTIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRJbmRleCA9IHRoaXMuZ2x5cGhJdGVyYXRvci5wZWVrSW5kZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRHbHlwaCA9IHRoaXMuZ2x5cGhzW25leHRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dEdseXBoKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJSZWNvcmQgPSB0YWJsZS5lbnRyeUV4aXRSZWNvcmRzW3RoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5jb3ZlcmFnZSldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN1clJlY29yZCB8fCAhY3VyUmVjb3JkLmV4aXRBbmNob3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRSZWNvcmQgPSB0YWJsZS5lbnRyeUV4aXRSZWNvcmRzW3RoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5jb3ZlcmFnZSwgbmV4dEdseXBoLmlkKV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dFJlY29yZCB8fCAhbmV4dFJlY29yZC5lbnRyeUFuY2hvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZW50cnkgPSB0aGlzLmdldEFuY2hvcihuZXh0UmVjb3JkLmVudHJ5QW5jaG9yKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGV4aXQgPSB0aGlzLmdldEFuY2hvcihjdXJSZWNvcmQuZXhpdEFuY2hvcik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXIgPSB0aGlzLnBvc2l0aW9uc1t0aGlzLmdseXBoSXRlcmF0b3IuaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHRoaXMucG9zaXRpb25zW25leHRJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBkO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2godGhpcy5kaXJlY3Rpb24pe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImx0clwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ci54QWR2YW5jZSA9IGV4aXQueCArIGN1ci54T2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBlbnRyeS54ICsgbmV4dC54T2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQueEFkdmFuY2UgLT0gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0LnhPZmZzZXQgLT0gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJydGxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZXhpdC54ICsgY3VyLnhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyLnhBZHZhbmNlIC09IGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyLnhPZmZzZXQgLT0gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0LnhBZHZhbmNlID0gZW50cnkueCArIG5leHQueE9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nbHlwaEl0ZXJhdG9yLmZsYWdzLnJpZ2h0VG9MZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdseXBoSXRlcmF0b3IuY3VyLmN1cnNpdmVBdHRhY2htZW50ID0gbmV4dEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyLnlPZmZzZXQgPSBlbnRyeS55IC0gZXhpdC55O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEdseXBoLmN1cnNpdmVBdHRhY2htZW50ID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyLnlPZmZzZXQgPSBleGl0LnkgLSBlbnRyeS55O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrSW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUubWFya0NvdmVyYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtJbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VhcmNoIGJhY2t3YXJkIGZvciBhIGJhc2UgZ2x5cGhcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJhc2VHbHlwaEluZGV4ID0gdGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSgtLWJhc2VHbHlwaEluZGV4ID49IDAgJiYgKHRoaXMuZ2x5cGhzW2Jhc2VHbHlwaEluZGV4XS5pc01hcmsgfHwgdGhpcy5nbHlwaHNbYmFzZUdseXBoSW5kZXhdLmxpZ2F0dXJlQ29tcG9uZW50ID4gMCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUdseXBoSW5kZXggPCAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxldCBiYXNlSW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUuYmFzZUNvdmVyYWdlLCB0aGlzLmdseXBoc1tiYXNlR2x5cGhJbmRleF0uaWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZUluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWFya1JlY29yZCA9IHRhYmxlLm1hcmtBcnJheVttYXJrSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYmFzZUFuY2hvciA9IHRhYmxlLmJhc2VBcnJheVtiYXNlSW5kZXhdW21hcmtSZWNvcmQuY2xhc3NdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5QW5jaG9yKG1hcmtSZWNvcmQsIGJhc2VBbmNob3IsIGJhc2VHbHlwaEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtJbmRleCA9IHRoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5tYXJrQ292ZXJhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFya0luZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBzZWFyY2ggYmFja3dhcmQgZm9yIGEgYmFzZSBnbHlwaFxuICAgICAgICAgICAgICAgICAgICBsZXQgYmFzZUdseXBoSW5kZXggPSB0aGlzLmdseXBoSXRlcmF0b3IuaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKC0tYmFzZUdseXBoSW5kZXggPj0gMCAmJiB0aGlzLmdseXBoc1tiYXNlR2x5cGhJbmRleF0uaXNNYXJrKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VHbHlwaEluZGV4IDwgMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGlnSW5kZXggPSB0aGlzLmNvdmVyYWdlSW5kZXgodGFibGUubGlnYXR1cmVDb3ZlcmFnZSwgdGhpcy5nbHlwaHNbYmFzZUdseXBoSW5kZXhdLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpZ0luZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGlnQXR0YWNoID0gdGFibGUubGlnYXR1cmVBcnJheVtsaWdJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrR2x5cGggPSB0aGlzLmdseXBoSXRlcmF0b3IuY3VyO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGlnR2x5cGggPSB0aGlzLmdseXBoc1tiYXNlR2x5cGhJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb21wSW5kZXggPSBsaWdHbHlwaC5saWdhdHVyZUlEICYmIGxpZ0dseXBoLmxpZ2F0dXJlSUQgPT09IG1hcmtHbHlwaC5saWdhdHVyZUlEICYmIG1hcmtHbHlwaC5saWdhdHVyZUNvbXBvbmVudCA+IDAgPyBNYXRoLm1pbihtYXJrR2x5cGgubGlnYXR1cmVDb21wb25lbnQsIGxpZ0dseXBoLmNvZGVQb2ludHMubGVuZ3RoKSAtIDEgOiBsaWdHbHlwaC5jb2RlUG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrUmVjb3JkID0gdGFibGUubWFya0FycmF5W21hcmtJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBiYXNlQW5jaG9yID0gbGlnQXR0YWNoW2NvbXBJbmRleF1bbWFya1JlY29yZC5jbGFzc107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBbmNob3IobWFya1JlY29yZCwgYmFzZUFuY2hvciwgYmFzZUdseXBoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWFyazFJbmRleCA9IHRoaXMuY292ZXJhZ2VJbmRleCh0YWJsZS5tYXJrMUNvdmVyYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmsxSW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgcHJldmlvdXMgbWFyayB0byBhdHRhY2ggdG9cbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXZJbmRleCA9IHRoaXMuZ2x5cGhJdGVyYXRvci5wZWVrSW5kZXgoLTEpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcHJldiA9IHRoaXMuZ2x5cGhzW3ByZXZJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJldiB8fCAhcHJldi5pc01hcmspIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1ciA9IHRoaXMuZ2x5cGhJdGVyYXRvci5jdXI7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbG9naWMgd2FzIGJvcnJvd2VkIGZyb20gSGFyZmJ1enpcbiAgICAgICAgICAgICAgICAgICAgbGV0IGdvb2QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1ci5saWdhdHVyZUlEID09PSBwcmV2LmxpZ2F0dXJlSUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3VyLmxpZ2F0dXJlSUQpIGdvb2QgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY3VyLmxpZ2F0dXJlQ29tcG9uZW50ID09PSBwcmV2LmxpZ2F0dXJlQ29tcG9uZW50KSBnb29kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8vIElmIGxpZ2F0dXJlIGlkcyBkb24ndCBtYXRjaCwgaXQgbWF5IGJlIHRoZSBjYXNlIHRoYXQgb25lIG9mIHRoZSBtYXJrc1xuICAgICAgICAgICAgICAgICAgICAvLyBpdHNlbGYgaXMgYSBsaWdhdHVyZSwgaW4gd2hpY2ggY2FzZSBtYXRjaC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1ci5saWdhdHVyZUlEICYmICFjdXIubGlnYXR1cmVDb21wb25lbnQgfHwgcHJldi5saWdhdHVyZUlEICYmICFwcmV2LmxpZ2F0dXJlQ29tcG9uZW50KSBnb29kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFnb29kKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrMkluZGV4ID0gdGhpcy5jb3ZlcmFnZUluZGV4KHRhYmxlLm1hcmsyQ292ZXJhZ2UsIHByZXYuaWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWFyazJJbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtSZWNvcmQgPSB0YWJsZS5tYXJrMUFycmF5W21hcmsxSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYmFzZUFuY2hvciA9IHRhYmxlLm1hcmsyQXJyYXlbbWFyazJJbmRleF1bbWFya1JlY29yZC5jbGFzc107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBbmNob3IobWFya1JlY29yZCwgYmFzZUFuY2hvciwgcHJldkluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5Q29udGV4dCh0YWJsZSk7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlDaGFpbmluZ0NvbnRleHQodGFibGUpO1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5TG9va3VwKHRhYmxlLmxvb2t1cFR5cGUsIHRhYmxlLmV4dGVuc2lvbik7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgR1BPUyB0YWJsZTogJHtsb29rdXBUeXBlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFwcGx5QW5jaG9yKG1hcmtSZWNvcmQsIGJhc2VBbmNob3IsIGJhc2VHbHlwaEluZGV4KSB7XG4gICAgICAgIGxldCBiYXNlQ29vcmRzID0gdGhpcy5nZXRBbmNob3IoYmFzZUFuY2hvcik7XG4gICAgICAgIGxldCBtYXJrQ29vcmRzID0gdGhpcy5nZXRBbmNob3IobWFya1JlY29yZC5tYXJrQW5jaG9yKTtcbiAgICAgICAgbGV0IGJhc2VQb3MgPSB0aGlzLnBvc2l0aW9uc1tiYXNlR2x5cGhJbmRleF07XG4gICAgICAgIGxldCBtYXJrUG9zID0gdGhpcy5wb3NpdGlvbnNbdGhpcy5nbHlwaEl0ZXJhdG9yLmluZGV4XTtcbiAgICAgICAgbWFya1Bvcy54T2Zmc2V0ID0gYmFzZUNvb3Jkcy54IC0gbWFya0Nvb3Jkcy54O1xuICAgICAgICBtYXJrUG9zLnlPZmZzZXQgPSBiYXNlQ29vcmRzLnkgLSBtYXJrQ29vcmRzLnk7XG4gICAgICAgIHRoaXMuZ2x5cGhJdGVyYXRvci5jdXIubWFya0F0dGFjaG1lbnQgPSBiYXNlR2x5cGhJbmRleDtcbiAgICB9XG4gICAgZ2V0QW5jaG9yKGFuY2hvcikge1xuICAgICAgICAvLyBUT0RPOiBjb250b3VyIHBvaW50LCBkZXZpY2UgdGFibGVzXG4gICAgICAgIGxldCB4ID0gYW5jaG9yLnhDb29yZGluYXRlO1xuICAgICAgICBsZXQgeSA9IGFuY2hvci55Q29vcmRpbmF0ZTtcbiAgICAgICAgLy8gQWRqdXN0bWVudHMgZm9yIGZvbnQgdmFyaWF0aW9uc1xuICAgICAgICBsZXQgdmFyaWF0aW9uUHJvY2Vzc29yID0gdGhpcy5mb250Ll92YXJpYXRpb25Qcm9jZXNzb3I7XG4gICAgICAgIGxldCB2YXJpYXRpb25TdG9yZSA9IHRoaXMuZm9udC5HREVGICYmIHRoaXMuZm9udC5HREVGLml0ZW1WYXJpYXRpb25TdG9yZTtcbiAgICAgICAgaWYgKHZhcmlhdGlvblByb2Nlc3NvciAmJiB2YXJpYXRpb25TdG9yZSkge1xuICAgICAgICAgICAgaWYgKGFuY2hvci54RGV2aWNlVGFibGUpIHggKz0gdmFyaWF0aW9uUHJvY2Vzc29yLmdldERlbHRhKHZhcmlhdGlvblN0b3JlLCBhbmNob3IueERldmljZVRhYmxlLmEsIGFuY2hvci54RGV2aWNlVGFibGUuYik7XG4gICAgICAgICAgICBpZiAoYW5jaG9yLnlEZXZpY2VUYWJsZSkgeSArPSB2YXJpYXRpb25Qcm9jZXNzb3IuZ2V0RGVsdGEodmFyaWF0aW9uU3RvcmUsIGFuY2hvci55RGV2aWNlVGFibGUuYSwgYW5jaG9yLnlEZXZpY2VUYWJsZS5iKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgIHk6IHlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXBwbHlGZWF0dXJlcyh1c2VyRmVhdHVyZXMsIGdseXBocywgYWR2YW5jZXMpIHtcbiAgICAgICAgc3VwZXIuYXBwbHlGZWF0dXJlcyh1c2VyRmVhdHVyZXMsIGdseXBocywgYWR2YW5jZXMpO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5nbHlwaHMubGVuZ3RoOyBpKyspdGhpcy5maXhDdXJzaXZlQXR0YWNobWVudChpKTtcbiAgICAgICAgdGhpcy5maXhNYXJrQXR0YWNobWVudCgpO1xuICAgIH1cbiAgICBmaXhDdXJzaXZlQXR0YWNobWVudChpKSB7XG4gICAgICAgIGxldCBnbHlwaCA9IHRoaXMuZ2x5cGhzW2ldO1xuICAgICAgICBpZiAoZ2x5cGguY3Vyc2l2ZUF0dGFjaG1lbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IGogPSBnbHlwaC5jdXJzaXZlQXR0YWNobWVudDtcbiAgICAgICAgICAgIGdseXBoLmN1cnNpdmVBdHRhY2htZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZml4Q3Vyc2l2ZUF0dGFjaG1lbnQoaik7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uc1tpXS55T2Zmc2V0ICs9IHRoaXMucG9zaXRpb25zW2pdLnlPZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZml4TWFya0F0dGFjaG1lbnQoKSB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmdseXBocy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgZ2x5cGggPSB0aGlzLmdseXBoc1tpXTtcbiAgICAgICAgICAgIGlmIChnbHlwaC5tYXJrQXR0YWNobWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IGogPSBnbHlwaC5tYXJrQXR0YWNobWVudDtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uc1tpXS54T2Zmc2V0ICs9IHRoaXMucG9zaXRpb25zW2pdLnhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbnNbaV0ueU9mZnNldCArPSB0aGlzLnBvc2l0aW9uc1tqXS55T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gXCJsdHJcIikgZm9yKGxldCBrID0gajsgayA8IGk7IGsrKyl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25zW2ldLnhPZmZzZXQgLT0gdGhpcy5wb3NpdGlvbnNba10ueEFkdmFuY2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25zW2ldLnlPZmZzZXQgLT0gdGhpcy5wb3NpdGlvbnNba10ueUFkdmFuY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgZm9yKGxldCBrMSA9IGogKyAxOyBrMSA8IGkgKyAxOyBrMSsrKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbnNbaV0ueE9mZnNldCArPSB0aGlzLnBvc2l0aW9uc1trMV0ueEFkdmFuY2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25zW2ldLnlPZmZzZXQgKz0gdGhpcy5wb3NpdGlvbnNbazFdLnlBZHZhbmNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5jbGFzcyAkYTYyNDkyODEwZGUyN2UzZCRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBzZXR1cChnbHlwaFJ1bikge1xuICAgICAgICAvLyBNYXAgZ2x5cGhzIHRvIEdseXBoSW5mbyBvYmplY3RzIHNvIGRhdGEgY2FuIGJlIHBhc3NlZCBiZXR3ZWVuXG4gICAgICAgIC8vIEdTVUIgYW5kIEdQT1Mgd2l0aG91dCBtdXRhdGluZyB0aGUgcmVhbCAoc2hhcmVkKSBHbHlwaCBvYmplY3RzLlxuICAgICAgICB0aGlzLmdseXBoSW5mb3MgPSBnbHlwaFJ1bi5nbHlwaHMubWFwKChnbHlwaCk9Pm5ldyAoMCwgJDEwZTdiMjU3ZTFhOWE3NTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkodGhpcy5mb250LCBnbHlwaC5pZCwgW1xuICAgICAgICAgICAgICAgIC4uLmdseXBoLmNvZGVQb2ludHNcbiAgICAgICAgICAgIF0pKTtcbiAgICAgICAgLy8gU2VsZWN0IGEgc2NyaXB0IGJhc2VkIG9uIHdoYXQgaXMgYXZhaWxhYmxlIGluIEdTVUIvR1BPUy5cbiAgICAgICAgbGV0IHNjcmlwdCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLkdQT1NQcm9jZXNzb3IpIHNjcmlwdCA9IHRoaXMuR1BPU1Byb2Nlc3Nvci5zZWxlY3RTY3JpcHQoZ2x5cGhSdW4uc2NyaXB0LCBnbHlwaFJ1bi5sYW5ndWFnZSwgZ2x5cGhSdW4uZGlyZWN0aW9uKTtcbiAgICAgICAgaWYgKHRoaXMuR1NVQlByb2Nlc3Nvcikgc2NyaXB0ID0gdGhpcy5HU1VCUHJvY2Vzc29yLnNlbGVjdFNjcmlwdChnbHlwaFJ1bi5zY3JpcHQsIGdseXBoUnVuLmxhbmd1YWdlLCBnbHlwaFJ1bi5kaXJlY3Rpb24pO1xuICAgICAgICAvLyBDaG9vc2UgYSBzaGFwZXIgYmFzZWQgb24gdGhlIHNjcmlwdCwgYW5kIHNldHVwIGEgc2hhcGluZyBwbGFuLlxuICAgICAgICAvLyBUaGlzIGRldGVybWluZXMgd2hpY2ggZmVhdHVyZXMgdG8gYXBwbHkgdG8gd2hpY2ggZ2x5cGhzLlxuICAgICAgICB0aGlzLnNoYXBlciA9ICQxMDJiNmZlNTBmMWQ1MGI0JGV4cG9ydCQ3ODc3YTQ3OGRkMzBmZDNkKHNjcmlwdCk7XG4gICAgICAgIHRoaXMucGxhbiA9IG5ldyAoMCwgJDk0ZDdhNzNiZDJlZGZjOWEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkodGhpcy5mb250LCBzY3JpcHQsIGdseXBoUnVuLmRpcmVjdGlvbik7XG4gICAgICAgIHRoaXMuc2hhcGVyLnBsYW4odGhpcy5wbGFuLCB0aGlzLmdseXBoSW5mb3MsIGdseXBoUnVuLmZlYXR1cmVzKTtcbiAgICAgICAgLy8gQXNzaWduIGNob3NlbiBmZWF0dXJlcyB0byBvdXRwdXQgZ2x5cGggcnVuXG4gICAgICAgIGZvcihsZXQga2V5IGluIHRoaXMucGxhbi5hbGxGZWF0dXJlcylnbHlwaFJ1bi5mZWF0dXJlc1trZXldID0gdHJ1ZTtcbiAgICB9XG4gICAgc3Vic3RpdHV0ZShnbHlwaFJ1bikge1xuICAgICAgICBpZiAodGhpcy5HU1VCUHJvY2Vzc29yKSB7XG4gICAgICAgICAgICB0aGlzLnBsYW4ucHJvY2Vzcyh0aGlzLkdTVUJQcm9jZXNzb3IsIHRoaXMuZ2x5cGhJbmZvcyk7XG4gICAgICAgICAgICAvLyBNYXAgZ2x5cGggaW5mb3MgYmFjayB0byBub3JtYWwgR2x5cGggb2JqZWN0c1xuICAgICAgICAgICAgZ2x5cGhSdW4uZ2x5cGhzID0gdGhpcy5nbHlwaEluZm9zLm1hcCgoZ2x5cGhJbmZvKT0+dGhpcy5mb250LmdldEdseXBoKGdseXBoSW5mby5pZCwgZ2x5cGhJbmZvLmNvZGVQb2ludHMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwb3NpdGlvbihnbHlwaFJ1bikge1xuICAgICAgICBpZiAodGhpcy5zaGFwZXIuemVyb01hcmtXaWR0aHMgPT09IFwiQkVGT1JFX0dQT1NcIikgdGhpcy56ZXJvTWFya0FkdmFuY2VzKGdseXBoUnVuLnBvc2l0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLkdQT1NQcm9jZXNzb3IpIHRoaXMucGxhbi5wcm9jZXNzKHRoaXMuR1BPU1Byb2Nlc3NvciwgdGhpcy5nbHlwaEluZm9zLCBnbHlwaFJ1bi5wb3NpdGlvbnMpO1xuICAgICAgICBpZiAodGhpcy5zaGFwZXIuemVyb01hcmtXaWR0aHMgPT09IFwiQUZURVJfR1BPU1wiKSB0aGlzLnplcm9NYXJrQWR2YW5jZXMoZ2x5cGhSdW4ucG9zaXRpb25zKTtcbiAgICAgICAgLy8gUmV2ZXJzZSB0aGUgZ2x5cGhzIGFuZCBwb3NpdGlvbnMgaWYgdGhlIHNjcmlwdCBpcyByaWdodC10by1sZWZ0XG4gICAgICAgIGlmIChnbHlwaFJ1bi5kaXJlY3Rpb24gPT09IFwicnRsXCIpIHtcbiAgICAgICAgICAgIGdseXBoUnVuLmdseXBocy5yZXZlcnNlKCk7XG4gICAgICAgICAgICBnbHlwaFJ1bi5wb3NpdGlvbnMucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLkdQT1NQcm9jZXNzb3IgJiYgdGhpcy5HUE9TUHJvY2Vzc29yLmZlYXR1cmVzO1xuICAgIH1cbiAgICB6ZXJvTWFya0FkdmFuY2VzKHBvc2l0aW9ucykge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5nbHlwaEluZm9zLmxlbmd0aDsgaSsrKWlmICh0aGlzLmdseXBoSW5mb3NbaV0uaXNNYXJrKSB7XG4gICAgICAgICAgICBwb3NpdGlvbnNbaV0ueEFkdmFuY2UgPSAwO1xuICAgICAgICAgICAgcG9zaXRpb25zW2ldLnlBZHZhbmNlID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbGVhbnVwKCkge1xuICAgICAgICB0aGlzLmdseXBoSW5mb3MgPSBudWxsO1xuICAgICAgICB0aGlzLnBsYW4gPSBudWxsO1xuICAgICAgICB0aGlzLnNoYXBlciA9IG51bGw7XG4gICAgfVxuICAgIGdldEF2YWlsYWJsZUZlYXR1cmVzKHNjcmlwdCwgbGFuZ3VhZ2UpIHtcbiAgICAgICAgbGV0IGZlYXR1cmVzID0gW107XG4gICAgICAgIGlmICh0aGlzLkdTVUJQcm9jZXNzb3IpIHtcbiAgICAgICAgICAgIHRoaXMuR1NVQlByb2Nlc3Nvci5zZWxlY3RTY3JpcHQoc2NyaXB0LCBsYW5ndWFnZSk7XG4gICAgICAgICAgICBmZWF0dXJlcy5wdXNoKC4uLk9iamVjdC5rZXlzKHRoaXMuR1NVQlByb2Nlc3Nvci5mZWF0dXJlcykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLkdQT1NQcm9jZXNzb3IpIHtcbiAgICAgICAgICAgIHRoaXMuR1BPU1Byb2Nlc3Nvci5zZWxlY3RTY3JpcHQoc2NyaXB0LCBsYW5ndWFnZSk7XG4gICAgICAgICAgICBmZWF0dXJlcy5wdXNoKC4uLk9iamVjdC5rZXlzKHRoaXMuR1BPU1Byb2Nlc3Nvci5mZWF0dXJlcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZm9udCl7XG4gICAgICAgIHRoaXMuZm9udCA9IGZvbnQ7XG4gICAgICAgIHRoaXMuZ2x5cGhJbmZvcyA9IG51bGw7XG4gICAgICAgIHRoaXMucGxhbiA9IG51bGw7XG4gICAgICAgIHRoaXMuR1NVQlByb2Nlc3NvciA9IG51bGw7XG4gICAgICAgIHRoaXMuR1BPU1Byb2Nlc3NvciA9IG51bGw7XG4gICAgICAgIHRoaXMuZmFsbGJhY2tQb3NpdGlvbiA9IHRydWU7XG4gICAgICAgIGlmIChmb250LkdTVUIpIHRoaXMuR1NVQlByb2Nlc3NvciA9IG5ldyAoMCwgJDBhODc2YzQ1ZjFmN2M0MWMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZm9udCwgZm9udC5HU1VCKTtcbiAgICAgICAgaWYgKGZvbnQuR1BPUykgdGhpcy5HUE9TUHJvY2Vzc29yID0gbmV3ICgwLCAkYzk2YzkzNTg3ZDQ5YzE0ZCRleHBvcnQkMmUyYmNkODczOWFlMDM5KShmb250LCBmb250LkdQT1MpO1xuICAgIH1cbn1cblxuXG5jbGFzcyAkNGMwYTdmYTVkZjdhOWFiMSRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBsYXlvdXQoc3RyaW5nLCBmZWF0dXJlcywgc2NyaXB0LCBsYW5ndWFnZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIC8vIE1ha2UgdGhlIGZlYXR1cmVzIHBhcmFtZXRlciBvcHRpb25hbFxuICAgICAgICBpZiAodHlwZW9mIGZlYXR1cmVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBsYW5ndWFnZTtcbiAgICAgICAgICAgIGxhbmd1YWdlID0gc2NyaXB0O1xuICAgICAgICAgICAgc2NyaXB0ID0gZmVhdHVyZXM7XG4gICAgICAgICAgICBmZWF0dXJlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1hcCBzdHJpbmcgdG8gZ2x5cGhzIGlmIG5lZWRlZFxuICAgICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgLy8gQXR0ZW1wdCB0byBkZXRlY3QgdGhlIHNjcmlwdCBmcm9tIHRoZSBzdHJpbmcgaWYgbm90IHByb3ZpZGVkLlxuICAgICAgICAgICAgaWYgKHNjcmlwdCA9PSBudWxsKSBzY3JpcHQgPSAkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkZTVjYjI1ZTIwNGZiODQ1MChzdHJpbmcpO1xuICAgICAgICAgICAgdmFyIGdseXBocyA9IHRoaXMuZm9udC5nbHlwaHNGb3JTdHJpbmcoc3RyaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IHRoZSBzY3JpcHQgZnJvbSB0aGUgZ2x5cGggY29kZSBwb2ludHMgaWYgbm90IHByb3ZpZGVkLlxuICAgICAgICAgICAgaWYgKHNjcmlwdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvZGVQb2ludHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBnbHlwaCBvZiBzdHJpbmcpY29kZVBvaW50cy5wdXNoKC4uLmdseXBoLmNvZGVQb2ludHMpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9ICQxMzBkMWE2NDJlYmNkMmI3JGV4cG9ydCQxNmZhYjA3NTdjZmMyMjNkKGNvZGVQb2ludHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGdseXBocyA9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBsZXQgZ2x5cGhSdW4gPSBuZXcgKDAsICRiZTA3YjNlOTdhNDI2ODdhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKGdseXBocywgZmVhdHVyZXMsIHNjcmlwdCwgbGFuZ3VhZ2UsIGRpcmVjdGlvbik7XG4gICAgICAgIC8vIFJldHVybiBlYXJseSBpZiB0aGVyZSBhcmUgbm8gZ2x5cGhzXG4gICAgICAgIGlmIChnbHlwaHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBnbHlwaFJ1bi5wb3NpdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIHJldHVybiBnbHlwaFJ1bjtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXR1cCB0aGUgYWR2YW5jZWQgbGF5b3V0IGVuZ2luZVxuICAgICAgICBpZiAodGhpcy5lbmdpbmUgJiYgdGhpcy5lbmdpbmUuc2V0dXApIHRoaXMuZW5naW5lLnNldHVwKGdseXBoUnVuKTtcbiAgICAgICAgLy8gU3Vic3RpdHV0ZSBhbmQgcG9zaXRpb24gdGhlIGdseXBoc1xuICAgICAgICB0aGlzLnN1YnN0aXR1dGUoZ2x5cGhSdW4pO1xuICAgICAgICB0aGlzLnBvc2l0aW9uKGdseXBoUnVuKTtcbiAgICAgICAgdGhpcy5oaWRlRGVmYXVsdElnbm9yYWJsZXMoZ2x5cGhSdW4uZ2x5cGhzLCBnbHlwaFJ1bi5wb3NpdGlvbnMpO1xuICAgICAgICAvLyBMZXQgdGhlIGxheW91dCBlbmdpbmUgY2xlYW4gdXAgYW55IHN0YXRlIGl0IG1pZ2h0IGhhdmVcbiAgICAgICAgaWYgKHRoaXMuZW5naW5lICYmIHRoaXMuZW5naW5lLmNsZWFudXApIHRoaXMuZW5naW5lLmNsZWFudXAoKTtcbiAgICAgICAgcmV0dXJuIGdseXBoUnVuO1xuICAgIH1cbiAgICBzdWJzdGl0dXRlKGdseXBoUnVuKSB7XG4gICAgICAgIC8vIENhbGwgdGhlIGFkdmFuY2VkIGxheW91dCBlbmdpbmUgdG8gbWFrZSBzdWJzdGl0dXRpb25zXG4gICAgICAgIGlmICh0aGlzLmVuZ2luZSAmJiB0aGlzLmVuZ2luZS5zdWJzdGl0dXRlKSB0aGlzLmVuZ2luZS5zdWJzdGl0dXRlKGdseXBoUnVuKTtcbiAgICB9XG4gICAgcG9zaXRpb24oZ2x5cGhSdW4pIHtcbiAgICAgICAgLy8gR2V0IGluaXRpYWwgZ2x5cGggcG9zaXRpb25zXG4gICAgICAgIGdseXBoUnVuLnBvc2l0aW9ucyA9IGdseXBoUnVuLmdseXBocy5tYXAoKGdseXBoKT0+bmV3ICgwLCAkMWFjNzVkOWE1NWI2N2YwMSRleHBvcnQkMmUyYmNkODczOWFlMDM5KShnbHlwaC5hZHZhbmNlV2lkdGgpKTtcbiAgICAgICAgbGV0IHBvc2l0aW9uZWQgPSBudWxsO1xuICAgICAgICAvLyBDYWxsIHRoZSBhZHZhbmNlZCBsYXlvdXQgZW5naW5lLiBSZXR1cm5zIHRoZSBmZWF0dXJlcyBhcHBsaWVkLlxuICAgICAgICBpZiAodGhpcy5lbmdpbmUgJiYgdGhpcy5lbmdpbmUucG9zaXRpb24pIHBvc2l0aW9uZWQgPSB0aGlzLmVuZ2luZS5wb3NpdGlvbihnbHlwaFJ1bik7XG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIEdQT1MgdGFibGUsIHVzZSB1bmljb2RlIHByb3BlcnRpZXMgdG8gcG9zaXRpb24gbWFya3MuXG4gICAgICAgIGlmICghcG9zaXRpb25lZCAmJiAoIXRoaXMuZW5naW5lIHx8IHRoaXMuZW5naW5lLmZhbGxiYWNrUG9zaXRpb24pKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudW5pY29kZUxheW91dEVuZ2luZSkgdGhpcy51bmljb2RlTGF5b3V0RW5naW5lID0gbmV3ICgwLCAkMGE0YmRmZWI2ZGZkNmY1ZSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzLmZvbnQpO1xuICAgICAgICAgICAgdGhpcy51bmljb2RlTGF5b3V0RW5naW5lLnBvc2l0aW9uR2x5cGhzKGdseXBoUnVuLmdseXBocywgZ2x5cGhSdW4ucG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBrZXJuaW5nIGlzIG5vdCBzdXBwb3J0ZWQgYnkgR1BPUywgZG8ga2VybmluZyB3aXRoIHRoZSBUcnVlVHlwZS9BQVQga2VybiB0YWJsZVxuICAgICAgICBpZiAoKCFwb3NpdGlvbmVkIHx8ICFwb3NpdGlvbmVkLmtlcm4pICYmIGdseXBoUnVuLmZlYXR1cmVzLmtlcm4gIT09IGZhbHNlICYmIHRoaXMuZm9udC5rZXJuKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMua2VyblByb2Nlc3NvcikgdGhpcy5rZXJuUHJvY2Vzc29yID0gbmV3ICgwLCAkMGJiYTNhOWRiNTc2MzdmMyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzLmZvbnQpO1xuICAgICAgICAgICAgdGhpcy5rZXJuUHJvY2Vzc29yLnByb2Nlc3MoZ2x5cGhSdW4uZ2x5cGhzLCBnbHlwaFJ1bi5wb3NpdGlvbnMpO1xuICAgICAgICAgICAgZ2x5cGhSdW4uZmVhdHVyZXMua2VybiA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGlkZURlZmF1bHRJZ25vcmFibGVzKGdseXBocywgcG9zaXRpb25zKSB7XG4gICAgICAgIGxldCBzcGFjZSA9IHRoaXMuZm9udC5nbHlwaEZvckNvZGVQb2ludCgweDIwKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGdseXBocy5sZW5ndGg7IGkrKylpZiAodGhpcy5pc0RlZmF1bHRJZ25vcmFibGUoZ2x5cGhzW2ldLmNvZGVQb2ludHNbMF0pKSB7XG4gICAgICAgICAgICBnbHlwaHNbaV0gPSBzcGFjZTtcbiAgICAgICAgICAgIHBvc2l0aW9uc1tpXS54QWR2YW5jZSA9IDA7XG4gICAgICAgICAgICBwb3NpdGlvbnNbaV0ueUFkdmFuY2UgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzRGVmYXVsdElnbm9yYWJsZShjaCkge1xuICAgICAgICAvLyBGcm9tIERlcml2ZWRDb3JlUHJvcGVydGllcy50eHQgaW4gdGhlIFVuaWNvZGUgZGF0YWJhc2UsXG4gICAgICAgIC8vIG1pbnVzIFUrMTE1RiwgVSsxMTYwLCBVKzMxNjQgYW5kIFUrRkZBMCwgd2hpY2ggaXMgd2hhdFxuICAgICAgICAvLyBIYXJmYnV6eiBhbmQgVW5pc2NyaWJlIGRvLlxuICAgICAgICBsZXQgcGxhbmUgPSBjaCA+PiAxNjtcbiAgICAgICAgaWYgKHBsYW5lID09PSAwKSAvLyBCTVBcbiAgICAgICAgc3dpdGNoKGNoID4+IDgpe1xuICAgICAgICAgICAgY2FzZSAweDAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBjaCA9PT0gMHgwMEFEO1xuICAgICAgICAgICAgY2FzZSAweDAzOlxuICAgICAgICAgICAgICAgIHJldHVybiBjaCA9PT0gMHgwMzRGO1xuICAgICAgICAgICAgY2FzZSAweDA2OlxuICAgICAgICAgICAgICAgIHJldHVybiBjaCA9PT0gMHgwNjFDO1xuICAgICAgICAgICAgY2FzZSAweDE3OlxuICAgICAgICAgICAgICAgIHJldHVybiAweDE3QjQgPD0gY2ggJiYgY2ggPD0gMHgxN0I1O1xuICAgICAgICAgICAgY2FzZSAweDE4OlxuICAgICAgICAgICAgICAgIHJldHVybiAweDE4MEIgPD0gY2ggJiYgY2ggPD0gMHgxODBFO1xuICAgICAgICAgICAgY2FzZSAweDIwOlxuICAgICAgICAgICAgICAgIHJldHVybiAweDIwMEIgPD0gY2ggJiYgY2ggPD0gMHgyMDBGIHx8IDB4MjAyQSA8PSBjaCAmJiBjaCA8PSAweDIwMkUgfHwgMHgyMDYwIDw9IGNoICYmIGNoIDw9IDB4MjA2RjtcbiAgICAgICAgICAgIGNhc2UgMHhGRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gMHhGRTAwIDw9IGNoICYmIGNoIDw9IDB4RkUwRiB8fCBjaCA9PT0gMHhGRUZGO1xuICAgICAgICAgICAgY2FzZSAweEZGOlxuICAgICAgICAgICAgICAgIHJldHVybiAweEZGRjAgPD0gY2ggJiYgY2ggPD0gMHhGRkY4O1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSAvLyBPdGhlciBwbGFuZXNcbiAgICAgICAgc3dpdGNoKHBsYW5lKXtcbiAgICAgICAgICAgIGNhc2UgMHgwMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gMHgxQkNBMCA8PSBjaCAmJiBjaCA8PSAweDFCQ0EzIHx8IDB4MUQxNzMgPD0gY2ggJiYgY2ggPD0gMHgxRDE3QTtcbiAgICAgICAgICAgIGNhc2UgMHgwRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gMHhFMDAwMCA8PSBjaCAmJiBjaCA8PSAweEUwRkZGO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0QXZhaWxhYmxlRmVhdHVyZXMoc2NyaXB0LCBsYW5ndWFnZSkge1xuICAgICAgICBsZXQgZmVhdHVyZXMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMuZW5naW5lKSBmZWF0dXJlcy5wdXNoKC4uLnRoaXMuZW5naW5lLmdldEF2YWlsYWJsZUZlYXR1cmVzKHNjcmlwdCwgbGFuZ3VhZ2UpKTtcbiAgICAgICAgaWYgKHRoaXMuZm9udC5rZXJuICYmIGZlYXR1cmVzLmluZGV4T2YoXCJrZXJuXCIpID09PSAtMSkgZmVhdHVyZXMucHVzaChcImtlcm5cIik7XG4gICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICB9XG4gICAgc3RyaW5nc0ZvckdseXBoKGdpZCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IFNldDtcbiAgICAgICAgbGV0IGNvZGVQb2ludHMgPSB0aGlzLmZvbnQuX2NtYXBQcm9jZXNzb3IuY29kZVBvaW50c0ZvckdseXBoKGdpZCk7XG4gICAgICAgIGZvciAobGV0IGNvZGVQb2ludCBvZiBjb2RlUG9pbnRzKXJlc3VsdC5hZGQoU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZVBvaW50KSk7XG4gICAgICAgIGlmICh0aGlzLmVuZ2luZSAmJiB0aGlzLmVuZ2luZS5zdHJpbmdzRm9yR2x5cGgpIGZvciAobGV0IHN0cmluZyBvZiB0aGlzLmVuZ2luZS5zdHJpbmdzRm9yR2x5cGgoZ2lkKSlyZXN1bHQuYWRkKHN0cmluZyk7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHJlc3VsdCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZvbnQpe1xuICAgICAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLnVuaWNvZGVMYXlvdXRFbmdpbmUgPSBudWxsO1xuICAgICAgICB0aGlzLmtlcm5Qcm9jZXNzb3IgPSBudWxsO1xuICAgICAgICAvLyBDaG9vc2UgYW4gYWR2YW5jZWQgbGF5b3V0IGVuZ2luZS4gV2UgdHJ5IHRoZSBBQVQgbW9yeCB0YWJsZSBmaXJzdCBzaW5jZSBtb3JlXG4gICAgICAgIC8vIHNjcmlwdHMgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQgYmVjYXVzZSB0aGUgc2hhcGluZyBsb2dpYyBpcyBidWlsdCBpbnRvIHRoZSBmb250LlxuICAgICAgICBpZiAodGhpcy5mb250Lm1vcngpIHRoaXMuZW5naW5lID0gbmV3ICgwLCAkYmE2ZGQ3NDIwM2JlODcyOCRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzLmZvbnQpO1xuICAgICAgICBlbHNlIGlmICh0aGlzLmZvbnQuR1NVQiB8fCB0aGlzLmZvbnQuR1BPUykgdGhpcy5lbmdpbmUgPSBuZXcgKDAsICRhNjI0OTI4MTBkZTI3ZTNkJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHRoaXMuZm9udCk7XG4gICAgfVxufVxuXG5cblxuXG5cblxuY29uc3QgJGY0M2FlYzk1NGNkZmRmMjEkdmFyJFNWR19DT01NQU5EUyA9IHtcbiAgICBtb3ZlVG86IFwiTVwiLFxuICAgIGxpbmVUbzogXCJMXCIsXG4gICAgcXVhZHJhdGljQ3VydmVUbzogXCJRXCIsXG4gICAgYmV6aWVyQ3VydmVUbzogXCJDXCIsXG4gICAgY2xvc2VQYXRoOiBcIlpcIlxufTtcbmNsYXNzICRmNDNhZWM5NTRjZGZkZjIxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIC8qKlxuICAgKiBDb21waWxlcyB0aGUgcGF0aCB0byBhIEphdmFTY3JpcHQgZnVuY3Rpb24gdGhhdCBjYW4gYmUgYXBwbGllZCB3aXRoXG4gICAqIGEgZ3JhcGhpY3MgY29udGV4dCBpbiBvcmRlciB0byByZW5kZXIgdGhlIHBhdGguXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovIHRvRnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoY3R4KT0+e1xuICAgICAgICAgICAgdGhpcy5jb21tYW5kcy5mb3JFYWNoKChjKT0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBjdHhbYy5jb21tYW5kXS5hcHBseShjdHgsIGMuYXJncyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBwYXRoIHRvIGFuIFNWRyBwYXRoIGRhdGEgc3RyaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovIHRvU1ZHKCkge1xuICAgICAgICBsZXQgY21kcyA9IHRoaXMuY29tbWFuZHMubWFwKChjKT0+e1xuICAgICAgICAgICAgbGV0IGFyZ3MgPSBjLmFyZ3MubWFwKChhcmcpPT5NYXRoLnJvdW5kKGFyZyAqIDEwMCkgLyAxMDApO1xuICAgICAgICAgICAgcmV0dXJuIGAkeyRmNDNhZWM5NTRjZGZkZjIxJHZhciRTVkdfQ09NTUFORFNbYy5jb21tYW5kXX0ke2FyZ3Muam9pbihcIiBcIil9YDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbWRzLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIC8qKlxuICAgKiBHZXRzIHRoZSBcImNvbnRyb2wgYm94XCIgb2YgYSBwYXRoLlxuICAgKiBUaGlzIGlzIGxpa2UgdGhlIGJvdW5kaW5nIGJveCwgYnV0IGl0IGluY2x1ZGVzIGFsbCBwb2ludHMgaW5jbHVkaW5nXG4gICAqIGNvbnRyb2wgcG9pbnRzIG9mIGJlemllciBzZWdtZW50cyBhbmQgaXMgbXVjaCBmYXN0ZXIgdG8gY29tcHV0ZSB0aGFuXG4gICAqIHRoZSByZWFsIGJvdW5kaW5nIGJveC5cbiAgICogQHR5cGUge0JCb3h9XG4gICAqLyBnZXQgY2JveCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jYm94KSB7XG4gICAgICAgICAgICBsZXQgY2JveCA9IG5ldyAoMCwgJGYzNDYwMGFiOWQ3ZjcwZDgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4gICAgICAgICAgICBmb3IgKGxldCBjb21tYW5kMSBvZiB0aGlzLmNvbW1hbmRzKWZvcihsZXQgaSA9IDA7IGkgPCBjb21tYW5kMS5hcmdzLmxlbmd0aDsgaSArPSAyKWNib3guYWRkUG9pbnQoY29tbWFuZDEuYXJnc1tpXSwgY29tbWFuZDEuYXJnc1tpICsgMV0pO1xuICAgICAgICAgICAgdGhpcy5fY2JveCA9IE9iamVjdC5mcmVlemUoY2JveCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nib3g7XG4gICAgfVxuICAgIC8qKlxuICAgKiBHZXRzIHRoZSBleGFjdCBib3VuZGluZyBib3ggb2YgdGhlIHBhdGggYnkgZXZhbHVhdGluZyBjdXJ2ZSBzZWdtZW50cy5cbiAgICogU2xvd2VyIHRvIGNvbXB1dGUgdGhhbiB0aGUgY29udHJvbCBib3gsIGJ1dCBtb3JlIGFjY3VyYXRlLlxuICAgKiBAdHlwZSB7QkJveH1cbiAgICovIGdldCBiYm94KCkge1xuICAgICAgICBpZiAodGhpcy5fYmJveCkgcmV0dXJuIHRoaXMuX2Jib3g7XG4gICAgICAgIGxldCBiYm94ID0gbmV3ICgwLCAkZjM0NjAwYWI5ZDdmNzBkOCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiAgICAgICAgbGV0IGN4ID0gMCwgY3kgPSAwO1xuICAgICAgICBsZXQgZiA9ICh0KT0+TWF0aC5wb3coMSAtIHQsIDMpICogcDBbaV0gKyAzICogTWF0aC5wb3coMSAtIHQsIDIpICogdCAqIHAxW2ldICsgMyAqICgxIC0gdCkgKiBNYXRoLnBvdyh0LCAyKSAqIHAyW2ldICsgTWF0aC5wb3codCwgMykgKiBwM1tpXTtcbiAgICAgICAgZm9yIChsZXQgYyBvZiB0aGlzLmNvbW1hbmRzKXN3aXRjaChjLmNvbW1hbmQpe1xuICAgICAgICAgICAgY2FzZSBcIm1vdmVUb1wiOlxuICAgICAgICAgICAgY2FzZSBcImxpbmVUb1wiOlxuICAgICAgICAgICAgICAgIGxldCBbeCwgeV0gPSBjLmFyZ3M7XG4gICAgICAgICAgICAgICAgYmJveC5hZGRQb2ludCh4LCB5KTtcbiAgICAgICAgICAgICAgICBjeCA9IHg7XG4gICAgICAgICAgICAgICAgY3kgPSB5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInF1YWRyYXRpY0N1cnZlVG9cIjpcbiAgICAgICAgICAgIGNhc2UgXCJiZXppZXJDdXJ2ZVRvXCI6XG4gICAgICAgICAgICAgICAgaWYgKGMuY29tbWFuZCA9PT0gXCJxdWFkcmF0aWNDdXJ2ZVRvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL2ZvbnRmb3JnZS5vcmcvYmV6aWVyLmh0bWxcbiAgICAgICAgICAgICAgICAgICAgdmFyIFtxcDF4LCBxcDF5LCBwM3gsIHAzeV0gPSBjLmFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjcDF4ID0gY3ggKyAyIC8gMyAqIChxcDF4IC0gY3gpOyAvLyBDUDEgPSBRUDAgKyAyLzMgKiAoUVAxLVFQMClcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNwMXkgPSBjeSArIDIgLyAzICogKHFwMXkgLSBjeSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjcDJ4ID0gcDN4ICsgMiAvIDMgKiAocXAxeCAtIHAzeCk7IC8vIENQMiA9IFFQMiArIDIvMyAqIChRUDEtUVAyKVxuICAgICAgICAgICAgICAgICAgICB2YXIgY3AyeSA9IHAzeSArIDIgLyAzICogKHFwMXkgLSBwM3kpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB2YXIgW2NwMXgsIGNwMXksIGNwMngsIGNwMnksIHAzeCwgcDN5XSA9IGMuYXJncztcbiAgICAgICAgICAgICAgICAvLyBodHRwOi8vYmxvZy5oYWNrZXJzLWNhZmUubmV0LzIwMDkvMDYvaG93LXRvLWNhbGN1bGF0ZS1iZXppZXItY3VydmVzLWJvdW5kaW5nLmh0bWxcbiAgICAgICAgICAgICAgICBiYm94LmFkZFBvaW50KHAzeCwgcDN5KTtcbiAgICAgICAgICAgICAgICB2YXIgcDAgPSBbXG4gICAgICAgICAgICAgICAgICAgIGN4LFxuICAgICAgICAgICAgICAgICAgICBjeVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdmFyIHAxID0gW1xuICAgICAgICAgICAgICAgICAgICBjcDF4LFxuICAgICAgICAgICAgICAgICAgICBjcDF5XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB2YXIgcDIgPSBbXG4gICAgICAgICAgICAgICAgICAgIGNwMngsXG4gICAgICAgICAgICAgICAgICAgIGNwMnlcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHZhciBwMyA9IFtcbiAgICAgICAgICAgICAgICAgICAgcDN4LFxuICAgICAgICAgICAgICAgICAgICBwM3lcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPD0gMTsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGIgPSA2ICogcDBbaV0gLSAxMiAqIHAxW2ldICsgNiAqIHAyW2ldO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IC0zICogcDBbaV0gKyA5ICogcDFbaV0gLSA5ICogcDJbaV0gKyAzICogcDNbaV07XG4gICAgICAgICAgICAgICAgICAgIGMgPSAzICogcDFbaV0gLSAzICogcDBbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChhID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYiA9PT0gMCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdCA9IC1jIC8gYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwIDwgdCAmJiB0IDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSBiYm94LmFkZFBvaW50KGYodCksIGJib3gubWF4WSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaSA9PT0gMSkgYmJveC5hZGRQb2ludChiYm94Lm1heFgsIGYodCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IGIyYWMgPSBNYXRoLnBvdyhiLCAyKSAtIDQgKiBjICogYTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGIyYWMgPCAwKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQxID0gKC1iICsgTWF0aC5zcXJ0KGIyYWMpKSAvICgyICogYSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgwIDwgdDEgJiYgdDEgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkgYmJveC5hZGRQb2ludChmKHQxKSwgYmJveC5tYXhZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IDEpIGJib3guYWRkUG9pbnQoYmJveC5tYXhYLCBmKHQxKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gKC1iIC0gTWF0aC5zcXJ0KGIyYWMpKSAvICgyICogYSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgwIDwgdDIgJiYgdDIgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkgYmJveC5hZGRQb2ludChmKHQyKSwgYmJveC5tYXhZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IDEpIGJib3guYWRkUG9pbnQoYmJveC5tYXhYLCBmKHQyKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3ggPSBwM3g7XG4gICAgICAgICAgICAgICAgY3kgPSBwM3k7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jib3ggPSBPYmplY3QuZnJlZXplKGJib3gpO1xuICAgIH1cbiAgICAvKipcbiAgICogQXBwbGllcyBhIG1hcHBpbmcgZnVuY3Rpb24gdG8gZWFjaCBwb2ludCBpbiB0aGUgcGF0aC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAgICogQHJldHVybiB7UGF0aH1cbiAgICovIG1hcFBvaW50cyhmbikge1xuICAgICAgICBsZXQgcGF0aCA9IG5ldyAkZjQzYWVjOTU0Y2RmZGYyMSRleHBvcnQkMmUyYmNkODczOWFlMDM5O1xuICAgICAgICBmb3IgKGxldCBjIG9mIHRoaXMuY29tbWFuZHMpe1xuICAgICAgICAgICAgbGV0IGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjLmFyZ3MubGVuZ3RoOyBpICs9IDIpe1xuICAgICAgICAgICAgICAgIGxldCBbeCwgeV0gPSBmbihjLmFyZ3NbaV0sIGMuYXJnc1tpICsgMV0pO1xuICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh4LCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhdGhbYy5jb21tYW5kXSguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhlIHBhdGggYnkgdGhlIGdpdmVuIG1hdHJpeC5cbiAgICovIHRyYW5zZm9ybShtMCwgbTEsIG0yLCBtMywgbTQsIG01KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcFBvaW50cygoeCwgeSk9PntcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gbTAgKiB4ICsgbTIgKiB5ICsgbTQ7XG4gICAgICAgICAgICBjb25zdCB0eSA9IG0xICogeCArIG0zICogeSArIG01O1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB0eCxcbiAgICAgICAgICAgICAgICB0eVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUcmFuc2xhdGVzIHRoZSBwYXRoIGJ5IHRoZSBnaXZlbiBvZmZzZXQuXG4gICAqLyB0cmFuc2xhdGUoeCwgeSkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oMSwgMCwgMCwgMSwgeCwgeSk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBSb3RhdGVzIHRoZSBwYXRoIGJ5IHRoZSBnaXZlbiBhbmdsZSAoaW4gcmFkaWFucykuXG4gICAqLyByb3RhdGUoYW5nbGUpIHtcbiAgICAgICAgbGV0IGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgbGV0IHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKGNvcywgc2luLCAtc2luLCBjb3MsIDAsIDApO1xuICAgIH1cbiAgICAvKipcbiAgICogU2NhbGVzIHRoZSBwYXRoLlxuICAgKi8gc2NhbGUoc2NhbGVYLCBzY2FsZVkgPSBzY2FsZVgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKHNjYWxlWCwgMCwgMCwgc2NhbGVZLCAwLCAwKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5jb21tYW5kcyA9IFtdO1xuICAgICAgICB0aGlzLl9iYm94ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2JveCA9IG51bGw7XG4gICAgfVxufVxuZm9yIChsZXQgY29tbWFuZCBvZiBbXG4gICAgXCJtb3ZlVG9cIixcbiAgICBcImxpbmVUb1wiLFxuICAgIFwicXVhZHJhdGljQ3VydmVUb1wiLFxuICAgIFwiYmV6aWVyQ3VydmVUb1wiLFxuICAgIFwiY2xvc2VQYXRoXCJcbl0pJGY0M2FlYzk1NGNkZmRmMjEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGVbY29tbWFuZF0gPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgdGhpcy5fYmJveCA9IHRoaXMuX2Nib3ggPSBudWxsO1xuICAgIHRoaXMuY29tbWFuZHMucHVzaCh7XG4gICAgICAgIGNvbW1hbmQ6IGNvbW1hbmQsXG4gICAgICAgIGFyZ3M6IGFyZ3NcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuXG52YXIgJDc3MTNiOWI3YjQzOGRmZjgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IFtcbiAgICBcIi5ub3RkZWZcIixcbiAgICBcIi5udWxsXCIsXG4gICAgXCJub25tYXJraW5ncmV0dXJuXCIsXG4gICAgXCJzcGFjZVwiLFxuICAgIFwiZXhjbGFtXCIsXG4gICAgXCJxdW90ZWRibFwiLFxuICAgIFwibnVtYmVyc2lnblwiLFxuICAgIFwiZG9sbGFyXCIsXG4gICAgXCJwZXJjZW50XCIsXG4gICAgXCJhbXBlcnNhbmRcIixcbiAgICBcInF1b3Rlc2luZ2xlXCIsXG4gICAgXCJwYXJlbmxlZnRcIixcbiAgICBcInBhcmVucmlnaHRcIixcbiAgICBcImFzdGVyaXNrXCIsXG4gICAgXCJwbHVzXCIsXG4gICAgXCJjb21tYVwiLFxuICAgIFwiaHlwaGVuXCIsXG4gICAgXCJwZXJpb2RcIixcbiAgICBcInNsYXNoXCIsXG4gICAgXCJ6ZXJvXCIsXG4gICAgXCJvbmVcIixcbiAgICBcInR3b1wiLFxuICAgIFwidGhyZWVcIixcbiAgICBcImZvdXJcIixcbiAgICBcImZpdmVcIixcbiAgICBcInNpeFwiLFxuICAgIFwic2V2ZW5cIixcbiAgICBcImVpZ2h0XCIsXG4gICAgXCJuaW5lXCIsXG4gICAgXCJjb2xvblwiLFxuICAgIFwic2VtaWNvbG9uXCIsXG4gICAgXCJsZXNzXCIsXG4gICAgXCJlcXVhbFwiLFxuICAgIFwiZ3JlYXRlclwiLFxuICAgIFwicXVlc3Rpb25cIixcbiAgICBcImF0XCIsXG4gICAgXCJBXCIsXG4gICAgXCJCXCIsXG4gICAgXCJDXCIsXG4gICAgXCJEXCIsXG4gICAgXCJFXCIsXG4gICAgXCJGXCIsXG4gICAgXCJHXCIsXG4gICAgXCJIXCIsXG4gICAgXCJJXCIsXG4gICAgXCJKXCIsXG4gICAgXCJLXCIsXG4gICAgXCJMXCIsXG4gICAgXCJNXCIsXG4gICAgXCJOXCIsXG4gICAgXCJPXCIsXG4gICAgXCJQXCIsXG4gICAgXCJRXCIsXG4gICAgXCJSXCIsXG4gICAgXCJTXCIsXG4gICAgXCJUXCIsXG4gICAgXCJVXCIsXG4gICAgXCJWXCIsXG4gICAgXCJXXCIsXG4gICAgXCJYXCIsXG4gICAgXCJZXCIsXG4gICAgXCJaXCIsXG4gICAgXCJicmFja2V0bGVmdFwiLFxuICAgIFwiYmFja3NsYXNoXCIsXG4gICAgXCJicmFja2V0cmlnaHRcIixcbiAgICBcImFzY2lpY2lyY3VtXCIsXG4gICAgXCJ1bmRlcnNjb3JlXCIsXG4gICAgXCJncmF2ZVwiLFxuICAgIFwiYVwiLFxuICAgIFwiYlwiLFxuICAgIFwiY1wiLFxuICAgIFwiZFwiLFxuICAgIFwiZVwiLFxuICAgIFwiZlwiLFxuICAgIFwiZ1wiLFxuICAgIFwiaFwiLFxuICAgIFwiaVwiLFxuICAgIFwialwiLFxuICAgIFwia1wiLFxuICAgIFwibFwiLFxuICAgIFwibVwiLFxuICAgIFwiblwiLFxuICAgIFwib1wiLFxuICAgIFwicFwiLFxuICAgIFwicVwiLFxuICAgIFwiclwiLFxuICAgIFwic1wiLFxuICAgIFwidFwiLFxuICAgIFwidVwiLFxuICAgIFwidlwiLFxuICAgIFwid1wiLFxuICAgIFwieFwiLFxuICAgIFwieVwiLFxuICAgIFwielwiLFxuICAgIFwiYnJhY2VsZWZ0XCIsXG4gICAgXCJiYXJcIixcbiAgICBcImJyYWNlcmlnaHRcIixcbiAgICBcImFzY2lpdGlsZGVcIixcbiAgICBcIkFkaWVyZXNpc1wiLFxuICAgIFwiQXJpbmdcIixcbiAgICBcIkNjZWRpbGxhXCIsXG4gICAgXCJFYWN1dGVcIixcbiAgICBcIk50aWxkZVwiLFxuICAgIFwiT2RpZXJlc2lzXCIsXG4gICAgXCJVZGllcmVzaXNcIixcbiAgICBcImFhY3V0ZVwiLFxuICAgIFwiYWdyYXZlXCIsXG4gICAgXCJhY2lyY3VtZmxleFwiLFxuICAgIFwiYWRpZXJlc2lzXCIsXG4gICAgXCJhdGlsZGVcIixcbiAgICBcImFyaW5nXCIsXG4gICAgXCJjY2VkaWxsYVwiLFxuICAgIFwiZWFjdXRlXCIsXG4gICAgXCJlZ3JhdmVcIixcbiAgICBcImVjaXJjdW1mbGV4XCIsXG4gICAgXCJlZGllcmVzaXNcIixcbiAgICBcImlhY3V0ZVwiLFxuICAgIFwiaWdyYXZlXCIsXG4gICAgXCJpY2lyY3VtZmxleFwiLFxuICAgIFwiaWRpZXJlc2lzXCIsXG4gICAgXCJudGlsZGVcIixcbiAgICBcIm9hY3V0ZVwiLFxuICAgIFwib2dyYXZlXCIsXG4gICAgXCJvY2lyY3VtZmxleFwiLFxuICAgIFwib2RpZXJlc2lzXCIsXG4gICAgXCJvdGlsZGVcIixcbiAgICBcInVhY3V0ZVwiLFxuICAgIFwidWdyYXZlXCIsXG4gICAgXCJ1Y2lyY3VtZmxleFwiLFxuICAgIFwidWRpZXJlc2lzXCIsXG4gICAgXCJkYWdnZXJcIixcbiAgICBcImRlZ3JlZVwiLFxuICAgIFwiY2VudFwiLFxuICAgIFwic3RlcmxpbmdcIixcbiAgICBcInNlY3Rpb25cIixcbiAgICBcImJ1bGxldFwiLFxuICAgIFwicGFyYWdyYXBoXCIsXG4gICAgXCJnZXJtYW5kYmxzXCIsXG4gICAgXCJyZWdpc3RlcmVkXCIsXG4gICAgXCJjb3B5cmlnaHRcIixcbiAgICBcInRyYWRlbWFya1wiLFxuICAgIFwiYWN1dGVcIixcbiAgICBcImRpZXJlc2lzXCIsXG4gICAgXCJub3RlcXVhbFwiLFxuICAgIFwiQUVcIixcbiAgICBcIk9zbGFzaFwiLFxuICAgIFwiaW5maW5pdHlcIixcbiAgICBcInBsdXNtaW51c1wiLFxuICAgIFwibGVzc2VxdWFsXCIsXG4gICAgXCJncmVhdGVyZXF1YWxcIixcbiAgICBcInllblwiLFxuICAgIFwibXVcIixcbiAgICBcInBhcnRpYWxkaWZmXCIsXG4gICAgXCJzdW1tYXRpb25cIixcbiAgICBcInByb2R1Y3RcIixcbiAgICBcInBpXCIsXG4gICAgXCJpbnRlZ3JhbFwiLFxuICAgIFwib3JkZmVtaW5pbmVcIixcbiAgICBcIm9yZG1hc2N1bGluZVwiLFxuICAgIFwiT21lZ2FcIixcbiAgICBcImFlXCIsXG4gICAgXCJvc2xhc2hcIixcbiAgICBcInF1ZXN0aW9uZG93blwiLFxuICAgIFwiZXhjbGFtZG93blwiLFxuICAgIFwibG9naWNhbG5vdFwiLFxuICAgIFwicmFkaWNhbFwiLFxuICAgIFwiZmxvcmluXCIsXG4gICAgXCJhcHByb3hlcXVhbFwiLFxuICAgIFwiRGVsdGFcIixcbiAgICBcImd1aWxsZW1vdGxlZnRcIixcbiAgICBcImd1aWxsZW1vdHJpZ2h0XCIsXG4gICAgXCJlbGxpcHNpc1wiLFxuICAgIFwibm9uYnJlYWtpbmdzcGFjZVwiLFxuICAgIFwiQWdyYXZlXCIsXG4gICAgXCJBdGlsZGVcIixcbiAgICBcIk90aWxkZVwiLFxuICAgIFwiT0VcIixcbiAgICBcIm9lXCIsXG4gICAgXCJlbmRhc2hcIixcbiAgICBcImVtZGFzaFwiLFxuICAgIFwicXVvdGVkYmxsZWZ0XCIsXG4gICAgXCJxdW90ZWRibHJpZ2h0XCIsXG4gICAgXCJxdW90ZWxlZnRcIixcbiAgICBcInF1b3RlcmlnaHRcIixcbiAgICBcImRpdmlkZVwiLFxuICAgIFwibG96ZW5nZVwiLFxuICAgIFwieWRpZXJlc2lzXCIsXG4gICAgXCJZZGllcmVzaXNcIixcbiAgICBcImZyYWN0aW9uXCIsXG4gICAgXCJjdXJyZW5jeVwiLFxuICAgIFwiZ3VpbHNpbmdsbGVmdFwiLFxuICAgIFwiZ3VpbHNpbmdscmlnaHRcIixcbiAgICBcImZpXCIsXG4gICAgXCJmbFwiLFxuICAgIFwiZGFnZ2VyZGJsXCIsXG4gICAgXCJwZXJpb2RjZW50ZXJlZFwiLFxuICAgIFwicXVvdGVzaW5nbGJhc2VcIixcbiAgICBcInF1b3RlZGJsYmFzZVwiLFxuICAgIFwicGVydGhvdXNhbmRcIixcbiAgICBcIkFjaXJjdW1mbGV4XCIsXG4gICAgXCJFY2lyY3VtZmxleFwiLFxuICAgIFwiQWFjdXRlXCIsXG4gICAgXCJFZGllcmVzaXNcIixcbiAgICBcIkVncmF2ZVwiLFxuICAgIFwiSWFjdXRlXCIsXG4gICAgXCJJY2lyY3VtZmxleFwiLFxuICAgIFwiSWRpZXJlc2lzXCIsXG4gICAgXCJJZ3JhdmVcIixcbiAgICBcIk9hY3V0ZVwiLFxuICAgIFwiT2NpcmN1bWZsZXhcIixcbiAgICBcImFwcGxlXCIsXG4gICAgXCJPZ3JhdmVcIixcbiAgICBcIlVhY3V0ZVwiLFxuICAgIFwiVWNpcmN1bWZsZXhcIixcbiAgICBcIlVncmF2ZVwiLFxuICAgIFwiZG90bGVzc2lcIixcbiAgICBcImNpcmN1bWZsZXhcIixcbiAgICBcInRpbGRlXCIsXG4gICAgXCJtYWNyb25cIixcbiAgICBcImJyZXZlXCIsXG4gICAgXCJkb3RhY2NlbnRcIixcbiAgICBcInJpbmdcIixcbiAgICBcImNlZGlsbGFcIixcbiAgICBcImh1bmdhcnVtbGF1dFwiLFxuICAgIFwib2dvbmVrXCIsXG4gICAgXCJjYXJvblwiLFxuICAgIFwiTHNsYXNoXCIsXG4gICAgXCJsc2xhc2hcIixcbiAgICBcIlNjYXJvblwiLFxuICAgIFwic2Nhcm9uXCIsXG4gICAgXCJaY2Fyb25cIixcbiAgICBcInpjYXJvblwiLFxuICAgIFwiYnJva2VuYmFyXCIsXG4gICAgXCJFdGhcIixcbiAgICBcImV0aFwiLFxuICAgIFwiWWFjdXRlXCIsXG4gICAgXCJ5YWN1dGVcIixcbiAgICBcIlRob3JuXCIsXG4gICAgXCJ0aG9yblwiLFxuICAgIFwibWludXNcIixcbiAgICBcIm11bHRpcGx5XCIsXG4gICAgXCJvbmVzdXBlcmlvclwiLFxuICAgIFwidHdvc3VwZXJpb3JcIixcbiAgICBcInRocmVlc3VwZXJpb3JcIixcbiAgICBcIm9uZWhhbGZcIixcbiAgICBcIm9uZXF1YXJ0ZXJcIixcbiAgICBcInRocmVlcXVhcnRlcnNcIixcbiAgICBcImZyYW5jXCIsXG4gICAgXCJHYnJldmVcIixcbiAgICBcImdicmV2ZVwiLFxuICAgIFwiSWRvdGFjY2VudFwiLFxuICAgIFwiU2NlZGlsbGFcIixcbiAgICBcInNjZWRpbGxhXCIsXG4gICAgXCJDYWN1dGVcIixcbiAgICBcImNhY3V0ZVwiLFxuICAgIFwiQ2Nhcm9uXCIsXG4gICAgXCJjY2Fyb25cIixcbiAgICBcImRjcm9hdFwiXG5dO1xuXG5cbmNsYXNzICRmOTI5MDZiZTI4ZTYxNzY5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIF9nZXRQYXRoKCkge1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkZjQzYWVjOTU0Y2RmZGYyMSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSgpO1xuICAgIH1cbiAgICBfZ2V0Q0JveCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aC5jYm94O1xuICAgIH1cbiAgICBfZ2V0QkJveCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aC5iYm94O1xuICAgIH1cbiAgICBfZ2V0VGFibGVNZXRyaWNzKHRhYmxlKSB7XG4gICAgICAgIGlmICh0aGlzLmlkIDwgdGFibGUubWV0cmljcy5sZW5ndGgpIHJldHVybiB0YWJsZS5tZXRyaWNzLmdldCh0aGlzLmlkKTtcbiAgICAgICAgbGV0IG1ldHJpYyA9IHRhYmxlLm1ldHJpY3MuZ2V0KHRhYmxlLm1ldHJpY3MubGVuZ3RoIC0gMSk7XG4gICAgICAgIGxldCByZXMgPSB7XG4gICAgICAgICAgICBhZHZhbmNlOiBtZXRyaWMgPyBtZXRyaWMuYWR2YW5jZSA6IDAsXG4gICAgICAgICAgICBiZWFyaW5nOiB0YWJsZS5iZWFyaW5ncy5nZXQodGhpcy5pZCAtIHRhYmxlLm1ldHJpY3MubGVuZ3RoKSB8fCAwXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIF9nZXRNZXRyaWNzKGNib3gpIHtcbiAgICAgICAgaWYgKHRoaXMuX21ldHJpY3MpIHJldHVybiB0aGlzLl9tZXRyaWNzO1xuICAgICAgICBsZXQgeyBhZHZhbmNlOiBhZHZhbmNlV2lkdGggLCBiZWFyaW5nOiBsZWZ0QmVhcmluZyAgfSA9IHRoaXMuX2dldFRhYmxlTWV0cmljcyh0aGlzLl9mb250LmhtdHgpO1xuICAgICAgICAvLyBGb3IgdmVydGljYWwgbWV0cmljcywgdXNlIHZtdHggaWYgYXZhaWxhYmxlLCBvciBmYWxsIGJhY2sgdG8gZ2xvYmFsIGRhdGEgZnJvbSBPUy8yIG9yIGhoZWFcbiAgICAgICAgaWYgKHRoaXMuX2ZvbnQudm10eCkgdmFyIHsgYWR2YW5jZTogYWR2YW5jZUhlaWdodCAsIGJlYXJpbmc6IHRvcEJlYXJpbmcgIH0gPSB0aGlzLl9nZXRUYWJsZU1ldHJpY3ModGhpcy5fZm9udC52bXR4KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgb3MyO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYm94ID09PSBcInVuZGVmaW5lZFwiIHx8IGNib3ggPT09IG51bGwpICh7IGNib3g6IGNib3ggIH0gPSB0aGlzKTtcbiAgICAgICAgICAgIGlmICgob3MyID0gdGhpcy5fZm9udFtcIk9TLzJcIl0pICYmIG9zMi52ZXJzaW9uID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBhZHZhbmNlSGVpZ2h0ID0gTWF0aC5hYnMob3MyLnR5cG9Bc2NlbmRlciAtIG9zMi50eXBvRGVzY2VuZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgdG9wQmVhcmluZyA9IG9zMi50eXBvQXNjZW5kZXIgLSBjYm94Lm1heFk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCB7IGhoZWE6IGhoZWEgIH0gPSB0aGlzLl9mb250O1xuICAgICAgICAgICAgICAgIHZhciBhZHZhbmNlSGVpZ2h0ID0gTWF0aC5hYnMoaGhlYS5hc2NlbnQgLSBoaGVhLmRlc2NlbnQpO1xuICAgICAgICAgICAgICAgIHZhciB0b3BCZWFyaW5nID0gaGhlYS5hc2NlbnQgLSBjYm94Lm1heFk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2ZvbnQuX3ZhcmlhdGlvblByb2Nlc3NvciAmJiB0aGlzLl9mb250LkhWQVIpIGFkdmFuY2VXaWR0aCArPSB0aGlzLl9mb250Ll92YXJpYXRpb25Qcm9jZXNzb3IuZ2V0QWR2YW5jZUFkanVzdG1lbnQodGhpcy5pZCwgdGhpcy5fZm9udC5IVkFSKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldHJpY3MgPSB7XG4gICAgICAgICAgICBhZHZhbmNlV2lkdGg6IGFkdmFuY2VXaWR0aCxcbiAgICAgICAgICAgIGFkdmFuY2VIZWlnaHQ6IGFkdmFuY2VIZWlnaHQsXG4gICAgICAgICAgICBsZWZ0QmVhcmluZzogbGVmdEJlYXJpbmcsXG4gICAgICAgICAgICB0b3BCZWFyaW5nOiB0b3BCZWFyaW5nXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgZ2x5cGjigJlzIGNvbnRyb2wgYm94LlxuICAgKiBUaGlzIGlzIG9mdGVuIHRoZSBzYW1lIGFzIHRoZSBib3VuZGluZyBib3gsIGJ1dCBpcyBmYXN0ZXIgdG8gY29tcHV0ZS5cbiAgICogQmVjYXVzZSBvZiB0aGUgd2F5IGJlemllciBjdXJ2ZXMgYXJlIGRlZmluZWQsIHNvbWUgb2YgdGhlIGNvbnRyb2wgcG9pbnRzXG4gICAqIGNhbiBiZSBvdXRzaWRlIG9mIHRoZSBib3VuZGluZyBib3guIFdoZXJlIGBiYm94YCB0YWtlcyB0aGlzIGludG8gYWNjb3VudCxcbiAgICogYGNib3hgIGRvZXMgbm90LiBUaHVzLCBjYm94IGlzIGxlc3MgYWNjdXJhdGUsIGJ1dCBmYXN0ZXIgdG8gY29tcHV0ZS5cbiAgICogU2VlIFtoZXJlXShodHRwOi8vd3d3LmZyZWV0eXBlLm9yZy9mcmVldHlwZTIvZG9jcy9nbHlwaHMvZ2x5cGhzLTYuaHRtbCNzZWN0aW9uLTIpXG4gICAqIGZvciBhIG1vcmUgZGV0YWlsZWQgZGVzY3JpcHRpb24uXG4gICAqXG4gICAqIEB0eXBlIHtCQm94fVxuICAgKi8gZ2V0IGNib3goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRDQm94KCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgZ2x5cGjigJlzIGJvdW5kaW5nIGJveCwgaS5lLiB0aGUgcmVjdGFuZ2xlIHRoYXQgZW5jbG9zZXMgdGhlXG4gICAqIGdseXBoIG91dGxpbmUgYXMgdGlnaHRseSBhcyBwb3NzaWJsZS5cbiAgICogQHR5cGUge0JCb3h9XG4gICAqLyBnZXQgYmJveCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJCb3goKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIEEgdmVjdG9yIFBhdGggb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgZ2x5cGggb3V0bGluZS5cbiAgICogQHR5cGUge1BhdGh9XG4gICAqLyBnZXQgcGF0aCgpIHtcbiAgICAgICAgLy8gQ2FjaGUgdGhlIHBhdGggc28gd2Ugb25seSBkZWNvZGUgaXQgb25jZVxuICAgICAgICAvLyBEZWNvZGluZyBpcyBhY3R1YWxseSBwZXJmb3JtZWQgYnkgc3ViY2xhc3Nlc1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UGF0aCgpO1xuICAgIH1cbiAgICAvKipcbiAgICogUmV0dXJucyBhIHBhdGggc2NhbGVkIHRvIHRoZSBnaXZlbiBmb250IHNpemUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gICAqIEByZXR1cm4ge1BhdGh9XG4gICAqLyBnZXRTY2FsZWRQYXRoKHNpemUpIHtcbiAgICAgICAgbGV0IHNjYWxlID0gMSAvIHRoaXMuX2ZvbnQudW5pdHNQZXJFbSAqIHNpemU7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdGguc2NhbGUoc2NhbGUpO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIGdseXBoJ3MgYWR2YW5jZSB3aWR0aC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCBhZHZhbmNlV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRyaWNzKCkuYWR2YW5jZVdpZHRoO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIGdseXBoJ3MgYWR2YW5jZSBoZWlnaHQuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqLyBnZXQgYWR2YW5jZUhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldHJpY3MoKS5hZHZhbmNlSGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgbGlnYXR1cmVDYXJldFBvc2l0aW9ucygpIHt9XG4gICAgX2dldE5hbWUoKSB7XG4gICAgICAgIGxldCB7IHBvc3Q6IHBvc3QgIH0gPSB0aGlzLl9mb250O1xuICAgICAgICBpZiAoIXBvc3QpIHJldHVybiBudWxsO1xuICAgICAgICBzd2l0Y2gocG9zdC52ZXJzaW9uKXtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsICQ3NzEzYjliN2I0MzhkZmY4JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpW3RoaXMuaWRdO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGxldCBpZCA9IHBvc3QuZ2x5cGhOYW1lSW5kZXhbdGhpcy5pZF07XG4gICAgICAgICAgICAgICAgaWYgKGlkIDwgKDAsICQ3NzEzYjliN2I0MzhkZmY4JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLmxlbmd0aCkgcmV0dXJuICgwLCAkNzcxM2I5YjdiNDM4ZGZmOCRleHBvcnQkMmUyYmNkODczOWFlMDM5KVtpZF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvc3QubmFtZXNbaWQgLSAoMCwgJDc3MTNiOWI3YjQzOGRmZjgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkubGVuZ3RoXTtcbiAgICAgICAgICAgIGNhc2UgMi41OlxuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgJDc3MTNiOWI3YjQzOGRmZjgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSlbdGhpcy5pZCArIHBvc3Qub2Zmc2V0c1t0aGlzLmlkXV07XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocG9zdC5tYXBbdGhpcy5pZF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgZ2x5cGgncyBuYW1lXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqLyBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE5hbWUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGdseXBoIHRvIHRoZSBnaXZlbiBncmFwaGljcyBjb250ZXh0LCBhdCB0aGUgc3BlY2lmaWVkIGZvbnQgc2l6ZS5cbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MmR9IGN0eFxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgKi8gcmVuZGVyKGN0eCwgc2l6ZSkge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBsZXQgc2NhbGUgPSAxIC8gdGhpcy5fZm9udC5oZWFkLnVuaXRzUGVyRW0gKiBzaXplO1xuICAgICAgICBjdHguc2NhbGUoc2NhbGUsIHNjYWxlKTtcbiAgICAgICAgbGV0IGZuID0gdGhpcy5wYXRoLnRvRnVuY3Rpb24oKTtcbiAgICAgICAgZm4oY3R4KTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaWQsIGNvZGVQb2ludHMsIGZvbnQpe1xuICAgICAgICAvKipcbiAgICAgKiBUaGUgZ2x5cGggaWQgaW4gdGhlIGZvbnRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqLyB0aGlzLmlkID0gaWQ7XG4gICAgICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIHVuaWNvZGUgY29kZSBwb2ludHMgdGhhdCBhcmUgcmVwcmVzZW50ZWQgYnkgdGhpcyBnbHlwaC5cbiAgICAgKiBUaGVyZSBjYW4gYmUgbXVsdGlwbGUgY29kZSBwb2ludHMgaW4gdGhlIGNhc2Ugb2YgbGlnYXR1cmVzIGFuZCBvdGhlciBnbHlwaHNcbiAgICAgKiB0aGF0IHJlcHJlc2VudCBtdWx0aXBsZSB2aXN1YWwgY2hhcmFjdGVycy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyW119XG4gICAgICovIHRoaXMuY29kZVBvaW50cyA9IGNvZGVQb2ludHM7XG4gICAgICAgIHRoaXMuX2ZvbnQgPSBmb250O1xuICAgICAgICAvLyBUT0RPOiBnZXQgdGhpcyBpbmZvIGZyb20gR0RFRiBpZiBhdmFpbGFibGVcbiAgICAgICAgdGhpcy5pc01hcmsgPSB0aGlzLmNvZGVQb2ludHMubGVuZ3RoID4gMCAmJiB0aGlzLmNvZGVQb2ludHMuZXZlcnkoKDAsICQ1MlpJZiRpc01hcmspKTtcbiAgICAgICAgdGhpcy5pc0xpZ2F0dXJlID0gdGhpcy5jb2RlUG9pbnRzLmxlbmd0aCA+IDE7XG4gICAgfVxufVxuKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX3RzX2RlY29yYXRlbWpzKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJGY5MjkwNmJlMjhlNjE3NjkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiY2JveFwiLCBudWxsKTtcbigwLCAkNTJaSWYkc3djaGVscGVyc3NyY190c19kZWNvcmF0ZW1qcykoW1xuICAgICgwLCAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZClcbl0sICRmOTI5MDZiZTI4ZTYxNzY5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlLCBcImJib3hcIiwgbnVsbCk7XG4oMCwgJDUyWklmJHN3Y2hlbHBlcnNzcmNfdHNfZGVjb3JhdGVtanMpKFtcbiAgICAoMCwgJGU3MTU2NWYyY2UwOWNiNmIkZXhwb3J0JDY5YTMyMDlmMWEwNmMwNGQpXG5dLCAkZjkyOTA2YmUyOGU2MTc2OSRleHBvcnQkMmUyYmNkODczOWFlMDM5LnByb3RvdHlwZSwgXCJwYXRoXCIsIG51bGwpO1xuKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX3RzX2RlY29yYXRlbWpzKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJGY5MjkwNmJlMjhlNjE3NjkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiYWR2YW5jZVdpZHRoXCIsIG51bGwpO1xuKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX3RzX2RlY29yYXRlbWpzKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJGY5MjkwNmJlMjhlNjE3NjkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiYWR2YW5jZUhlaWdodFwiLCBudWxsKTtcbigwLCAkNTJaSWYkc3djaGVscGVyc3NyY190c19kZWNvcmF0ZW1qcykoW1xuICAgICgwLCAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZClcbl0sICRmOTI5MDZiZTI4ZTYxNzY5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlLCBcIm5hbWVcIiwgbnVsbCk7XG5cblxuXG5cblxuLy8gVGhlIGhlYWRlciBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBvc2l0ZSBnbHlwaHNcbmxldCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkR2x5ZkhlYWRlciA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBudW1iZXJPZkNvbnRvdXJzOiAkNTJaSWYkaW50MTYsXG4gICAgeE1pbjogJDUyWklmJGludDE2LFxuICAgIHlNaW46ICQ1MlpJZiRpbnQxNixcbiAgICB4TWF4OiAkNTJaSWYkaW50MTYsXG4gICAgeU1heDogJDUyWklmJGludDE2XG59KTtcbi8vIEZsYWdzIGZvciBzaW1wbGUgZ2x5cGhzXG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkT05fQ1VSVkUgPSAxO1xuY29uc3QgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFhfU0hPUlRfVkVDVE9SID0gMjtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRZX1NIT1JUX1ZFQ1RPUiA9IDQ7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkUkVQRUFUID0gODtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRTQU1FX1ggPSAxNjtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRTQU1FX1kgPSAzMjtcbi8vIEZsYWdzIGZvciBjb21wb3NpdGUgZ2x5cGhzXG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkQVJHXzFfQU5EXzJfQVJFX1dPUkRTID0gMTtcbmNvbnN0ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRBUkdTX0FSRV9YWV9WQUxVRVMgPSAyO1xuY29uc3QgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFJPVU5EX1hZX1RPX0dSSUQgPSA0O1xuY29uc3QgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFdFX0hBVkVfQV9TQ0FMRSA9IDg7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkTU9SRV9DT01QT05FTlRTID0gMzI7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkV0VfSEFWRV9BTl9YX0FORF9ZX1NDQUxFID0gNjQ7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkV0VfSEFWRV9BX1RXT19CWV9UV08gPSAxMjg7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkV0VfSEFWRV9JTlNUUlVDVElPTlMgPSAyNTY7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkVVNFX01ZX01FVFJJQ1MgPSA1MTI7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkT1ZFUkxBUF9DT01QT1VORCA9IDEwMjQ7XG5jb25zdCAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkU0NBTEVEX0NPTVBPTkVOVF9PRkZTRVQgPSAyMDQ4O1xuY29uc3QgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFVOU0NBTEVEX0NPTVBPTkVOVF9PRkZTRVQgPSA0MDk2O1xuY2xhc3MgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JGJhZjI2MTQ2YTQxNGYyNGEge1xuICAgIGNvcHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JGJhZjI2MTQ2YTQxNGYyNGEodGhpcy5vbkN1cnZlLCB0aGlzLmVuZENvbnRvdXIsIHRoaXMueCwgdGhpcy55KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob25DdXJ2ZSwgZW5kQ29udG91ciwgeCA9IDAsIHkgPSAwKXtcbiAgICAgICAgdGhpcy5vbkN1cnZlID0gb25DdXJ2ZTtcbiAgICAgICAgdGhpcy5lbmRDb250b3VyID0gZW5kQ29udG91cjtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG59XG4vLyBSZXByZXNlbnRzIGEgY29tcG9uZW50IGluIGEgY29tcG9zaXRlIGdseXBoXG5jbGFzcyAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcihnbHlwaElELCBkeCwgZHkpe1xuICAgICAgICB0aGlzLmdseXBoSUQgPSBnbHlwaElEO1xuICAgICAgICB0aGlzLmR4ID0gZHg7XG4gICAgICAgIHRoaXMuZHkgPSBkeTtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLnNjYWxlWCA9IHRoaXMuc2NhbGVZID0gMTtcbiAgICAgICAgdGhpcy5zY2FsZTAxID0gdGhpcy5zY2FsZTEwID0gMDtcbiAgICB9XG59XG5jbGFzcyAkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkMmUyYmNkODczOWFlMDM5IGV4dGVuZHMgKDAsICRmOTI5MDZiZTI4ZTYxNzY5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpIHtcbiAgICAvLyBQYXJzZXMganVzdCB0aGUgZ2x5cGggaGVhZGVyIGFuZCByZXR1cm5zIHRoZSBib3VuZGluZyBib3hcbiAgICBfZ2V0Q0JveChpbnRlcm5hbCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGRlY29kZSB0aGUgZ2x5cGggaWYgdmFyaWF0aW9uIHByb2Nlc3NpbmcgaXMgcmVxdWVzdGVkLFxuICAgICAgICAvLyBzbyBpdCdzIGVhc2llciBqdXN0IHRvIHJlY29tcHV0ZSB0aGUgcGF0aCdzIGNib3ggYWZ0ZXIgZGVjb2RpbmcuXG4gICAgICAgIGlmICh0aGlzLl9mb250Ll92YXJpYXRpb25Qcm9jZXNzb3IgJiYgIWludGVybmFsKSByZXR1cm4gdGhpcy5wYXRoLmNib3g7XG4gICAgICAgIGxldCBzdHJlYW0gPSB0aGlzLl9mb250Ll9nZXRUYWJsZVN0cmVhbShcImdseWZcIik7XG4gICAgICAgIHN0cmVhbS5wb3MgKz0gdGhpcy5fZm9udC5sb2NhLm9mZnNldHNbdGhpcy5pZF07XG4gICAgICAgIGxldCBnbHlwaCA9ICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRHbHlmSGVhZGVyLmRlY29kZShzdHJlYW0pO1xuICAgICAgICBsZXQgY2JveCA9IG5ldyAoMCwgJGYzNDYwMGFiOWQ3ZjcwZDgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZ2x5cGgueE1pbiwgZ2x5cGgueU1pbiwgZ2x5cGgueE1heCwgZ2x5cGgueU1heCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKGNib3gpO1xuICAgIH1cbiAgICAvLyBQYXJzZXMgYSBzaW5nbGUgZ2x5cGggY29vcmRpbmF0ZVxuICAgIF9wYXJzZUdseXBoQ29vcmQoc3RyZWFtLCBwcmV2LCBzaG9ydCwgc2FtZSkge1xuICAgICAgICBpZiAoc2hvcnQpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICBpZiAoIXNhbWUpIHZhbCA9IC12YWw7XG4gICAgICAgICAgICB2YWwgKz0gcHJldjtcbiAgICAgICAgfSBlbHNlIGlmIChzYW1lKSB2YXIgdmFsID0gcHJldjtcbiAgICAgICAgZWxzZSB2YXIgdmFsID0gcHJldiArIHN0cmVhbS5yZWFkSW50MTZCRSgpO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICAvLyBEZWNvZGVzIHRoZSBnbHlwaCBkYXRhIGludG8gcG9pbnRzIGZvciBzaW1wbGUgZ2x5cGhzLFxuICAgIC8vIG9yIGNvbXBvbmVudHMgZm9yIGNvbXBvc2l0ZSBnbHlwaHNcbiAgICBfZGVjb2RlKCkge1xuICAgICAgICBsZXQgZ2x5ZlBvcyA9IHRoaXMuX2ZvbnQubG9jYS5vZmZzZXRzW3RoaXMuaWRdO1xuICAgICAgICBsZXQgbmV4dFBvcyA9IHRoaXMuX2ZvbnQubG9jYS5vZmZzZXRzW3RoaXMuaWQgKyAxXTtcbiAgICAgICAgLy8gTm90aGluZyB0byBkbyBpZiB0aGVyZSBpcyBubyBkYXRhIGZvciB0aGlzIGdseXBoXG4gICAgICAgIGlmIChnbHlmUG9zID09PSBuZXh0UG9zKSByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IHN0cmVhbSA9IHRoaXMuX2ZvbnQuX2dldFRhYmxlU3RyZWFtKFwiZ2x5ZlwiKTtcbiAgICAgICAgc3RyZWFtLnBvcyArPSBnbHlmUG9zO1xuICAgICAgICBsZXQgc3RhcnRQb3MgPSBzdHJlYW0ucG9zO1xuICAgICAgICBsZXQgZ2x5cGggPSAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkR2x5ZkhlYWRlci5kZWNvZGUoc3RyZWFtKTtcbiAgICAgICAgaWYgKGdseXBoLm51bWJlck9mQ29udG91cnMgPiAwKSB0aGlzLl9kZWNvZGVTaW1wbGUoZ2x5cGgsIHN0cmVhbSk7XG4gICAgICAgIGVsc2UgaWYgKGdseXBoLm51bWJlck9mQ29udG91cnMgPCAwKSB0aGlzLl9kZWNvZGVDb21wb3NpdGUoZ2x5cGgsIHN0cmVhbSwgc3RhcnRQb3MpO1xuICAgICAgICByZXR1cm4gZ2x5cGg7XG4gICAgfVxuICAgIF9kZWNvZGVTaW1wbGUoZ2x5cGgsIHN0cmVhbSkge1xuICAgICAgICAvLyB0aGlzIGlzIGEgc2ltcGxlIGdseXBoXG4gICAgICAgIGdseXBoLnBvaW50cyA9IFtdO1xuICAgICAgICBsZXQgZW5kUHRzT2ZDb250b3VycyA9IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQxNiwgZ2x5cGgubnVtYmVyT2ZDb250b3VycykuZGVjb2RlKHN0cmVhbSk7XG4gICAgICAgIGdseXBoLmluc3RydWN0aW9ucyA9IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQ4LCAkNTJaSWYkdWludDE2KS5kZWNvZGUoc3RyZWFtKTtcbiAgICAgICAgbGV0IGZsYWdzID0gW107XG4gICAgICAgIGxldCBudW1Db29yZHMgPSBlbmRQdHNPZkNvbnRvdXJzW2VuZFB0c09mQ29udG91cnMubGVuZ3RoIC0gMV0gKyAxO1xuICAgICAgICB3aGlsZShmbGFncy5sZW5ndGggPCBudW1Db29yZHMpe1xuICAgICAgICAgICAgdmFyIGZsYWcgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICBmbGFncy5wdXNoKGZsYWcpO1xuICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHJlcGVhdCBmbGFnXG4gICAgICAgICAgICBpZiAoZmxhZyAmICQ2OWFhYzE2MDI5OTY4NjkyJHZhciRSRVBFQVQpIHtcbiAgICAgICAgICAgICAgICBsZXQgY291bnQgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IGNvdW50OyBqKyspZmxhZ3MucHVzaChmbGFnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZmxhZ3MubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgdmFyIGZsYWcgPSBmbGFnc1tpXTtcbiAgICAgICAgICAgIGxldCBwb2ludCA9IG5ldyAkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkYmFmMjYxNDZhNDE0ZjI0YSghIShmbGFnICYgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJE9OX0NVUlZFKSwgZW5kUHRzT2ZDb250b3Vycy5pbmRleE9mKGkpID49IDAsIDAsIDApO1xuICAgICAgICAgICAgZ2x5cGgucG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBweCA9IDA7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBmbGFncy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgZmxhZyA9IGZsYWdzW2ldO1xuICAgICAgICAgICAgZ2x5cGgucG9pbnRzW2ldLnggPSBweCA9IHRoaXMuX3BhcnNlR2x5cGhDb29yZChzdHJlYW0sIHB4LCBmbGFnICYgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFhfU0hPUlRfVkVDVE9SLCBmbGFnICYgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFNBTUVfWCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHB5ID0gMDtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGZsYWdzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciBmbGFnID0gZmxhZ3NbaV07XG4gICAgICAgICAgICBnbHlwaC5wb2ludHNbaV0ueSA9IHB5ID0gdGhpcy5fcGFyc2VHbHlwaENvb3JkKHN0cmVhbSwgcHksIGZsYWcgJiAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkWV9TSE9SVF9WRUNUT1IsIGZsYWcgJiAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkU0FNRV9ZKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZm9udC5fdmFyaWF0aW9uUHJvY2Vzc29yKSB7XG4gICAgICAgICAgICBsZXQgcG9pbnRzID0gZ2x5cGgucG9pbnRzLnNsaWNlKCk7XG4gICAgICAgICAgICBwb2ludHMucHVzaCguLi50aGlzLl9nZXRQaGFudG9tUG9pbnRzKGdseXBoKSk7XG4gICAgICAgICAgICB0aGlzLl9mb250Ll92YXJpYXRpb25Qcm9jZXNzb3IudHJhbnNmb3JtUG9pbnRzKHRoaXMuaWQsIHBvaW50cyk7XG4gICAgICAgICAgICBnbHlwaC5waGFudG9tUG9pbnRzID0gcG9pbnRzLnNsaWNlKC00KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIF9kZWNvZGVDb21wb3NpdGUoZ2x5cGgsIHN0cmVhbSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICAvLyB0aGlzIGlzIGEgY29tcG9zaXRlIGdseXBoXG4gICAgICAgIGdseXBoLmNvbXBvbmVudHMgPSBbXTtcbiAgICAgICAgbGV0IGhhdmVJbnN0cnVjdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgbGV0IGZsYWdzID0gJDY5YWFjMTYwMjk5Njg2OTIkdmFyJE1PUkVfQ09NUE9ORU5UUztcbiAgICAgICAgd2hpbGUoZmxhZ3MgJiAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkTU9SRV9DT01QT05FTlRTKXtcbiAgICAgICAgICAgIGZsYWdzID0gc3RyZWFtLnJlYWRVSW50MTZCRSgpO1xuICAgICAgICAgICAgbGV0IGdQb3MgPSBzdHJlYW0ucG9zIC0gb2Zmc2V0O1xuICAgICAgICAgICAgbGV0IGdseXBoSUQgPSBzdHJlYW0ucmVhZFVJbnQxNkJFKCk7XG4gICAgICAgICAgICBpZiAoIWhhdmVJbnN0cnVjdGlvbnMpIGhhdmVJbnN0cnVjdGlvbnMgPSAoZmxhZ3MgJiAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkV0VfSEFWRV9JTlNUUlVDVElPTlMpICE9PSAwO1xuICAgICAgICAgICAgaWYgKGZsYWdzICYgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJEFSR18xX0FORF8yX0FSRV9XT1JEUykge1xuICAgICAgICAgICAgICAgIHZhciBkeCA9IHN0cmVhbS5yZWFkSW50MTZCRSgpO1xuICAgICAgICAgICAgICAgIHZhciBkeSA9IHN0cmVhbS5yZWFkSW50MTZCRSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZHggPSBzdHJlYW0ucmVhZEludDgoKTtcbiAgICAgICAgICAgICAgICB2YXIgZHkgPSBzdHJlYW0ucmVhZEludDgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBuZXcgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJENvbXBvbmVudChnbHlwaElELCBkeCwgZHkpO1xuICAgICAgICAgICAgY29tcG9uZW50LnBvcyA9IGdQb3M7XG4gICAgICAgICAgICBpZiAoZmxhZ3MgJiAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkV0VfSEFWRV9BX1NDQUxFKSAvLyBmaXhlZCBudW1iZXIgd2l0aCAxNCBiaXRzIG9mIGZyYWN0aW9uXG4gICAgICAgICAgICBjb21wb25lbnQuc2NhbGVYID0gY29tcG9uZW50LnNjYWxlWSA9IChzdHJlYW0ucmVhZFVJbnQ4KCkgPDwgMjQgfCBzdHJlYW0ucmVhZFVJbnQ4KCkgPDwgMTYpIC8gMTA3Mzc0MTgyNDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGZsYWdzICYgJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFdFX0hBVkVfQU5fWF9BTkRfWV9TQ0FMRSkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5zY2FsZVggPSAoc3RyZWFtLnJlYWRVSW50OCgpIDw8IDI0IHwgc3RyZWFtLnJlYWRVSW50OCgpIDw8IDE2KSAvIDEwNzM3NDE4MjQ7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LnNjYWxlWSA9IChzdHJlYW0ucmVhZFVJbnQ4KCkgPDwgMjQgfCBzdHJlYW0ucmVhZFVJbnQ4KCkgPDwgMTYpIC8gMTA3Mzc0MTgyNDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmxhZ3MgJiAkNjlhYWMxNjAyOTk2ODY5MiR2YXIkV0VfSEFWRV9BX1RXT19CWV9UV08pIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuc2NhbGVYID0gKHN0cmVhbS5yZWFkVUludDgoKSA8PCAyNCB8IHN0cmVhbS5yZWFkVUludDgoKSA8PCAxNikgLyAxMDczNzQxODI0O1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5zY2FsZTAxID0gKHN0cmVhbS5yZWFkVUludDgoKSA8PCAyNCB8IHN0cmVhbS5yZWFkVUludDgoKSA8PCAxNikgLyAxMDczNzQxODI0O1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5zY2FsZTEwID0gKHN0cmVhbS5yZWFkVUludDgoKSA8PCAyNCB8IHN0cmVhbS5yZWFkVUludDgoKSA8PCAxNikgLyAxMDczNzQxODI0O1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5zY2FsZVkgPSAoc3RyZWFtLnJlYWRVSW50OCgpIDw8IDI0IHwgc3RyZWFtLnJlYWRVSW50OCgpIDw8IDE2KSAvIDEwNzM3NDE4MjQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbHlwaC5jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZm9udC5fdmFyaWF0aW9uUHJvY2Vzc29yKSB7XG4gICAgICAgICAgICBsZXQgcG9pbnRzID0gW107XG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgZ2x5cGguY29tcG9uZW50cy5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IGdseXBoLmNvbXBvbmVudHNbal07XG4gICAgICAgICAgICAgICAgcG9pbnRzLnB1c2gobmV3ICQ2OWFhYzE2MDI5OTY4NjkyJGV4cG9ydCRiYWYyNjE0NmE0MTRmMjRhKHRydWUsIHRydWUsIGNvbXBvbmVudC5keCwgY29tcG9uZW50LmR5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2ludHMucHVzaCguLi50aGlzLl9nZXRQaGFudG9tUG9pbnRzKGdseXBoKSk7XG4gICAgICAgICAgICB0aGlzLl9mb250Ll92YXJpYXRpb25Qcm9jZXNzb3IudHJhbnNmb3JtUG9pbnRzKHRoaXMuaWQsIHBvaW50cyk7XG4gICAgICAgICAgICBnbHlwaC5waGFudG9tUG9pbnRzID0gcG9pbnRzLnNwbGljZSgtNCwgNCk7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICAgICAgZ2x5cGguY29tcG9uZW50c1tpXS5keCA9IHBvaW50Lng7XG4gICAgICAgICAgICAgICAgZ2x5cGguY29tcG9uZW50c1tpXS5keSA9IHBvaW50Lnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhdmVJbnN0cnVjdGlvbnM7XG4gICAgfVxuICAgIF9nZXRQaGFudG9tUG9pbnRzKGdseXBoKSB7XG4gICAgICAgIGxldCBjYm94ID0gdGhpcy5fZ2V0Q0JveCh0cnVlKTtcbiAgICAgICAgaWYgKHRoaXMuX21ldHJpY3MgPT0gbnVsbCkgdGhpcy5fbWV0cmljcyA9ICgwLCAkZjkyOTA2YmUyOGU2MTc2OSRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5wcm90b3R5cGUuX2dldE1ldHJpY3MuY2FsbCh0aGlzLCBjYm94KTtcbiAgICAgICAgbGV0IHsgYWR2YW5jZVdpZHRoOiBhZHZhbmNlV2lkdGggLCBhZHZhbmNlSGVpZ2h0OiBhZHZhbmNlSGVpZ2h0ICwgbGVmdEJlYXJpbmc6IGxlZnRCZWFyaW5nICwgdG9wQmVhcmluZzogdG9wQmVhcmluZyAgfSA9IHRoaXMuX21ldHJpY3M7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JGJhZjI2MTQ2YTQxNGYyNGEoZmFsc2UsIHRydWUsIGdseXBoLnhNaW4gLSBsZWZ0QmVhcmluZywgMCksXG4gICAgICAgICAgICBuZXcgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JGJhZjI2MTQ2YTQxNGYyNGEoZmFsc2UsIHRydWUsIGdseXBoLnhNaW4gLSBsZWZ0QmVhcmluZyArIGFkdmFuY2VXaWR0aCwgMCksXG4gICAgICAgICAgICBuZXcgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JGJhZjI2MTQ2YTQxNGYyNGEoZmFsc2UsIHRydWUsIDAsIGdseXBoLnlNYXggKyB0b3BCZWFyaW5nKSxcbiAgICAgICAgICAgIG5ldyAkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkYmFmMjYxNDZhNDE0ZjI0YShmYWxzZSwgdHJ1ZSwgMCwgZ2x5cGgueU1heCArIHRvcEJlYXJpbmcgKyBhZHZhbmNlSGVpZ2h0KVxuICAgICAgICBdO1xuICAgIH1cbiAgICAvLyBEZWNvZGVzIGZvbnQgZGF0YSwgcmVzb2x2ZXMgY29tcG9zaXRlIGdseXBocywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgY29udG91cnNcbiAgICBfZ2V0Q29udG91cnMoKSB7XG4gICAgICAgIGxldCBnbHlwaCA9IHRoaXMuX2RlY29kZSgpO1xuICAgICAgICBpZiAoIWdseXBoKSByZXR1cm4gW107XG4gICAgICAgIGxldCBwb2ludHMgPSBbXTtcbiAgICAgICAgaWYgKGdseXBoLm51bWJlck9mQ29udG91cnMgPCAwKSAvLyByZXNvbHZlIGNvbXBvc2l0ZSBnbHlwaHNcbiAgICAgICAgZm9yIChsZXQgY29tcG9uZW50IG9mIGdseXBoLmNvbXBvbmVudHMpe1xuICAgICAgICAgICAgbGV0IGNvbnRvdXJzID0gdGhpcy5fZm9udC5nZXRHbHlwaChjb21wb25lbnQuZ2x5cGhJRCkuX2dldENvbnRvdXJzKCk7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgY29udG91cnMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIGxldCBjb250b3VyID0gY29udG91cnNbaV07XG4gICAgICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IGNvbnRvdXIubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgICAgICBsZXQgcG9pbnQgPSBjb250b3VyW2pdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IHBvaW50LnggKiBjb21wb25lbnQuc2NhbGVYICsgcG9pbnQueSAqIGNvbXBvbmVudC5zY2FsZTAxICsgY29tcG9uZW50LmR4O1xuICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IHBvaW50LnkgKiBjb21wb25lbnQuc2NhbGVZICsgcG9pbnQueCAqIGNvbXBvbmVudC5zY2FsZTEwICsgY29tcG9uZW50LmR5O1xuICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChuZXcgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JGJhZjI2MTQ2YTQxNGYyNGEocG9pbnQub25DdXJ2ZSwgcG9pbnQuZW5kQ29udG91ciwgeCwgeSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHBvaW50cyA9IGdseXBoLnBvaW50cyB8fCBbXTtcbiAgICAgICAgLy8gUmVjb21wdXRlIGFuZCBjYWNoZSBtZXRyaWNzIGlmIHdlIHBlcmZvcm1lZCB2YXJpYXRpb24gcHJvY2Vzc2luZywgYW5kIGRvbid0IGhhdmUgYW4gSFZBUiB0YWJsZVxuICAgICAgICBpZiAoZ2x5cGgucGhhbnRvbVBvaW50cyAmJiAhdGhpcy5fZm9udC5kaXJlY3RvcnkudGFibGVzLkhWQVIpIHtcbiAgICAgICAgICAgIHRoaXMuX21ldHJpY3MuYWR2YW5jZVdpZHRoID0gZ2x5cGgucGhhbnRvbVBvaW50c1sxXS54IC0gZ2x5cGgucGhhbnRvbVBvaW50c1swXS54O1xuICAgICAgICAgICAgdGhpcy5fbWV0cmljcy5hZHZhbmNlSGVpZ2h0ID0gZ2x5cGgucGhhbnRvbVBvaW50c1szXS55IC0gZ2x5cGgucGhhbnRvbVBvaW50c1syXS55O1xuICAgICAgICAgICAgdGhpcy5fbWV0cmljcy5sZWZ0QmVhcmluZyA9IGdseXBoLnhNaW4gLSBnbHlwaC5waGFudG9tUG9pbnRzWzBdLng7XG4gICAgICAgICAgICB0aGlzLl9tZXRyaWNzLnRvcEJlYXJpbmcgPSBnbHlwaC5waGFudG9tUG9pbnRzWzJdLnkgLSBnbHlwaC55TWF4O1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb250b3VycyA9IFtdO1xuICAgICAgICBsZXQgY3VyID0gW107XG4gICAgICAgIGZvcihsZXQgayA9IDA7IGsgPCBwb2ludHMubGVuZ3RoOyBrKyspe1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gcG9pbnRzW2tdO1xuICAgICAgICAgICAgY3VyLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgaWYgKHBvaW50LmVuZENvbnRvdXIpIHtcbiAgICAgICAgICAgICAgICBjb250b3Vycy5wdXNoKGN1cik7XG4gICAgICAgICAgICAgICAgY3VyID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRvdXJzO1xuICAgIH1cbiAgICBfZ2V0TWV0cmljcygpIHtcbiAgICAgICAgaWYgKHRoaXMuX21ldHJpY3MpIHJldHVybiB0aGlzLl9tZXRyaWNzO1xuICAgICAgICBsZXQgY2JveCA9IHRoaXMuX2dldENCb3godHJ1ZSk7XG4gICAgICAgIHN1cGVyLl9nZXRNZXRyaWNzKGNib3gpO1xuICAgICAgICBpZiAodGhpcy5fZm9udC5fdmFyaWF0aW9uUHJvY2Vzc29yICYmICF0aGlzLl9mb250LkhWQVIpIC8vIE5vIEhWQVIgdGFibGUsIGRlY29kZSB0aGUgZ2x5cGguIFRoaXMgdHJpZ2dlcnMgcmVjb21wdXRhdGlvbiBvZiBtZXRyaWNzLlxuICAgICAgICB0aGlzLnBhdGg7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRyaWNzO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0cyBjb250b3VycyB0byBhIFBhdGggb2JqZWN0IHRoYXQgY2FuIGJlIHJlbmRlcmVkXG4gICAgX2dldFBhdGgoKSB7XG4gICAgICAgIGxldCBjb250b3VycyA9IHRoaXMuX2dldENvbnRvdXJzKCk7XG4gICAgICAgIGxldCBwYXRoID0gbmV3ICgwLCAkZjQzYWVjOTU0Y2RmZGYyMSRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGNvbnRvdXJzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjb250b3VyID0gY29udG91cnNbaV07XG4gICAgICAgICAgICBsZXQgZmlyc3RQdCA9IGNvbnRvdXJbMF07XG4gICAgICAgICAgICBsZXQgbGFzdFB0ID0gY29udG91cltjb250b3VyLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgICAgIGlmIChmaXJzdFB0Lm9uQ3VydmUpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZmlyc3QgcG9pbnQgd2lsbCBiZSBjb25zdW1lZCBieSB0aGUgbW92ZVRvIGNvbW1hbmQsIHNvIHNraXAgaW4gdGhlIGxvb3BcbiAgICAgICAgICAgICAgICB2YXIgY3VydmVQdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobGFzdFB0Lm9uQ3VydmUpIC8vIFN0YXJ0IGF0IHRoZSBsYXN0IHBvaW50IGlmIHRoZSBmaXJzdCBwb2ludCBpcyBvZmYgY3VydmUgYW5kIHRoZSBsYXN0IHBvaW50IGlzIG9uIGN1cnZlXG4gICAgICAgICAgICAgICAgZmlyc3RQdCA9IGxhc3RQdDtcbiAgICAgICAgICAgICAgICBlbHNlIC8vIFN0YXJ0IGF0IHRoZSBtaWRkbGUgaWYgYm90aCB0aGUgZmlyc3QgYW5kIGxhc3QgcG9pbnRzIGFyZSBvZmYgY3VydmVcbiAgICAgICAgICAgICAgICBmaXJzdFB0ID0gbmV3ICQ2OWFhYzE2MDI5OTY4NjkyJGV4cG9ydCRiYWYyNjE0NmE0MTRmMjRhKGZhbHNlLCBmYWxzZSwgKGZpcnN0UHQueCArIGxhc3RQdC54KSAvIDIsIChmaXJzdFB0LnkgKyBsYXN0UHQueSkgLyAyKTtcbiAgICAgICAgICAgICAgICB2YXIgY3VydmVQdCA9IGZpcnN0UHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXRoLm1vdmVUbyhmaXJzdFB0LngsIGZpcnN0UHQueSk7XG4gICAgICAgICAgICBmb3IobGV0IGogPSBzdGFydDsgaiA8IGNvbnRvdXIubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgIGxldCBwdCA9IGNvbnRvdXJbal07XG4gICAgICAgICAgICAgICAgbGV0IHByZXZQdCA9IGogPT09IDAgPyBmaXJzdFB0IDogY29udG91cltqIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKHByZXZQdC5vbkN1cnZlICYmIHB0Lm9uQ3VydmUpIHBhdGgubGluZVRvKHB0LngsIHB0LnkpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZXZQdC5vbkN1cnZlICYmICFwdC5vbkN1cnZlKSB2YXIgY3VydmVQdCA9IHB0O1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFwcmV2UHQub25DdXJ2ZSAmJiAhcHQub25DdXJ2ZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWlkWCA9IChwcmV2UHQueCArIHB0LngpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1pZFkgPSAocHJldlB0LnkgKyBwdC55KSAvIDI7XG4gICAgICAgICAgICAgICAgICAgIHBhdGgucXVhZHJhdGljQ3VydmVUbyhwcmV2UHQueCwgcHJldlB0LnksIG1pZFgsIG1pZFkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VydmVQdCA9IHB0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXByZXZQdC5vbkN1cnZlICYmIHB0Lm9uQ3VydmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5xdWFkcmF0aWNDdXJ2ZVRvKGN1cnZlUHQueCwgY3VydmVQdC55LCBwdC54LCBwdC55KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnZlUHQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIFRURiBwYXRoIHN0YXRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ29ubmVjdCB0aGUgZmlyc3QgYW5kIGxhc3QgcG9pbnRzXG4gICAgICAgICAgICBpZiAoY3VydmVQdCkgcGF0aC5xdWFkcmF0aWNDdXJ2ZVRvKGN1cnZlUHQueCwgY3VydmVQdC55LCBmaXJzdFB0LngsIGZpcnN0UHQueSk7XG4gICAgICAgICAgICBwYXRoLmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgICgwLCAkNTJaSWYkc3djaGVscGVyc3NyY19kZWZpbmVfcHJvcGVydHltanMpKHRoaXMsIFwidHlwZVwiLCBcIlRURlwiKTtcbiAgICB9XG59XG5cblxuXG5cblxuY2xhc3MgJDYyY2M1MTA5YzYxMDE4OTMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkZjkyOTA2YmUyOGU2MTc2OSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgX2dldE5hbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9mb250LkNGRjIpIHJldHVybiBzdXBlci5fZ2V0TmFtZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9udFtcIkNGRiBcIl0uZ2V0R2x5cGhOYW1lKHRoaXMuaWQpO1xuICAgIH1cbiAgICBiaWFzKHMpIHtcbiAgICAgICAgaWYgKHMubGVuZ3RoIDwgMTI0MCkgcmV0dXJuIDEwNztcbiAgICAgICAgZWxzZSBpZiAocy5sZW5ndGggPCAzMzkwMCkgcmV0dXJuIDExMzE7XG4gICAgICAgIGVsc2UgcmV0dXJuIDMyNzY4O1xuICAgIH1cbiAgICBfZ2V0UGF0aCgpIHtcbiAgICAgICAgbGV0IGNmZiA9IHRoaXMuX2ZvbnQuQ0ZGMiB8fCB0aGlzLl9mb250W1wiQ0ZGIFwiXTtcbiAgICAgICAgbGV0IHsgc3RyZWFtOiBzdHJlYW0gIH0gPSBjZmY7XG4gICAgICAgIGxldCBzdHIgPSBjZmYudG9wRGljdC5DaGFyU3RyaW5nc1t0aGlzLmlkXTtcbiAgICAgICAgbGV0IGVuZCA9IHN0ci5vZmZzZXQgKyBzdHIubGVuZ3RoO1xuICAgICAgICBzdHJlYW0ucG9zID0gc3RyLm9mZnNldDtcbiAgICAgICAgbGV0IHBhdGggPSBuZXcgKDAsICRmNDNhZWM5NTRjZGZkZjIxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpO1xuICAgICAgICBsZXQgc3RhY2sgPSBbXTtcbiAgICAgICAgbGV0IHRyYW5zID0gW107XG4gICAgICAgIGxldCB3aWR0aCA9IG51bGw7XG4gICAgICAgIGxldCBuU3RlbXMgPSAwO1xuICAgICAgICBsZXQgeDEgPSAwLCB5MSA9IDA7XG4gICAgICAgIGxldCB1c2VkR3N1YnJzO1xuICAgICAgICBsZXQgdXNlZFN1YnJzO1xuICAgICAgICBsZXQgb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl91c2VkR3N1YnJzID0gdXNlZEdzdWJycyA9IHt9O1xuICAgICAgICB0aGlzLl91c2VkU3VicnMgPSB1c2VkU3VicnMgPSB7fTtcbiAgICAgICAgbGV0IGdzdWJycyA9IGNmZi5nbG9iYWxTdWJySW5kZXggfHwgW107XG4gICAgICAgIGxldCBnc3VicnNCaWFzID0gdGhpcy5iaWFzKGdzdWJycyk7XG4gICAgICAgIGxldCBwcml2YXRlRGljdCA9IGNmZi5wcml2YXRlRGljdEZvckdseXBoKHRoaXMuaWQpIHx8IHt9O1xuICAgICAgICBsZXQgc3VicnMgPSBwcml2YXRlRGljdC5TdWJycyB8fCBbXTtcbiAgICAgICAgbGV0IHN1YnJzQmlhcyA9IHRoaXMuYmlhcyhzdWJycyk7XG4gICAgICAgIGxldCB2c3RvcmUgPSBjZmYudG9wRGljdC52c3RvcmUgJiYgY2ZmLnRvcERpY3QudnN0b3JlLml0ZW1WYXJpYXRpb25TdG9yZTtcbiAgICAgICAgbGV0IHZzaW5kZXggPSBwcml2YXRlRGljdC52c2luZGV4O1xuICAgICAgICBsZXQgdmFyaWF0aW9uUHJvY2Vzc29yID0gdGhpcy5fZm9udC5fdmFyaWF0aW9uUHJvY2Vzc29yO1xuICAgICAgICBmdW5jdGlvbiBjaGVja1dpZHRoKCkge1xuICAgICAgICAgICAgaWYgKHdpZHRoID09IG51bGwpIHdpZHRoID0gc3RhY2suc2hpZnQoKSArIHByaXZhdGVEaWN0Lm5vbWluYWxXaWR0aFg7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcGFyc2VTdGVtcygpIHtcbiAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggJSAyICE9PSAwKSBjaGVja1dpZHRoKCk7XG4gICAgICAgICAgICBuU3RlbXMgKz0gc3RhY2subGVuZ3RoID4+IDE7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2subGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtb3ZlVG8oeCwgeSkge1xuICAgICAgICAgICAgaWYgKG9wZW4pIHBhdGguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBwYXRoLm1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgIG9wZW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgd2hpbGUoc3RyZWFtLnBvcyA8IGVuZCl7XG4gICAgICAgICAgICAgICAgbGV0IG9wID0gc3RyZWFtLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCwgc3ViciwgcGhhc2U7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaChvcCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZVN0ZW1zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDEpIGNoZWNrV2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVUbyh4MSwgeTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKHN0YWNrLmxlbmd0aCA+PSAyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEgKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5saW5lVG8oeDEsIHkxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhhc2UgPSBvcCA9PT0gNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShzdGFjay5sZW5ndGggPj0gMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwaGFzZSkgeDEgKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB5MSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmxpbmVUbyh4MSwgeTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaGFzZSA9ICFwaGFzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoc3RhY2subGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMXggPSB4MSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMXkgPSB5MSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSBjMnggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguYmV6aWVyQ3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgxLCB5MSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHN0YWNrLnBvcCgpICsgc3VicnNCaWFzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnIgPSBzdWJyc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZFN1YnJzW2luZGV4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gc3RyZWFtLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBzdWJyLm9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gc3Vici5vZmZzZXQgKyBzdWJyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLnBvcyA9IHA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2ZmLnZlcnNpb24gPj0gMikgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2ZmLnZlcnNpb24gPj0gMikgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIGNoZWNrV2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3Blbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2ZmLnZlcnNpb24gPCAyKSB0aHJvdyBuZXcgRXJyb3IoXCJ2c2luZGV4IG9wZXJhdG9yIG5vdCBzdXBwb3J0ZWQgaW4gQ0ZGIHYxXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZzaW5kZXggPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2ZmLnZlcnNpb24gPCAyKSB0aHJvdyBuZXcgRXJyb3IoXCJibGVuZCBvcGVyYXRvciBub3Qgc3VwcG9ydGVkIGluIENGRiB2MVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YXJpYXRpb25Qcm9jZXNzb3IpIHRocm93IG5ldyBFcnJvcihcImJsZW5kIG9wZXJhdG9yIGluIG5vbi12YXJpYXRpb24gZm9udFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJsZW5kVmVjdG9yID0gdmFyaWF0aW9uUHJvY2Vzc29yLmdldEJsZW5kVmVjdG9yKHZzdG9yZSwgdnNpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBudW1CbGVuZHMgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG51bU9wZXJhbmRzID0gbnVtQmxlbmRzICogYmxlbmRWZWN0b3IubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGVsdGEgPSBzdGFjay5sZW5ndGggLSBudW1PcGVyYW5kcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJhc2UgPSBkZWx0YSAtIG51bUJsZW5kcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IG51bUJsZW5kczsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdW0gPSBzdGFja1tiYXNlICsgaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgYmxlbmRWZWN0b3IubGVuZ3RoOyBqKyspc3VtICs9IGJsZW5kVmVjdG9yW2pdICogc3RhY2tbZGVsdGErK107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja1tiYXNlICsgaV0gPSBzdW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUobnVtT3BlcmFuZHMtLSlzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdGVtcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbS5wb3MgKz0gblN0ZW1zICsgNyA+PiAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMikgY2hlY2tXaWR0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlVG8oeDEsIHkxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDEpIGNoZWNrV2lkdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVUbyh4MSwgeTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShzdGFjay5sZW5ndGggPj0gOCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMXggPSB4MSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMXkgPSB5MSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSBjMnggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguYmV6aWVyQ3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgxLCB5MSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmxpbmVUbyh4MSwgeTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShzdGFjay5sZW5ndGggPj0gOCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgubGluZVRvKHgxLCB5MSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMXggPSB4MSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMxeSA9IHkxICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgPSBjMnkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguYmV6aWVyQ3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgxLCB5MSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggJSAyKSB4MSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKHN0YWNrLmxlbmd0aCA+PSA0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzF4ID0geDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeSA9IHkxICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSBjMng7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxID0gYzJ5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwgeDEsIHkxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggJSAyKSB5MSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKHN0YWNrLmxlbmd0aCA+PSA0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzF4ID0geDEgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMXkgPSB5MTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSBjMnggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MSA9IGMyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwgeDEsIHkxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goc3RyZWFtLnJlYWRJbnQxNkJFKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHN0YWNrLnBvcCgpICsgZ3N1YnJzQmlhcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJyID0gZ3N1YnJzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Vicikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkR3N1YnJzW2luZGV4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gc3RyZWFtLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBzdWJyLm9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gc3Vici5vZmZzZXQgKyBzdWJyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLnBvcyA9IHA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhhc2UgPSBvcCA9PT0gMzE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoc3RhY2subGVuZ3RoID49IDQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGhhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHgxICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeSA9IHkxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeSA9IGMxeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSA9IGMyeCArIChzdGFjay5sZW5ndGggPT09IDEgPyBzdGFjay5zaGlmdCgpIDogMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMXggPSB4MTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeSA9IHkxICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSBjMnggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgPSBjMnkgKyAoc3RhY2subGVuZ3RoID09PSAxID8gc3RhY2suc2hpZnQoKSA6IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguYmV6aWVyQ3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgxLCB5MSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBoYXNlID0gIXBoYXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3AgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKG9wKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBiID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGEgJiYgYiA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGEgfHwgYiA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGEgPyAwIDogMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChNYXRoLmFicyhhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYSArIGIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGEgLSBiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChhIC8gYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goLWEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGEgPT09IGIgPyAxIDogMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWR4ID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc1tpZHhdID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHggPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godHJhbnNbaWR4XSB8fCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHMxID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgczIgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHYxIDw9IHYyID8gczEgOiBzMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goTWF0aC5yYW5kb20oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYSAqIGIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKE1hdGguc3FydChhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYSwgYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goYiwgYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8IDApIGlkeCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpZHggPiBzdGFjay5sZW5ndGggLSAxKSBpZHggPSBzdGFjay5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChzdGFja1tpZHhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA+PSAwKSB3aGlsZShqID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBzdGFja1tuIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gbiAtIDI7IGkgPj0gMDsgaS0tKXN0YWNrW2kgKyAxXSA9IHN0YWNrW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrWzBdID0gdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHdoaWxlKGogPCAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHN0YWNrWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPD0gbjsgaSsrKXN0YWNrW2ldID0gc3RhY2tbaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrW24gLSAxXSA9IHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMXggPSB4MSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMXkgPSB5MTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGMzeCA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYzN5ID0gYzJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGM0eCA9IGMzeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYzR5ID0gYzN5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGM1eCA9IGM0eCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYzV5ID0gYzR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGM2eCA9IGM1eCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYzZ5ID0gYzV5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSBjNng7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MSA9IGM2eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguYmV6aWVyQ3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIGMzeCwgYzN5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguYmV6aWVyQ3VydmVUbyhjNHgsIGM0eSwgYzV4LCBjNXksIGM2eCwgYzZ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHB0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8PSA1OyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTEgKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdHMucHVzaCh4MSwgeTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKC4uLnB0cy5zbGljZSgwLCA2KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmJlemllckN1cnZlVG8oLi4ucHRzLnNsaWNlKDYpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnNoaWZ0KCk7IC8vIGZkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHgxICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeSA9IHkxICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzN4ID0gYzJ4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMzeSA9IGMyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM0eCA9IGMzeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjNHkgPSBjM3k7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjNXggPSBjNHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzV5ID0gYzR5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM2eCA9IGM1eCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjNnkgPSBjNXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSA9IGM2eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxID0gYzZ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwgYzN4LCBjM3kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKGM0eCwgYzR5LCBjNXgsIGM1eSwgYzZ4LCBjNnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnR4ID0geDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnR5ID0geTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaTEgPSAwOyBpMSA8PSA0OyBpMSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHRzLnB1c2goeDEsIHkxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh4MSAtIHN0YXJ0eCkgPiBNYXRoLmFicyh5MSAtIHN0YXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxID0gc3RhcnR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MSA9IHN0YXJ0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHRzLnB1c2goeDEsIHkxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguYmV6aWVyQ3VydmVUbyguLi5wdHMuc2xpY2UoMCwgNikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKC4uLnB0cy5zbGljZSg2KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBvcDogMTIgJHtvcH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBvcDogJHtvcH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3AgPCAyNDcpIHN0YWNrLnB1c2gob3AgLSAxMzkpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wIDwgMjUxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiMSA9IHN0cmVhbS5yZWFkVUludDgoKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCgob3AgLSAyNDcpICogMjU2ICsgYjEgKyAxMDgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3AgPCAyNTUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIxID0gc3RyZWFtLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKC0ob3AgLSAyNTEpICogMjU2IC0gYjEgLSAxMDgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBzdGFjay5wdXNoKHN0cmVhbS5yZWFkSW50MzJCRSgpIC8gNjU1MzYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwYXJzZSgpO1xuICAgICAgICBpZiAob3BlbikgcGF0aC5jbG9zZVBhdGgoKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX2RlZmluZV9wcm9wZXJ0eW1qcykodGhpcywgXCJ0eXBlXCIsIFwiQ0ZGXCIpO1xuICAgIH1cbn1cblxuXG5cblxuXG5sZXQgJDI1ZDhmMDQ5YzIyMjA4NGMkdmFyJFNCSVhJbWFnZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBvcmlnaW5YOiAkNTJaSWYkdWludDE2LFxuICAgIG9yaWdpblk6ICQ1MlpJZiR1aW50MTYsXG4gICAgdHlwZTogbmV3ICQ1MlpJZiRTdHJpbmcoNCksXG4gICAgZGF0YTogbmV3ICQ1MlpJZiRCdWZmZXIoKHQpPT50LnBhcmVudC5idWZsZW4gLSB0Ll9jdXJyZW50T2Zmc2V0KVxufSk7XG5jbGFzcyAkMjVkOGYwNDljMjIyMDg0YyRleHBvcnQkMmUyYmNkODczOWFlMDM5IGV4dGVuZHMgKDAsICQ2OWFhYzE2MDI5OTY4NjkyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpIHtcbiAgICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgcmVwcmVzZW50aW5nIGEgZ2x5cGggaW1hZ2UgYXQgdGhlIGdpdmVuIHBvaW50IHNpemUuXG4gICAqIFRoZSBvYmplY3QgaGFzIGEgZGF0YSBwcm9wZXJ0eSB3aXRoIGEgQnVmZmVyIGNvbnRhaW5pbmcgdGhlIGFjdHVhbCBpbWFnZSBkYXRhLFxuICAgKiBhbG9uZyB3aXRoIHRoZSBpbWFnZSB0eXBlLCBhbmQgb3JpZ2luLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqLyBnZXRJbWFnZUZvclNpemUoc2l6ZSkge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5fZm9udC5zYml4LmltYWdlVGFibGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciB0YWJsZSA9IHRoaXMuX2ZvbnQuc2JpeC5pbWFnZVRhYmxlc1tpXTtcbiAgICAgICAgICAgIGlmICh0YWJsZS5wcGVtID49IHNpemUpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvZmZzZXRzID0gdGFibGUuaW1hZ2VPZmZzZXRzO1xuICAgICAgICBsZXQgc3RhcnQgPSBvZmZzZXRzW3RoaXMuaWRdO1xuICAgICAgICBsZXQgZW5kID0gb2Zmc2V0c1t0aGlzLmlkICsgMV07XG4gICAgICAgIGlmIChzdGFydCA9PT0gZW5kKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdGhpcy5fZm9udC5zdHJlYW0ucG9zID0gc3RhcnQ7XG4gICAgICAgIHJldHVybiAkMjVkOGYwNDljMjIyMDg0YyR2YXIkU0JJWEltYWdlLmRlY29kZSh0aGlzLl9mb250LnN0cmVhbSwge1xuICAgICAgICAgICAgYnVmbGVuOiBlbmQgLSBzdGFydFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVuZGVyKGN0eCwgc2l6ZSkge1xuICAgICAgICBsZXQgaW1nID0gdGhpcy5nZXRJbWFnZUZvclNpemUoc2l6ZSk7XG4gICAgICAgIGlmIChpbWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IHNjYWxlID0gc2l6ZSAvIHRoaXMuX2ZvbnQudW5pdHNQZXJFbTtcbiAgICAgICAgICAgIGN0eC5pbWFnZShpbWcuZGF0YSwge1xuICAgICAgICAgICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgICAgICAgICB4OiBpbWcub3JpZ2luWCxcbiAgICAgICAgICAgICAgICB5OiAodGhpcy5iYm94Lm1pblkgLSBpbWcub3JpZ2luWSkgKiBzY2FsZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2ZvbnQuc2JpeC5mbGFncy5yZW5kZXJPdXRsaW5lcykgc3VwZXIucmVuZGVyKGN0eCwgc2l6ZSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX2RlZmluZV9wcm9wZXJ0eW1qcykodGhpcywgXCJ0eXBlXCIsIFwiU0JJWFwiKTtcbiAgICB9XG59XG5cblxuXG5cblxuY2xhc3MgJDBkNDExZjAxNjU4NTk2ODEkdmFyJENPTFJMYXllciB7XG4gICAgY29uc3RydWN0b3IoZ2x5cGgsIGNvbG9yKXtcbiAgICAgICAgdGhpcy5nbHlwaCA9IGdseXBoO1xuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgfVxufVxuY2xhc3MgJDBkNDExZjAxNjU4NTk2ODEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkZjkyOTA2YmUyOGU2MTc2OSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgX2dldEJCb3goKSB7XG4gICAgICAgIGxldCBiYm94ID0gbmV3ICgwLCAkZjM0NjAwYWI5ZDdmNzBkOCRleHBvcnQkMmUyYmNkODczOWFlMDM5KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMubGF5ZXJzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBsYXllciA9IHRoaXMubGF5ZXJzW2ldO1xuICAgICAgICAgICAgbGV0IGIgPSBsYXllci5nbHlwaC5iYm94O1xuICAgICAgICAgICAgYmJveC5hZGRQb2ludChiLm1pblgsIGIubWluWSk7XG4gICAgICAgICAgICBiYm94LmFkZFBvaW50KGIubWF4WCwgYi5tYXhZKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmJveDtcbiAgICB9XG4gICAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2Ygb2JqZWN0cyBjb250YWluaW5nIHRoZSBnbHlwaCBhbmQgY29sb3IgZm9yXG4gICAqIGVhY2ggbGF5ZXIgaW4gdGhlIGNvbXBvc2l0ZSBjb2xvciBnbHlwaC5cbiAgICogQHR5cGUge29iamVjdFtdfVxuICAgKi8gZ2V0IGxheWVycygpIHtcbiAgICAgICAgbGV0IGNwYWwgPSB0aGlzLl9mb250LkNQQUw7XG4gICAgICAgIGxldCBjb2xyID0gdGhpcy5fZm9udC5DT0xSO1xuICAgICAgICBsZXQgbG93ID0gMDtcbiAgICAgICAgbGV0IGhpZ2ggPSBjb2xyLmJhc2VHbHlwaFJlY29yZC5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZShsb3cgPD0gaGlnaCl7XG4gICAgICAgICAgICBsZXQgbWlkID0gbG93ICsgaGlnaCA+PiAxO1xuICAgICAgICAgICAgdmFyIHJlYyA9IGNvbHIuYmFzZUdseXBoUmVjb3JkW21pZF07XG4gICAgICAgICAgICBpZiAodGhpcy5pZCA8IHJlYy5naWQpIGhpZ2ggPSBtaWQgLSAxO1xuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pZCA+IHJlYy5naWQpIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYmFzZUxheWVyID0gcmVjO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGJhc2UgZ2x5cGggbm90IGZvdW5kIGluIENPTFIgdGFibGUsXG4gICAgICAgIC8vIGRlZmF1bHQgdG8gbm9ybWFsIGdseXBoIGZyb20gZ2x5ZiBvciBDRkZcbiAgICAgICAgaWYgKGJhc2VMYXllciA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgZyA9IHRoaXMuX2ZvbnQuX2dldEJhc2VHbHlwaCh0aGlzLmlkKTtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IHtcbiAgICAgICAgICAgICAgICByZWQ6IDAsXG4gICAgICAgICAgICAgICAgZ3JlZW46IDAsXG4gICAgICAgICAgICAgICAgYmx1ZTogMCxcbiAgICAgICAgICAgICAgICBhbHBoYTogMjU1XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBuZXcgJDBkNDExZjAxNjU4NTk2ODEkdmFyJENPTFJMYXllcihnLCBjb2xvcilcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3RoZXJ3aXNlLCByZXR1cm4gYW4gYXJyYXkgb2YgYWxsIHRoZSBsYXllcnNcbiAgICAgICAgbGV0IGxheWVycyA9IFtdO1xuICAgICAgICBmb3IobGV0IGkgPSBiYXNlTGF5ZXIuZmlyc3RMYXllckluZGV4OyBpIDwgYmFzZUxheWVyLmZpcnN0TGF5ZXJJbmRleCArIGJhc2VMYXllci5udW1MYXllcnM7IGkrKyl7XG4gICAgICAgICAgICB2YXIgcmVjID0gY29sci5sYXllclJlY29yZHNbaV07XG4gICAgICAgICAgICB2YXIgY29sb3IgPSBjcGFsLmNvbG9yUmVjb3Jkc1tyZWMucGFsZXR0ZUluZGV4XTtcbiAgICAgICAgICAgIHZhciBnID0gdGhpcy5fZm9udC5fZ2V0QmFzZUdseXBoKHJlYy5naWQpO1xuICAgICAgICAgICAgbGF5ZXJzLnB1c2gobmV3ICQwZDQxMWYwMTY1ODU5NjgxJHZhciRDT0xSTGF5ZXIoZywgY29sb3IpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGF5ZXJzO1xuICAgIH1cbiAgICByZW5kZXIoY3R4LCBzaXplKSB7XG4gICAgICAgIGZvciAobGV0IHsgZ2x5cGg6IGdseXBoICwgY29sb3I6IGNvbG9yICB9IG9mIHRoaXMubGF5ZXJzKXtcbiAgICAgICAgICAgIGN0eC5maWxsQ29sb3IoW1xuICAgICAgICAgICAgICAgIGNvbG9yLnJlZCxcbiAgICAgICAgICAgICAgICBjb2xvci5ncmVlbixcbiAgICAgICAgICAgICAgICBjb2xvci5ibHVlXG4gICAgICAgICAgICBdLCBjb2xvci5hbHBoYSAvIDI1NSAqIDEwMCk7XG4gICAgICAgICAgICBnbHlwaC5yZW5kZXIoY3R4LCBzaXplKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX2RlZmluZV9wcm9wZXJ0eW1qcykodGhpcywgXCJ0eXBlXCIsIFwiQ09MUlwiKTtcbiAgICB9XG59XG5cblxuY29uc3QgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJFRVUExFU19TSEFSRV9QT0lOVF9OVU1CRVJTID0gMHg4MDAwO1xuY29uc3QgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJFRVUExFX0NPVU5UX01BU0sgPSAweDBmZmY7XG5jb25zdCAkMGJiODQwY2FjMDRlOTExYiR2YXIkRU1CRURERURfVFVQTEVfQ09PUkQgPSAweDgwMDA7XG5jb25zdCAkMGJiODQwY2FjMDRlOTExYiR2YXIkSU5URVJNRURJQVRFX1RVUExFID0gMHg0MDAwO1xuY29uc3QgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJFBSSVZBVEVfUE9JTlRfTlVNQkVSUyA9IDB4MjAwMDtcbmNvbnN0ICQwYmI4NDBjYWMwNGU5MTFiJHZhciRUVVBMRV9JTkRFWF9NQVNLID0gMHgwZmZmO1xuY29uc3QgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJFBPSU5UU19BUkVfV09SRFMgPSAweDgwO1xuY29uc3QgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJFBPSU5UX1JVTl9DT1VOVF9NQVNLID0gMHg3ZjtcbmNvbnN0ICQwYmI4NDBjYWMwNGU5MTFiJHZhciRERUxUQVNfQVJFX1pFUk8gPSAweDgwO1xuY29uc3QgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJERFTFRBU19BUkVfV09SRFMgPSAweDQwO1xuY29uc3QgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJERFTFRBX1JVTl9DT1VOVF9NQVNLID0gMHgzZjtcbmNsYXNzICQwYmI4NDBjYWMwNGU5MTFiJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIG5vcm1hbGl6ZUNvb3Jkcyhjb29yZHMpIHtcbiAgICAgICAgLy8gdGhlIGRlZmF1bHQgbWFwcGluZyBpcyBsaW5lYXIgYWxvbmcgZWFjaCBheGlzLCBpbiB0d28gc2VnbWVudHM6XG4gICAgICAgIC8vIGZyb20gdGhlIG1pblZhbHVlIHRvIGRlZmF1bHRWYWx1ZSwgYW5kIGZyb20gZGVmYXVsdFZhbHVlIHRvIG1heFZhbHVlLlxuICAgICAgICBsZXQgbm9ybWFsaXplZCA9IFtdO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5mb250LmZ2YXIuYXhpcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgYXhpcyA9IHRoaXMuZm9udC5mdmFyLmF4aXNbaV07XG4gICAgICAgICAgICBpZiAoY29vcmRzW2ldIDwgYXhpcy5kZWZhdWx0VmFsdWUpIG5vcm1hbGl6ZWQucHVzaCgoY29vcmRzW2ldIC0gYXhpcy5kZWZhdWx0VmFsdWUgKyBOdW1iZXIuRVBTSUxPTikgLyAoYXhpcy5kZWZhdWx0VmFsdWUgLSBheGlzLm1pblZhbHVlICsgTnVtYmVyLkVQU0lMT04pKTtcbiAgICAgICAgICAgIGVsc2Ugbm9ybWFsaXplZC5wdXNoKChjb29yZHNbaV0gLSBheGlzLmRlZmF1bHRWYWx1ZSArIE51bWJlci5FUFNJTE9OKSAvIChheGlzLm1heFZhbHVlIC0gYXhpcy5kZWZhdWx0VmFsdWUgKyBOdW1iZXIuRVBTSUxPTikpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIGFuIGF2YXIgdGFibGUsIHRoZSBub3JtYWxpemVkIHZhbHVlIGlzIGNhbGN1bGF0ZWRcbiAgICAgICAgLy8gYnkgaW50ZXJwb2xhdGluZyBiZXR3ZWVuIHRoZSB0d28gbmVhcmVzdCBtYXBwZWQgdmFsdWVzLlxuICAgICAgICBpZiAodGhpcy5mb250LmF2YXIpIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmZvbnQuYXZhci5zZWdtZW50Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBzZWdtZW50ID0gdGhpcy5mb250LmF2YXIuc2VnbWVudFtpXTtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBzZWdtZW50LmNvcnJlc3BvbmRlbmNlLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICBsZXQgcGFpciA9IHNlZ21lbnQuY29ycmVzcG9uZGVuY2Vbal07XG4gICAgICAgICAgICAgICAgaWYgKGogPj0gMSAmJiBub3JtYWxpemVkW2ldIDwgcGFpci5mcm9tQ29vcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSBzZWdtZW50LmNvcnJlc3BvbmRlbmNlW2ogLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZFtpXSA9ICgobm9ybWFsaXplZFtpXSAtIHByZXYuZnJvbUNvb3JkKSAqIChwYWlyLnRvQ29vcmQgLSBwcmV2LnRvQ29vcmQpICsgTnVtYmVyLkVQU0lMT04pIC8gKHBhaXIuZnJvbUNvb3JkIC0gcHJldi5mcm9tQ29vcmQgKyBOdW1iZXIuRVBTSUxPTikgKyBwcmV2LnRvQ29vcmQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgICB9XG4gICAgdHJhbnNmb3JtUG9pbnRzKGdpZCwgZ2x5cGhQb2ludHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZvbnQuZnZhciB8fCAhdGhpcy5mb250Lmd2YXIpIHJldHVybjtcbiAgICAgICAgbGV0IHsgZ3ZhcjogZ3ZhciAgfSA9IHRoaXMuZm9udDtcbiAgICAgICAgaWYgKGdpZCA+PSBndmFyLmdseXBoQ291bnQpIHJldHVybjtcbiAgICAgICAgbGV0IG9mZnNldCA9IGd2YXIub2Zmc2V0c1tnaWRdO1xuICAgICAgICBpZiAob2Zmc2V0ID09PSBndmFyLm9mZnNldHNbZ2lkICsgMV0pIHJldHVybjtcbiAgICAgICAgLy8gUmVhZCB0aGUgZ3ZhciBkYXRhIGZvciB0aGlzIGdseXBoXG4gICAgICAgIGxldCB7IHN0cmVhbTogc3RyZWFtICB9ID0gdGhpcy5mb250O1xuICAgICAgICBzdHJlYW0ucG9zID0gb2Zmc2V0O1xuICAgICAgICBpZiAoc3RyZWFtLnBvcyA+PSBzdHJlYW0ubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGxldCB0dXBsZUNvdW50ID0gc3RyZWFtLnJlYWRVSW50MTZCRSgpO1xuICAgICAgICBsZXQgb2Zmc2V0VG9EYXRhID0gb2Zmc2V0ICsgc3RyZWFtLnJlYWRVSW50MTZCRSgpO1xuICAgICAgICBpZiAodHVwbGVDb3VudCAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRUVVBMRVNfU0hBUkVfUE9JTlRfTlVNQkVSUykge1xuICAgICAgICAgICAgdmFyIGhlcmUgPSBzdHJlYW0ucG9zO1xuICAgICAgICAgICAgc3RyZWFtLnBvcyA9IG9mZnNldFRvRGF0YTtcbiAgICAgICAgICAgIHZhciBzaGFyZWRQb2ludHMgPSB0aGlzLmRlY29kZVBvaW50cygpO1xuICAgICAgICAgICAgb2Zmc2V0VG9EYXRhID0gc3RyZWFtLnBvcztcbiAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBoZXJlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcmlnUG9pbnRzID0gZ2x5cGhQb2ludHMubWFwKChwdCk9PnB0LmNvcHkoKSk7XG4gICAgICAgIHR1cGxlQ291bnQgJj0gJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJFRVUExFX0NPVU5UX01BU0s7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0dXBsZUNvdW50OyBpKyspe1xuICAgICAgICAgICAgbGV0IHR1cGxlRGF0YVNpemUgPSBzdHJlYW0ucmVhZFVJbnQxNkJFKCk7XG4gICAgICAgICAgICBsZXQgdHVwbGVJbmRleCA9IHN0cmVhbS5yZWFkVUludDE2QkUoKTtcbiAgICAgICAgICAgIGlmICh0dXBsZUluZGV4ICYgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJEVNQkVEREVEX1RVUExFX0NPT1JEKSB7XG4gICAgICAgICAgICAgICAgdmFyIHR1cGxlQ29vcmRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yKGxldCBhID0gMDsgYSA8IGd2YXIuYXhpc0NvdW50OyBhKyspdHVwbGVDb29yZHMucHVzaChzdHJlYW0ucmVhZEludDE2QkUoKSAvIDE2Mzg0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCh0dXBsZUluZGV4ICYgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJFRVUExFX0lOREVYX01BU0spID49IGd2YXIuZ2xvYmFsQ29vcmRDb3VudCkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBndmFyIHRhYmxlXCIpO1xuICAgICAgICAgICAgICAgIHZhciB0dXBsZUNvb3JkcyA9IGd2YXIuZ2xvYmFsQ29vcmRzW3R1cGxlSW5kZXggJiAkMGJiODQwY2FjMDRlOTExYiR2YXIkVFVQTEVfSU5ERVhfTUFTS107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHVwbGVJbmRleCAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRJTlRFUk1FRElBVEVfVFVQTEUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDb29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGEgPSAwOyBhIDwgZ3Zhci5heGlzQ291bnQ7IGErKylzdGFydENvb3Jkcy5wdXNoKHN0cmVhbS5yZWFkSW50MTZCRSgpIC8gMTYzODQpO1xuICAgICAgICAgICAgICAgIHZhciBlbmRDb29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGExID0gMDsgYTEgPCBndmFyLmF4aXNDb3VudDsgYTErKyllbmRDb29yZHMucHVzaChzdHJlYW0ucmVhZEludDE2QkUoKSAvIDE2Mzg0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEdldCB0aGUgZmFjdG9yIGF0IHdoaWNoIHRvIGFwcGx5IHRoaXMgdHVwbGVcbiAgICAgICAgICAgIGxldCBmYWN0b3IgPSB0aGlzLnR1cGxlRmFjdG9yKHR1cGxlSW5kZXgsIHR1cGxlQ29vcmRzLCBzdGFydENvb3JkcywgZW5kQ29vcmRzKTtcbiAgICAgICAgICAgIGlmIChmYWN0b3IgPT09IDApIHtcbiAgICAgICAgICAgICAgICBvZmZzZXRUb0RhdGEgKz0gdHVwbGVEYXRhU2l6ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoZXJlID0gc3RyZWFtLnBvcztcbiAgICAgICAgICAgIHN0cmVhbS5wb3MgPSBvZmZzZXRUb0RhdGE7XG4gICAgICAgICAgICBpZiAodHVwbGVJbmRleCAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRQUklWQVRFX1BPSU5UX05VTUJFUlMpIHZhciBwb2ludHMgPSB0aGlzLmRlY29kZVBvaW50cygpO1xuICAgICAgICAgICAgZWxzZSB2YXIgcG9pbnRzID0gc2hhcmVkUG9pbnRzO1xuICAgICAgICAgICAgLy8gcG9pbnRzLmxlbmd0aCA9IDAgbWVhbnMgdGhlcmUgYXJlIGRlbHRhcyBmb3IgYWxsIHBvaW50c1xuICAgICAgICAgICAgbGV0IG5Qb2ludHMgPSBwb2ludHMubGVuZ3RoID09PSAwID8gZ2x5cGhQb2ludHMubGVuZ3RoIDogcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGxldCB4RGVsdGFzID0gdGhpcy5kZWNvZGVEZWx0YXMoblBvaW50cyk7XG4gICAgICAgICAgICBsZXQgeURlbHRhcyA9IHRoaXMuZGVjb2RlRGVsdGFzKG5Qb2ludHMpO1xuICAgICAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPT09IDApIGZvcihsZXQgaSA9IDA7IGkgPCBnbHlwaFBvaW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgdmFyIHBvaW50ID0gZ2x5cGhQb2ludHNbaV07XG4gICAgICAgICAgICAgICAgcG9pbnQueCArPSBNYXRoLnJvdW5kKHhEZWx0YXNbaV0gKiBmYWN0b3IpO1xuICAgICAgICAgICAgICAgIHBvaW50LnkgKz0gTWF0aC5yb3VuZCh5RGVsdGFzW2ldICogZmFjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBvdXRQb2ludHMgPSBvcmlnUG9pbnRzLm1hcCgocHQpPT5wdC5jb3B5KCkpO1xuICAgICAgICAgICAgICAgIGxldCBoYXNEZWx0YSA9IGdseXBoUG9pbnRzLm1hcCgoKT0+ZmFsc2UpO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICBsZXQgaWR4ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWR4IDwgZ2x5cGhQb2ludHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9pbnQgPSBvdXRQb2ludHNbaWR4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0RlbHRhW2lkeF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQueCArPSBNYXRoLnJvdW5kKHhEZWx0YXNbaV0gKiBmYWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQueSArPSBNYXRoLnJvdW5kKHlEZWx0YXNbaV0gKiBmYWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJwb2xhdGVNaXNzaW5nRGVsdGFzKG91dFBvaW50cywgb3JpZ1BvaW50cywgaGFzRGVsdGEpO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaTEgPSAwOyBpMSA8IGdseXBoUG9pbnRzLmxlbmd0aDsgaTErKyl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkZWx0YVggPSBvdXRQb2ludHNbaTFdLnggLSBvcmlnUG9pbnRzW2kxXS54O1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVsdGFZID0gb3V0UG9pbnRzW2kxXS55IC0gb3JpZ1BvaW50c1tpMV0ueTtcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhQb2ludHNbaTFdLnggKz0gZGVsdGFYO1xuICAgICAgICAgICAgICAgICAgICBnbHlwaFBvaW50c1tpMV0ueSArPSBkZWx0YVk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0VG9EYXRhICs9IHR1cGxlRGF0YVNpemU7XG4gICAgICAgICAgICBzdHJlYW0ucG9zID0gaGVyZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWNvZGVQb2ludHMoKSB7XG4gICAgICAgIGxldCBzdHJlYW0gPSB0aGlzLmZvbnQuc3RyZWFtO1xuICAgICAgICBsZXQgY291bnQgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgIGlmIChjb3VudCAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRQT0lOVFNfQVJFX1dPUkRTKSBjb3VudCA9IChjb3VudCAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRQT0lOVF9SVU5fQ09VTlRfTUFTSykgPDwgOCB8IHN0cmVhbS5yZWFkVUludDgoKTtcbiAgICAgICAgbGV0IHBvaW50cyA9IG5ldyBVaW50MTZBcnJheShjb3VudCk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IHBvaW50ID0gMDtcbiAgICAgICAgd2hpbGUoaSA8IGNvdW50KXtcbiAgICAgICAgICAgIGxldCBydW4gPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICBsZXQgcnVuQ291bnQgPSAocnVuICYgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJFBPSU5UX1JVTl9DT1VOVF9NQVNLKSArIDE7XG4gICAgICAgICAgICBsZXQgZm4gPSBydW4gJiAkMGJiODQwY2FjMDRlOTExYiR2YXIkUE9JTlRTX0FSRV9XT1JEUyA/IHN0cmVhbS5yZWFkVUludDE2IDogc3RyZWFtLnJlYWRVSW50ODtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBydW5Db3VudCAmJiBpIDwgY291bnQ7IGorKyl7XG4gICAgICAgICAgICAgICAgcG9pbnQgKz0gZm4uY2FsbChzdHJlYW0pO1xuICAgICAgICAgICAgICAgIHBvaW50c1tpKytdID0gcG9pbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICB9XG4gICAgZGVjb2RlRGVsdGFzKGNvdW50KSB7XG4gICAgICAgIGxldCBzdHJlYW0gPSB0aGlzLmZvbnQuc3RyZWFtO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGxldCBkZWx0YXMgPSBuZXcgSW50MTZBcnJheShjb3VudCk7XG4gICAgICAgIHdoaWxlKGkgPCBjb3VudCl7XG4gICAgICAgICAgICBsZXQgcnVuID0gc3RyZWFtLnJlYWRVSW50OCgpO1xuICAgICAgICAgICAgbGV0IHJ1bkNvdW50ID0gKHJ1biAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRERUxUQV9SVU5fQ09VTlRfTUFTSykgKyAxO1xuICAgICAgICAgICAgaWYgKHJ1biAmICQwYmI4NDBjYWMwNGU5MTFiJHZhciRERUxUQVNfQVJFX1pFUk8pIGkgKz0gcnVuQ291bnQ7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgZm4gPSBydW4gJiAkMGJiODQwY2FjMDRlOTExYiR2YXIkREVMVEFTX0FSRV9XT1JEUyA/IHN0cmVhbS5yZWFkSW50MTZCRSA6IHN0cmVhbS5yZWFkSW50ODtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgcnVuQ291bnQgJiYgaSA8IGNvdW50OyBqKyspZGVsdGFzW2krK10gPSBmbi5jYWxsKHN0cmVhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlbHRhcztcbiAgICB9XG4gICAgdHVwbGVGYWN0b3IodHVwbGVJbmRleCwgdHVwbGVDb29yZHMsIHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMpIHtcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWQgPSB0aGlzLm5vcm1hbGl6ZWRDb29yZHM7XG4gICAgICAgIGxldCB7IGd2YXI6IGd2YXIgIH0gPSB0aGlzLmZvbnQ7XG4gICAgICAgIGxldCBmYWN0b3IgPSAxO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZ3Zhci5heGlzQ291bnQ7IGkrKyl7XG4gICAgICAgICAgICBpZiAodHVwbGVDb29yZHNbaV0gPT09IDApIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRbaV0gPT09IDApIHJldHVybiAwO1xuICAgICAgICAgICAgaWYgKCh0dXBsZUluZGV4ICYgJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJElOVEVSTUVESUFURV9UVVBMRSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFtpXSA8IE1hdGgubWluKDAsIHR1cGxlQ29vcmRzW2ldKSB8fCBub3JtYWxpemVkW2ldID4gTWF0aC5tYXgoMCwgdHVwbGVDb29yZHNbaV0pKSByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICBmYWN0b3IgPSAoZmFjdG9yICogbm9ybWFsaXplZFtpXSArIE51bWJlci5FUFNJTE9OKSAvICh0dXBsZUNvb3Jkc1tpXSArIE51bWJlci5FUFNJTE9OKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRbaV0gPCBzdGFydENvb3Jkc1tpXSB8fCBub3JtYWxpemVkW2ldID4gZW5kQ29vcmRzW2ldKSByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChub3JtYWxpemVkW2ldIDwgdHVwbGVDb29yZHNbaV0pIGZhY3RvciA9IGZhY3RvciAqIChub3JtYWxpemVkW2ldIC0gc3RhcnRDb29yZHNbaV0gKyBOdW1iZXIuRVBTSUxPTikgLyAodHVwbGVDb29yZHNbaV0gLSBzdGFydENvb3Jkc1tpXSArIE51bWJlci5FUFNJTE9OKTtcbiAgICAgICAgICAgICAgICBlbHNlIGZhY3RvciA9IGZhY3RvciAqIChlbmRDb29yZHNbaV0gLSBub3JtYWxpemVkW2ldICsgTnVtYmVyLkVQU0lMT04pIC8gKGVuZENvb3Jkc1tpXSAtIHR1cGxlQ29vcmRzW2ldICsgTnVtYmVyLkVQU0lMT04pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWN0b3I7XG4gICAgfVxuICAgIC8vIEludGVycG9sYXRlcyBwb2ludHMgd2l0aG91dCBkZWx0YSB2YWx1ZXMuXG4gICAgLy8gTmVlZGVkIGZvciB0aGUgw5ggYW5kIFEgZ2x5cGhzIGluIFNraWEuXG4gICAgLy8gQWxnb3JpdGhtIGZyb20gRnJlZXR5cGUuXG4gICAgaW50ZXJwb2xhdGVNaXNzaW5nRGVsdGFzKHBvaW50cywgaW5Qb2ludHMsIGhhc0RlbHRhKSB7XG4gICAgICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIGxldCBwb2ludCA9IDA7XG4gICAgICAgIHdoaWxlKHBvaW50IDwgcG9pbnRzLmxlbmd0aCl7XG4gICAgICAgICAgICBsZXQgZmlyc3RQb2ludCA9IHBvaW50O1xuICAgICAgICAgICAgLy8gZmluZCB0aGUgZW5kIHBvaW50IG9mIHRoZSBjb250b3VyXG4gICAgICAgICAgICBsZXQgZW5kUG9pbnQgPSBwb2ludDtcbiAgICAgICAgICAgIGxldCBwdCA9IHBvaW50c1tlbmRQb2ludF07XG4gICAgICAgICAgICB3aGlsZSghcHQuZW5kQ29udG91cilwdCA9IHBvaW50c1srK2VuZFBvaW50XTtcbiAgICAgICAgICAgIC8vIGZpbmQgdGhlIGZpcnN0IHBvaW50IHRoYXQgaGFzIGEgZGVsdGFcbiAgICAgICAgICAgIHdoaWxlKHBvaW50IDw9IGVuZFBvaW50ICYmICFoYXNEZWx0YVtwb2ludF0pcG9pbnQrKztcbiAgICAgICAgICAgIGlmIChwb2ludCA+IGVuZFBvaW50KSBjb250aW51ZTtcbiAgICAgICAgICAgIGxldCBmaXJzdERlbHRhID0gcG9pbnQ7XG4gICAgICAgICAgICBsZXQgY3VyRGVsdGEgPSBwb2ludDtcbiAgICAgICAgICAgIHBvaW50Kys7XG4gICAgICAgICAgICB3aGlsZShwb2ludCA8PSBlbmRQb2ludCl7XG4gICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgbmV4dCBwb2ludCB3aXRoIGEgZGVsdGEsIGFuZCBpbnRlcnBvbGF0ZSBpbnRlcm1lZGlhdGUgcG9pbnRzXG4gICAgICAgICAgICAgICAgaWYgKGhhc0RlbHRhW3BvaW50XSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbHRhSW50ZXJwb2xhdGUoY3VyRGVsdGEgKyAxLCBwb2ludCAtIDEsIGN1ckRlbHRhLCBwb2ludCwgaW5Qb2ludHMsIHBvaW50cyk7XG4gICAgICAgICAgICAgICAgICAgIGN1ckRlbHRhID0gcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvaW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzaGlmdCBjb250b3VyIGlmIHdlIG9ubHkgaGF2ZSBhIHNpbmdsZSBkZWx0YVxuICAgICAgICAgICAgaWYgKGN1ckRlbHRhID09PSBmaXJzdERlbHRhKSB0aGlzLmRlbHRhU2hpZnQoZmlyc3RQb2ludCwgZW5kUG9pbnQsIGN1ckRlbHRhLCBpblBvaW50cywgcG9pbnRzKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSwgaGFuZGxlIHRoZSByZW1haW5pbmcgcG9pbnRzIGF0IHRoZSBlbmQgYW5kIGJlZ2lubmluZyBvZiB0aGUgY29udG91clxuICAgICAgICAgICAgICAgIHRoaXMuZGVsdGFJbnRlcnBvbGF0ZShjdXJEZWx0YSArIDEsIGVuZFBvaW50LCBjdXJEZWx0YSwgZmlyc3REZWx0YSwgaW5Qb2ludHMsIHBvaW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0RGVsdGEgPiAwKSB0aGlzLmRlbHRhSW50ZXJwb2xhdGUoZmlyc3RQb2ludCwgZmlyc3REZWx0YSAtIDEsIGN1ckRlbHRhLCBmaXJzdERlbHRhLCBpblBvaW50cywgcG9pbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvaW50ID0gZW5kUG9pbnQgKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlbHRhSW50ZXJwb2xhdGUocDEsIHAyLCByZWYxLCByZWYyLCBpblBvaW50cywgb3V0UG9pbnRzKSB7XG4gICAgICAgIGlmIChwMSA+IHAyKSByZXR1cm47XG4gICAgICAgIGxldCBpdGVyYWJsZSA9IFtcbiAgICAgICAgICAgIFwieFwiLFxuICAgICAgICAgICAgXCJ5XCJcbiAgICAgICAgXTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGl0ZXJhYmxlLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBrID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICBpZiAoaW5Qb2ludHNbcmVmMV1ba10gPiBpblBvaW50c1tyZWYyXVtrXSkge1xuICAgICAgICAgICAgICAgIHZhciBwID0gcmVmMTtcbiAgICAgICAgICAgICAgICByZWYxID0gcmVmMjtcbiAgICAgICAgICAgICAgICByZWYyID0gcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBpbjEgPSBpblBvaW50c1tyZWYxXVtrXTtcbiAgICAgICAgICAgIGxldCBpbjIgPSBpblBvaW50c1tyZWYyXVtrXTtcbiAgICAgICAgICAgIGxldCBvdXQxID0gb3V0UG9pbnRzW3JlZjFdW2tdO1xuICAgICAgICAgICAgbGV0IG91dDIgPSBvdXRQb2ludHNbcmVmMl1ba107XG4gICAgICAgICAgICAvLyBJZiB0aGUgcmVmZXJlbmNlIHBvaW50cyBoYXZlIHRoZSBzYW1lIGNvb3JkaW5hdGUgYnV0IGRpZmZlcmVudFxuICAgICAgICAgICAgLy8gZGVsdGEsIGluZmVycmVkIGRlbHRhIGlzIHplcm8uICBPdGhlcndpc2UgaW50ZXJwb2xhdGUuXG4gICAgICAgICAgICBpZiAoaW4xICE9PSBpbjIgfHwgb3V0MSA9PT0gb3V0Mikge1xuICAgICAgICAgICAgICAgIGxldCBzY2FsZSA9IGluMSA9PT0gaW4yID8gMCA6IChvdXQyIC0gb3V0MSkgLyAoaW4yIC0gaW4xKTtcbiAgICAgICAgICAgICAgICBmb3IobGV0IHAgPSBwMTsgcCA8PSBwMjsgcCsrKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG91dCA9IGluUG9pbnRzW3BdW2tdO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3V0IDw9IGluMSkgb3V0ICs9IG91dDEgLSBpbjE7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG91dCA+PSBpbjIpIG91dCArPSBvdXQyIC0gaW4yO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIG91dCA9IG91dDEgKyAob3V0IC0gaW4xKSAqIHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICBvdXRQb2ludHNbcF1ba10gPSBvdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGRlbHRhU2hpZnQocDEsIHAyLCByZWYsIGluUG9pbnRzLCBvdXRQb2ludHMpIHtcbiAgICAgICAgbGV0IGRlbHRhWCA9IG91dFBvaW50c1tyZWZdLnggLSBpblBvaW50c1tyZWZdLng7XG4gICAgICAgIGxldCBkZWx0YVkgPSBvdXRQb2ludHNbcmVmXS55IC0gaW5Qb2ludHNbcmVmXS55O1xuICAgICAgICBpZiAoZGVsdGFYID09PSAwICYmIGRlbHRhWSA9PT0gMCkgcmV0dXJuO1xuICAgICAgICBmb3IobGV0IHAgPSBwMTsgcCA8PSBwMjsgcCsrKWlmIChwICE9PSByZWYpIHtcbiAgICAgICAgICAgIG91dFBvaW50c1twXS54ICs9IGRlbHRhWDtcbiAgICAgICAgICAgIG91dFBvaW50c1twXS55ICs9IGRlbHRhWTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRBZHZhbmNlQWRqdXN0bWVudChnaWQsIHRhYmxlKSB7XG4gICAgICAgIGxldCBvdXRlckluZGV4LCBpbm5lckluZGV4O1xuICAgICAgICBpZiAodGFibGUuYWR2YW5jZVdpZHRoTWFwcGluZykge1xuICAgICAgICAgICAgbGV0IGlkeCA9IGdpZDtcbiAgICAgICAgICAgIGlmIChpZHggPj0gdGFibGUuYWR2YW5jZVdpZHRoTWFwcGluZy5tYXBDb3VudCkgaWR4ID0gdGFibGUuYWR2YW5jZVdpZHRoTWFwcGluZy5tYXBDb3VudCAtIDE7XG4gICAgICAgICAgICBsZXQgZW50cnlGb3JtYXQgPSB0YWJsZS5hZHZhbmNlV2lkdGhNYXBwaW5nLmVudHJ5Rm9ybWF0O1xuICAgICAgICAgICAgKHsgb3V0ZXJJbmRleDogb3V0ZXJJbmRleCAsIGlubmVySW5kZXg6IGlubmVySW5kZXggIH0gPSB0YWJsZS5hZHZhbmNlV2lkdGhNYXBwaW5nLm1hcERhdGFbaWR4XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRlckluZGV4ID0gMDtcbiAgICAgICAgICAgIGlubmVySW5kZXggPSBnaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVsdGEodGFibGUuaXRlbVZhcmlhdGlvblN0b3JlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KTtcbiAgICB9XG4gICAgLy8gU2VlIHBzZXVkbyBjb2RlIGZyb20gYEZvbnQgVmFyaWF0aW9ucyBPdmVydmlldydcbiAgICAvLyBpbiB0aGUgT3BlblR5cGUgc3BlY2lmaWNhdGlvbi5cbiAgICBnZXREZWx0YShpdGVtU3RvcmUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpIHtcbiAgICAgICAgaWYgKG91dGVySW5kZXggPj0gaXRlbVN0b3JlLml0ZW1WYXJpYXRpb25EYXRhLmxlbmd0aCkgcmV0dXJuIDA7XG4gICAgICAgIGxldCB2YXJEYXRhID0gaXRlbVN0b3JlLml0ZW1WYXJpYXRpb25EYXRhW291dGVySW5kZXhdO1xuICAgICAgICBpZiAoaW5uZXJJbmRleCA+PSB2YXJEYXRhLmRlbHRhU2V0cy5sZW5ndGgpIHJldHVybiAwO1xuICAgICAgICBsZXQgZGVsdGFTZXQgPSB2YXJEYXRhLmRlbHRhU2V0c1tpbm5lckluZGV4XTtcbiAgICAgICAgbGV0IGJsZW5kVmVjdG9yID0gdGhpcy5nZXRCbGVuZFZlY3RvcihpdGVtU3RvcmUsIG91dGVySW5kZXgpO1xuICAgICAgICBsZXQgbmV0QWRqdXN0bWVudCA9IDA7XG4gICAgICAgIGZvcihsZXQgbWFzdGVyID0gMDsgbWFzdGVyIDwgdmFyRGF0YS5yZWdpb25JbmRleENvdW50OyBtYXN0ZXIrKyluZXRBZGp1c3RtZW50ICs9IGRlbHRhU2V0LmRlbHRhc1ttYXN0ZXJdICogYmxlbmRWZWN0b3JbbWFzdGVyXTtcbiAgICAgICAgcmV0dXJuIG5ldEFkanVzdG1lbnQ7XG4gICAgfVxuICAgIGdldEJsZW5kVmVjdG9yKGl0ZW1TdG9yZSwgb3V0ZXJJbmRleCkge1xuICAgICAgICBsZXQgdmFyRGF0YSA9IGl0ZW1TdG9yZS5pdGVtVmFyaWF0aW9uRGF0YVtvdXRlckluZGV4XTtcbiAgICAgICAgaWYgKHRoaXMuYmxlbmRWZWN0b3JzLmhhcyh2YXJEYXRhKSkgcmV0dXJuIHRoaXMuYmxlbmRWZWN0b3JzLmdldCh2YXJEYXRhKTtcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWRDb29yZHMgPSB0aGlzLm5vcm1hbGl6ZWRDb29yZHM7XG4gICAgICAgIGxldCBibGVuZFZlY3RvciA9IFtdO1xuICAgICAgICAvLyBvdXRlciBsb29wIHN0ZXBzIHRocm91Z2ggbWFzdGVyIGRlc2lnbnMgdG8gYmUgYmxlbmRlZFxuICAgICAgICBmb3IobGV0IG1hc3RlciA9IDA7IG1hc3RlciA8IHZhckRhdGEucmVnaW9uSW5kZXhDb3VudDsgbWFzdGVyKyspe1xuICAgICAgICAgICAgbGV0IHNjYWxhciA9IDE7XG4gICAgICAgICAgICBsZXQgcmVnaW9uSW5kZXggPSB2YXJEYXRhLnJlZ2lvbkluZGV4ZXNbbWFzdGVyXTtcbiAgICAgICAgICAgIGxldCBheGVzID0gaXRlbVN0b3JlLnZhcmlhdGlvblJlZ2lvbkxpc3QudmFyaWF0aW9uUmVnaW9uc1tyZWdpb25JbmRleF07XG4gICAgICAgICAgICAvLyBpbm5lciBsb29wIHN0ZXBzIHRocm91Z2ggYXhlcyBpbiB0aGlzIHJlZ2lvblxuICAgICAgICAgICAgZm9yKGxldCBqID0gMDsgaiA8IGF4ZXMubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgIGxldCBheGlzID0gYXhlc1tqXTtcbiAgICAgICAgICAgICAgICBsZXQgYXhpc1NjYWxhcjtcbiAgICAgICAgICAgICAgICAvLyBjb21wdXRlIHRoZSBzY2FsYXIgY29udHJpYnV0aW9uIG9mIHRoaXMgYXhpc1xuICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBpbnZhbGlkIHJhbmdlc1xuICAgICAgICAgICAgICAgIGlmIChheGlzLnN0YXJ0Q29vcmQgPiBheGlzLnBlYWtDb29yZCB8fCBheGlzLnBlYWtDb29yZCA+IGF4aXMuZW5kQ29vcmQpIGF4aXNTY2FsYXIgPSAxO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGF4aXMuc3RhcnRDb29yZCA8IDAgJiYgYXhpcy5lbmRDb29yZCA+IDAgJiYgYXhpcy5wZWFrQ29vcmQgIT09IDApIGF4aXNTY2FsYXIgPSAxO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGF4aXMucGVha0Nvb3JkID09PSAwKSBheGlzU2NhbGFyID0gMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChub3JtYWxpemVkQ29vcmRzW2pdIDwgYXhpcy5zdGFydENvb3JkIHx8IG5vcm1hbGl6ZWRDb29yZHNbal0gPiBheGlzLmVuZENvb3JkKSBheGlzU2NhbGFyID0gMDtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRDb29yZHNbal0gPT09IGF4aXMucGVha0Nvb3JkKSBheGlzU2NhbGFyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobm9ybWFsaXplZENvb3Jkc1tqXSA8IGF4aXMucGVha0Nvb3JkKSBheGlzU2NhbGFyID0gKG5vcm1hbGl6ZWRDb29yZHNbal0gLSBheGlzLnN0YXJ0Q29vcmQgKyBOdW1iZXIuRVBTSUxPTikgLyAoYXhpcy5wZWFrQ29vcmQgLSBheGlzLnN0YXJ0Q29vcmQgKyBOdW1iZXIuRVBTSUxPTik7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgYXhpc1NjYWxhciA9IChheGlzLmVuZENvb3JkIC0gbm9ybWFsaXplZENvb3Jkc1tqXSArIE51bWJlci5FUFNJTE9OKSAvIChheGlzLmVuZENvb3JkIC0gYXhpcy5wZWFrQ29vcmQgKyBOdW1iZXIuRVBTSUxPTik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRha2UgcHJvZHVjdCBvZiBhbGwgdGhlIGF4aXMgc2NhbGFyc1xuICAgICAgICAgICAgICAgIHNjYWxhciAqPSBheGlzU2NhbGFyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxlbmRWZWN0b3JbbWFzdGVyXSA9IHNjYWxhcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJsZW5kVmVjdG9ycy5zZXQodmFyRGF0YSwgYmxlbmRWZWN0b3IpO1xuICAgICAgICByZXR1cm4gYmxlbmRWZWN0b3I7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZvbnQsIGNvb3Jkcyl7XG4gICAgICAgIHRoaXMuZm9udCA9IGZvbnQ7XG4gICAgICAgIHRoaXMubm9ybWFsaXplZENvb3JkcyA9IHRoaXMubm9ybWFsaXplQ29vcmRzKGNvb3Jkcyk7XG4gICAgICAgIHRoaXMuYmxlbmRWZWN0b3JzID0gbmV3IE1hcDtcbiAgICB9XG59XG5cblxuXG5cbmNvbnN0ICQ1Y2M3NDc2ZGE5MmRmMzc1JHZhciRyZXNvbHZlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuY2xhc3MgJDVjYzc0NzZkYTkyZGYzNzUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgaW5jbHVkZUdseXBoKGdseXBoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2x5cGggPT09IFwib2JqZWN0XCIpIGdseXBoID0gZ2x5cGguaWQ7XG4gICAgICAgIGlmICh0aGlzLm1hcHBpbmdbZ2x5cGhdID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZ2x5cGhzLnB1c2goZ2x5cGgpO1xuICAgICAgICAgICAgdGhpcy5tYXBwaW5nW2dseXBoXSA9IHRoaXMuZ2x5cGhzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFwcGluZ1tnbHlwaF07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZvbnQpe1xuICAgICAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLmdseXBocyA9IFtdO1xuICAgICAgICB0aGlzLm1hcHBpbmcgPSB7fTtcbiAgICAgICAgLy8gYWx3YXlzIGluY2x1ZGUgdGhlIG1pc3NpbmcgZ2x5cGhcbiAgICAgICAgdGhpcy5pbmNsdWRlR2x5cGgoMCk7XG4gICAgfVxufVxuXG5cblxuXG5cbi8vIEZsYWdzIGZvciBzaW1wbGUgZ2x5cGhzXG5jb25zdCAkODA3ZTU4NTA2YmU3MDAwNSR2YXIkT05fQ1VSVkUgPSAxO1xuY29uc3QgJDgwN2U1ODUwNmJlNzAwMDUkdmFyJFhfU0hPUlRfVkVDVE9SID0gMjtcbmNvbnN0ICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRZX1NIT1JUX1ZFQ1RPUiA9IDQ7XG5jb25zdCAkODA3ZTU4NTA2YmU3MDAwNSR2YXIkUkVQRUFUID0gODtcbmNvbnN0ICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRTQU1FX1ggPSAxNjtcbmNvbnN0ICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRTQU1FX1kgPSAzMjtcbmNsYXNzICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRQb2ludCB7XG4gICAgc3RhdGljIHNpemUodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwgPj0gMCAmJiB2YWwgPD0gMjU1ID8gMSA6IDI7XG4gICAgfVxuICAgIHN0YXRpYyBlbmNvZGUoc3RyZWFtLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSAyNTUpIHN0cmVhbS53cml0ZVVJbnQ4KHZhbHVlKTtcbiAgICAgICAgZWxzZSBzdHJlYW0ud3JpdGVJbnQxNkJFKHZhbHVlKTtcbiAgICB9XG59XG5sZXQgJDgwN2U1ODUwNmJlNzAwMDUkdmFyJEdseWYgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgbnVtYmVyT2ZDb250b3VyczogJDUyWklmJGludDE2LFxuICAgIHhNaW46ICQ1MlpJZiRpbnQxNixcbiAgICB5TWluOiAkNTJaSWYkaW50MTYsXG4gICAgeE1heDogJDUyWklmJGludDE2LFxuICAgIHlNYXg6ICQ1MlpJZiRpbnQxNixcbiAgICBlbmRQdHNPZkNvbnRvdXJzOiBuZXcgJDUyWklmJEFycmF5KCQ1MlpJZiR1aW50MTYsIFwibnVtYmVyT2ZDb250b3Vyc1wiKSxcbiAgICBpbnN0cnVjdGlvbnM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQ4LCAkNTJaSWYkdWludDE2KSxcbiAgICBmbGFnczogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDgsIDApLFxuICAgIHhQb2ludHM6IG5ldyAkNTJaSWYkQXJyYXkoJDgwN2U1ODUwNmJlNzAwMDUkdmFyJFBvaW50LCAwKSxcbiAgICB5UG9pbnRzOiBuZXcgJDUyWklmJEFycmF5KCQ4MDdlNTg1MDZiZTcwMDA1JHZhciRQb2ludCwgMClcbn0pO1xuY2xhc3MgJDgwN2U1ODUwNmJlNzAwMDUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSB7XG4gICAgZW5jb2RlU2ltcGxlKHBhdGgsIGluc3RydWN0aW9ucyA9IFtdKSB7XG4gICAgICAgIGxldCBlbmRQdHNPZkNvbnRvdXJzID0gW107XG4gICAgICAgIGxldCB4UG9pbnRzID0gW107XG4gICAgICAgIGxldCB5UG9pbnRzID0gW107XG4gICAgICAgIGxldCBmbGFncyA9IFtdO1xuICAgICAgICBsZXQgc2FtZSA9IDA7XG4gICAgICAgIGxldCBsYXN0WCA9IDAsIGxhc3RZID0gMCwgbGFzdEZsYWcgPSAwO1xuICAgICAgICBsZXQgcG9pbnRDb3VudCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwYXRoLmNvbW1hbmRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjID0gcGF0aC5jb21tYW5kc1tpXTtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBjLmFyZ3MubGVuZ3RoOyBqICs9IDIpe1xuICAgICAgICAgICAgICAgIGxldCB4ID0gYy5hcmdzW2pdO1xuICAgICAgICAgICAgICAgIGxldCB5ID0gYy5hcmdzW2ogKyAxXTtcbiAgICAgICAgICAgICAgICBsZXQgZmxhZyA9IDA7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGVuZGluZyBwb2ludCBvZiBhIHF1YWRyYXRpYyBjdXJ2ZSBpcyB0aGUgbWlkcG9pbnRcbiAgICAgICAgICAgICAgICAvLyBiZXR3ZWVuIHRoZSBjb250cm9sIHBvaW50IGFuZCB0aGUgY29udHJvbCBwb2ludCBvZiB0aGUgbmV4dFxuICAgICAgICAgICAgICAgIC8vIHF1YWRyYXRpYyBjdXJ2ZSwgd2UgY2FuIG9taXQgdGhlIGVuZGluZyBwb2ludC5cbiAgICAgICAgICAgICAgICBpZiAoYy5jb21tYW5kID09PSBcInF1YWRyYXRpY0N1cnZlVG9cIiAmJiBqID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gcGF0aC5jb21tYW5kc1tpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQuY29tbWFuZCA9PT0gXCJxdWFkcmF0aWNDdXJ2ZVRvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtaWRYID0gKGxhc3RYICsgbmV4dC5hcmdzWzBdKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWlkWSA9IChsYXN0WSArIG5leHQuYXJnc1sxXSkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggPT09IG1pZFggJiYgeSA9PT0gbWlkWSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQWxsIHBvaW50cyBleGNlcHQgY29udHJvbCBwb2ludHMgYXJlIG9uIGN1cnZlLlxuICAgICAgICAgICAgICAgIGlmICghKGMuY29tbWFuZCA9PT0gXCJxdWFkcmF0aWNDdXJ2ZVRvXCIgJiYgaiA9PT0gMCkpIGZsYWcgfD0gJDgwN2U1ODUwNmJlNzAwMDUkdmFyJE9OX0NVUlZFO1xuICAgICAgICAgICAgICAgIGZsYWcgPSB0aGlzLl9lbmNvZGVQb2ludCh4LCBsYXN0WCwgeFBvaW50cywgZmxhZywgJDgwN2U1ODUwNmJlNzAwMDUkdmFyJFhfU0hPUlRfVkVDVE9SLCAkODA3ZTU4NTA2YmU3MDAwNSR2YXIkU0FNRV9YKTtcbiAgICAgICAgICAgICAgICBmbGFnID0gdGhpcy5fZW5jb2RlUG9pbnQoeSwgbGFzdFksIHlQb2ludHMsIGZsYWcsICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRZX1NIT1JUX1ZFQ1RPUiwgJDgwN2U1ODUwNmJlNzAwMDUkdmFyJFNBTUVfWSk7XG4gICAgICAgICAgICAgICAgaWYgKGZsYWcgPT09IGxhc3RGbGFnICYmIHNhbWUgPCAyNTUpIHtcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3NbZmxhZ3MubGVuZ3RoIC0gMV0gfD0gJDgwN2U1ODUwNmJlNzAwMDUkdmFyJFJFUEVBVDtcbiAgICAgICAgICAgICAgICAgICAgc2FtZSsrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzYW1lID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxhZ3MucHVzaChzYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbWUgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLnB1c2goZmxhZyk7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RGbGFnID0gZmxhZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGFzdFggPSB4O1xuICAgICAgICAgICAgICAgIGxhc3RZID0geTtcbiAgICAgICAgICAgICAgICBwb2ludENvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYy5jb21tYW5kID09PSBcImNsb3NlUGF0aFwiKSBlbmRQdHNPZkNvbnRvdXJzLnB1c2gocG9pbnRDb3VudCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsb3NlIHRoZSBwYXRoIGlmIHRoZSBsYXN0IGNvbW1hbmQgZGlkbid0IGFscmVhZHlcbiAgICAgICAgaWYgKHBhdGguY29tbWFuZHMubGVuZ3RoID4gMSAmJiBwYXRoLmNvbW1hbmRzW3BhdGguY29tbWFuZHMubGVuZ3RoIC0gMV0uY29tbWFuZCAhPT0gXCJjbG9zZVBhdGhcIikgZW5kUHRzT2ZDb250b3Vycy5wdXNoKHBvaW50Q291bnQgLSAxKTtcbiAgICAgICAgbGV0IGJib3ggPSBwYXRoLmJib3g7XG4gICAgICAgIGxldCBnbHlmID0ge1xuICAgICAgICAgICAgbnVtYmVyT2ZDb250b3VyczogZW5kUHRzT2ZDb250b3Vycy5sZW5ndGgsXG4gICAgICAgICAgICB4TWluOiBiYm94Lm1pblgsXG4gICAgICAgICAgICB5TWluOiBiYm94Lm1pblksXG4gICAgICAgICAgICB4TWF4OiBiYm94Lm1heFgsXG4gICAgICAgICAgICB5TWF4OiBiYm94Lm1heFksXG4gICAgICAgICAgICBlbmRQdHNPZkNvbnRvdXJzOiBlbmRQdHNPZkNvbnRvdXJzLFxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zOiBpbnN0cnVjdGlvbnMsXG4gICAgICAgICAgICBmbGFnczogZmxhZ3MsXG4gICAgICAgICAgICB4UG9pbnRzOiB4UG9pbnRzLFxuICAgICAgICAgICAgeVBvaW50czogeVBvaW50c1xuICAgICAgICB9O1xuICAgICAgICBsZXQgc2l6ZSA9ICQ4MDdlNTg1MDZiZTcwMDA1JHZhciRHbHlmLnNpemUoZ2x5Zik7XG4gICAgICAgIGxldCB0YWlsID0gNCAtIHNpemUgJSA0O1xuICAgICAgICBsZXQgc3RyZWFtID0gbmV3ICQ1MlpJZiRFbmNvZGVTdHJlYW0oc2l6ZSArIHRhaWwpO1xuICAgICAgICAkODA3ZTU4NTA2YmU3MDAwNSR2YXIkR2x5Zi5lbmNvZGUoc3RyZWFtLCBnbHlmKTtcbiAgICAgICAgLy8gQWxpZ24gdG8gNC1ieXRlIGxlbmd0aFxuICAgICAgICBpZiAodGFpbCAhPT0gMCkgc3RyZWFtLmZpbGwoMCwgdGFpbCk7XG4gICAgICAgIHJldHVybiBzdHJlYW0uYnVmZmVyO1xuICAgIH1cbiAgICBfZW5jb2RlUG9pbnQodmFsdWUsIGxhc3QsIHBvaW50cywgZmxhZywgc2hvcnRGbGFnLCBzYW1lRmxhZykge1xuICAgICAgICBsZXQgZGlmZiA9IHZhbHVlIC0gbGFzdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSBsYXN0KSBmbGFnIHw9IHNhbWVGbGFnO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICgtMjU1IDw9IGRpZmYgJiYgZGlmZiA8PSAyNTUpIHtcbiAgICAgICAgICAgICAgICBmbGFnIHw9IHNob3J0RmxhZztcbiAgICAgICAgICAgICAgICBpZiAoZGlmZiA8IDApIGRpZmYgPSAtZGlmZjtcbiAgICAgICAgICAgICAgICBlbHNlIGZsYWcgfD0gc2FtZUZsYWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2ludHMucHVzaChkaWZmKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmxhZztcbiAgICB9XG59XG5cblxuY2xhc3MgJDRhYmJiNmE1ZGJkYzQ0MWEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkNWNjNzQ3NmRhOTJkZjM3NSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgX2FkZEdseXBoKGdpZCkge1xuICAgICAgICBsZXQgZ2x5cGggPSB0aGlzLmZvbnQuZ2V0R2x5cGgoZ2lkKTtcbiAgICAgICAgbGV0IGdseWYgPSBnbHlwaC5fZGVjb2RlKCk7XG4gICAgICAgIC8vIGdldCB0aGUgb2Zmc2V0IHRvIHRoZSBnbHlwaCBmcm9tIHRoZSBsb2NhIHRhYmxlXG4gICAgICAgIGxldCBjdXJPZmZzZXQgPSB0aGlzLmZvbnQubG9jYS5vZmZzZXRzW2dpZF07XG4gICAgICAgIGxldCBuZXh0T2Zmc2V0ID0gdGhpcy5mb250LmxvY2Eub2Zmc2V0c1tnaWQgKyAxXTtcbiAgICAgICAgbGV0IHN0cmVhbSA9IHRoaXMuZm9udC5fZ2V0VGFibGVTdHJlYW0oXCJnbHlmXCIpO1xuICAgICAgICBzdHJlYW0ucG9zICs9IGN1ck9mZnNldDtcbiAgICAgICAgbGV0IGJ1ZmZlciA9IHN0cmVhbS5yZWFkQnVmZmVyKG5leHRPZmZzZXQgLSBjdXJPZmZzZXQpO1xuICAgICAgICAvLyBpZiBpdCBpcyBhIGNvbXBvdW5kIGdseXBoLCBpbmNsdWRlIGl0cyBjb21wb25lbnRzXG4gICAgICAgIGlmIChnbHlmICYmIGdseWYubnVtYmVyT2ZDb250b3VycyA8IDApIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgICAgICAgICBsZXQgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIuYnVmZmVyKTtcbiAgICAgICAgICAgIGZvciAobGV0IGNvbXBvbmVudCBvZiBnbHlmLmNvbXBvbmVudHMpe1xuICAgICAgICAgICAgICAgIGdpZCA9IHRoaXMuaW5jbHVkZUdseXBoKGNvbXBvbmVudC5nbHlwaElEKTtcbiAgICAgICAgICAgICAgICB2aWV3LnNldFVpbnQxNihjb21wb25lbnQucG9zLCBnaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGdseWYgJiYgdGhpcy5mb250Ll92YXJpYXRpb25Qcm9jZXNzb3IpIC8vIElmIHRoaXMgaXMgYSBUcnVlVHlwZSB2YXJpYXRpb24gZ2x5cGgsIHJlLWVuY29kZSB0aGUgcGF0aFxuICAgICAgICBidWZmZXIgPSB0aGlzLmdseXBoRW5jb2Rlci5lbmNvZGVTaW1wbGUoZ2x5cGgucGF0aCwgZ2x5Zi5pbnN0cnVjdGlvbnMpO1xuICAgICAgICB0aGlzLmdseWYucHVzaChidWZmZXIpO1xuICAgICAgICB0aGlzLmxvY2Eub2Zmc2V0cy5wdXNoKHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5obXR4Lm1ldHJpY3MucHVzaCh7XG4gICAgICAgICAgICBhZHZhbmNlOiBnbHlwaC5hZHZhbmNlV2lkdGgsXG4gICAgICAgICAgICBiZWFyaW5nOiBnbHlwaC5fZ2V0TWV0cmljcygpLmxlZnRCZWFyaW5nXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSBidWZmZXIubGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcy5nbHlmLmxlbmd0aCAtIDE7XG4gICAgfVxuICAgIGVuY29kZSgpIHtcbiAgICAgICAgLy8gdGFibGVzIHJlcXVpcmVkIGJ5IFBERiBzcGVjOlxuICAgICAgICAvLyAgIGhlYWQsIGhoZWEsIGxvY2EsIG1heHAsIGN2dCAsIHByZXAsIGdseWYsIGhtdHgsIGZwZ21cbiAgICAgICAgLy9cbiAgICAgICAgLy8gYWRkaXRpb25hbCB0YWJsZXMgcmVxdWlyZWQgZm9yIHN0YW5kYWxvbmUgZm9udHM6XG4gICAgICAgIC8vICAgbmFtZSwgY21hcCwgT1MvMiwgcG9zdFxuICAgICAgICB0aGlzLmdseWYgPSBbXTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmxvY2EgPSB7XG4gICAgICAgICAgICBvZmZzZXRzOiBbXSxcbiAgICAgICAgICAgIHZlcnNpb246IHRoaXMuZm9udC5sb2NhLnZlcnNpb25cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5obXR4ID0ge1xuICAgICAgICAgICAgbWV0cmljczogW10sXG4gICAgICAgICAgICBiZWFyaW5nczogW11cbiAgICAgICAgfTtcbiAgICAgICAgLy8gaW5jbHVkZSBhbGwgdGhlIGdseXBoc1xuICAgICAgICAvLyBub3QgdXNpbmcgYSBmb3IgbG9vcCBiZWNhdXNlIHdlIG5lZWQgdG8gc3VwcG9ydCBhZGRpbmcgbW9yZVxuICAgICAgICAvLyBnbHlwaHMgdG8gdGhlIGFycmF5IGFzIHdlIGdvLCBhbmQgQ29mZmVlU2NyaXB0IGNhY2hlcyB0aGUgbGVuZ3RoLlxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHdoaWxlKGkgPCB0aGlzLmdseXBocy5sZW5ndGgpdGhpcy5fYWRkR2x5cGgodGhpcy5nbHlwaHNbaSsrXSk7XG4gICAgICAgIGxldCBtYXhwID0gKDAsICQ1MlpJZiRjbG9uZSkodGhpcy5mb250Lm1heHApO1xuICAgICAgICBtYXhwLm51bUdseXBocyA9IHRoaXMuZ2x5Zi5sZW5ndGg7XG4gICAgICAgIHRoaXMubG9jYS5vZmZzZXRzLnB1c2godGhpcy5vZmZzZXQpO1xuICAgICAgICBsZXQgaGVhZCA9ICgwLCAkNTJaSWYkY2xvbmUpKHRoaXMuZm9udC5oZWFkKTtcbiAgICAgICAgaGVhZC5pbmRleFRvTG9jRm9ybWF0ID0gdGhpcy5sb2NhLnZlcnNpb247XG4gICAgICAgIGxldCBoaGVhID0gKDAsICQ1MlpJZiRjbG9uZSkodGhpcy5mb250LmhoZWEpO1xuICAgICAgICBoaGVhLm51bWJlck9mTWV0cmljcyA9IHRoaXMuaG10eC5tZXRyaWNzLmxlbmd0aDtcbiAgICAgICAgLy8gbWFwID0gW11cbiAgICAgICAgLy8gZm9yIGluZGV4IGluIFswLi4uMjU2XVxuICAgICAgICAvLyAgICAgaWYgaW5kZXggPCBAbnVtR2x5cGhzXG4gICAgICAgIC8vICAgICAgICAgbWFwW2luZGV4XSA9IGluZGV4XG4gICAgICAgIC8vICAgICBlbHNlXG4gICAgICAgIC8vICAgICAgICAgbWFwW2luZGV4XSA9IDBcbiAgICAgICAgLy9cbiAgICAgICAgLy8gY21hcFRhYmxlID1cbiAgICAgICAgLy8gICAgIHZlcnNpb246IDBcbiAgICAgICAgLy8gICAgIGxlbmd0aDogMjYyXG4gICAgICAgIC8vICAgICBsYW5ndWFnZTogMFxuICAgICAgICAvLyAgICAgY29kZU1hcDogbWFwXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGNtYXAgPVxuICAgICAgICAvLyAgICAgdmVyc2lvbjogMFxuICAgICAgICAvLyAgICAgbnVtU3VidGFibGVzOiAxXG4gICAgICAgIC8vICAgICB0YWJsZXM6IFtcbiAgICAgICAgLy8gICAgICAgICBwbGF0Zm9ybUlEOiAxXG4gICAgICAgIC8vICAgICAgICAgZW5jb2RpbmdJRDogMFxuICAgICAgICAvLyAgICAgICAgIHRhYmxlOiBjbWFwVGFibGVcbiAgICAgICAgLy8gICAgIF1cbiAgICAgICAgLy8gVE9ETzogc3Vic2V0IHByZXAsIGN2dCwgZnBnbT9cbiAgICAgICAgcmV0dXJuICgwLCAkODE2YzA3YTA0YjZkYmE4NyRleHBvcnQkMmUyYmNkODczOWFlMDM5KS50b0J1ZmZlcih7XG4gICAgICAgICAgICB0YWJsZXM6IHtcbiAgICAgICAgICAgICAgICBoZWFkOiBoZWFkLFxuICAgICAgICAgICAgICAgIGhoZWE6IGhoZWEsXG4gICAgICAgICAgICAgICAgbG9jYTogdGhpcy5sb2NhLFxuICAgICAgICAgICAgICAgIG1heHA6IG1heHAsXG4gICAgICAgICAgICAgICAgXCJjdnQgXCI6IHRoaXMuZm9udFtcImN2dCBcIl0sXG4gICAgICAgICAgICAgICAgcHJlcDogdGhpcy5mb250LnByZXAsXG4gICAgICAgICAgICAgICAgZ2x5ZjogdGhpcy5nbHlmLFxuICAgICAgICAgICAgICAgIGhtdHg6IHRoaXMuaG10eCxcbiAgICAgICAgICAgICAgICBmcGdtOiB0aGlzLmZvbnQuZnBnbVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZm9udCl7XG4gICAgICAgIHN1cGVyKGZvbnQpO1xuICAgICAgICB0aGlzLmdseXBoRW5jb2RlciA9IG5ldyAoMCwgJDgwN2U1ODUwNmJlNzAwMDUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4gICAgfVxufVxuXG5cblxuXG5cblxuY2xhc3MgJDAwMWQ3Mzk0MjhhNzFkNWEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSBleHRlbmRzICgwLCAkNWNjNzQ3NmRhOTJkZjM3NSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSB7XG4gICAgc3Vic2V0Q2hhcnN0cmluZ3MoKSB7XG4gICAgICAgIHRoaXMuY2hhcnN0cmluZ3MgPSBbXTtcbiAgICAgICAgbGV0IGdzdWJycyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBnaWQgb2YgdGhpcy5nbHlwaHMpe1xuICAgICAgICAgICAgdGhpcy5jaGFyc3RyaW5ncy5wdXNoKHRoaXMuY2ZmLmdldENoYXJTdHJpbmcoZ2lkKSk7XG4gICAgICAgICAgICBsZXQgZ2x5cGggPSB0aGlzLmZvbnQuZ2V0R2x5cGgoZ2lkKTtcbiAgICAgICAgICAgIGxldCBwYXRoID0gZ2x5cGgucGF0aDsgLy8gdGhpcyBjYXVzZXMgdGhlIGdseXBoIHRvIGJlIHBhcnNlZFxuICAgICAgICAgICAgZm9yKGxldCBzdWJyIGluIGdseXBoLl91c2VkR3N1YnJzKWdzdWJyc1tzdWJyXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nc3VicnMgPSB0aGlzLnN1YnNldFN1YnJzKHRoaXMuY2ZmLmdsb2JhbFN1YnJJbmRleCwgZ3N1YnJzKTtcbiAgICB9XG4gICAgc3Vic2V0U3VicnMoc3VicnMsIHVzZWQpIHtcbiAgICAgICAgbGV0IHJlcyA9IFtdO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc3VicnMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IHN1YnIgPSBzdWJyc1tpXTtcbiAgICAgICAgICAgIGlmICh1c2VkW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jZmYuc3RyZWFtLnBvcyA9IHN1YnIub2Zmc2V0O1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuY2ZmLnN0cmVhbS5yZWFkQnVmZmVyKHN1YnIubGVuZ3RoKSk7XG4gICAgICAgICAgICB9IGVsc2UgcmVzLnB1c2gobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgICAgICAgICAgIDExXG4gICAgICAgICAgICBdKSk7IC8vIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIHN1YnNldEZvbnRkaWN0KHRvcERpY3QpIHtcbiAgICAgICAgdG9wRGljdC5GREFycmF5ID0gW107XG4gICAgICAgIHRvcERpY3QuRkRTZWxlY3QgPSB7XG4gICAgICAgICAgICB2ZXJzaW9uOiAwLFxuICAgICAgICAgICAgZmRzOiBbXVxuICAgICAgICB9O1xuICAgICAgICBsZXQgdXNlZF9mZHMgPSB7fTtcbiAgICAgICAgbGV0IHVzZWRfc3VicnMgPSBbXTtcbiAgICAgICAgbGV0IGZkX3NlbGVjdCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBnaWQgb2YgdGhpcy5nbHlwaHMpe1xuICAgICAgICAgICAgbGV0IGZkID0gdGhpcy5jZmYuZmRGb3JHbHlwaChnaWQpO1xuICAgICAgICAgICAgaWYgKGZkID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCF1c2VkX2Zkc1tmZF0pIHtcbiAgICAgICAgICAgICAgICB0b3BEaWN0LkZEQXJyYXkucHVzaChPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNmZi50b3BEaWN0LkZEQXJyYXlbZmRdKSk7XG4gICAgICAgICAgICAgICAgdXNlZF9zdWJycy5wdXNoKHt9KTtcbiAgICAgICAgICAgICAgICBmZF9zZWxlY3RbZmRdID0gdG9wRGljdC5GREFycmF5Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1c2VkX2Zkc1tmZF0gPSB0cnVlO1xuICAgICAgICAgICAgdG9wRGljdC5GRFNlbGVjdC5mZHMucHVzaChmZF9zZWxlY3RbZmRdKTtcbiAgICAgICAgICAgIGxldCBnbHlwaCA9IHRoaXMuZm9udC5nZXRHbHlwaChnaWQpO1xuICAgICAgICAgICAgbGV0IHBhdGggPSBnbHlwaC5wYXRoOyAvLyB0aGlzIGNhdXNlcyB0aGUgZ2x5cGggdG8gYmUgcGFyc2VkXG4gICAgICAgICAgICBmb3IobGV0IHN1YnIgaW4gZ2x5cGguX3VzZWRTdWJycyl1c2VkX3N1YnJzW2ZkX3NlbGVjdFtmZF1dW3N1YnJdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdG9wRGljdC5GREFycmF5Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBkaWN0ID0gdG9wRGljdC5GREFycmF5W2ldO1xuICAgICAgICAgICAgZGVsZXRlIGRpY3QuRm9udE5hbWU7XG4gICAgICAgICAgICBpZiAoZGljdC5Qcml2YXRlICYmIGRpY3QuUHJpdmF0ZS5TdWJycykge1xuICAgICAgICAgICAgICAgIGRpY3QuUHJpdmF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIGRpY3QuUHJpdmF0ZSk7XG4gICAgICAgICAgICAgICAgZGljdC5Qcml2YXRlLlN1YnJzID0gdGhpcy5zdWJzZXRTdWJycyhkaWN0LlByaXZhdGUuU3VicnMsIHVzZWRfc3VicnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3JlYXRlQ0lERm9udGRpY3QodG9wRGljdCkge1xuICAgICAgICBsZXQgdXNlZF9zdWJycyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBnaWQgb2YgdGhpcy5nbHlwaHMpe1xuICAgICAgICAgICAgbGV0IGdseXBoID0gdGhpcy5mb250LmdldEdseXBoKGdpZCk7XG4gICAgICAgICAgICBsZXQgcGF0aCA9IGdseXBoLnBhdGg7IC8vIHRoaXMgY2F1c2VzIHRoZSBnbHlwaCB0byBiZSBwYXJzZWRcbiAgICAgICAgICAgIGZvcihsZXQgc3ViciBpbiBnbHlwaC5fdXNlZFN1YnJzKXVzZWRfc3VicnNbc3Vicl0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcml2YXRlRGljdCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY2ZmLnRvcERpY3QuUHJpdmF0ZSk7XG4gICAgICAgIGlmICh0aGlzLmNmZi50b3BEaWN0LlByaXZhdGUgJiYgdGhpcy5jZmYudG9wRGljdC5Qcml2YXRlLlN1YnJzKSBwcml2YXRlRGljdC5TdWJycyA9IHRoaXMuc3Vic2V0U3VicnModGhpcy5jZmYudG9wRGljdC5Qcml2YXRlLlN1YnJzLCB1c2VkX3N1YnJzKTtcbiAgICAgICAgdG9wRGljdC5GREFycmF5ID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFByaXZhdGU6IHByaXZhdGVEaWN0XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiB0b3BEaWN0LkZEU2VsZWN0ID0ge1xuICAgICAgICAgICAgdmVyc2lvbjogMyxcbiAgICAgICAgICAgIG5SYW5nZXM6IDEsXG4gICAgICAgICAgICByYW5nZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0OiAwLFxuICAgICAgICAgICAgICAgICAgICBmZDogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzZW50aW5lbDogdGhpcy5jaGFyc3RyaW5ncy5sZW5ndGhcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYWRkU3RyaW5nKHN0cmluZykge1xuICAgICAgICBpZiAoIXN0cmluZykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghdGhpcy5zdHJpbmdzKSB0aGlzLnN0cmluZ3MgPSBbXTtcbiAgICAgICAgdGhpcy5zdHJpbmdzLnB1c2goc3RyaW5nKTtcbiAgICAgICAgcmV0dXJuICgwLCAkMjI5MjI0YWVjNDM3ODNjNSRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5sZW5ndGggKyB0aGlzLnN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgZW5jb2RlKCkge1xuICAgICAgICB0aGlzLnN1YnNldENoYXJzdHJpbmdzKCk7XG4gICAgICAgIGxldCBjaGFyc2V0ID0ge1xuICAgICAgICAgICAgdmVyc2lvbjogdGhpcy5jaGFyc3RyaW5ncy5sZW5ndGggPiAyNTUgPyAyIDogMSxcbiAgICAgICAgICAgIHJhbmdlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6IDEsXG4gICAgICAgICAgICAgICAgICAgIG5MZWZ0OiB0aGlzLmNoYXJzdHJpbmdzLmxlbmd0aCAtIDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgICAgIGxldCB0b3BEaWN0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jZmYudG9wRGljdCk7XG4gICAgICAgIHRvcERpY3QuUHJpdmF0ZSA9IG51bGw7XG4gICAgICAgIHRvcERpY3QuY2hhcnNldCA9IGNoYXJzZXQ7XG4gICAgICAgIHRvcERpY3QuRW5jb2RpbmcgPSBudWxsO1xuICAgICAgICB0b3BEaWN0LkNoYXJTdHJpbmdzID0gdGhpcy5jaGFyc3RyaW5ncztcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIFtcbiAgICAgICAgICAgIFwidmVyc2lvblwiLFxuICAgICAgICAgICAgXCJOb3RpY2VcIixcbiAgICAgICAgICAgIFwiQ29weXJpZ2h0XCIsXG4gICAgICAgICAgICBcIkZ1bGxOYW1lXCIsXG4gICAgICAgICAgICBcIkZhbWlseU5hbWVcIixcbiAgICAgICAgICAgIFwiV2VpZ2h0XCIsXG4gICAgICAgICAgICBcIlBvc3RTY3JpcHRcIixcbiAgICAgICAgICAgIFwiQmFzZUZvbnROYW1lXCIsXG4gICAgICAgICAgICBcIkZvbnROYW1lXCJcbiAgICAgICAgXSl0b3BEaWN0W2tleV0gPSB0aGlzLmFkZFN0cmluZyh0aGlzLmNmZi5zdHJpbmcodG9wRGljdFtrZXldKSk7XG4gICAgICAgIHRvcERpY3QuUk9TID0gW1xuICAgICAgICAgICAgdGhpcy5hZGRTdHJpbmcoXCJBZG9iZVwiKSxcbiAgICAgICAgICAgIHRoaXMuYWRkU3RyaW5nKFwiSWRlbnRpdHlcIiksXG4gICAgICAgICAgICAwXG4gICAgICAgIF07XG4gICAgICAgIHRvcERpY3QuQ0lEQ291bnQgPSB0aGlzLmNoYXJzdHJpbmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMuY2ZmLmlzQ0lERm9udCkgdGhpcy5zdWJzZXRGb250ZGljdCh0b3BEaWN0KTtcbiAgICAgICAgZWxzZSB0aGlzLmNyZWF0ZUNJREZvbnRkaWN0KHRvcERpY3QpO1xuICAgICAgICBsZXQgdG9wID0ge1xuICAgICAgICAgICAgdmVyc2lvbjogMSxcbiAgICAgICAgICAgIGhkclNpemU6IHRoaXMuY2ZmLmhkclNpemUsXG4gICAgICAgICAgICBvZmZTaXplOiA0LFxuICAgICAgICAgICAgaGVhZGVyOiB0aGlzLmNmZi5oZWFkZXIsXG4gICAgICAgICAgICBuYW1lSW5kZXg6IFtcbiAgICAgICAgICAgICAgICB0aGlzLmNmZi5wb3N0c2NyaXB0TmFtZVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHRvcERpY3RJbmRleDogW1xuICAgICAgICAgICAgICAgIHRvcERpY3RcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzdHJpbmdJbmRleDogdGhpcy5zdHJpbmdzLFxuICAgICAgICAgICAgZ2xvYmFsU3VickluZGV4OiB0aGlzLmdzdWJyc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKDAsICRiODRmZDNkZDlkOGVkZGIyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLnRvQnVmZmVyKHRvcCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZvbnQpe1xuICAgICAgICBzdXBlcihmb250KTtcbiAgICAgICAgdGhpcy5jZmYgPSB0aGlzLmZvbnRbXCJDRkYgXCJdO1xuICAgICAgICBpZiAoIXRoaXMuY2ZmKSB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgYSBDRkYgRm9udFwiKTtcbiAgICB9XG59XG5cblxuXG5cbmNsYXNzICQ0YzE3MDlkZWU1MjhlYTc2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIHN0YXRpYyBwcm9iZShidWZmZXIpIHtcbiAgICAgICAgbGV0IGZvcm1hdCA9ICgwLCAkMTI3Mjc3MzBkZGZjOGJmZSRleHBvcnQkM2QyOGMxOTk2Y2VkMWYxNCkuZGVjb2RlKGJ1ZmZlci5zbGljZSgwLCA0KSk7XG4gICAgICAgIHJldHVybiBmb3JtYXQgPT09IFwidHJ1ZVwiIHx8IGZvcm1hdCA9PT0gXCJPVFRPXCIgfHwgZm9ybWF0ID09PSBTdHJpbmcuZnJvbUNoYXJDb2RlKDAsIDEsIDAsIDApO1xuICAgIH1cbiAgICBzZXREZWZhdWx0TGFuZ3VhZ2UobGFuZyA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0TGFuZ3VhZ2UgPSBsYW5nO1xuICAgIH1cbiAgICBfZ2V0VGFibGUodGFibGUpIHtcbiAgICAgICAgaWYgKCEodGFibGUudGFnIGluIHRoaXMuX3RhYmxlcykpIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl90YWJsZXNbdGFibGUudGFnXSA9IHRoaXMuX2RlY29kZVRhYmxlKHRhYmxlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKCRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCRiZDVjNWQ4YjhkY2FmZDc4KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZGVjb2RpbmcgdGFibGUgJHt0YWJsZS50YWd9YCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLnN0YWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdGFibGVzW3RhYmxlLnRhZ107XG4gICAgfVxuICAgIF9nZXRUYWJsZVN0cmVhbSh0YWcpIHtcbiAgICAgICAgbGV0IHRhYmxlID0gdGhpcy5kaXJlY3RvcnkudGFibGVzW3RhZ107XG4gICAgICAgIGlmICh0YWJsZSkge1xuICAgICAgICAgICAgdGhpcy5zdHJlYW0ucG9zID0gdGFibGUub2Zmc2V0O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBfZGVjb2RlRGlyZWN0b3J5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3RvcnkgPSAoMCwgJDgxNmMwN2EwNGI2ZGJhODckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkuZGVjb2RlKHRoaXMuc3RyZWFtLCB7XG4gICAgICAgICAgICBfc3RhcnRPZmZzZXQ6IDBcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9kZWNvZGVUYWJsZSh0YWJsZSkge1xuICAgICAgICBsZXQgcG9zID0gdGhpcy5zdHJlYW0ucG9zO1xuICAgICAgICBsZXQgc3RyZWFtID0gdGhpcy5fZ2V0VGFibGVTdHJlYW0odGFibGUudGFnKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9ICgwLCAkYzMzOTU3MjJiZWE3NTFlMiRleHBvcnQkMmUyYmNkODczOWFlMDM5KVt0YWJsZS50YWddLmRlY29kZShzdHJlYW0sIHRoaXMsIHRhYmxlLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuc3RyZWFtLnBvcyA9IHBvcztcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAqIEdldHMgYSBzdHJpbmcgZnJvbSB0aGUgZm9udCdzIGBuYW1lYCB0YWJsZVxuICAgKiBgbGFuZ2AgaXMgYSBCQ1AtNDcgbGFuZ3VhZ2UgY29kZS5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi8gZ2V0TmFtZShrZXksIGxhbmcgPSB0aGlzLmRlZmF1bHRMYW5ndWFnZSB8fCAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkNDI5NDA4OThkZjgxOTk0MCkge1xuICAgICAgICBsZXQgcmVjb3JkID0gdGhpcy5uYW1lICYmIHRoaXMubmFtZS5yZWNvcmRzW2tleV07XG4gICAgICAgIGlmIChyZWNvcmQpIC8vIEF0dGVtcHQgdG8gcmV0cmlldmUgdGhlIGVudHJ5LCBkZXBlbmRpbmcgb24gd2hpY2ggdHJhbnNsYXRpb24gaXMgYXZhaWxhYmxlOlxuICAgICAgICByZXR1cm4gcmVjb3JkW2xhbmddIHx8IHJlY29yZFt0aGlzLmRlZmF1bHRMYW5ndWFnZV0gfHwgcmVjb3JkWyRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQ0Mjk0MDg5OGRmODE5OTQwXSB8fCByZWNvcmRbXCJlblwiXSB8fCByZWNvcmRbT2JqZWN0LmtleXMocmVjb3JkKVswXV0gLy8gU2VyaW91c2x5LCBBTlkgbGFuZ3VhZ2Ugd291bGQgYmUgZmluZVxuICAgICAgICAgfHwgbnVsbDtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgdW5pcXVlIFBvc3RTY3JpcHQgbmFtZSBmb3IgdGhpcyBmb250LCBlLmcuIFwiSGVsdmV0aWNhLUJvbGRcIlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi8gZ2V0IHBvc3RzY3JpcHROYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROYW1lKFwicG9zdHNjcmlwdE5hbWVcIik7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgZm9udCdzIGZ1bGwgbmFtZSwgZS5nLiBcIkhlbHZldGljYSBCb2xkXCJcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovIGdldCBmdWxsTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TmFtZShcImZ1bGxOYW1lXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIGZvbnQncyBmYW1pbHkgbmFtZSwgZS5nLiBcIkhlbHZldGljYVwiXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqLyBnZXQgZmFtaWx5TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TmFtZShcImZvbnRGYW1pbHlcIik7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgZm9udCdzIHN1Yi1mYW1pbHksIGUuZy4gXCJCb2xkXCIuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqLyBnZXQgc3ViZmFtaWx5TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TmFtZShcImZvbnRTdWJmYW1pbHlcIik7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgZm9udCdzIGNvcHlyaWdodCBpbmZvcm1hdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi8gZ2V0IGNvcHlyaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TmFtZShcImNvcHlyaWdodFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSBmb250J3MgdmVyc2lvbiBudW1iZXJcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovIGdldCB2ZXJzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROYW1lKFwidmVyc2lvblwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSBmb2504oCZcyBbYXNjZW5kZXJdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FzY2VuZGVyXyh0eXBvZ3JhcGh5KSlcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCBhc2NlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhoZWEuYXNjZW50O1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIGZvbnTigJlzIFtkZXNjZW5kZXJdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Rlc2NlbmRlcilcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCBkZXNjZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oaGVhLmRlc2NlbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgYW1vdW50IG9mIHNwYWNlIHRoYXQgc2hvdWxkIGJlIGluY2x1ZGVkIGJldHdlZW4gbGluZXNcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCBsaW5lR2FwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oaGVhLmxpbmVHYXA7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgb2Zmc2V0IGZyb20gdGhlIG5vcm1hbCB1bmRlcmxpbmUgcG9zaXRpb24gdGhhdCBzaG91bGQgYmUgdXNlZFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi8gZ2V0IHVuZGVybGluZVBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3N0LnVuZGVybGluZVBvc2l0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIHdlaWdodCBvZiB0aGUgdW5kZXJsaW5lIHRoYXQgc2hvdWxkIGJlIHVzZWRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCB1bmRlcmxpbmVUaGlja25lc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3QudW5kZXJsaW5lVGhpY2tuZXNzO1xuICAgIH1cbiAgICAvKipcbiAgICogSWYgdGhpcyBpcyBhbiBpdGFsaWMgZm9udCwgdGhlIGFuZ2xlIHRoZSBjdXJzb3Igc2hvdWxkIGJlIGRyYXduIGF0IHRvIG1hdGNoIHRoZSBmb250IGRlc2lnblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi8gZ2V0IGl0YWxpY0FuZ2xlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3N0Lml0YWxpY0FuZ2xlO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIGhlaWdodCBvZiBjYXBpdGFsIGxldHRlcnMgYWJvdmUgdGhlIGJhc2VsaW5lLlxuICAgKiBTZWUgW2hlcmVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhcF9oZWlnaHQpIGZvciBtb3JlIGRldGFpbHMuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqLyBnZXQgY2FwSGVpZ2h0KCkge1xuICAgICAgICBsZXQgb3MyID0gdGhpc1tcIk9TLzJcIl07XG4gICAgICAgIHJldHVybiBvczIgPyBvczIuY2FwSGVpZ2h0IDogdGhpcy5hc2NlbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgaGVpZ2h0IG9mIGxvd2VyIGNhc2UgbGV0dGVycyBpbiB0aGUgZm9udC5cbiAgICogU2VlIFtoZXJlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9YLWhlaWdodCkgZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCB4SGVpZ2h0KCkge1xuICAgICAgICBsZXQgb3MyID0gdGhpc1tcIk9TLzJcIl07XG4gICAgICAgIHJldHVybiBvczIgPyBvczIueEhlaWdodCA6IDA7XG4gICAgfVxuICAgIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGdseXBocyBpbiB0aGUgZm9udC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovIGdldCBudW1HbHlwaHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heHAubnVtR2x5cGhzO1xuICAgIH1cbiAgICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGZvbnTigJlzIGludGVybmFsIGNvb3JkaW5hdGUgZ3JpZFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi8gZ2V0IHVuaXRzUGVyRW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYWQudW5pdHNQZXJFbTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFRoZSBmb2504oCZcyBib3VuZGluZyBib3gsIGkuZS4gdGhlIGJveCB0aGF0IGVuY2xvc2VzIGFsbCBnbHlwaHMgaW4gdGhlIGZvbnQuXG4gICAqIEB0eXBlIHtCQm94fVxuICAgKi8gZ2V0IGJib3goKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKG5ldyAoMCwgJGYzNDYwMGFiOWQ3ZjcwZDgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkodGhpcy5oZWFkLnhNaW4sIHRoaXMuaGVhZC55TWluLCB0aGlzLmhlYWQueE1heCwgdGhpcy5oZWFkLnlNYXgpKTtcbiAgICB9XG4gICAgZ2V0IF9jbWFwUHJvY2Vzc29yKCkge1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkZjA4ZGQ0MWVmMTBiNjk0YyRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzLmNtYXApO1xuICAgIH1cbiAgICAvKipcbiAgICogQW4gYXJyYXkgb2YgYWxsIG9mIHRoZSB1bmljb2RlIGNvZGUgcG9pbnRzIHN1cHBvcnRlZCBieSB0aGUgZm9udC5cbiAgICogQHR5cGUge251bWJlcltdfVxuICAgKi8gZ2V0IGNoYXJhY3RlclNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NtYXBQcm9jZXNzb3IuZ2V0Q2hhcmFjdGVyU2V0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlcmUgaXMgZ2x5cGggaW4gdGhlIGZvbnQgZm9yIHRoZSBnaXZlbiB1bmljb2RlIGNvZGUgcG9pbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlUG9pbnRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovIGhhc0dseXBoRm9yQ29kZVBvaW50KGNvZGVQb2ludCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9jbWFwUHJvY2Vzc29yLmxvb2t1cChjb2RlUG9pbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICogTWFwcyBhIHNpbmdsZSB1bmljb2RlIGNvZGUgcG9pbnQgdG8gYSBHbHlwaCBvYmplY3QuXG4gICAqIERvZXMgbm90IHBlcmZvcm0gYW55IGFkdmFuY2VkIHN1YnN0aXR1dGlvbnMgKHRoZXJlIGlzIG5vIGNvbnRleHQgdG8gZG8gc28pLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY29kZVBvaW50XG4gICAqIEByZXR1cm4ge0dseXBofVxuICAgKi8gZ2x5cGhGb3JDb2RlUG9pbnQoY29kZVBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEdseXBoKHRoaXMuX2NtYXBQcm9jZXNzb3IubG9va3VwKGNvZGVQb2ludCksIFtcbiAgICAgICAgICAgIGNvZGVQb2ludFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgR2x5cGggb2JqZWN0cyBmb3IgdGhlIGdpdmVuIHN0cmluZy5cbiAgICogVGhpcyBpcyBvbmx5IGEgb25lLXRvLW9uZSBtYXBwaW5nIGZyb20gY2hhcmFjdGVycyB0byBnbHlwaHMuXG4gICAqIEZvciBtb3N0IHVzZXMsIHlvdSBzaG91bGQgdXNlIGZvbnQubGF5b3V0IChkZXNjcmliZWQgYmVsb3cpLCB3aGljaFxuICAgKiBwcm92aWRlcyBhIG11Y2ggbW9yZSBhZHZhbmNlZCBtYXBwaW5nIHN1cHBvcnRpbmcgQUFUIGFuZCBPcGVuVHlwZSBzaGFwaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gICAqIEByZXR1cm4ge0dseXBoW119XG4gICAqLyBnbHlwaHNGb3JTdHJpbmcoc3RyaW5nKSB7XG4gICAgICAgIGxldCBnbHlwaHMgPSBbXTtcbiAgICAgICAgbGV0IGxlbiA9IHN0cmluZy5sZW5ndGg7XG4gICAgICAgIGxldCBpZHggPSAwO1xuICAgICAgICBsZXQgbGFzdCA9IC0xO1xuICAgICAgICBsZXQgc3RhdGUgPSAtMTtcbiAgICAgICAgd2hpbGUoaWR4IDw9IGxlbil7XG4gICAgICAgICAgICBsZXQgY29kZSA9IDA7XG4gICAgICAgICAgICBsZXQgbmV4dFN0YXRlID0gMDtcbiAgICAgICAgICAgIGlmIChpZHggPCBsZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBEZWNvZGUgdGhlIG5leHQgY29kZXBvaW50IGZyb20gVVRGIDE2XG4gICAgICAgICAgICAgICAgY29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGlkeCsrKTtcbiAgICAgICAgICAgICAgICBpZiAoMHhkODAwIDw9IGNvZGUgJiYgY29kZSA8PSAweGRiZmYgJiYgaWR4IDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gc3RyaW5nLmNoYXJDb2RlQXQoaWR4KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDB4ZGMwMCA8PSBuZXh0ICYmIG5leHQgPD0gMHhkZmZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSAoKGNvZGUgJiAweDNmZikgPDwgMTApICsgKG5leHQgJiAweDNmZikgKyAweDEwMDAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIENvbXB1dGUgdGhlIG5leHQgc3RhdGU6IDEgaWYgdGhlIG5leHQgY29kZXBvaW50IGlzIGEgdmFyaWF0aW9uIHNlbGVjdG9yLCAwIG90aGVyd2lzZS5cbiAgICAgICAgICAgICAgICBuZXh0U3RhdGUgPSAweGZlMDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4ZmUwZiB8fCAweGUwMTAwIDw9IGNvZGUgJiYgY29kZSA8PSAweGUwMWVmID8gMSA6IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWR4Kys7XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IDAgJiYgbmV4dFN0YXRlID09PSAxKSAvLyBWYXJpYXRpb24gc2VsZWN0b3IgZm9sbG93aW5nIG5vcm1hbCBjb2RlcG9pbnQuXG4gICAgICAgICAgICBnbHlwaHMucHVzaCh0aGlzLmdldEdseXBoKHRoaXMuX2NtYXBQcm9jZXNzb3IubG9va3VwKGxhc3QsIGNvZGUpLCBbXG4gICAgICAgICAgICAgICAgbGFzdCxcbiAgICAgICAgICAgICAgICBjb2RlXG4gICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gMCAmJiBuZXh0U3RhdGUgPT09IDApIC8vIE5vcm1hbCBjb2RlcG9pbnQgZm9sbG93aW5nIG5vcm1hbCBjb2RlcG9pbnQuXG4gICAgICAgICAgICBnbHlwaHMucHVzaCh0aGlzLmdseXBoRm9yQ29kZVBvaW50KGxhc3QpKTtcbiAgICAgICAgICAgIGxhc3QgPSBjb2RlO1xuICAgICAgICAgICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdseXBocztcbiAgICB9XG4gICAgZ2V0IF9sYXlvdXRFbmdpbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgKDAsICQ0YzBhN2ZhNWRmN2E5YWIxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICogUmV0dXJucyBhIEdseXBoUnVuIG9iamVjdCwgd2hpY2ggaW5jbHVkZXMgYW4gYXJyYXkgb2YgR2x5cGhzIGFuZCBHbHlwaFBvc2l0aW9ucyBmb3IgdGhlIGdpdmVuIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbdXNlckZlYXR1cmVzXVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NjcmlwdF1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsYW5ndWFnZV1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtkaXJlY3Rpb25dXG4gICAqIEByZXR1cm4ge0dseXBoUnVufVxuICAgKi8gbGF5b3V0KHN0cmluZywgdXNlckZlYXR1cmVzLCBzY3JpcHQsIGxhbmd1YWdlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xheW91dEVuZ2luZS5sYXlvdXQoc3RyaW5nLCB1c2VyRmVhdHVyZXMsIHNjcmlwdCwgbGFuZ3VhZ2UsIGRpcmVjdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHN0cmluZ3MgdGhhdCBtYXAgdG8gdGhlIGdpdmVuIGdseXBoIGlkLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZ2lkIC0gZ2x5cGggaWRcbiAgICovIHN0cmluZ3NGb3JHbHlwaChnaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xheW91dEVuZ2luZS5zdHJpbmdzRm9yR2x5cGgoZ2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGFsbCBbT3BlblR5cGUgZmVhdHVyZSB0YWdzXShodHRwczovL3d3dy5taWNyb3NvZnQuY29tL3R5cG9ncmFwaHkvb3RzcGVjL2ZlYXR1cmV0YWdzLmh0bSlcbiAgICogKG9yIG1hcHBlZCBBQVQgdGFncykgc3VwcG9ydGVkIGJ5IHRoZSBmb250LlxuICAgKiBUaGUgZmVhdHVyZXMgcGFyYW1ldGVyIGlzIGFuIGFycmF5IG9mIE9wZW5UeXBlIGZlYXR1cmUgdGFncyB0byBiZSBhcHBsaWVkIGluIGFkZGl0aW9uIHRvIHRoZSBkZWZhdWx0IHNldC5cbiAgICogSWYgdGhpcyBpcyBhbiBBQVQgZm9udCwgdGhlIE9wZW5UeXBlIGZlYXR1cmUgdGFncyBhcmUgbWFwcGVkIHRvIEFBVCBmZWF0dXJlcy5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ1tdfVxuICAgKi8gZ2V0IGF2YWlsYWJsZUZlYXR1cmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGF5b3V0RW5naW5lLmdldEF2YWlsYWJsZUZlYXR1cmVzKCk7XG4gICAgfVxuICAgIGdldEF2YWlsYWJsZUZlYXR1cmVzKHNjcmlwdCwgbGFuZ3VhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xheW91dEVuZ2luZS5nZXRBdmFpbGFibGVGZWF0dXJlcyhzY3JpcHQsIGxhbmd1YWdlKTtcbiAgICB9XG4gICAgX2dldEJhc2VHbHlwaChnbHlwaCwgY2hhcmFjdGVycyA9IFtdKSB7XG4gICAgICAgIGlmICghdGhpcy5fZ2x5cGhzW2dseXBoXSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0b3J5LnRhYmxlcy5nbHlmKSB0aGlzLl9nbHlwaHNbZ2x5cGhdID0gbmV3ICgwLCAkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkMmUyYmNkODczOWFlMDM5KShnbHlwaCwgY2hhcmFjdGVycywgdGhpcyk7XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmRpcmVjdG9yeS50YWJsZXNbXCJDRkYgXCJdIHx8IHRoaXMuZGlyZWN0b3J5LnRhYmxlcy5DRkYyKSB0aGlzLl9nbHlwaHNbZ2x5cGhdID0gbmV3ICgwLCAkNjJjYzUxMDljNjEwMTg5MyRleHBvcnQkMmUyYmNkODczOWFlMDM5KShnbHlwaCwgY2hhcmFjdGVycywgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dseXBoc1tnbHlwaF0gfHwgbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAqIFJldHVybnMgYSBnbHlwaCBvYmplY3QgZm9yIHRoZSBnaXZlbiBnbHlwaCBpZC5cbiAgICogWW91IGNhbiBwYXNzIHRoZSBhcnJheSBvZiBjb2RlIHBvaW50cyB0aGlzIGdseXBoIHJlcHJlc2VudHMgZm9yXG4gICAqIHlvdXIgdXNlIGxhdGVyLCBhbmQgaXQgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGdseXBoIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGdseXBoXG4gICAqIEBwYXJhbSB7bnVtYmVyW119IGNoYXJhY3RlcnNcbiAgICogQHJldHVybiB7R2x5cGh9XG4gICAqLyBnZXRHbHlwaChnbHlwaCwgY2hhcmFjdGVycyA9IFtdKSB7XG4gICAgICAgIGlmICghdGhpcy5fZ2x5cGhzW2dseXBoXSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0b3J5LnRhYmxlcy5zYml4KSB0aGlzLl9nbHlwaHNbZ2x5cGhdID0gbmV3ICgwLCAkMjVkOGYwNDljMjIyMDg0YyRleHBvcnQkMmUyYmNkODczOWFlMDM5KShnbHlwaCwgY2hhcmFjdGVycywgdGhpcyk7XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmRpcmVjdG9yeS50YWJsZXMuQ09MUiAmJiB0aGlzLmRpcmVjdG9yeS50YWJsZXMuQ1BBTCkgdGhpcy5fZ2x5cGhzW2dseXBoXSA9IG5ldyAoMCwgJDBkNDExZjAxNjU4NTk2ODEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoZ2x5cGgsIGNoYXJhY3RlcnMsIHRoaXMpO1xuICAgICAgICAgICAgZWxzZSB0aGlzLl9nZXRCYXNlR2x5cGgoZ2x5cGgsIGNoYXJhY3RlcnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9nbHlwaHNbZ2x5cGhdIHx8IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgKiBSZXR1cm5zIGEgU3Vic2V0IGZvciB0aGlzIGZvbnQuXG4gICAqIEByZXR1cm4ge1N1YnNldH1cbiAgICovIGNyZWF0ZVN1YnNldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0b3J5LnRhYmxlc1tcIkNGRiBcIl0pIHJldHVybiBuZXcgKDAsICQwMDFkNzM5NDI4YTcxZDVhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHRoaXMpO1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkNGFiYmI2YTVkYmRjNDQxYSRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IGRlc2NyaWJpbmcgdGhlIGF2YWlsYWJsZSB2YXJpYXRpb24gYXhlc1xuICAgKiB0aGF0IHRoaXMgZm9udCBzdXBwb3J0cy4gS2V5cyBhcmUgc2V0dGluZyB0YWdzLCBhbmQgdmFsdWVzXG4gICAqIGNvbnRhaW4gdGhlIGF4aXMgbmFtZSwgcmFuZ2UsIGFuZCBkZWZhdWx0IHZhbHVlLlxuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKi8gZ2V0IHZhcmlhdGlvbkF4ZXMoKSB7XG4gICAgICAgIGxldCByZXMgPSB7fTtcbiAgICAgICAgaWYgKCF0aGlzLmZ2YXIpIHJldHVybiByZXM7XG4gICAgICAgIGZvciAobGV0IGF4aXMgb2YgdGhpcy5mdmFyLmF4aXMpcmVzW2F4aXMuYXhpc1RhZy50cmltKCldID0ge1xuICAgICAgICAgICAgbmFtZTogYXhpcy5uYW1lLmVuLFxuICAgICAgICAgICAgbWluOiBheGlzLm1pblZhbHVlLFxuICAgICAgICAgICAgZGVmYXVsdDogYXhpcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICBtYXg6IGF4aXMubWF4VmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5hbWVkIHZhcmlhdGlvbiBpbnN0YW5jZXNcbiAgICogdGhhdCB0aGUgZm9udCBkZXNpZ25lciBoYXMgc3BlY2lmaWVkLiBLZXlzIGFyZSB2YXJpYXRpb24gbmFtZXNcbiAgICogYW5kIHZhbHVlcyBhcmUgdGhlIHZhcmlhdGlvbiBzZXR0aW5ncyBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovIGdldCBuYW1lZFZhcmlhdGlvbnMoKSB7XG4gICAgICAgIGxldCByZXMgPSB7fTtcbiAgICAgICAgaWYgKCF0aGlzLmZ2YXIpIHJldHVybiByZXM7XG4gICAgICAgIGZvciAobGV0IGluc3RhbmNlIG9mIHRoaXMuZnZhci5pbnN0YW5jZSl7XG4gICAgICAgICAgICBsZXQgc2V0dGluZ3MgPSB7fTtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmZ2YXIuYXhpcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgbGV0IGF4aXMgPSB0aGlzLmZ2YXIuYXhpc1tpXTtcbiAgICAgICAgICAgICAgICBzZXR0aW5nc1theGlzLmF4aXNUYWcudHJpbSgpXSA9IGluc3RhbmNlLmNvb3JkW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzW2luc3RhbmNlLm5hbWUuZW5dID0gc2V0dGluZ3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgZm9udCB3aXRoIHRoZSBnaXZlbiB2YXJpYXRpb24gc2V0dGluZ3MgYXBwbGllZC5cbiAgICogU2V0dGluZ3MgY2FuIGVpdGhlciBiZSBhbiBpbnN0YW5jZSBuYW1lLCBvciBhbiBvYmplY3QgY29udGFpbmluZ1xuICAgKiB2YXJpYXRpb24gdGFncyBhcyBzcGVjaWZpZWQgYnkgdGhlIGB2YXJpYXRpb25BeGVzYCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzXG4gICAqIEByZXR1cm4ge1RURkZvbnR9XG4gICAqLyBnZXRWYXJpYXRpb24oc2V0dGluZ3MpIHtcbiAgICAgICAgaWYgKCEodGhpcy5kaXJlY3RvcnkudGFibGVzLmZ2YXIgJiYgKHRoaXMuZGlyZWN0b3J5LnRhYmxlcy5ndmFyICYmIHRoaXMuZGlyZWN0b3J5LnRhYmxlcy5nbHlmIHx8IHRoaXMuZGlyZWN0b3J5LnRhYmxlcy5DRkYyKSkpIHRocm93IG5ldyBFcnJvcihcIlZhcmlhdGlvbnMgcmVxdWlyZSBhIGZvbnQgd2l0aCB0aGUgZnZhciwgZ3ZhciBhbmQgZ2x5Ziwgb3IgQ0ZGMiB0YWJsZXMuXCIpO1xuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzID09PSBcInN0cmluZ1wiKSBzZXR0aW5ncyA9IHRoaXMubmFtZWRWYXJpYXRpb25zW3NldHRpbmdzXTtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncyAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVmFyaWF0aW9uIHNldHRpbmdzIG11c3QgYmUgZWl0aGVyIGEgdmFyaWF0aW9uIG5hbWUgb3Igc2V0dGluZ3Mgb2JqZWN0LlwiKTtcbiAgICAgICAgLy8gbm9ybWFsaXplIHRoZSBjb29yZGluYXRlc1xuICAgICAgICBsZXQgY29vcmRzID0gdGhpcy5mdmFyLmF4aXMubWFwKChheGlzLCBpKT0+e1xuICAgICAgICAgICAgbGV0IGF4aXNUYWcgPSBheGlzLmF4aXNUYWcudHJpbSgpO1xuICAgICAgICAgICAgaWYgKGF4aXNUYWcgaW4gc2V0dGluZ3MpIHJldHVybiBNYXRoLm1heChheGlzLm1pblZhbHVlLCBNYXRoLm1pbihheGlzLm1heFZhbHVlLCBzZXR0aW5nc1theGlzVGFnXSkpO1xuICAgICAgICAgICAgZWxzZSByZXR1cm4gYXhpcy5kZWZhdWx0VmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgc3RyZWFtID0gbmV3ICQ1MlpJZiREZWNvZGVTdHJlYW0odGhpcy5zdHJlYW0uYnVmZmVyKTtcbiAgICAgICAgc3RyZWFtLnBvcyA9IHRoaXMuX2RpcmVjdG9yeVBvcztcbiAgICAgICAgbGV0IGZvbnQgPSBuZXcgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOShzdHJlYW0sIGNvb3Jkcyk7XG4gICAgICAgIGZvbnQuX3RhYmxlcyA9IHRoaXMuX3RhYmxlcztcbiAgICAgICAgcmV0dXJuIGZvbnQ7XG4gICAgfVxuICAgIGdldCBfdmFyaWF0aW9uUHJvY2Vzc29yKCkge1xuICAgICAgICBpZiAoIXRoaXMuZnZhcikgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCB2YXJpYXRpb25Db29yZHMgPSB0aGlzLnZhcmlhdGlvbkNvb3JkcztcbiAgICAgICAgLy8gSWdub3JlIGlmIG5vIHZhcmlhdGlvbiBjb29yZHMgYW5kIG5vdCBDRkYyXG4gICAgICAgIGlmICghdmFyaWF0aW9uQ29vcmRzICYmICF0aGlzLkNGRjIpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIXZhcmlhdGlvbkNvb3JkcykgdmFyaWF0aW9uQ29vcmRzID0gdGhpcy5mdmFyLmF4aXMubWFwKChheGlzKT0+YXhpcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkMGJiODQwY2FjMDRlOTExYiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSh0aGlzLCB2YXJpYXRpb25Db29yZHMpO1xuICAgIH1cbiAgICAvLyBTdGFuZGFyZGl6ZWQgZm9ybWF0IHBsdWdpbiBBUElcbiAgICBnZXRGb250KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFyaWF0aW9uKG5hbWUpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzdHJlYW0sIHZhcmlhdGlvbkNvb3JkcyA9IG51bGwpe1xuICAgICAgICAoMCwgJDUyWklmJHN3Y2hlbHBlcnNzcmNfZGVmaW5lX3Byb3BlcnR5bWpzKSh0aGlzLCBcInR5cGVcIiwgXCJUVEZcIik7XG4gICAgICAgIHRoaXMuZGVmYXVsdExhbmd1YWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgIHRoaXMudmFyaWF0aW9uQ29vcmRzID0gdmFyaWF0aW9uQ29vcmRzO1xuICAgICAgICB0aGlzLl9kaXJlY3RvcnlQb3MgPSB0aGlzLnN0cmVhbS5wb3M7XG4gICAgICAgIHRoaXMuX3RhYmxlcyA9IHt9O1xuICAgICAgICB0aGlzLl9nbHlwaHMgPSB7fTtcbiAgICAgICAgdGhpcy5fZGVjb2RlRGlyZWN0b3J5KCk7XG4gICAgICAgIC8vIGRlZmluZSBwcm9wZXJ0aWVzIGZvciBlYWNoIHRhYmxlIHRvIGxhemlseSBwYXJzZVxuICAgICAgICBmb3IobGV0IHRhZyBpbiB0aGlzLmRpcmVjdG9yeS50YWJsZXMpe1xuICAgICAgICAgICAgbGV0IHRhYmxlID0gdGhpcy5kaXJlY3RvcnkudGFibGVzW3RhZ107XG4gICAgICAgICAgICBpZiAoKDAsICRjMzM5NTcyMmJlYTc1MWUyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpW3RhZ10gJiYgdGFibGUubGVuZ3RoID4gMCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHRhZywge1xuICAgICAgICAgICAgICAgIGdldDogdGhpcy5fZ2V0VGFibGUuYmluZCh0aGlzLCB0YWJsZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX3RzX2RlY29yYXRlbWpzKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiYmJveFwiLCBudWxsKTtcbigwLCAkNTJaSWYkc3djaGVscGVyc3NyY190c19kZWNvcmF0ZW1qcykoW1xuICAgICgwLCAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZClcbl0sICQ0YzE3MDlkZWU1MjhlYTc2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlLCBcIl9jbWFwUHJvY2Vzc29yXCIsIG51bGwpO1xuKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX3RzX2RlY29yYXRlbWpzKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiY2hhcmFjdGVyU2V0XCIsIG51bGwpO1xuKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX3RzX2RlY29yYXRlbWpzKShbXG4gICAgKDAsICRlNzE1NjVmMmNlMDljYjZiJGV4cG9ydCQ2OWEzMjA5ZjFhMDZjMDRkKVxuXSwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5wcm90b3R5cGUsIFwiX2xheW91dEVuZ2luZVwiLCBudWxsKTtcbigwLCAkNTJaSWYkc3djaGVscGVyc3NyY190c19kZWNvcmF0ZW1qcykoW1xuICAgICgwLCAkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZClcbl0sICQ0YzE3MDlkZWU1MjhlYTc2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkucHJvdG90eXBlLCBcInZhcmlhdGlvbkF4ZXNcIiwgbnVsbCk7XG4oMCwgJDUyWklmJHN3Y2hlbHBlcnNzcmNfdHNfZGVjb3JhdGVtanMpKFtcbiAgICAoMCwgJGU3MTU2NWYyY2UwOWNiNmIkZXhwb3J0JDY5YTMyMDlmMWEwNmMwNGQpXG5dLCAkNGMxNzA5ZGVlNTI4ZWE3NiRleHBvcnQkMmUyYmNkODczOWFlMDM5LnByb3RvdHlwZSwgXCJuYW1lZFZhcmlhdGlvbnNcIiwgbnVsbCk7XG4oMCwgJDUyWklmJHN3Y2hlbHBlcnNzcmNfdHNfZGVjb3JhdGVtanMpKFtcbiAgICAoMCwgJGU3MTU2NWYyY2UwOWNiNmIkZXhwb3J0JDY5YTMyMDlmMWEwNmMwNGQpXG5dLCAkNGMxNzA5ZGVlNTI4ZWE3NiRleHBvcnQkMmUyYmNkODczOWFlMDM5LnByb3RvdHlwZSwgXCJfdmFyaWF0aW9uUHJvY2Vzc29yXCIsIG51bGwpO1xuXG5cblxuXG5cblxubGV0ICRjMTcyNjM1NWVjYzViODg5JHZhciRXT0ZGRGlyZWN0b3J5RW50cnkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdGFnOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICBvZmZzZXQ6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCBcInZvaWRcIiwge1xuICAgICAgICB0eXBlOiBcImdsb2JhbFwiXG4gICAgfSksXG4gICAgY29tcExlbmd0aDogJDUyWklmJHVpbnQzMixcbiAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgb3JpZ0NoZWNrc3VtOiAkNTJaSWYkdWludDMyXG59KTtcbmxldCAkYzE3MjYzNTVlY2M1Yjg4OSR2YXIkV09GRkRpcmVjdG9yeSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICB0YWc6IG5ldyAkNTJaSWYkU3RyaW5nKDQpLFxuICAgIGZsYXZvcjogJDUyWklmJHVpbnQzMixcbiAgICBsZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgbnVtVGFibGVzOiAkNTJaSWYkdWludDE2LFxuICAgIHJlc2VydmVkOiBuZXcgJDUyWklmJFJlc2VydmVkKCQ1MlpJZiR1aW50MTYpLFxuICAgIHRvdGFsU2ZudFNpemU6ICQ1MlpJZiR1aW50MzIsXG4gICAgbWFqb3JWZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIG1pbm9yVmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBtZXRhT2Zmc2V0OiAkNTJaSWYkdWludDMyLFxuICAgIG1ldGFMZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgbWV0YU9yaWdMZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgcHJpdk9mZnNldDogJDUyWklmJHVpbnQzMixcbiAgICBwcml2TGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgIHRhYmxlczogbmV3ICQ1MlpJZiRBcnJheSgkYzE3MjYzNTVlY2M1Yjg4OSR2YXIkV09GRkRpcmVjdG9yeUVudHJ5LCBcIm51bVRhYmxlc1wiKVxufSk7XG4kYzE3MjYzNTVlY2M1Yjg4OSR2YXIkV09GRkRpcmVjdG9yeS5wcm9jZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHRhYmxlczEgPSB7fTtcbiAgICBmb3IgKGxldCB0YWJsZSBvZiB0aGlzLnRhYmxlcyl0YWJsZXMxW3RhYmxlLnRhZ10gPSB0YWJsZTtcbiAgICB0aGlzLnRhYmxlcyA9IHRhYmxlczE7XG59O1xudmFyICRjMTcyNjM1NWVjYzViODg5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgPSAkYzE3MjYzNTVlY2M1Yjg4OSR2YXIkV09GRkRpcmVjdG9yeTtcblxuXG5cblxuXG5cbmNsYXNzICQ3NjA3ODUyMTRiOWZjNTJjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgZXh0ZW5kcyAoMCwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkge1xuICAgIHN0YXRpYyBwcm9iZShidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuICgwLCAkMTI3Mjc3MzBkZGZjOGJmZSRleHBvcnQkM2QyOGMxOTk2Y2VkMWYxNCkuZGVjb2RlKGJ1ZmZlci5zbGljZSgwLCA0KSkgPT09IFwid09GRlwiO1xuICAgIH1cbiAgICBfZGVjb2RlRGlyZWN0b3J5KCkge1xuICAgICAgICB0aGlzLmRpcmVjdG9yeSA9ICgwLCAkYzE3MjYzNTVlY2M1Yjg4OSRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5kZWNvZGUodGhpcy5zdHJlYW0sIHtcbiAgICAgICAgICAgIF9zdGFydE9mZnNldDogMFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2dldFRhYmxlU3RyZWFtKHRhZykge1xuICAgICAgICBsZXQgdGFibGUgPSB0aGlzLmRpcmVjdG9yeS50YWJsZXNbdGFnXTtcbiAgICAgICAgaWYgKHRhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnN0cmVhbS5wb3MgPSB0YWJsZS5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAodGFibGUuY29tcExlbmd0aCA8IHRhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtLnBvcyArPSAyOyAvLyBza2lwIGRlZmxhdGUgaGVhZGVyXG4gICAgICAgICAgICAgICAgbGV0IG91dEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHRhYmxlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgbGV0IGJ1ZiA9ICgwLCAkNTJaSWYkdGlueWluZmxhdGUpKHRoaXMuc3RyZWFtLnJlYWRCdWZmZXIodGFibGUuY29tcExlbmd0aCAtIDIpLCBvdXRCdWZmZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgJDUyWklmJERlY29kZVN0cmVhbShidWYpO1xuICAgICAgICAgICAgfSBlbHNlIHJldHVybiB0aGlzLnN0cmVhbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICAoMCwgJDUyWklmJHN3Y2hlbHBlcnNzcmNfZGVmaW5lX3Byb3BlcnR5bWpzKSh0aGlzLCBcInR5cGVcIiwgXCJXT0ZGXCIpO1xuICAgIH1cbn1cblxuXG5cblxuXG5cblxuXG5cbmNsYXNzICQ4MDQ2MTkwYzlmMWFkMTllJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgZXh0ZW5kcyAoMCwgJDY5YWFjMTYwMjk5Njg2OTIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkge1xuICAgIF9kZWNvZGUoKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgdG8gZGVjb2RlIGluIGFkdmFuY2UgKGluIFdPRkYyRm9udCksIHNvIGp1c3QgcmV0dXJuIHRoZSBwcmUtZGVjb2RlZCBkYXRhLlxuICAgICAgICByZXR1cm4gdGhpcy5fZm9udC5fdHJhbnNmb3JtZWRHbHlwaHNbdGhpcy5pZF07XG4gICAgfVxuICAgIF9nZXRDQm94KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLmJib3g7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX2RlZmluZV9wcm9wZXJ0eW1qcykodGhpcywgXCJ0eXBlXCIsIFwiV09GRjJcIik7XG4gICAgfVxufVxuXG5cblxuY29uc3QgJGMyOGVjN2JiYjNiOGRlM2EkdmFyJEJhc2UxMjggPSB7XG4gICAgZGVjb2RlIChzdHJlYW0pIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgICAgIGxldCBpdGVyYWJsZSA9IFtcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICAgIDMsXG4gICAgICAgICAgICA0XG4gICAgICAgIF07XG4gICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCBpdGVyYWJsZS5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICBsZXQgaSA9IGl0ZXJhYmxlW2pdO1xuICAgICAgICAgICAgbGV0IGNvZGUgPSBzdHJlYW0ucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICAvLyBJZiBhbnkgb2YgdGhlIHRvcCBzZXZlbiBiaXRzIGFyZSBzZXQgdGhlbiB3ZSdyZSBhYm91dCB0byBvdmVyZmxvdy5cbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiAweGUwMDAwMDAwKSB0aHJvdyBuZXcgRXJyb3IoXCJPdmVyZmxvd1wiKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCA8PCA3IHwgY29kZSAmIDB4N2Y7XG4gICAgICAgICAgICBpZiAoKGNvZGUgJiAweDgwKSA9PT0gMCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgYmFzZSAxMjggbnVtYmVyXCIpO1xuICAgIH1cbn07XG5sZXQgJGMyOGVjN2JiYjNiOGRlM2EkdmFyJGtub3duVGFncyA9IFtcbiAgICBcImNtYXBcIixcbiAgICBcImhlYWRcIixcbiAgICBcImhoZWFcIixcbiAgICBcImhtdHhcIixcbiAgICBcIm1heHBcIixcbiAgICBcIm5hbWVcIixcbiAgICBcIk9TLzJcIixcbiAgICBcInBvc3RcIixcbiAgICBcImN2dCBcIixcbiAgICBcImZwZ21cIixcbiAgICBcImdseWZcIixcbiAgICBcImxvY2FcIixcbiAgICBcInByZXBcIixcbiAgICBcIkNGRiBcIixcbiAgICBcIlZPUkdcIixcbiAgICBcIkVCRFRcIixcbiAgICBcIkVCTENcIixcbiAgICBcImdhc3BcIixcbiAgICBcImhkbXhcIixcbiAgICBcImtlcm5cIixcbiAgICBcIkxUU0hcIixcbiAgICBcIlBDTFRcIixcbiAgICBcIlZETVhcIixcbiAgICBcInZoZWFcIixcbiAgICBcInZtdHhcIixcbiAgICBcIkJBU0VcIixcbiAgICBcIkdERUZcIixcbiAgICBcIkdQT1NcIixcbiAgICBcIkdTVUJcIixcbiAgICBcIkVCU0NcIixcbiAgICBcIkpTVEZcIixcbiAgICBcIk1BVEhcIixcbiAgICBcIkNCRFRcIixcbiAgICBcIkNCTENcIixcbiAgICBcIkNPTFJcIixcbiAgICBcIkNQQUxcIixcbiAgICBcIlNWRyBcIixcbiAgICBcInNiaXhcIixcbiAgICBcImFjbnRcIixcbiAgICBcImF2YXJcIixcbiAgICBcImJkYXRcIixcbiAgICBcImJsb2NcIixcbiAgICBcImJzbG5cIixcbiAgICBcImN2YXJcIixcbiAgICBcImZkc2NcIixcbiAgICBcImZlYXRcIixcbiAgICBcImZtdHhcIixcbiAgICBcImZ2YXJcIixcbiAgICBcImd2YXJcIixcbiAgICBcImhzdHlcIixcbiAgICBcImp1c3RcIixcbiAgICBcImxjYXJcIixcbiAgICBcIm1vcnRcIixcbiAgICBcIm1vcnhcIixcbiAgICBcIm9wYmRcIixcbiAgICBcInByb3BcIixcbiAgICBcInRyYWtcIixcbiAgICBcIlphcGZcIixcbiAgICBcIlNpbGZcIixcbiAgICBcIkdsYXRcIixcbiAgICBcIkdsb2NcIixcbiAgICBcIkZlYXRcIixcbiAgICBcIlNpbGxcIlxuXTtcbmxldCAkYzI4ZWM3YmJiM2I4ZGUzYSR2YXIkV09GRjJEaXJlY3RvcnlFbnRyeSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBmbGFnczogJDUyWklmJHVpbnQ4LFxuICAgIGN1c3RvbVRhZzogbmV3ICQ1MlpJZiRPcHRpb25hbChuZXcgJDUyWklmJFN0cmluZyg0KSwgKHQpPT4odC5mbGFncyAmIDB4M2YpID09PSAweDNmKSxcbiAgICB0YWc6ICh0KT0+dC5jdXN0b21UYWcgfHwgJGMyOGVjN2JiYjNiOGRlM2EkdmFyJGtub3duVGFnc1t0LmZsYWdzICYgMHgzZl0sXG4gICAgbGVuZ3RoOiAkYzI4ZWM3YmJiM2I4ZGUzYSR2YXIkQmFzZTEyOCxcbiAgICB0cmFuc2Zvcm1WZXJzaW9uOiAodCk9PnQuZmxhZ3MgPj4+IDYgJiAweDAzLFxuICAgIHRyYW5zZm9ybWVkOiAodCk9PnQudGFnID09PSBcImdseWZcIiB8fCB0LnRhZyA9PT0gXCJsb2NhXCIgPyB0LnRyYW5zZm9ybVZlcnNpb24gPT09IDAgOiB0LnRyYW5zZm9ybVZlcnNpb24gIT09IDAsXG4gICAgdHJhbnNmb3JtTGVuZ3RoOiBuZXcgJDUyWklmJE9wdGlvbmFsKCRjMjhlYzdiYmIzYjhkZTNhJHZhciRCYXNlMTI4LCAodCk9PnQudHJhbnNmb3JtZWQpXG59KTtcbmxldCAkYzI4ZWM3YmJiM2I4ZGUzYSR2YXIkV09GRjJEaXJlY3RvcnkgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdGFnOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICBmbGF2b3I6ICQ1MlpJZiR1aW50MzIsXG4gICAgbGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgIG51bVRhYmxlczogJDUyWklmJHVpbnQxNixcbiAgICByZXNlcnZlZDogbmV3ICQ1MlpJZiRSZXNlcnZlZCgkNTJaSWYkdWludDE2KSxcbiAgICB0b3RhbFNmbnRTaXplOiAkNTJaSWYkdWludDMyLFxuICAgIHRvdGFsQ29tcHJlc3NlZFNpemU6ICQ1MlpJZiR1aW50MzIsXG4gICAgbWFqb3JWZXJzaW9uOiAkNTJaSWYkdWludDE2LFxuICAgIG1pbm9yVmVyc2lvbjogJDUyWklmJHVpbnQxNixcbiAgICBtZXRhT2Zmc2V0OiAkNTJaSWYkdWludDMyLFxuICAgIG1ldGFMZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgbWV0YU9yaWdMZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgcHJpdk9mZnNldDogJDUyWklmJHVpbnQzMixcbiAgICBwcml2TGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgIHRhYmxlczogbmV3ICQ1MlpJZiRBcnJheSgkYzI4ZWM3YmJiM2I4ZGUzYSR2YXIkV09GRjJEaXJlY3RvcnlFbnRyeSwgXCJudW1UYWJsZXNcIilcbn0pO1xuJGMyOGVjN2JiYjNiOGRlM2EkdmFyJFdPRkYyRGlyZWN0b3J5LnByb2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgdGFibGVzID0ge307XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMudGFibGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgbGV0IHRhYmxlID0gdGhpcy50YWJsZXNbaV07XG4gICAgICAgIHRhYmxlc1t0YWJsZS50YWddID0gdGFibGU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRhYmxlcyA9IHRhYmxlcztcbn07XG52YXIgJGMyOGVjN2JiYjNiOGRlM2EkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9ICRjMjhlYzdiYmIzYjhkZTNhJHZhciRXT0ZGMkRpcmVjdG9yeTtcblxuXG5cbmNsYXNzICQyMWVlMjE4Zjg0YWM3ZjMyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkgZXh0ZW5kcyAoMCwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkge1xuICAgIHN0YXRpYyBwcm9iZShidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuICgwLCAkMTI3Mjc3MzBkZGZjOGJmZSRleHBvcnQkM2QyOGMxOTk2Y2VkMWYxNCkuZGVjb2RlKGJ1ZmZlci5zbGljZSgwLCA0KSkgPT09IFwid09GMlwiO1xuICAgIH1cbiAgICBfZGVjb2RlRGlyZWN0b3J5KCkge1xuICAgICAgICB0aGlzLmRpcmVjdG9yeSA9ICgwLCAkYzI4ZWM3YmJiM2I4ZGUzYSRleHBvcnQkMmUyYmNkODczOWFlMDM5KS5kZWNvZGUodGhpcy5zdHJlYW0pO1xuICAgICAgICB0aGlzLl9kYXRhUG9zID0gdGhpcy5zdHJlYW0ucG9zO1xuICAgIH1cbiAgICBfZGVjb21wcmVzcygpIHtcbiAgICAgICAgLy8gZGVjb21wcmVzcyBkYXRhIGFuZCBzZXR1cCB0YWJsZSBvZmZzZXRzIGlmIHdlIGhhdmVuJ3QgYWxyZWFkeVxuICAgICAgICBpZiAoIXRoaXMuX2RlY29tcHJlc3NlZCkge1xuICAgICAgICAgICAgdGhpcy5zdHJlYW0ucG9zID0gdGhpcy5fZGF0YVBvcztcbiAgICAgICAgICAgIGxldCBidWZmZXIgPSB0aGlzLnN0cmVhbS5yZWFkQnVmZmVyKHRoaXMuZGlyZWN0b3J5LnRvdGFsQ29tcHJlc3NlZFNpemUpO1xuICAgICAgICAgICAgbGV0IGRlY29tcHJlc3NlZFNpemUgPSAwO1xuICAgICAgICAgICAgZm9yKGxldCB0YWcgaW4gdGhpcy5kaXJlY3RvcnkudGFibGVzKXtcbiAgICAgICAgICAgICAgICBsZXQgZW50cnkgPSB0aGlzLmRpcmVjdG9yeS50YWJsZXNbdGFnXTtcbiAgICAgICAgICAgICAgICBlbnRyeS5vZmZzZXQgPSBkZWNvbXByZXNzZWRTaXplO1xuICAgICAgICAgICAgICAgIGRlY29tcHJlc3NlZFNpemUgKz0gZW50cnkudHJhbnNmb3JtTGVuZ3RoICE9IG51bGwgPyBlbnRyeS50cmFuc2Zvcm1MZW5ndGggOiBlbnRyeS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZGVjb21wcmVzc2VkID0gKDAsICQ1MlpJZiRicm90bGlkZWNvbXByZXNzanMpKGJ1ZmZlciwgZGVjb21wcmVzc2VkU2l6ZSk7XG4gICAgICAgICAgICBpZiAoIWRlY29tcHJlc3NlZCkgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgZGVjb2RpbmcgY29tcHJlc3NlZCBkYXRhIGluIFdPRkYyXCIpO1xuICAgICAgICAgICAgdGhpcy5zdHJlYW0gPSBuZXcgJDUyWklmJERlY29kZVN0cmVhbShkZWNvbXByZXNzZWQpO1xuICAgICAgICAgICAgdGhpcy5fZGVjb21wcmVzc2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZGVjb2RlVGFibGUodGFibGUpIHtcbiAgICAgICAgdGhpcy5fZGVjb21wcmVzcygpO1xuICAgICAgICByZXR1cm4gc3VwZXIuX2RlY29kZVRhYmxlKHRhYmxlKTtcbiAgICB9XG4gICAgLy8gT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gZ2V0IGEgZ2x5cGggYW5kIHJldHVybiBvdXJcbiAgICAvLyBjdXN0b20gc3ViY2xhc3MgaWYgdGhlcmUgaXMgYSBnbHlmIHRhYmxlLlxuICAgIF9nZXRCYXNlR2x5cGgoZ2x5cGgsIGNoYXJhY3RlcnMgPSBbXSkge1xuICAgICAgICBpZiAoIXRoaXMuX2dseXBoc1tnbHlwaF0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdG9yeS50YWJsZXMuZ2x5ZiAmJiB0aGlzLmRpcmVjdG9yeS50YWJsZXMuZ2x5Zi50cmFuc2Zvcm1lZCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fdHJhbnNmb3JtZWRHbHlwaHMpIHRoaXMuX3RyYW5zZm9ybUdseWZUYWJsZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nbHlwaHNbZ2x5cGhdID0gbmV3ICgwLCAkODA0NjE5MGM5ZjFhZDE5ZSRleHBvcnQkMmUyYmNkODczOWFlMDM5KShnbHlwaCwgY2hhcmFjdGVycywgdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIHN1cGVyLl9nZXRCYXNlR2x5cGgoZ2x5cGgsIGNoYXJhY3RlcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF90cmFuc2Zvcm1HbHlmVGFibGUoKSB7XG4gICAgICAgIHRoaXMuX2RlY29tcHJlc3MoKTtcbiAgICAgICAgdGhpcy5zdHJlYW0ucG9zID0gdGhpcy5kaXJlY3RvcnkudGFibGVzLmdseWYub2Zmc2V0O1xuICAgICAgICBsZXQgdGFibGUgPSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkR2x5ZlRhYmxlLmRlY29kZSh0aGlzLnN0cmVhbSk7XG4gICAgICAgIGxldCBnbHlwaHMgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGFibGUubnVtR2x5cGhzOyBpbmRleCsrKXtcbiAgICAgICAgICAgIGxldCBnbHlwaCA9IHt9O1xuICAgICAgICAgICAgbGV0IG5Db250b3VycyA9IHRhYmxlLm5Db250b3Vycy5yZWFkSW50MTZCRSgpO1xuICAgICAgICAgICAgZ2x5cGgubnVtYmVyT2ZDb250b3VycyA9IG5Db250b3VycztcbiAgICAgICAgICAgIGlmIChuQ29udG91cnMgPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5Qb2ludHMgPSBbXTtcbiAgICAgICAgICAgICAgICBsZXQgdG90YWxQb2ludHMgPSAwO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBuQ29udG91cnM7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGxldCByMSA9ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRyZWFkMjU1VUludDE2KHRhYmxlLm5Qb2ludHMpO1xuICAgICAgICAgICAgICAgICAgICB0b3RhbFBvaW50cyArPSByMTtcbiAgICAgICAgICAgICAgICAgICAgblBvaW50cy5wdXNoKHRvdGFsUG9pbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2x5cGgucG9pbnRzID0gJDIxZWUyMThmODRhYzdmMzIkdmFyJGRlY29kZVRyaXBsZXQodGFibGUuZmxhZ3MsIHRhYmxlLmdseXBocywgdG90YWxQb2ludHMpO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaTEgPSAwOyBpMSA8IG5Db250b3VyczsgaTErKylnbHlwaC5wb2ludHNbblBvaW50c1tpMV0gLSAxXS5lbmRDb250b3VyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdHJ1Y3Rpb25TaXplID0gJDIxZWUyMThmODRhYzdmMzIkdmFyJHJlYWQyNTVVSW50MTYodGFibGUuZ2x5cGhzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobkNvbnRvdXJzIDwgMCkge1xuICAgICAgICAgICAgICAgIGxldCBoYXZlSW5zdHJ1Y3Rpb25zID0gKDAsICQ2OWFhYzE2MDI5OTY4NjkyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLnByb3RvdHlwZS5fZGVjb2RlQ29tcG9zaXRlLmNhbGwoe1xuICAgICAgICAgICAgICAgICAgICBfZm9udDogdGhpc1xuICAgICAgICAgICAgICAgIH0sIGdseXBoLCB0YWJsZS5jb21wb3NpdGVzKTtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZUluc3RydWN0aW9ucykgdmFyIGluc3RydWN0aW9uU2l6ZSA9ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRyZWFkMjU1VUludDE2KHRhYmxlLmdseXBocyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbHlwaHMucHVzaChnbHlwaCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtZWRHbHlwaHMgPSBnbHlwaHM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX2RlZmluZV9wcm9wZXJ0eW1qcykodGhpcywgXCJ0eXBlXCIsIFwiV09GRjJcIik7XG4gICAgfVxufVxuLy8gU3BlY2lhbCBjbGFzcyB0aGF0IGFjY2VwdHMgYSBsZW5ndGggYW5kIHJldHVybnMgYSBzdWItc3RyZWFtIGZvciB0aGF0IGRhdGFcbmNsYXNzICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRTdWJzdHJlYW0ge1xuICAgIGRlY29kZShzdHJlYW0sIHBhcmVudCkge1xuICAgICAgICByZXR1cm4gbmV3ICQ1MlpJZiREZWNvZGVTdHJlYW0odGhpcy5fYnVmLmRlY29kZShzdHJlYW0sIHBhcmVudCkpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihsZW5ndGgpe1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy5fYnVmID0gbmV3ICQ1MlpJZiRCdWZmZXIobGVuZ3RoKTtcbiAgICB9XG59XG4vLyBUaGlzIHN0cnVjdCByZXByZXNlbnRzIHRoZSBlbnRpcmUgZ2x5ZiB0YWJsZVxubGV0ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRHbHlmVGFibGUgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgdmVyc2lvbjogJDUyWklmJHVpbnQzMixcbiAgICBudW1HbHlwaHM6ICQ1MlpJZiR1aW50MTYsXG4gICAgaW5kZXhGb3JtYXQ6ICQ1MlpJZiR1aW50MTYsXG4gICAgbkNvbnRvdXJTdHJlYW1TaXplOiAkNTJaSWYkdWludDMyLFxuICAgIG5Qb2ludHNTdHJlYW1TaXplOiAkNTJaSWYkdWludDMyLFxuICAgIGZsYWdTdHJlYW1TaXplOiAkNTJaSWYkdWludDMyLFxuICAgIGdseXBoU3RyZWFtU2l6ZTogJDUyWklmJHVpbnQzMixcbiAgICBjb21wb3NpdGVTdHJlYW1TaXplOiAkNTJaSWYkdWludDMyLFxuICAgIGJib3hTdHJlYW1TaXplOiAkNTJaSWYkdWludDMyLFxuICAgIGluc3RydWN0aW9uU3RyZWFtU2l6ZTogJDUyWklmJHVpbnQzMixcbiAgICBuQ29udG91cnM6IG5ldyAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkU3Vic3RyZWFtKFwibkNvbnRvdXJTdHJlYW1TaXplXCIpLFxuICAgIG5Qb2ludHM6IG5ldyAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkU3Vic3RyZWFtKFwiblBvaW50c1N0cmVhbVNpemVcIiksXG4gICAgZmxhZ3M6IG5ldyAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkU3Vic3RyZWFtKFwiZmxhZ1N0cmVhbVNpemVcIiksXG4gICAgZ2x5cGhzOiBuZXcgJDIxZWUyMThmODRhYzdmMzIkdmFyJFN1YnN0cmVhbShcImdseXBoU3RyZWFtU2l6ZVwiKSxcbiAgICBjb21wb3NpdGVzOiBuZXcgJDIxZWUyMThmODRhYzdmMzIkdmFyJFN1YnN0cmVhbShcImNvbXBvc2l0ZVN0cmVhbVNpemVcIiksXG4gICAgYmJveGVzOiBuZXcgJDIxZWUyMThmODRhYzdmMzIkdmFyJFN1YnN0cmVhbShcImJib3hTdHJlYW1TaXplXCIpLFxuICAgIGluc3RydWN0aW9uczogbmV3ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRTdWJzdHJlYW0oXCJpbnN0cnVjdGlvblN0cmVhbVNpemVcIilcbn0pO1xuY29uc3QgJDIxZWUyMThmODRhYzdmMzIkdmFyJFdPUkRfQ09ERSA9IDI1MztcbmNvbnN0ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRPTkVfTU9SRV9CWVRFX0NPREUyID0gMjU0O1xuY29uc3QgJDIxZWUyMThmODRhYzdmMzIkdmFyJE9ORV9NT1JFX0JZVEVfQ09ERTEgPSAyNTU7XG5jb25zdCAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkTE9XRVNUX1VfQ09ERSA9IDI1MztcbmZ1bmN0aW9uICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRyZWFkMjU1VUludDE2KHN0cmVhbSkge1xuICAgIGxldCBjb2RlID0gc3RyZWFtLnJlYWRVSW50OCgpO1xuICAgIGlmIChjb2RlID09PSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkV09SRF9DT0RFKSByZXR1cm4gc3RyZWFtLnJlYWRVSW50MTZCRSgpO1xuICAgIGlmIChjb2RlID09PSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkT05FX01PUkVfQllURV9DT0RFMSkgcmV0dXJuIHN0cmVhbS5yZWFkVUludDgoKSArICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRMT1dFU1RfVV9DT0RFO1xuICAgIGlmIChjb2RlID09PSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkT05FX01PUkVfQllURV9DT0RFMikgcmV0dXJuIHN0cmVhbS5yZWFkVUludDgoKSArICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRMT1dFU1RfVV9DT0RFICogMjtcbiAgICByZXR1cm4gY29kZTtcbn1cbmZ1bmN0aW9uICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciR3aXRoU2lnbihmbGFnLCBiYXNldmFsKSB7XG4gICAgcmV0dXJuIGZsYWcgJiAxID8gYmFzZXZhbCA6IC1iYXNldmFsO1xufVxuZnVuY3Rpb24gJDIxZWUyMThmODRhYzdmMzIkdmFyJGRlY29kZVRyaXBsZXQoZmxhZ3MsIGdseXBocywgblBvaW50cykge1xuICAgIGxldCB5O1xuICAgIGxldCB4ID0geSA9IDA7XG4gICAgbGV0IHJlcyA9IFtdO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBuUG9pbnRzOyBpKyspe1xuICAgICAgICBsZXQgZHggPSAwLCBkeSA9IDA7XG4gICAgICAgIGxldCBmbGFnID0gZmxhZ3MucmVhZFVJbnQ4KCk7XG4gICAgICAgIGxldCBvbkN1cnZlID0gIShmbGFnID4+IDcpO1xuICAgICAgICBmbGFnICY9IDB4N2Y7XG4gICAgICAgIGlmIChmbGFnIDwgMTApIHtcbiAgICAgICAgICAgIGR4ID0gMDtcbiAgICAgICAgICAgIGR5ID0gJDIxZWUyMThmODRhYzdmMzIkdmFyJHdpdGhTaWduKGZsYWcsICgoZmxhZyAmIDE0KSA8PCA3KSArIGdseXBocy5yZWFkVUludDgoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmxhZyA8IDIwKSB7XG4gICAgICAgICAgICBkeCA9ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciR3aXRoU2lnbihmbGFnLCAoKGZsYWcgLSAxMCAmIDE0KSA8PCA3KSArIGdseXBocy5yZWFkVUludDgoKSk7XG4gICAgICAgICAgICBkeSA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZmxhZyA8IDg0KSB7XG4gICAgICAgICAgICB2YXIgYjAgPSBmbGFnIC0gMjA7XG4gICAgICAgICAgICB2YXIgYjEgPSBnbHlwaHMucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICBkeCA9ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciR3aXRoU2lnbihmbGFnLCAxICsgKGIwICYgMHgzMCkgKyAoYjEgPj4gNCkpO1xuICAgICAgICAgICAgZHkgPSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkd2l0aFNpZ24oZmxhZyA+PiAxLCAxICsgKChiMCAmIDB4MGMpIDw8IDIpICsgKGIxICYgMHgwZikpO1xuICAgICAgICB9IGVsc2UgaWYgKGZsYWcgPCAxMjApIHtcbiAgICAgICAgICAgIHZhciBiMCA9IGZsYWcgLSA4NDtcbiAgICAgICAgICAgIGR4ID0gJDIxZWUyMThmODRhYzdmMzIkdmFyJHdpdGhTaWduKGZsYWcsIDEgKyAoYjAgLyAxMiA8PCA4KSArIGdseXBocy5yZWFkVUludDgoKSk7XG4gICAgICAgICAgICBkeSA9ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciR3aXRoU2lnbihmbGFnID4+IDEsIDEgKyAoYjAgJSAxMiA+PiAyIDw8IDgpICsgZ2x5cGhzLnJlYWRVSW50OCgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChmbGFnIDwgMTI0KSB7XG4gICAgICAgICAgICB2YXIgYjEgPSBnbHlwaHMucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICBsZXQgYjIgPSBnbHlwaHMucmVhZFVJbnQ4KCk7XG4gICAgICAgICAgICBkeCA9ICQyMWVlMjE4Zjg0YWM3ZjMyJHZhciR3aXRoU2lnbihmbGFnLCAoYjEgPDwgNCkgKyAoYjIgPj4gNCkpO1xuICAgICAgICAgICAgZHkgPSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkd2l0aFNpZ24oZmxhZyA+PiAxLCAoKGIyICYgMHgwZikgPDwgOCkgKyBnbHlwaHMucmVhZFVJbnQ4KCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHggPSAkMjFlZTIxOGY4NGFjN2YzMiR2YXIkd2l0aFNpZ24oZmxhZywgZ2x5cGhzLnJlYWRVSW50MTZCRSgpKTtcbiAgICAgICAgICAgIGR5ID0gJDIxZWUyMThmODRhYzdmMzIkdmFyJHdpdGhTaWduKGZsYWcgPj4gMSwgZ2x5cGhzLnJlYWRVSW50MTZCRSgpKTtcbiAgICAgICAgfVxuICAgICAgICB4ICs9IGR4O1xuICAgICAgICB5ICs9IGR5O1xuICAgICAgICByZXMucHVzaChuZXcgKDAsICQ2OWFhYzE2MDI5OTY4NjkyJGV4cG9ydCRiYWYyNjE0NmE0MTRmMjRhKShvbkN1cnZlLCBmYWxzZSwgeCwgeSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG5cblxuXG5cblxuXG5cbmxldCAkY2Q1ODUzYTU2YzY4ZmVjNyR2YXIkVFRDSGVhZGVyID0gbmV3ICQ1MlpJZiRWZXJzaW9uZWRTdHJ1Y3QoJDUyWklmJHVpbnQzMiwge1xuICAgIDB4MDAwMTAwMDA6IHtcbiAgICAgICAgbnVtRm9udHM6ICQ1MlpJZiR1aW50MzIsXG4gICAgICAgIG9mZnNldHM6IG5ldyAkNTJaSWYkQXJyYXkoJDUyWklmJHVpbnQzMiwgXCJudW1Gb250c1wiKVxuICAgIH0sXG4gICAgMHgwMDAyMDAwMDoge1xuICAgICAgICBudW1Gb250czogJDUyWklmJHVpbnQzMixcbiAgICAgICAgb2Zmc2V0czogbmV3ICQ1MlpJZiRBcnJheSgkNTJaSWYkdWludDMyLCBcIm51bUZvbnRzXCIpLFxuICAgICAgICBkc2lnVGFnOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBkc2lnTGVuZ3RoOiAkNTJaSWYkdWludDMyLFxuICAgICAgICBkc2lnT2Zmc2V0OiAkNTJaSWYkdWludDMyXG4gICAgfVxufSk7XG5jbGFzcyAkY2Q1ODUzYTU2YzY4ZmVjNyRleHBvcnQkMmUyYmNkODczOWFlMDM5IHtcbiAgICBzdGF0aWMgcHJvYmUoYnVmZmVyKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDNkMjhjMTk5NmNlZDFmMTQpLmRlY29kZShidWZmZXIuc2xpY2UoMCwgNCkpID09PSBcInR0Y2ZcIjtcbiAgICB9XG4gICAgZ2V0Rm9udChuYW1lKSB7XG4gICAgICAgIGZvciAobGV0IG9mZnNldCBvZiB0aGlzLmhlYWRlci5vZmZzZXRzKXtcbiAgICAgICAgICAgIGxldCBzdHJlYW0gPSBuZXcgJDUyWklmJERlY29kZVN0cmVhbSh0aGlzLnN0cmVhbS5idWZmZXIpO1xuICAgICAgICAgICAgc3RyZWFtLnBvcyA9IG9mZnNldDtcbiAgICAgICAgICAgIGxldCBmb250ID0gbmV3ICgwLCAkNGMxNzA5ZGVlNTI4ZWE3NiRleHBvcnQkMmUyYmNkODczOWFlMDM5KShzdHJlYW0pO1xuICAgICAgICAgICAgaWYgKGZvbnQucG9zdHNjcmlwdE5hbWUgPT09IG5hbWUgfHwgZm9udC5wb3N0c2NyaXB0TmFtZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgbmFtZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgZm9udC5wb3N0c2NyaXB0TmFtZS5ldmVyeSgodiwgaSk9Pm5hbWVbaV0gPT09IHYpKSByZXR1cm4gZm9udDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZ2V0IGZvbnRzKCkge1xuICAgICAgICBsZXQgZm9udHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgb2Zmc2V0IG9mIHRoaXMuaGVhZGVyLm9mZnNldHMpe1xuICAgICAgICAgICAgbGV0IHN0cmVhbSA9IG5ldyAkNTJaSWYkRGVjb2RlU3RyZWFtKHRoaXMuc3RyZWFtLmJ1ZmZlcik7XG4gICAgICAgICAgICBzdHJlYW0ucG9zID0gb2Zmc2V0O1xuICAgICAgICAgICAgZm9udHMucHVzaChuZXcgKDAsICQ0YzE3MDlkZWU1MjhlYTc2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKHN0cmVhbSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb250cztcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc3RyZWFtKXtcbiAgICAgICAgKDAsICQ1MlpJZiRzd2NoZWxwZXJzc3JjX2RlZmluZV9wcm9wZXJ0eW1qcykodGhpcywgXCJ0eXBlXCIsIFwiVFRDXCIpO1xuICAgICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgaWYgKHN0cmVhbS5yZWFkU3RyaW5nKDQpICE9PSBcInR0Y2ZcIikgdGhyb3cgbmV3IEVycm9yKFwiTm90IGEgVHJ1ZVR5cGUgY29sbGVjdGlvblwiKTtcbiAgICAgICAgdGhpcy5oZWFkZXIgPSAkY2Q1ODUzYTU2YzY4ZmVjNyR2YXIkVFRDSGVhZGVyLmRlY29kZShzdHJlYW0pO1xuICAgIH1cbn1cblxuXG5cblxuXG5sZXQgJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJERGb250TmFtZSA9IG5ldyAkNTJaSWYkU3RyaW5nKCQ1MlpJZiR1aW50OCk7XG5sZXQgJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJERGb250RGF0YSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBsZW46ICQ1MlpJZiR1aW50MzIsXG4gICAgYnVmOiBuZXcgJDUyWklmJEJ1ZmZlcihcImxlblwiKVxufSk7XG5sZXQgJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJFJlZiA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBpZDogJDUyWklmJHVpbnQxNixcbiAgICBuYW1lT2Zmc2V0OiAkNTJaSWYkaW50MTYsXG4gICAgYXR0cjogJDUyWklmJHVpbnQ4LFxuICAgIGRhdGFPZmZzZXQ6ICQ1MlpJZiR1aW50MjQsXG4gICAgaGFuZGxlOiAkNTJaSWYkdWludDMyXG59KTtcbmxldCAkMDVmNDlmOTMwMTg2MTQ0ZSR2YXIkVHlwZSA9IG5ldyAkNTJaSWYkU3RydWN0KHtcbiAgICBuYW1lOiBuZXcgJDUyWklmJFN0cmluZyg0KSxcbiAgICBtYXhUeXBlSW5kZXg6ICQ1MlpJZiR1aW50MTYsXG4gICAgcmVmTGlzdDogbmV3ICQ1MlpJZiRQb2ludGVyKCQ1MlpJZiR1aW50MTYsIG5ldyAkNTJaSWYkQXJyYXkoJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJFJlZiwgKHQpPT50Lm1heFR5cGVJbmRleCArIDEpLCB7XG4gICAgICAgIHR5cGU6IFwicGFyZW50XCJcbiAgICB9KVxufSk7XG5sZXQgJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJFR5cGVMaXN0ID0gbmV3ICQ1MlpJZiRTdHJ1Y3Qoe1xuICAgIGxlbmd0aDogJDUyWklmJHVpbnQxNixcbiAgICB0eXBlczogbmV3ICQ1MlpJZiRBcnJheSgkMDVmNDlmOTMwMTg2MTQ0ZSR2YXIkVHlwZSwgKHQpPT50Lmxlbmd0aCArIDEpXG59KTtcbmxldCAkMDVmNDlmOTMwMTg2MTQ0ZSR2YXIkREZvbnRNYXAgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgcmVzZXJ2ZWQ6IG5ldyAkNTJaSWYkUmVzZXJ2ZWQoJDUyWklmJHVpbnQ4LCAyNCksXG4gICAgdHlwZUxpc3Q6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDE2LCAkMDVmNDlmOTMwMTg2MTQ0ZSR2YXIkVHlwZUxpc3QpLFxuICAgIG5hbWVMaXN0T2Zmc2V0OiBuZXcgJDUyWklmJFBvaW50ZXIoJDUyWklmJHVpbnQxNiwgXCJ2b2lkXCIpXG59KTtcbmxldCAkMDVmNDlmOTMwMTg2MTQ0ZSR2YXIkREZvbnRIZWFkZXIgPSBuZXcgJDUyWklmJFN0cnVjdCh7XG4gICAgZGF0YU9mZnNldDogJDUyWklmJHVpbnQzMixcbiAgICBtYXA6IG5ldyAkNTJaSWYkUG9pbnRlcigkNTJaSWYkdWludDMyLCAkMDVmNDlmOTMwMTg2MTQ0ZSR2YXIkREZvbnRNYXApLFxuICAgIGRhdGFMZW5ndGg6ICQ1MlpJZiR1aW50MzIsXG4gICAgbWFwTGVuZ3RoOiAkNTJaSWYkdWludDMyXG59KTtcbmNsYXNzICQwNWY0OWY5MzAxODYxNDRlJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkge1xuICAgIHN0YXRpYyBwcm9iZShidWZmZXIpIHtcbiAgICAgICAgbGV0IHN0cmVhbSA9IG5ldyAkNTJaSWYkRGVjb2RlU3RyZWFtKGJ1ZmZlcik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgaGVhZGVyID0gJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJERGb250SGVhZGVyLmRlY29kZShzdHJlYW0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgdHlwZSBvZiBoZWFkZXIubWFwLnR5cGVMaXN0LnR5cGVzKXtcbiAgICAgICAgICAgIGlmICh0eXBlLm5hbWUgPT09IFwic2ZudFwiKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGdldEZvbnQobmFtZSkge1xuICAgICAgICBpZiAoIXRoaXMuc2ZudCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGZvciAobGV0IHJlZiBvZiB0aGlzLnNmbnQucmVmTGlzdCl7XG4gICAgICAgICAgICBsZXQgcG9zID0gdGhpcy5oZWFkZXIuZGF0YU9mZnNldCArIHJlZi5kYXRhT2Zmc2V0ICsgNDtcbiAgICAgICAgICAgIGxldCBzdHJlYW0gPSBuZXcgJDUyWklmJERlY29kZVN0cmVhbSh0aGlzLnN0cmVhbS5idWZmZXIuc2xpY2UocG9zKSk7XG4gICAgICAgICAgICBsZXQgZm9udCA9IG5ldyAoMCwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoc3RyZWFtKTtcbiAgICAgICAgICAgIGlmIChmb250LnBvc3RzY3JpcHROYW1lID09PSBuYW1lIHx8IGZvbnQucG9zdHNjcmlwdE5hbWUgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIG5hbWUgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIGZvbnQucG9zdHNjcmlwdE5hbWUuZXZlcnkoKHYsIGkpPT5uYW1lW2ldID09PSB2KSkgcmV0dXJuIGZvbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGdldCBmb250cygpIHtcbiAgICAgICAgbGV0IGZvbnRzID0gW107XG4gICAgICAgIGZvciAobGV0IHJlZiBvZiB0aGlzLnNmbnQucmVmTGlzdCl7XG4gICAgICAgICAgICBsZXQgcG9zID0gdGhpcy5oZWFkZXIuZGF0YU9mZnNldCArIHJlZi5kYXRhT2Zmc2V0ICsgNDtcbiAgICAgICAgICAgIGxldCBzdHJlYW0gPSBuZXcgJDUyWklmJERlY29kZVN0cmVhbSh0aGlzLnN0cmVhbS5idWZmZXIuc2xpY2UocG9zKSk7XG4gICAgICAgICAgICBmb250cy5wdXNoKG5ldyAoMCwgJDRjMTcwOWRlZTUyOGVhNzYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkoc3RyZWFtKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvbnRzO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzdHJlYW0pe1xuICAgICAgICAoMCwgJDUyWklmJHN3Y2hlbHBlcnNzcmNfZGVmaW5lX3Byb3BlcnR5bWpzKSh0aGlzLCBcInR5cGVcIiwgXCJERm9udFwiKTtcbiAgICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgIHRoaXMuaGVhZGVyID0gJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJERGb250SGVhZGVyLmRlY29kZSh0aGlzLnN0cmVhbSk7XG4gICAgICAgIGZvciAobGV0IHR5cGUgb2YgdGhpcy5oZWFkZXIubWFwLnR5cGVMaXN0LnR5cGVzKXtcbiAgICAgICAgICAgIGZvciAobGV0IHJlZiBvZiB0eXBlLnJlZkxpc3QpaWYgKHJlZi5uYW1lT2Zmc2V0ID49IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbS5wb3MgPSByZWYubmFtZU9mZnNldCArIHRoaXMuaGVhZGVyLm1hcC5uYW1lTGlzdE9mZnNldDtcbiAgICAgICAgICAgICAgICByZWYubmFtZSA9ICQwNWY0OWY5MzAxODYxNDRlJHZhciRERm9udE5hbWUuZGVjb2RlKHRoaXMuc3RyZWFtKTtcbiAgICAgICAgICAgIH0gZWxzZSByZWYubmFtZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAodHlwZS5uYW1lID09PSBcInNmbnRcIikgdGhpcy5zZm50ID0gdHlwZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cblxuLy8gUmVnaXN0ZXIgZm9udCBmb3JtYXRzXG4oMCwgJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDM2YjJmMjRlOTdkNDNiZSkoKDAsICQ0YzE3MDlkZWU1MjhlYTc2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKTtcbigwLCAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkMzZiMmYyNGU5N2Q0M2JlKSgoMCwgJDc2MDc4NTIxNGI5ZmM1MmMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkpO1xuKDAsICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQzNmIyZjI0ZTk3ZDQzYmUpKCgwLCAkMjFlZTIxOGY4NGFjN2YzMiRleHBvcnQkMmUyYmNkODczOWFlMDM5KSk7XG4oMCwgJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDM2YjJmMjRlOTdkNDNiZSkoKDAsICRjZDU4NTNhNTZjNjhmZWM3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpKTtcbigwLCAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkMzZiMmYyNGU5N2Q0M2JlKSgoMCwgJDA1ZjQ5ZjkzMDE4NjE0NGUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSkpO1xuXG5cbmV4cG9ydCB7JGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JGJkNWM1ZDhiOGRjYWZkNzggYXMgbG9nRXJyb3JzLCAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkMzZiMmYyNGU5N2Q0M2JlIGFzIHJlZ2lzdGVyRm9ybWF0LCAkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkMTg1ODAyZmQ2OTRlZTFmNSBhcyBjcmVhdGUsICRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQ0Mjk0MDg5OGRmODE5OTQwIGFzIGRlZmF1bHRMYW5ndWFnZSwgJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDUxNTdlNzc4MGQ0NGNjMzYgYXMgc2V0RGVmYXVsdExhbmd1YWdlLCAkYjQyMmIxZTAxM2NkNjAxMCRleHBvcnQkZmE1NDk5ZWRiMWFiNDE0YSBhcyBvcGVuU3luYywgJGI0MjJiMWUwMTNjZDYwMTAkZXhwb3J0JDNjZTY5NDlmMjBjZWE3NjUgYXMgb3Blbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkRlY29kZVN0cmVhbSIsIiQ1MlpJZiREZWNvZGVTdHJlYW0iLCJTdHJ1Y3QiLCIkNTJaSWYkU3RydWN0IiwiU3RyaW5nIiwiJDUyWklmJFN0cmluZyIsInVpbnQzMiIsIiQ1MlpJZiR1aW50MzIiLCJQb2ludGVyIiwiJDUyWklmJFBvaW50ZXIiLCJ1aW50MTYiLCIkNTJaSWYkdWludDE2IiwiQXJyYXkiLCIkNTJaSWYkQXJyYXkiLCJWb2lkUG9pbnRlciIsIiQ1MlpJZiRWb2lkUG9pbnRlciIsImludDE2IiwiJDUyWklmJGludDE2IiwidWludDI0IiwiJDUyWklmJHVpbnQyNCIsInVpbnQ4IiwiJDUyWklmJHVpbnQ4IiwiVmVyc2lvbmVkU3RydWN0IiwiJDUyWklmJFZlcnNpb25lZFN0cnVjdCIsIkxhenlBcnJheSIsIiQ1MlpJZiRMYXp5QXJyYXkiLCJSZXNlcnZlZCIsIiQ1MlpJZiRSZXNlcnZlZCIsImludDMyIiwiJDUyWklmJGludDMyIiwiQml0ZmllbGQiLCIkNTJaSWYkQml0ZmllbGQiLCJmaXhlZDMyIiwiJDUyWklmJGZpeGVkMzIiLCJCdWZmZXIiLCIkNTJaSWYkQnVmZmVyIiwiTnVtYmVyIiwiJDUyWklmJE51bWJlciIsInJlc29sdmVMZW5ndGgiLCIkNTJaSWYkcmVzb2x2ZUxlbmd0aCIsImZpeGVkMTYiLCIkNTJaSWYkZml4ZWQxNiIsIlByb3BlcnR5RGVzY3JpcHRvciIsIiQ1MlpJZiRQcm9wZXJ0eURlc2NyaXB0b3IiLCJGaXhlZCIsIiQ1MlpJZiRGaXhlZCIsImludDgiLCIkNTJaSWYkaW50OCIsIk9wdGlvbmFsIiwiJDUyWklmJE9wdGlvbmFsIiwiRW5jb2RlU3RyZWFtIiwiJDUyWklmJEVuY29kZVN0cmVhbSIsIiQ1MlpJZiRmcyIsIiQ1MlpJZiRzd2NoZWxwZXJzc3JjX2RlZmluZV9wcm9wZXJ0eW1qcyIsIiQ1MlpJZiRzd2NoZWxwZXJzc3JjX3RzX2RlY29yYXRlbWpzIiwiJDUyWklmJGZhc3RkZWVwZXF1YWwiLCJnZXRDb21iaW5pbmdDbGFzcyIsIiQ1MlpJZiRnZXRDb21iaW5pbmdDbGFzcyIsImdldFNjcmlwdCIsIiQ1MlpJZiRnZXRTY3JpcHQiLCJpc0RpZ2l0IiwiJDUyWklmJGlzRGlnaXQiLCJnZXRDYXRlZ29yeSIsIiQ1MlpJZiRnZXRDYXRlZ29yeSIsImlzTWFyayIsIiQ1MlpJZiRpc01hcmsiLCIkNTJaSWYkdW5pY29kZXRyaWUiLCIkNTJaSWYkZGZhIiwiJDUyWklmJGNsb25lIiwiJDUyWklmJHRpbnlpbmZsYXRlIiwiJDUyWklmJGJyb3RsaWRlY29tcHJlc3NqcyIsIiRwYXJjZWwkZXhwb3J0IiwiZSIsIm4iLCJ2IiwicyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic2V0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIiRwYXJjZWwkaW50ZXJvcERlZmF1bHQiLCJhIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCIkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnRzIiwiJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JGJkNWM1ZDhiOGRjYWZkNzgiLCIkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkMzZiMmYyNGU5N2Q0M2JlIiwiJGQ2MzZiYzc5OGU3MTc4ZGIkZXhwb3J0JDE4NTgwMmZkNjk0ZWUxZjUiLCIkZDYzNmJjNzk4ZTcxNzhkYiRleHBvcnQkNDI5NDA4OThkZjgxOTk0MCIsIiRkNjM2YmM3OThlNzE3OGRiJGV4cG9ydCQ1MTU3ZTc3ODBkNDRjYzM2IiwiJGQ2MzZiYzc5OGU3MTc4ZGIkdmFyJGZvcm1hdHMiLCJmb3JtYXQiLCJwdXNoIiwiYnVmZmVyIiwicG9zdHNjcmlwdE5hbWUiLCJpIiwibGVuZ3RoIiwicHJvYmUiLCJmb250IiwiZ2V0Rm9udCIsIkVycm9yIiwibGFuZyIsIiRiNDIyYjFlMDEzY2Q2MDEwJGV4cG9ydHMiLCIkYjQyMmIxZTAxM2NkNjAxMCRleHBvcnQkZmE1NDk5ZWRiMWFiNDE0YSIsIiRiNDIyYjFlMDEzY2Q2MDEwJGV4cG9ydCQzY2U2OTQ5ZjIwY2VhNzY1IiwiZmlsZW5hbWUiLCJyZWFkRmlsZVN5bmMiLCJjYWxsYmFjayIsInByb21pc2VzIiwicmVhZEZpbGUiLCIkZTcxNTY1ZjJjZTA5Y2I2YiRleHBvcnQkNjlhMzIwOWYxYTA2YzA0ZCIsInRhcmdldCIsImtleTEiLCJkZXNjcmlwdG9yIiwidmFsdWUiLCJjYWxsIiwiZm4iLCJjYWNoZTEiLCJNYXAiLCJtZW1vaXplZCIsImFyZ3MiLCJrZXkiLCJoYXMiLCJyZXN1bHQiLCJhcHBseSIsIiQyNmE2MjIwNWFkMDY1NzRlJHZhciRTdWJIZWFkZXIiLCJmaXJzdENvZGUiLCJlbnRyeUNvdW50IiwiaWREZWx0YSIsImlkUmFuZ2VPZmZzZXQiLCIkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkQ21hcEdyb3VwIiwic3RhcnRDaGFyQ29kZSIsImVuZENoYXJDb2RlIiwiZ2x5cGhJRCIsIiQyNmE2MjIwNWFkMDY1NzRlJHZhciRVbmljb2RlVmFsdWVSYW5nZSIsInN0YXJ0VW5pY29kZVZhbHVlIiwiYWRkaXRpb25hbENvdW50IiwiJDI2YTYyMjA1YWQwNjU3NGUkdmFyJFVWU01hcHBpbmciLCJ1bmljb2RlVmFsdWUiLCIkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkRGVmYXVsdFVWUyIsIiQyNmE2MjIwNWFkMDY1NzRlJHZhciROb25EZWZhdWx0VVZTIiwiJDI2YTYyMjA1YWQwNjU3NGUkdmFyJFZhclNlbGVjdG9yUmVjb3JkIiwidmFyU2VsZWN0b3IiLCJkZWZhdWx0VVZTIiwidHlwZSIsIm5vbkRlZmF1bHRVVlMiLCIkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkQ21hcFN1YnRhYmxlIiwibGFuZ3VhZ2UiLCJjb2RlTWFwIiwic3ViSGVhZGVyS2V5cyIsInN1YkhlYWRlckNvdW50IiwidCIsIk1hdGgiLCJtYXgiLCJzdWJIZWFkZXJzIiwiZ2x5cGhJbmRleEFycmF5Iiwic2VnQ291bnRYMiIsInNlZ0NvdW50Iiwic2VhcmNoUmFuZ2UiLCJlbnRyeVNlbGVjdG9yIiwicmFuZ2VTaGlmdCIsImVuZENvZGUiLCJyZXNlcnZlZFBhZCIsInN0YXJ0Q29kZSIsIl9jdXJyZW50T2Zmc2V0IiwiZ2x5cGhJbmRpY2VzIiwicmVzZXJ2ZWQiLCJpczMyIiwibkdyb3VwcyIsImdyb3VwcyIsIm51bVJlY29yZHMiLCJ2YXJTZWxlY3RvcnMiLCIkMjZhNjIyMDVhZDA2NTc0ZSR2YXIkQ21hcEVudHJ5IiwicGxhdGZvcm1JRCIsImVuY29kaW5nSUQiLCJ0YWJsZSIsImxhenkiLCIkMjZhNjIyMDVhZDA2NTc0ZSRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwidmVyc2lvbiIsIm51bVN1YnRhYmxlcyIsInRhYmxlcyIsIiRmMjYxMmEyOWY5MmFjMDYyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJyZXZpc2lvbiIsImNoZWNrU3VtQWRqdXN0bWVudCIsIm1hZ2ljTnVtYmVyIiwiZmxhZ3MiLCJ1bml0c1BlckVtIiwiY3JlYXRlZCIsIm1vZGlmaWVkIiwieE1pbiIsInlNaW4iLCJ4TWF4IiwieU1heCIsIm1hY1N0eWxlIiwibG93ZXN0UmVjUFBFTSIsImZvbnREaXJlY3Rpb25IaW50IiwiaW5kZXhUb0xvY0Zvcm1hdCIsImdseXBoRGF0YUZvcm1hdCIsIiQyYzE3OWRkNTkzNTgzMDczJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJhc2NlbnQiLCJkZXNjZW50IiwibGluZUdhcCIsImFkdmFuY2VXaWR0aE1heCIsIm1pbkxlZnRTaWRlQmVhcmluZyIsIm1pblJpZ2h0U2lkZUJlYXJpbmciLCJ4TWF4RXh0ZW50IiwiY2FyZXRTbG9wZVJpc2UiLCJjYXJldFNsb3BlUnVuIiwiY2FyZXRPZmZzZXQiLCJtZXRyaWNEYXRhRm9ybWF0IiwibnVtYmVyT2ZNZXRyaWNzIiwiJGJkYzkwNjA1NDIyNjRiODUkdmFyJEhtdHhFbnRyeSIsImFkdmFuY2UiLCJiZWFyaW5nIiwiJGJkYzkwNjA1NDIyNjRiODUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIm1ldHJpY3MiLCJwYXJlbnQiLCJoaGVhIiwiYmVhcmluZ3MiLCJtYXhwIiwibnVtR2x5cGhzIiwiJGRiZjUxY2IzZDNmZTQwOWQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIm1heFBvaW50cyIsIm1heENvbnRvdXJzIiwibWF4Q29tcG9uZW50UG9pbnRzIiwibWF4Q29tcG9uZW50Q29udG91cnMiLCJtYXhab25lcyIsIm1heFR3aWxpZ2h0UG9pbnRzIiwibWF4U3RvcmFnZSIsIm1heEZ1bmN0aW9uRGVmcyIsIm1heEluc3RydWN0aW9uRGVmcyIsIm1heFN0YWNrRWxlbWVudHMiLCJtYXhTaXplT2ZJbnN0cnVjdGlvbnMiLCJtYXhDb21wb25lbnRFbGVtZW50cyIsIm1heENvbXBvbmVudERlcHRoIiwiJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JGJhZGM1NDRlMDY1MWI2YjEiLCJsYW5ndWFnZUlEIiwiJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDQ3OWU2NzE5MDdmNDg2ZDEiLCIkZTQ0OWFkNzhkNTA4NDVmZSRleHBvcnQkNmZlZjg3Yjc2MThiZGYwYiIsIiRlNDQ5YWQ3OGQ1MDg0NWZlJHZhciRTSU5HTEVfQllURV9FTkNPRElOR1MiLCJTZXQiLCIkZTQ0OWFkNzhkNTA4NDVmZSR2YXIkTUFDX0VOQ09ESU5HUyIsIiRlNDQ5YWQ3OGQ1MDg0NWZlJHZhciRlbmNvZGluZ0NhY2hlIiwiJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDFkY2ViM2MxNGVkNjhiZWUiLCJlbmNvZGluZyIsImNhY2hlZCIsIm1hcHBpbmciLCJyZXMiLCJjaGFyQ29kZUF0IiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwiVWludDhBcnJheSIsImRlY29kZSIsImkxIiwiJGU0NDlhZDc4ZDUwODQ1ZmUkZXhwb3J0JDIwOTIzNzZmZDAwMmUxMyIsIiQyYmNmMjIxNzUzZWM4ZTMyJHZhciROYW1lUmVjb3JkIiwibmFtZUlEIiwic3RyaW5nIiwicmVsYXRpdmVUbyIsImN0eCIsInN0cmluZ09mZnNldCIsImFsbG93TnVsbCIsIiQyYmNmMjIxNzUzZWM4ZTMyJHZhciRMYW5nVGFnUmVjb3JkIiwidGFnIiwiJDJiY2YyMjE3NTNlYzhlMzIkdmFyJE5hbWVUYWJsZSIsImNvdW50IiwicmVjb3JkcyIsImxhbmdUYWdDb3VudCIsImxhbmdUYWdzIiwiJDJiY2YyMjE3NTNlYzhlMzIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIiQyYmNmMjIxNzUzZWM4ZTMyJHZhciROQU1FUyIsInByb2Nlc3MiLCJzdHJlYW0iLCJyZWNvcmQiLCJvYmoiLCJwcmVFbmNvZGUiLCJpc0FycmF5IiwidmFsIiwiaW5kZXhPZiIsImVuIiwic2l6ZSIsIiQ4NGIyNzJhYTMxYjcwNjA2JHZhciRPUzIiLCJoZWFkZXIiLCJ4QXZnQ2hhcldpZHRoIiwidXNXZWlnaHRDbGFzcyIsInVzV2lkdGhDbGFzcyIsImZzVHlwZSIsInlTdWJzY3JpcHRYU2l6ZSIsInlTdWJzY3JpcHRZU2l6ZSIsInlTdWJzY3JpcHRYT2Zmc2V0IiwieVN1YnNjcmlwdFlPZmZzZXQiLCJ5U3VwZXJzY3JpcHRYU2l6ZSIsInlTdXBlcnNjcmlwdFlTaXplIiwieVN1cGVyc2NyaXB0WE9mZnNldCIsInlTdXBlcnNjcmlwdFlPZmZzZXQiLCJ5U3RyaWtlb3V0U2l6ZSIsInlTdHJpa2VvdXRQb3NpdGlvbiIsInNGYW1pbHlDbGFzcyIsInBhbm9zZSIsInVsQ2hhclJhbmdlIiwidmVuZG9ySUQiLCJmc1NlbGVjdGlvbiIsInVzRmlyc3RDaGFySW5kZXgiLCJ1c0xhc3RDaGFySW5kZXgiLCJ0eXBvQXNjZW5kZXIiLCJ0eXBvRGVzY2VuZGVyIiwidHlwb0xpbmVHYXAiLCJ3aW5Bc2NlbnQiLCJ3aW5EZXNjZW50IiwiY29kZVBhZ2VSYW5nZSIsInhIZWlnaHQiLCJjYXBIZWlnaHQiLCJkZWZhdWx0Q2hhciIsImJyZWFrQ2hhciIsIm1heENvbnRlbnQiLCJ1c0xvd2VyT3B0aWNhbFBvaW50U2l6ZSIsInVzVXBwZXJPcHRpY2FsUG9pbnRTaXplIiwiJDg0YjI3MmFhMzFiNzA2MDYkdmFyJHZlcnNpb25zIiwidmVyc2lvbnMiLCIkODRiMjcyYWEzMWI3MDYwNiRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiJDMyZDllMmViOTU2NWQ5M2MkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIml0YWxpY0FuZ2xlIiwidW5kZXJsaW5lUG9zaXRpb24iLCJ1bmRlcmxpbmVUaGlja25lc3MiLCJpc0ZpeGVkUGl0Y2giLCJtaW5NZW1UeXBlNDIiLCJtYXhNZW1UeXBlNDIiLCJtaW5NZW1UeXBlMSIsIm1heE1lbVR5cGUxIiwibnVtYmVyT2ZHbHlwaHMiLCJnbHlwaE5hbWVJbmRleCIsIm5hbWVzIiwib2Zmc2V0cyIsIm1hcCIsIiQ1MjAyYmQ5ZDlhZDhlYWFjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJjb250cm9sVmFsdWVzIiwiJDVjMGYzN2NhNWZmYjE4NTAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsImluc3RydWN0aW9ucyIsIiQyYjJiMjYwOTAyYjFjNTdlJHZhciRsb2NhIiwiX3Byb2Nlc3NlZCIsIiQyYjJiMjYwOTAyYjFjNTdlJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCIkN2FmYjg3OGM3YmVhNGY2NiRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiY29udHJvbFZhbHVlUHJvZ3JhbSIsIiQ2YzkyYjYzNzFiY2U4YmQ5JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCIkNDNlOTgyMWVmMzcxN2VlYyRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiZ2V0Q0ZGVmVyc2lvbiIsImhkclNpemUiLCJyZWFkVUludDMyQkUiLCJyZWFkVUludDE2QkUiLCJvZmZTaXplIiwicmVhZFVJbnQ4Iiwib2Zmc2V0VHlwZSIsInBvcyIsInJldCIsInN0YXJ0UG9zIiwic3RhcnQiLCJlbmQiLCJvZmZzZXQiLCJhcnIiLCJpdGVtIiwiZW5jb2RlIiwid3JpdGVVSW50MTZCRSIsInNpemVzIiwid3JpdGVVSW50OCIsIml0ZW0xIiwiY29uc3RydWN0b3IiLCIkYzJkMjhlOTI3MDhmOTlkYSR2YXIkRkxPQVRfRU9GIiwiJGMyZDI4ZTkyNzA4Zjk5ZGEkdmFyJEZMT0FUX0xPT0tVUCIsIiRjMmQyOGU5MjcwOGY5OWRhJHZhciRGTE9BVF9FTkNPREVfTE9PS1VQIiwiJGMyZDI4ZTkyNzA4Zjk5ZGEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyQkUiLCJzdHIiLCJiIiwibjEiLCJuMiIsInBhcnNlRmxvYXQiLCJmb3JjZUxhcmdlIiwiY2VpbCIsIndyaXRlSW50MzJCRSIsImMxIiwiYzIiLCJ3cml0ZUludDE2QkUiLCIkNjFhYTU0OWYxNmQ1OGI5YiRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiZGVjb2RlT3BlcmFuZHMiLCJvcGVyYW5kcyIsIm9wIiwiZW5jb2RlT3BlcmFuZHMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3N0YXJ0T2Zmc2V0IiwiZmllbGRzIiwiZmllbGQiLCJkaWN0IiwiaW5jbHVkZVBvaW50ZXJzIiwicG9pbnRlclNpemUiLCJzdGFydE9mZnNldCIsImxlbiIsImsiLCJwb2ludGVycyIsInBvaW50ZXJPZmZzZXQiLCJvcHMiLCJvcDEiLCJwdHIiLCIkMGUzNGE0M2QwNWJkZTgyYyRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiJDBlMzRhNDNkMDViZGU4MmMkdmFyJFB0ciIsIm9wdGlvbnMiLCJ2YWx1ZU9mIiwiJDZkNTlkYjJlMjljYzc3YjMkdmFyJENGRkJsZW5kT3AiLCJudW1CbGVuZHMiLCJwb3AiLCIkNmQ1OWRiMmUyOWNjNzdiMyRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiJDIyOTIyNGFlYzQzNzgzYzUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIiRiYzA0MzNkOWI3ZTQxZjVmJGV4cG9ydCRkZWUwMDI3MDYwZmExM2JkIiwiJGJjMDQzM2Q5YjdlNDFmNWYkZXhwb3J0JDRmNThmNDk3ZTE0YTUzYzMiLCIkZWY2NThmNWM5YTE0ODhiMiRleHBvcnQkYzMzYjUwMzM2YzIzNGYxNiIsIiRlZjY1OGY1YzlhMTQ4OGIyJGV4cG9ydCQzZWQwZjllMWZlZThkNDg5IiwiJGVmNjU4ZjVjOWExNDg4YjIkZXhwb3J0JGRjMjhiZTExMTM5ZDQxMjAiLCIkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTGFuZ1N5c1RhYmxlIiwicmVxRmVhdHVyZUluZGV4IiwiZmVhdHVyZUNvdW50IiwiZmVhdHVyZUluZGV4ZXMiLCIkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTGFuZ1N5c1JlY29yZCIsImxhbmdTeXMiLCIkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkU2NyaXB0IiwiZGVmYXVsdExhbmdTeXMiLCJsYW5nU3lzUmVjb3JkcyIsIiQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRTY3JpcHRSZWNvcmQiLCJzY3JpcHQiLCIkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkM2UxNWZjMDVjZTg2NDIyOSIsIiQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRGZWF0dXJlUGFyYW1zIiwiJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDZlOTFjZjc2MTYzMzNkNSIsImZlYXR1cmVQYXJhbXMiLCJsb29rdXBDb3VudCIsImxvb2t1cExpc3RJbmRleGVzIiwiJDdjYmJlNGUyNGVmM2NiNzUkdmFyJEZlYXR1cmVSZWNvcmQiLCJmZWF0dXJlIiwiJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JGFhMTgxMzBkZWY0YjZjYjQiLCIkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkTG9va3VwRmxhZ3MiLCJtYXJrQXR0YWNobWVudFR5cGUiLCIkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkZGYwMDA4YzZmZjJkYTIyYSIsIlN1YlRhYmxlIiwiTG9va3VwIiwibG9va3VwVHlwZSIsInN1YlRhYmxlQ291bnQiLCJzdWJUYWJsZXMiLCJtYXJrRmlsdGVyaW5nU2V0IiwidXNlTWFya0ZpbHRlcmluZ1NldCIsIiQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRSYW5nZVJlY29yZCIsInN0YXJ0Q292ZXJhZ2VJbmRleCIsIiQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQxNzYwOGMzZjgxYTYxMTEiLCJnbHlwaENvdW50IiwiZ2x5cGhzIiwicmFuZ2VDb3VudCIsInJhbmdlUmVjb3JkcyIsIiQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRDbGFzc1JhbmdlUmVjb3JkIiwiY2xhc3MiLCIkN2NiYmU0ZTI0ZWYzY2I3NSRleHBvcnQkODQzZDU1MWZiYmFmZWY3MSIsInN0YXJ0R2x5cGgiLCJjbGFzc1ZhbHVlQXJyYXkiLCJjbGFzc1JhbmdlQ291bnQiLCJjbGFzc1JhbmdlUmVjb3JkIiwiJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDgyMTVkMTRhNjNkOWZiMTAiLCJkZWx0YUZvcm1hdCIsIiQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRMb29rdXBSZWNvcmQiLCJzZXF1ZW5jZUluZGV4IiwibG9va3VwTGlzdEluZGV4IiwiJDdjYmJlNGUyNGVmM2NiNzUkdmFyJFJ1bGUiLCJpbnB1dCIsImxvb2t1cFJlY29yZHMiLCIkN2NiYmU0ZTI0ZWYzY2I3NSR2YXIkUnVsZVNldCIsIiQ3Y2JiZTRlMjRlZjNjYjc1JHZhciRDbGFzc1J1bGUiLCJjbGFzc2VzIiwiJDdjYmJlNGUyNGVmM2NiNzUkdmFyJENsYXNzU2V0IiwiJDdjYmJlNGUyNGVmM2NiNzUkZXhwb3J0JDg0MTg1OGI4OTJjZTFmNGMiLCJjb3ZlcmFnZSIsInJ1bGVTZXRDb3VudCIsInJ1bGVTZXRzIiwiY2xhc3NEZWYiLCJjbGFzc1NldENudCIsImNsYXNzU2V0IiwiY292ZXJhZ2VzIiwiJDdjYmJlNGUyNGVmM2NiNzUkdmFyJENoYWluUnVsZSIsImJhY2t0cmFja0dseXBoQ291bnQiLCJiYWNrdHJhY2siLCJpbnB1dEdseXBoQ291bnQiLCJsb29rYWhlYWRHbHlwaENvdW50IiwibG9va2FoZWFkIiwiJDdjYmJlNGUyNGVmM2NiNzUkdmFyJENoYWluUnVsZVNldCIsIiQ3Y2JiZTRlMjRlZjNjYjc1JGV4cG9ydCQ1ZTZkMDllNjg2MTE2MmY2IiwiY2hhaW5Db3VudCIsImNoYWluUnVsZVNldHMiLCJiYWNrdHJhY2tDbGFzc0RlZiIsImlucHV0Q2xhc3NEZWYiLCJsb29rYWhlYWRDbGFzc0RlZiIsImNoYWluQ2xhc3NTZXQiLCJiYWNrdHJhY2tDb3ZlcmFnZSIsImlucHV0Q292ZXJhZ2UiLCJsb29rYWhlYWRDb3ZlcmFnZSIsIiQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGMkRPVDE0IiwiJDFhNDdiMGM0NWMxYzIyZmUkdmFyJFJlZ2lvbkF4aXNDb29yZGluYXRlcyIsInN0YXJ0Q29vcmQiLCJwZWFrQ29vcmQiLCJlbmRDb29yZCIsIiQxYTQ3YjBjNDVjMWMyMmZlJHZhciRWYXJpYXRpb25SZWdpb25MaXN0IiwiYXhpc0NvdW50IiwicmVnaW9uQ291bnQiLCJ2YXJpYXRpb25SZWdpb25zIiwiJDFhNDdiMGM0NWMxYzIyZmUkdmFyJERlbHRhU2V0Iiwic2hvcnREZWx0YXMiLCJzaG9ydERlbHRhQ291bnQiLCJyZWdpb25EZWx0YXMiLCJyZWdpb25JbmRleENvdW50IiwiZGVsdGFzIiwiY29uY2F0IiwiJDFhNDdiMGM0NWMxYzIyZmUkdmFyJEl0ZW1WYXJpYXRpb25EYXRhIiwiaXRlbUNvdW50IiwicmVnaW9uSW5kZXhlcyIsImRlbHRhU2V0cyIsIiQxYTQ3YjBjNDVjMWMyMmZlJGV4cG9ydCRmZTFiMTIyYTI3MTBmMjQxIiwidmFyaWF0aW9uUmVnaW9uTGlzdCIsInZhcmlhdGlvbkRhdGFDb3VudCIsIml0ZW1WYXJpYXRpb25EYXRhIiwiJDFhNDdiMGM0NWMxYzIyZmUkdmFyJENvbmRpdGlvblRhYmxlIiwiYXhpc0luZGV4IiwiZmlsdGVyUmFuZ2VNaW5WYWx1ZSIsImZpbHRlclJhbmdlTWF4VmFsdWUiLCIkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkQ29uZGl0aW9uU2V0IiwiY29uZGl0aW9uQ291bnQiLCJjb25kaXRpb25UYWJsZSIsIiQxYTQ3YjBjNDVjMWMyMmZlJHZhciRGZWF0dXJlVGFibGVTdWJzdGl0dXRpb25SZWNvcmQiLCJmZWF0dXJlSW5kZXgiLCJhbHRlcm5hdGVGZWF0dXJlVGFibGUiLCIkMWE0N2IwYzQ1YzFjMjJmZSR2YXIkRmVhdHVyZVRhYmxlU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uQ291bnQiLCJzdWJzdGl0dXRpb25zIiwiJDFhNDdiMGM0NWMxYzIyZmUkdmFyJEZlYXR1cmVWYXJpYXRpb25SZWNvcmQiLCJjb25kaXRpb25TZXQiLCJmZWF0dXJlVGFibGVTdWJzdGl0dXRpb24iLCIkMWE0N2IwYzQ1YzFjMjJmZSRleHBvcnQkNDQxYjcwYjc5NzFkZDQxOSIsIm1ham9yVmVyc2lvbiIsIm1pbm9yVmVyc2lvbiIsImZlYXR1cmVWYXJpYXRpb25SZWNvcmRDb3VudCIsImZlYXR1cmVWYXJpYXRpb25SZWNvcmRzIiwiJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJFByZWRlZmluZWRPcCIsInByZWRlZmluZWRPcHMiLCJpbmRleCIsIiRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkZFbmNvZGluZ1ZlcnNpb24iLCIkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkUmFuZ2UxIiwiZmlyc3QiLCJuTGVmdCIsIiRiODRmZDNkZDlkOGVkZGIyJHZhciRSYW5nZTIiLCIkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGQ3VzdG9tRW5jb2RpbmciLCJuQ29kZXMiLCJjb2RlcyIsIm5SYW5nZXMiLCJyYW5nZXMiLCIkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGRW5jb2RpbmciLCIkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkUmFuZ2VBcnJheSIsInJhbmdlIiwiJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRkN1c3RvbUNoYXJzZXQiLCJDaGFyU3RyaW5ncyIsIiRiODRmZDNkZDlkOGVkZGIyJHZhciRDRkZDaGFyc2V0IiwiJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJEZEUmFuZ2UzIiwiZmQiLCIkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkRkRSYW5nZTQiLCIkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkRkRTZWxlY3QiLCJmZHMiLCJzZW50aW5lbCIsIiRiODRmZDNkZDlkOGVkZGIyJHZhciRwdHIiLCIkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGUHJpdmF0ZU9wIiwiJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJEZvbnREaWN0IiwiJGI4NGZkM2RkOWQ4ZWRkYjIkdmFyJENGRlRvcERpY3QiLCIkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkVmFyaWF0aW9uU3RvcmUiLCJpdGVtVmFyaWF0aW9uU3RvcmUiLCIkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGMlRvcERpY3QiLCIkYjg0ZmQzZGQ5ZDhlZGRiMiR2YXIkQ0ZGVG9wIiwibmFtZUluZGV4IiwidG9wRGljdEluZGV4Iiwic3RyaW5nSW5kZXgiLCJnbG9iYWxTdWJySW5kZXgiLCJ0b3BEaWN0IiwiJGI4NGZkM2RkOWQ4ZWRkYjIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIiQ4MjJhYzBkNTg5ZTRlMjM3JHZhciRDRkZGb250IiwidG9wIiwiaXNDSURGb250IiwiUk9TIiwic2lkIiwiZnVsbE5hbWUiLCJGdWxsTmFtZSIsImZhbWlseU5hbWUiLCJGYW1pbHlOYW1lIiwiZ2V0Q2hhclN0cmluZyIsImdseXBoIiwicmVhZEJ1ZmZlciIsImdldEdseXBoTmFtZSIsImdpZCIsImNoYXJzZXQiLCJmZEZvckdseXBoIiwiRkRTZWxlY3QiLCJsb3ciLCJoaWdoIiwibWlkIiwicHJpdmF0ZURpY3RGb3JHbHlwaCIsIkZEQXJyYXkiLCJQcml2YXRlIiwiJDgyMmFjMGQ1ODllNGUyMzckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIiQyYmJmMmJjMWNlMzdjZDhmJHZhciRWZXJ0aWNhbE9yaWdpbiIsImdseXBoSW5kZXgiLCJ2ZXJ0T3JpZ2luWSIsIiQyYmJmMmJjMWNlMzdjZDhmJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJkZWZhdWx0VmVydE9yaWdpblkiLCJudW1WZXJ0T3JpZ2luWU1ldHJpY3MiLCIkMDk0MTYxOGRjMjJhOTQ2ZCRleHBvcnQkMTZiMjI3Y2IxNWQ3MTZhMCIsImhlaWdodCIsIndpZHRoIiwiaG9yaUJlYXJpbmdYIiwiaG9yaUJlYXJpbmdZIiwiaG9yaUFkdmFuY2UiLCJ2ZXJ0QmVhcmluZ1giLCJ2ZXJ0QmVhcmluZ1kiLCJ2ZXJ0QWR2YW5jZSIsIiQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCQ2MmM1M2U3NWY2OWJmZTEyIiwiYmVhcmluZ1giLCJiZWFyaW5nWSIsIiQwOTQxNjE4ZGMyMmE5NDZkJHZhciRFQkRUQ29tcG9uZW50IiwieE9mZnNldCIsInlPZmZzZXQiLCIkMDk0MTYxOGRjMjJhOTQ2ZCR2YXIkQnl0ZUFsaWduZWQiLCIkMDk0MTYxOGRjMjJhOTQ2ZCR2YXIkQml0QWxpZ25lZCIsIiQwOTQxNjE4ZGMyMmE5NDZkJGV4cG9ydCRmMWY1ZGRlYjIwZDE0ZiIsImRhdGEiLCJwYWQiLCJudW1Db21wb25lbnRzIiwiY29tcG9uZW50cyIsImRhdGFMZW4iLCIkOTkxMWM0YzcyMDFjMTNkZSR2YXIkU0JpdExpbmVNZXRyaWNzIiwiYXNjZW5kZXIiLCJkZXNjZW5kZXIiLCJ3aWR0aE1heCIsImNhcmV0U2xvcGVOdW1lcmF0b3IiLCJjYXJldFNsb3BlRGVub21pbmF0b3IiLCJtaW5PcmlnaW5TQiIsIm1pbkFkdmFuY2VTQiIsIm1heEJlZm9yZUJMIiwibWluQWZ0ZXJCTCIsIiQ5OTExYzRjNzIwMWMxM2RlJHZhciRDb2RlT2Zmc2V0UGFpciIsImdseXBoQ29kZSIsIiQ5OTExYzRjNzIwMWMxM2RlJHZhciRJbmRleFN1YnRhYmxlIiwiaW1hZ2VGb3JtYXQiLCJpbWFnZURhdGFPZmZzZXQiLCJvZmZzZXRBcnJheSIsImxhc3RHbHlwaEluZGV4IiwiZmlyc3RHbHlwaEluZGV4IiwiaW1hZ2VTaXplIiwiYmlnTWV0cmljcyIsImdseXBoQXJyYXkiLCJnbHlwaENvZGVBcnJheSIsIiQ5OTExYzRjNzIwMWMxM2RlJHZhciRJbmRleFN1YnRhYmxlQXJyYXkiLCJzdWJ0YWJsZSIsIiQ5OTExYzRjNzIwMWMxM2RlJHZhciRCaXRtYXBTaXplVGFibGUiLCJpbmRleFN1YlRhYmxlQXJyYXkiLCJpbmRleFRhYmxlc1NpemUiLCJudW1iZXJPZkluZGV4U3ViVGFibGVzIiwiY29sb3JSZWYiLCJob3JpIiwidmVydCIsInN0YXJ0R2x5cGhJbmRleCIsImVuZEdseXBoSW5kZXgiLCJwcGVtWCIsInBwZW1ZIiwiYml0RGVwdGgiLCIkOTkxMWM0YzcyMDFjMTNkZSRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwibnVtU2l6ZXMiLCIkYWJiODQ3MDUxZWZkNTFiMSR2YXIkSW1hZ2VUYWJsZSIsInBwZW0iLCJyZXNvbHV0aW9uIiwiaW1hZ2VPZmZzZXRzIiwiJGFiYjg0NzA1MWVmZDUxYjEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIm51bUltZ1RhYmxlcyIsImltYWdlVGFibGVzIiwiJGViNjI5MTg4ZjNkZmVmZGQkdmFyJExheWVyUmVjb3JkIiwicGFsZXR0ZUluZGV4IiwiJGViNjI5MTg4ZjNkZmVmZGQkdmFyJEJhc2VHbHlwaFJlY29yZCIsImZpcnN0TGF5ZXJJbmRleCIsIm51bUxheWVycyIsIiRlYjYyOTE4OGYzZGZlZmRkJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJudW1CYXNlR2x5cGhSZWNvcmRzIiwiYmFzZUdseXBoUmVjb3JkIiwibGF5ZXJSZWNvcmRzIiwibnVtTGF5ZXJSZWNvcmRzIiwiJDA4NzM0YjhlN2RjNjQ1ODckdmFyJENvbG9yUmVjb3JkIiwiYmx1ZSIsImdyZWVuIiwicmVkIiwiYWxwaGEiLCIkMDg3MzRiOGU3ZGM2NDU4NyRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwibnVtUGFsZXR0ZUVudHJpZXMiLCJudW1QYWxldHRlcyIsIm51bUNvbG9yUmVjb3JkcyIsImNvbG9yUmVjb3JkcyIsImNvbG9yUmVjb3JkSW5kaWNlcyIsIm9mZnNldFBhbGV0dGVUeXBlQXJyYXkiLCJvZmZzZXRQYWxldHRlTGFiZWxBcnJheSIsIm9mZnNldFBhbGV0dGVFbnRyeUxhYmVsQXJyYXkiLCIkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZUNvb3JkIiwiY29vcmRpbmF0ZSIsInJlZmVyZW5jZUdseXBoIiwiYmFzZUNvb3JkUG9pbnQiLCJkZXZpY2VUYWJsZSIsIiQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlVmFsdWVzIiwiZGVmYXVsdEluZGV4IiwiYmFzZUNvb3JkQ291bnQiLCJiYXNlQ29vcmRzIiwiJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEZlYXRNaW5NYXhSZWNvcmQiLCJtaW5Db29yZCIsIm1heENvb3JkIiwiJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJE1pbk1heCIsImZlYXRNaW5NYXhDb3VudCIsImZlYXRNaW5NYXhSZWNvcmRzIiwiJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VMYW5nU3lzUmVjb3JkIiwibWluTWF4IiwiJDQ5N2NlZjQxMWQ4ODRlMzQkdmFyJEJhc2VTY3JpcHQiLCJiYXNlVmFsdWVzIiwiZGVmYXVsdE1pbk1heCIsImJhc2VMYW5nU3lzQ291bnQiLCJiYXNlTGFuZ1N5c1JlY29yZHMiLCIkNDk3Y2VmNDExZDg4NGUzNCR2YXIkQmFzZVNjcmlwdFJlY29yZCIsIiQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlU2NyaXB0TGlzdCIsIiQ0OTdjZWY0MTFkODg0ZTM0JHZhciRCYXNlVGFnTGlzdCIsIiQ0OTdjZWY0MTFkODg0ZTM0JHZhciRBeGlzIiwiYmFzZVRhZ0xpc3QiLCJiYXNlU2NyaXB0TGlzdCIsIiQ0OTdjZWY0MTFkODg0ZTM0JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJob3JpekF4aXMiLCJ2ZXJ0QXhpcyIsIiRjZjVmMzNjNjNlZjIwOWU2JHZhciRBdHRhY2hQb2ludCIsIiRjZjVmMzNjNjNlZjIwOWU2JHZhciRBdHRhY2hMaXN0IiwiYXR0YWNoUG9pbnRzIiwiJGNmNWYzM2M2M2VmMjA5ZTYkdmFyJENhcmV0VmFsdWUiLCJjYXJldFZhbHVlUG9pbnQiLCIkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkTGlnR2x5cGgiLCIkY2Y1ZjMzYzYzZWYyMDllNiR2YXIkTGlnQ2FyZXRMaXN0IiwibGlnR2x5cGhDb3VudCIsImxpZ0dseXBocyIsIiRjZjVmMzNjNjNlZjIwOWU2JHZhciRNYXJrR2x5cGhTZXRzRGVmIiwibWFya1NldFRhYmxlRm9ybWF0IiwibWFya1NldENvdW50IiwiJGNmNWYzM2M2M2VmMjA5ZTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsImdseXBoQ2xhc3NEZWYiLCJhdHRhY2hMaXN0IiwibGlnQ2FyZXRMaXN0IiwibWFya0F0dGFjaENsYXNzRGVmIiwibWFya0dseXBoU2V0c0RlZiIsIiQ0N2UwZThlZjUxNWQ5OTAzJHZhciRWYWx1ZUZvcm1hdCIsIiQ0N2UwZThlZjUxNWQ5OTAzJHZhciR0eXBlcyIsInhQbGFjZW1lbnQiLCJ5UGxhY2VtZW50IiwieEFkdmFuY2UiLCJ5QWR2YW5jZSIsInhQbGFEZXZpY2UiLCJyZWwiLCJ5UGxhRGV2aWNlIiwieEFkdkRldmljZSIsInlBZHZEZXZpY2UiLCIkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkVmFsdWVSZWNvcmQiLCJidWlsZFN0cnVjdCIsInN0cnVjdCIsIiQ0N2UwZThlZjUxNWQ5OTAzJHZhciRQYWlyVmFsdWVSZWNvcmQiLCJzZWNvbmRHbHlwaCIsInZhbHVlMSIsInZhbHVlMiIsIiQ0N2UwZThlZjUxNWQ5OTAzJHZhciRQYWlyU2V0IiwiJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJENsYXNzMlJlY29yZCIsIiQ0N2UwZThlZjUxNWQ5OTAzJHZhciRBbmNob3IiLCJ4Q29vcmRpbmF0ZSIsInlDb29yZGluYXRlIiwiYW5jaG9yUG9pbnQiLCJ4RGV2aWNlVGFibGUiLCJ5RGV2aWNlVGFibGUiLCIkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkRW50cnlFeGl0UmVjb3JkIiwiZW50cnlBbmNob3IiLCJleGl0QW5jaG9yIiwiJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJE1hcmtSZWNvcmQiLCJtYXJrQW5jaG9yIiwiJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJE1hcmtBcnJheSIsIiQ0N2UwZThlZjUxNWQ5OTAzJHZhciRCYXNlUmVjb3JkIiwiY2xhc3NDb3VudCIsIiQ0N2UwZThlZjUxNWQ5OTAzJHZhciRCYXNlQXJyYXkiLCIkNDdlMGU4ZWY1MTVkOTkwMyR2YXIkQ29tcG9uZW50UmVjb3JkIiwiJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJExpZ2F0dXJlQXR0YWNoIiwiJDQ3ZTBlOGVmNTE1ZDk5MDMkdmFyJExpZ2F0dXJlQXJyYXkiLCIkNDdlMGU4ZWY1MTVkOTkwMyRleHBvcnQkNzNhOGNmYjE5Y2Q0M2EwZiIsInZhbHVlRm9ybWF0IiwidmFsdWVDb3VudCIsInZhbHVlcyIsInZhbHVlRm9ybWF0MSIsInZhbHVlRm9ybWF0MiIsInBhaXJTZXRDb3VudCIsInBhaXJTZXRzIiwiY2xhc3NEZWYxIiwiY2xhc3NEZWYyIiwiY2xhc3MxQ291bnQiLCJjbGFzczJDb3VudCIsImNsYXNzUmVjb3JkcyIsImVudHJ5RXhpdENvdW50IiwiZW50cnlFeGl0UmVjb3JkcyIsIm1hcmtDb3ZlcmFnZSIsImJhc2VDb3ZlcmFnZSIsIm1hcmtBcnJheSIsImJhc2VBcnJheSIsImxpZ2F0dXJlQ292ZXJhZ2UiLCJsaWdhdHVyZUFycmF5IiwibWFyazFDb3ZlcmFnZSIsIm1hcmsyQ292ZXJhZ2UiLCJtYXJrMUFycmF5IiwibWFyazJBcnJheSIsInBvc0Zvcm1hdCIsImV4dGVuc2lvbiIsIiQ0N2UwZThlZjUxNWQ5OTAzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJzY3JpcHRMaXN0IiwiZmVhdHVyZUxpc3QiLCJsb29rdXBMaXN0IiwiZmVhdHVyZVZhcmlhdGlvbnMiLCIkZDNmNDQyMDY0YWY2NmUwNiR2YXIkU2VxdWVuY2UiLCIkZDNmNDQyMDY0YWY2NmUwNiR2YXIkQWx0ZXJuYXRlU2V0IiwiJGQzZjQ0MjA2NGFmNjZlMDYkdmFyJExpZ2F0dXJlIiwiY29tcENvdW50IiwiJGQzZjQ0MjA2NGFmNjZlMDYkdmFyJExpZ2F0dXJlU2V0IiwiJGQzZjQ0MjA2NGFmNjZlMDYkdmFyJEdTVUJMb29rdXAiLCJkZWx0YUdseXBoSUQiLCJzdWJzdGl0dXRlIiwic3Vic3RGb3JtYXQiLCJzZXF1ZW5jZXMiLCJhbHRlcm5hdGVTZXQiLCJsaWdhdHVyZVNldHMiLCJzdWJzdGl0dXRlcyIsIiRkM2Y0NDIwNjRhZjY2ZTA2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCIkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZkdTVUJNb2RMaXN0IiwiJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZQcmlvcml0eSIsInNocmlua2FnZUVuYWJsZUdTVUIiLCJzaHJpbmthZ2VEaXNhYmxlR1NVQiIsInNocmlua2FnZUVuYWJsZUdQT1MiLCJzaHJpbmthZ2VEaXNhYmxlR1BPUyIsInNocmlua2FnZUpzdGZNYXgiLCJleHRlbnNpb25FbmFibGVHU1VCIiwiZXh0ZW5zaW9uRGlzYWJsZUdTVUIiLCJleHRlbnNpb25FbmFibGVHUE9TIiwiZXh0ZW5zaW9uRGlzYWJsZUdQT1MiLCJleHRlbnNpb25Kc3RmTWF4IiwiJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZMYW5nU3lzIiwiJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZMYW5nU3lzUmVjb3JkIiwianN0ZkxhbmdTeXMiLCIkNzFjZmIzYzQ3NjdmYmQwYyR2YXIkSnN0ZlNjcmlwdCIsImV4dGVuZGVyR2x5cGhzIiwibGFuZ1N5c0NvdW50IiwiJDcxY2ZiM2M0NzY3ZmJkMGMkdmFyJEpzdGZTY3JpcHRSZWNvcmQiLCIkNzFjZmIzYzQ3NjdmYmQwYyRleHBvcnQkMmUyYmNkODczOWFlMDM5Iiwic2NyaXB0Q291bnQiLCIkZDA1OWE2YmQyZDNiNWI2MyR2YXIkVmFyaWFibGVTaXplTnVtYmVyIiwicmVhZFVJbnQyNEJFIiwiX3NpemUiLCIkZDA1OWE2YmQyZDNiNWI2MyR2YXIkTWFwRGF0YUVudHJ5IiwiZW50cnkiLCJlbnRyeUZvcm1hdCIsIm91dGVySW5kZXgiLCJpbm5lckluZGV4IiwiJGQwNTlhNmJkMmQzYjViNjMkdmFyJERlbHRhU2V0SW5kZXhNYXAiLCJtYXBDb3VudCIsIm1hcERhdGEiLCIkZDA1OWE2YmQyZDNiNWI2MyRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiYWR2YW5jZVdpZHRoTWFwcGluZyIsIkxTQk1hcHBpbmciLCJSU0JNYXBwaW5nIiwiJGRjZWVjYTNlMTk3N2NlMzAkdmFyJFNpZ25hdHVyZSIsIiRkY2VlY2EzZTE5NzdjZTMwJHZhciRTaWduYXR1cmVCbG9jayIsImNiU2lnbmF0dXJlIiwic2lnbmF0dXJlIiwiJGRjZWVjYTNlMTk3N2NlMzAkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsInVsVmVyc2lvbiIsInVzTnVtU2lncyIsInVzRmxhZyIsInNpZ25hdHVyZXMiLCJzaWduYXR1cmVCbG9ja3MiLCIkOGFjZDc0MGE5NDM1YWFkMCR2YXIkR2FzcFJhbmdlIiwicmFuZ2VNYXhQUEVNIiwicmFuZ2VHYXNwQmVoYXZpb3IiLCIkOGFjZDc0MGE5NDM1YWFkMCRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwibnVtUmFuZ2VzIiwiZ2FzcFJhbmdlcyIsIiRiNWYzODAyNDNjMzRkNmEwJHZhciREZXZpY2VSZWNvcmQiLCJwaXhlbFNpemUiLCJtYXhpbXVtV2lkdGgiLCJ3aWR0aHMiLCIkYjVmMzgwMjQzYzM0ZDZhMCRleHBvcnQkMmUyYmNkODczOWFlMDM5Iiwic2l6ZURldmljZVJlY29yZCIsIiRjYTJkZjEyNTY5NjZlMzEzJHZhciRLZXJuUGFpciIsImxlZnQiLCJyaWdodCIsIiRjYTJkZjEyNTY5NjZlMzEzJHZhciRDbGFzc1RhYmxlIiwiZmlyc3RHbHlwaCIsIm5HbHlwaHMiLCIkY2EyZGYxMjU2OTY2ZTMxMyR2YXIkS2VybjJBcnJheSIsIm9mZiIsImxlZnRUYWJsZSIsInJvd1dpZHRoIiwiJGNhMmRmMTI1Njk2NmUzMTMkdmFyJEtlcm5TdWJ0YWJsZSIsIm5QYWlycyIsInBhaXJzIiwicmlnaHRUYWJsZSIsImFycmF5Iiwia2VyblZhbHVlQ291bnQiLCJsZWZ0Q2xhc3NDb3VudCIsInJpZ2h0Q2xhc3NDb3VudCIsImtlcm5WYWx1ZSIsImxlZnRDbGFzcyIsInJpZ2h0Q2xhc3MiLCJrZXJuSW5kZXgiLCIkY2EyZGYxMjU2OTY2ZTMxMyR2YXIkS2VyblRhYmxlIiwic3ViVmVyc2lvbiIsInBhZGRpbmciLCJ0dXBsZUluZGV4IiwiJGNhMmRmMTI1Njk2NmUzMTMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIm5UYWJsZXMiLCIkN2E5ZjkyYjBjNDZlYmUzMyRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwieVBlbHMiLCIkMmIyY2NjNDE5ZDE1MjYzMSRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiZm9udE51bWJlciIsInBpdGNoIiwic3R5bGUiLCJ0eXBlRmFtaWx5Iiwic3ltYm9sU2V0IiwidHlwZWZhY2UiLCJjaGFyYWN0ZXJDb21wbGVtZW50IiwiZmlsZU5hbWUiLCJzdHJva2VXZWlnaHQiLCJ3aWR0aFR5cGUiLCJzZXJpZlN0eWxlIiwiJGNhNWI0MGI5YmNkYTljOWIkdmFyJFJhdGlvIiwiYkNoYXJTZXQiLCJ4UmF0aW8iLCJ5U3RhcnRSYXRpbyIsInlFbmRSYXRpbyIsIiRjYTViNDBiOWJjZGE5YzliJHZhciR2VGFibGUiLCJ5UGVsSGVpZ2h0IiwiJGNhNWI0MGI5YmNkYTljOWIkdmFyJFZkbXhHcm91cCIsInJlY3MiLCJzdGFydHN6IiwiZW5kc3oiLCJlbnRyaWVzIiwiJGNhNWI0MGI5YmNkYTljOWIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIm51bVJlY3MiLCJudW1SYXRpb3MiLCJyYXRpb1JhbmdlcyIsIiQ2OTUzMGEzYzQwNzU1YWYwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJhZHZhbmNlSGVpZ2h0TWF4IiwibWluVG9wU2lkZUJlYXJpbmciLCJtaW5Cb3R0b21TaWRlQmVhcmluZyIsInlNYXhFeHRlbnQiLCIkMzQ0MDczZGQyNzBmMGU2MiR2YXIkVm10eEVudHJ5IiwiJDM0NDA3M2RkMjcwZjBlNjIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsInZoZWEiLCIkMzc5M2I3ODE5MThjZmNlZCR2YXIkc2hvcnRGcmFjIiwiJDM3OTNiNzgxOTE4Y2ZjZWQkdmFyJENvcnJlc3BvbmRlbmNlIiwiZnJvbUNvb3JkIiwidG9Db29yZCIsIiQzNzkzYjc4MTkxOGNmY2VkJHZhciRTZWdtZW50IiwicGFpckNvdW50IiwiY29ycmVzcG9uZGVuY2UiLCIkMzc5M2I3ODE5MThjZmNlZCRleHBvcnQkMmUyYmNkODczOWFlMDM5Iiwic2VnbWVudCIsIiQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJHZhciRVbmJvdW5kZWRBcnJheUFjY2Vzc29yIiwiZ2V0SXRlbSIsIl9pdGVtcyIsImJhc2UiLCJpbnNwZWN0IiwibmFtZSIsIiQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCRjNWFmMWVlYmM4ODJlMzlhIiwiJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDgzNTFmOGMyYWUyZjEwM2MiLCJWYWx1ZVR5cGUiLCJTaGFkb3ciLCJCaW5hcnlTZWFyY2hIZWFkZXIiLCJ1bml0U2l6ZSIsIm5Vbml0cyIsIkxvb2t1cFNlZ21lbnRTaW5nbGUiLCJsYXN0R2x5cGgiLCJMb29rdXBTZWdtZW50QXJyYXkiLCJMb29rdXBTaW5nbGUiLCJiaW5hcnlTZWFyY2hIZWFkZXIiLCJzZWdtZW50cyIsIiQ2Y2I3ZGQ1ZjQ3ZDgyNTgwJGV4cG9ydCQ3OWY3ZDkzZDc5MDkzNGJhIiwiZW50cnlEYXRhIiwiYXNzaWduIiwibmV3U3RhdGUiLCJFbnRyeSIsIlN0YXRlQXJyYXkiLCJuQ2xhc3NlcyIsIlN0YXRlSGVhZGVyIiwiY2xhc3NUYWJsZSIsInN0YXRlQXJyYXkiLCJlbnRyeVRhYmxlIiwiJDZjYjdkZDVmNDdkODI1ODAkZXhwb3J0JDEwNTAyNzQyNTE5OWNjNTEiLCJDbGFzc0xvb2t1cFRhYmxlIiwibmV3U3RhdGVPZmZzZXQiLCJTdGF0ZUhlYWRlcjEiLCIkNmEzNzQ2ZThjNzA4ZjVhMyR2YXIkQnNsblN1YnRhYmxlIiwibWFwcGluZ0RhdGEiLCJzdGFuZGFyZEdseXBoIiwiY29udHJvbFBvaW50cyIsIiQ2YTM3NDZlOGM3MDhmNWEzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJkZWZhdWx0QmFzZWxpbmUiLCIkZDBjNzZmYWM2MTdiMzA4YSR2YXIkU2V0dGluZyIsInNldHRpbmciLCJmb250RmVhdHVyZXMiLCIkZDBjNzZmYWM2MTdiMzA4YSR2YXIkRmVhdHVyZU5hbWUiLCJuU2V0dGluZ3MiLCJzZXR0aW5nVGFibGUiLCJmZWF0dXJlRmxhZ3MiLCJkZWZhdWx0U2V0dGluZyIsIiRkMGM3NmZhYzYxN2IzMDhhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJmZWF0dXJlTmFtZUNvdW50IiwicmVzZXJ2ZWQxIiwicmVzZXJ2ZWQyIiwiZmVhdHVyZU5hbWVzIiwiJGU4M2ZkMDY1ZjAwZmNkMDEkdmFyJEF4aXMiLCJheGlzVGFnIiwibWluVmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJtYXhWYWx1ZSIsIiRlODNmZDA2NWYwMGZjZDAxJHZhciRJbnN0YW5jZSIsImNvb3JkIiwicG9zdHNjcmlwdE5hbWVJRCIsImluc3RhbmNlU2l6ZSIsIiRlODNmZDA2NWYwMGZjZDAxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJvZmZzZXRUb0RhdGEiLCJjb3VudFNpemVQYWlycyIsImF4aXNTaXplIiwiaW5zdGFuY2VDb3VudCIsImF4aXMiLCJpbnN0YW5jZSIsIiRkYmUzM2M4ZDNhN2YxMzFjJHZhciRzaG9ydEZyYWMiLCIkZGJlMzNjOGQzYTdmMTMxYyR2YXIkT2Zmc2V0IiwiJGRiZTMzYzhkM2E3ZjEzMWMkdmFyJGd2YXIiLCJnbG9iYWxDb29yZENvdW50IiwiZ2xvYmFsQ29vcmRzIiwiJGRiZTMzYzhkM2E3ZjEzMWMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIiQwNWIwMTg4N2RmOTZjNGVlJHZhciRDbGFzc1RhYmxlIiwic3ViRmVhdHVyZUZsYWdzIiwic3RhdGVUYWJsZSIsIiQwNWIwMTg4N2RmOTZjNGVlJHZhciRXaWR0aERlbHRhUmVjb3JkIiwianVzdENsYXNzIiwiYmVmb3JlR3Jvd0xpbWl0IiwiYmVmb3JlU2hyaW5rTGltaXQiLCJhZnRlckdyb3dMaW1pdCIsImFmdGVyU2hyaW5rTGltaXQiLCJncm93RmxhZ3MiLCJzaHJpbmtGbGFncyIsIiQwNWIwMTg4N2RmOTZjNGVlJHZhciRXaWR0aERlbHRhQ2x1c3RlciIsIiQwNWIwMTg4N2RmOTZjNGVlJHZhciRBY3Rpb25EYXRhIiwibG93ZXJMaW1pdCIsInVwcGVyTGltaXQiLCJvcmRlciIsImFkZEdseXBoIiwic3Vic3RUaHJlc2hvbGQiLCJzdWJzdEdseXBoIiwidmFyaWF0aW9uQXhpcyIsIm1pbmltdW1MaW1pdCIsIm5vU3RyZXRjaFZhbHVlIiwibWF4aW11bUxpbWl0IiwiJDA1YjAxODg3ZGY5NmM0ZWUkdmFyJEFjdGlvbiIsImFjdGlvbkNsYXNzIiwiYWN0aW9uVHlwZSIsImFjdGlvbkxlbmd0aCIsImFjdGlvbkRhdGEiLCIkMDViMDE4ODdkZjk2YzRlZSR2YXIkUG9zdGNvbXBlbnNhdGlvbkFjdGlvbiIsIiQwNWIwMTg4N2RmOTZjNGVlJHZhciRQb3N0Q29tcGVuc2F0aW9uVGFibGUiLCJsb29rdXBUYWJsZSIsIiQwNWIwMTg4N2RmOTZjNGVlJHZhciRKdXN0aWZpY2F0aW9uVGFibGUiLCJ3ZGNPZmZzZXQiLCJwb3N0Q29tcGVuc2F0aW9uVGFibGUiLCJ3aWR0aERlbHRhQ2x1c3RlcnMiLCIkMDViMDE4ODdkZjk2YzRlZSRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwiJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJExpZ2F0dXJlRGF0YSIsImFjdGlvbiIsIiQwM2VlNmViZDU0ZGIxMDUzJHZhciRDb250ZXh0dWFsRGF0YSIsIm1hcmtJbmRleCIsImN1cnJlbnRJbmRleCIsIiQwM2VlNmViZDU0ZGIxMDUzJHZhciRJbnNlcnRpb25EYXRhIiwiY3VycmVudEluc2VydEluZGV4IiwibWFya2VkSW5zZXJ0SW5kZXgiLCIkMDNlZTZlYmQ1NGRiMTA1MyR2YXIkU3Vic3RpdHV0aW9uVGFibGUiLCJpdGVtcyIsIiQwM2VlNmViZDU0ZGIxMDUzJHZhciRTdWJ0YWJsZURhdGEiLCJzdWJzdGl0dXRpb25UYWJsZSIsImxpZ2F0dXJlQWN0aW9ucyIsImxpZ2F0dXJlTGlzdCIsImluc2VydGlvbkFjdGlvbnMiLCIkMDNlZTZlYmQ1NGRiMTA1MyR2YXIkU3VidGFibGUiLCIkMDNlZTZlYmQ1NGRiMTA1MyR2YXIkRmVhdHVyZUVudHJ5IiwiZmVhdHVyZVR5cGUiLCJmZWF0dXJlU2V0dGluZyIsImVuYWJsZUZsYWdzIiwiZGlzYWJsZUZsYWdzIiwiJDAzZWU2ZWJkNTRkYjEwNTMkdmFyJE1vcnhDaGFpbiIsImRlZmF1bHRGbGFncyIsImNoYWluTGVuZ3RoIiwibkZlYXR1cmVFbnRyaWVzIiwiblN1YnRhYmxlcyIsImZlYXR1cmVzIiwic3VidGFibGVzIiwiJDAzZWU2ZWJkNTRkYjEwNTMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsInVudXNlZCIsIm5DaGFpbnMiLCJjaGFpbnMiLCIkYjc0OTJhODBiMGQxYTA1NiR2YXIkT3B0aWNhbEJvdW5kcyIsImJvdHRvbSIsIiRiNzQ5MmE4MGIwZDFhMDU2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCIkYzMzOTU3MjJiZWE3NTFlMiR2YXIkdGFibGVzIiwiJGMzMzk1NzIyYmVhNzUxZTIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsImNtYXAiLCJoZWFkIiwiaG10eCIsInBvc3QiLCJmcGdtIiwibG9jYSIsInByZXAiLCJnbHlmIiwiVk9SRyIsIkVCTEMiLCJDQkxDIiwic2JpeCIsIkNPTFIiLCJDUEFMIiwiQkFTRSIsIkdERUYiLCJHUE9TIiwiR1NVQiIsIkpTVEYiLCJIVkFSIiwiRFNJRyIsImdhc3AiLCJoZG14Iiwia2VybiIsIkxUU0giLCJQQ0xUIiwiVkRNWCIsInZtdHgiLCJhdmFyIiwiYnNsbiIsImZlYXQiLCJmdmFyIiwiZ3ZhciIsImp1c3QiLCJtb3J4Iiwib3BiZCIsIiQ4MTZjMDdhMDRiNmRiYTg3JHZhciRUYWJsZUVudHJ5IiwiY2hlY2tTdW0iLCIkODE2YzA3YTA0YjZkYmE4NyR2YXIkRGlyZWN0b3J5IiwibnVtVGFibGVzIiwibWF4RXhwb25lbnRGb3IyIiwiZmxvb3IiLCJsb2ciLCJMTjIiLCJtYXhQb3dlck9mMiIsInBvdyIsIiQ4MTZjMDdhMDRiNmRiYTg3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCIkMTI3Mjc3MzBkZGZjOGJmZSRleHBvcnQkMmUwYWU2NzMzOWQ1ZjFhYyIsImNtcCIsIm1pbiIsIiQxMjcyNzczMGRkZmM4YmZlJGV4cG9ydCRkMDI2MzFjY2NmNzg5NzIzIiwicmFuZ2UxIiwiJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDNkMjhjMTk5NmNlZDFmMTQiLCIkMTI3Mjc3MzBkZGZjOGJmZSR2YXIkQ0hBUlMiLCIkMTI3Mjc3MzBkZGZjOGJmZSR2YXIkTE9PS1VQIiwiJDEyNzI3NzMwZGRmYzhiZmUkZXhwb3J0JDk0ZmRmMTFiYWZjOGRlNmIiLCJiYXNlNjQiLCJidWZmZXJMZW5ndGgiLCJieXRlcyIsInAiLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsIiRmMDhkZDQxZWYxMGI2OTRjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJmaW5kU3VidGFibGUiLCJjbWFwVGFibGUiLCJsb29rdXAiLCJjb2RlcG9pbnQiLCJ2YXJpYXRpb25TZWxlY3RvciIsImdldFZhcmlhdGlvblNlbGVjdG9yIiwicmFuZ2VPZmZzZXQiLCJncm91cCIsInV2cyIsInNlbGVjdG9ycyIsInRvQXJyYXkiLCJ4Iiwic2VsIiwiZ2V0Q2hhcmFjdGVyU2V0IiwiZW5kQ29kZXMiLCJ0YWlsIiwiY29kZVBvaW50c0ZvckdseXBoIiwiZGVsdGEiLCJjIiwiZyIsInByb3RvdHlwZSIsIiQwYmJhM2E5ZGI1NzYzN2YzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJwb3NpdGlvbnMiLCJpZCIsImdldEtlcm5pbmciLCJjcm9zc1N0cmVhbSIsInZhcmlhdGlvbiIsInBhaXJJZHgiLCJwYWlyIiwibGVmdE9mZnNldCIsInJpZ2h0T2Zmc2V0Iiwib3ZlcnJpZGUiLCIkMGE0YmRmZWI2ZGZkNmY1ZSRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwicG9zaXRpb25HbHlwaHMiLCJjbHVzdGVyU3RhcnQiLCJjbHVzdGVyRW5kIiwicG9zaXRpb25DbHVzdGVyIiwiYmFzZUJveCIsImNib3giLCJjb3B5IiwiY29kZVBvaW50cyIsIm1pblgiLCJ5R2FwIiwibWFyayIsIm1hcmtCb3giLCJwb3NpdGlvbiIsImNvbWJpbmluZ0NsYXNzIiwibWF4WCIsIm1pblkiLCJtYXhZIiwiY29kZVBvaW50IiwiJGYzNDYwMGFiOWQ3ZjcwZDgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsImFkZFBvaW50IiwieSIsImFicyIsIkluZmluaXR5IiwiJDEzMGQxYTY0MmViY2QyYjckdmFyJFVOSUNPREVfU0NSSVBUUyIsIkNhdWNhc2lhbl9BbGJhbmlhbiIsIkFyYWJpYyIsIkltcGVyaWFsX0FyYW1haWMiLCJBcm1lbmlhbiIsIkF2ZXN0YW4iLCJCYWxpbmVzZSIsIkJhbXVtIiwiQmFzc2FfVmFoIiwiQmF0YWsiLCJCZW5nYWxpIiwiQm9wb21vZm8iLCJCcmFobWkiLCJCcmFpbGxlIiwiQnVnaW5lc2UiLCJCdWhpZCIsIkNoYWttYSIsIkNhbmFkaWFuX0Fib3JpZ2luYWwiLCJDYXJpYW4iLCJDaGFtIiwiQ2hlcm9rZWUiLCJDb3B0aWMiLCJDeXByaW90IiwiQ3lyaWxsaWMiLCJEZXZhbmFnYXJpIiwiRGVzZXJldCIsIkR1cGxveWFuIiwiRWd5cHRpYW5fSGllcm9nbHlwaHMiLCJFbGJhc2FuIiwiRXRoaW9waWMiLCJHZW9yZ2lhbiIsIkdsYWdvbGl0aWMiLCJHb3RoaWMiLCJHcmFudGhhIiwiR3JlZWsiLCJHdWphcmF0aSIsIkd1cm11a2hpIiwiSGFuZ3VsIiwiSGFuIiwiSGFudW5vbyIsIkhlYnJldyIsIkhpcmFnYW5hIiwiUGFoYXdoX0htb25nIiwiS2F0YWthbmFfT3JfSGlyYWdhbmEiLCJPbGRfSXRhbGljIiwiSmF2YW5lc2UiLCJLYXlhaF9MaSIsIkthdGFrYW5hIiwiS2hhcm9zaHRoaSIsIktobWVyIiwiS2hvamtpIiwiS2FubmFkYSIsIkthaXRoaSIsIlRhaV9UaGFtIiwiTGFvIiwiTGF0aW4iLCJMZXBjaGEiLCJMaW1idSIsIkxpbmVhcl9BIiwiTGluZWFyX0IiLCJMaXN1IiwiTHljaWFuIiwiTHlkaWFuIiwiTWFoYWphbmkiLCJNYW5kYWljIiwiTWFuaWNoYWVhbiIsIk1lbmRlX0tpa2FrdWkiLCJNZXJvaXRpY19DdXJzaXZlIiwiTWVyb2l0aWNfSGllcm9nbHlwaHMiLCJNYWxheWFsYW0iLCJNb2RpIiwiTW9uZ29saWFuIiwiTXJvIiwiTWVldGVpX01heWVrIiwiTXlhbm1hciIsIk9sZF9Ob3J0aF9BcmFiaWFuIiwiTmFiYXRhZWFuIiwiTmtvIiwiT2doYW0iLCJPbF9DaGlraSIsIk9sZF9UdXJraWMiLCJPcml5YSIsIk9zbWFueWEiLCJQYWxteXJlbmUiLCJQYXVfQ2luX0hhdSIsIk9sZF9QZXJtaWMiLCJQaGFnc19QYSIsIkluc2NyaXB0aW9uYWxfUGFobGF2aSIsIlBzYWx0ZXJfUGFobGF2aSIsIlBob2VuaWNpYW4iLCJNaWFvIiwiSW5zY3JpcHRpb25hbF9QYXJ0aGlhbiIsIlJlamFuZyIsIlJ1bmljIiwiU2FtYXJpdGFuIiwiT2xkX1NvdXRoX0FyYWJpYW4iLCJTYXVyYXNodHJhIiwiU2hhdmlhbiIsIlNoYXJhZGEiLCJTaWRkaGFtIiwiS2h1ZGF3YWRpIiwiU2luaGFsYSIsIlNvcmFfU29tcGVuZyIsIlN1bmRhbmVzZSIsIlN5bG90aV9OYWdyaSIsIlN5cmlhYyIsIlRhZ2JhbndhIiwiVGFrcmkiLCJUYWlfTGUiLCJOZXdfVGFpX0x1ZSIsIlRhbWlsIiwiVGFpX1ZpZXQiLCJUZWx1Z3UiLCJUaWZpbmFnaCIsIlRhZ2Fsb2ciLCJUaGFhbmEiLCJUaGFpIiwiVGliZXRhbiIsIlRpcmh1dGEiLCJVZ2FyaXRpYyIsIlZhaSIsIldhcmFuZ19DaXRpIiwiT2xkX1BlcnNpYW4iLCJDdW5laWZvcm0iLCJZaSIsIkluaGVyaXRlZCIsIkNvbW1vbiIsIlVua25vd24iLCIkMTMwZDFhNjQyZWJjZDJiNyR2YXIkT1BFTlRZUEVfU0NSSVBUUyIsIiQxMzBkMWE2NDJlYmNkMmI3JGV4cG9ydCRiMzJmMGI1ZjY5ZDY1ZTUxIiwic2NyaXB0MSIsIiQxMzBkMWE2NDJlYmNkMmI3JGV4cG9ydCRjZTUwZTgyZjEyYTgyN2E0IiwiJDEzMGQxYTY0MmViY2QyYjckZXhwb3J0JGU1Y2IyNWUyMDRmYjg0NTAiLCJpZHgiLCJjb2RlIiwibmV4dCIsInNjcmlwdDIiLCIkMTMwZDFhNjQyZWJjZDJiNyRleHBvcnQkMTZmYWIwNzU3Y2ZjMjIzZCIsInNjcmlwdDMiLCIkMTMwZDFhNjQyZWJjZDJiNyR2YXIkUlRMIiwiYXJhYiIsImhlYnIiLCJzeXJjIiwidGhhYSIsImNwcnQiLCJraGFyIiwicGhueCIsImx5ZGkiLCJhdnN0IiwiYXJtaSIsInBobGkiLCJwcnRpIiwic2FyYiIsIm9ya2giLCJzYW1yIiwibWFuZCIsIm1lcmMiLCJtZXJvIiwibWFuaSIsIm1lbmQiLCJuYmF0IiwibmFyYiIsInBhbG0iLCJwaGxwIiwiJDEzMGQxYTY0MmViY2QyYjckZXhwb3J0JDlmZGRiOWQwZGQ3ZDhhNTQiLCJzY3JpcHQ0IiwiJGJlMDdiM2U5N2E0MjY4N2EkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsImFkdmFuY2VXaWR0aCIsImFkdmFuY2VIZWlnaHQiLCJiYm94IiwiZGlyZWN0aW9uIiwiJDFhYzc1ZDlhNTViNjdmMDEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIiQzYjYzMDJiNjRlY2NjMzJjJHZhciRmZWF0dXJlcyIsImFsbFR5cG9ncmFwaGljRmVhdHVyZXMiLCJleGNsdXNpdmUiLCJhbGxUeXBlRmVhdHVyZXMiLCJsaWdhdHVyZXMiLCJyZXF1aXJlZExpZ2F0dXJlcyIsImNvbW1vbkxpZ2F0dXJlcyIsInJhcmVMaWdhdHVyZXMiLCJyZWJ1c1BpY3R1cmVzIiwiZGlwaHRob25nTGlnYXR1cmVzIiwic3F1YXJlZExpZ2F0dXJlcyIsImFiYnJldlNxdWFyZWRMaWdhdHVyZXMiLCJzeW1ib2xMaWdhdHVyZXMiLCJjb250ZXh0dWFsTGlnYXR1cmVzIiwiaGlzdG9yaWNhbExpZ2F0dXJlcyIsImN1cnNpdmVDb25uZWN0aW9uIiwidW5jb25uZWN0ZWQiLCJwYXJ0aWFsbHlDb25uZWN0ZWQiLCJjdXJzaXZlIiwibGV0dGVyQ2FzZSIsInZlcnRpY2FsU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0ZVZlcnRpY2FsRm9ybXMiLCJsaW5ndWlzdGljUmVhcnJhbmdlbWVudCIsIm51bWJlclNwYWNpbmciLCJtb25vc3BhY2VkTnVtYmVycyIsInByb3BvcnRpb25hbE51bWJlcnMiLCJ0aGlyZFdpZHRoTnVtYmVycyIsInF1YXJ0ZXJXaWR0aE51bWJlcnMiLCJzbWFydFN3YXNoIiwid29yZEluaXRpYWxTd2FzaGVzIiwid29yZEZpbmFsU3dhc2hlcyIsIm5vbkZpbmFsU3dhc2hlcyIsImRpYWNyaXRpY3MiLCJzaG93RGlhY3JpdGljcyIsImhpZGVEaWFjcml0aWNzIiwiZGVjb21wb3NlRGlhY3JpdGljcyIsInZlcnRpY2FsUG9zaXRpb24iLCJub3JtYWxQb3NpdGlvbiIsInN1cGVyaW9ycyIsImluZmVyaW9ycyIsIm9yZGluYWxzIiwic2NpZW50aWZpY0luZmVyaW9ycyIsImZyYWN0aW9ucyIsIm5vRnJhY3Rpb25zIiwidmVydGljYWxGcmFjdGlvbnMiLCJkaWFnb25hbEZyYWN0aW9ucyIsIm92ZXJsYXBwaW5nQ2hhcmFjdGVycyIsInByZXZlbnRPdmVybGFwIiwidHlwb2dyYXBoaWNFeHRyYXMiLCJzbGFzaGVkWmVybyIsIm1hdGhlbWF0aWNhbEV4dHJhcyIsIm1hdGhlbWF0aWNhbEdyZWVrIiwib3JuYW1lbnRTZXRzIiwibm9Pcm5hbWVudHMiLCJkaW5nYmF0cyIsInBpQ2hhcmFjdGVycyIsImZsZXVyb25zIiwiZGVjb3JhdGl2ZUJvcmRlcnMiLCJpbnRlcm5hdGlvbmFsU3ltYm9scyIsIm1hdGhTeW1ib2xzIiwiY2hhcmFjdGVyQWx0ZXJuYXRpdmVzIiwibm9BbHRlcm5hdGVzIiwiZGVzaWduQ29tcGxleGl0eSIsImRlc2lnbkxldmVsMSIsImRlc2lnbkxldmVsMiIsImRlc2lnbkxldmVsMyIsImRlc2lnbkxldmVsNCIsImRlc2lnbkxldmVsNSIsInN0eWxlT3B0aW9ucyIsIm5vU3R5bGVPcHRpb25zIiwiZGlzcGxheVRleHQiLCJlbmdyYXZlZFRleHQiLCJpbGx1bWluYXRlZENhcHMiLCJ0aXRsaW5nQ2FwcyIsInRhbGxDYXBzIiwiY2hhcmFjdGVyU2hhcGUiLCJ0cmFkaXRpb25hbENoYXJhY3RlcnMiLCJzaW1wbGlmaWVkQ2hhcmFjdGVycyIsIkpJUzE5NzhDaGFyYWN0ZXJzIiwiSklTMTk4M0NoYXJhY3RlcnMiLCJKSVMxOTkwQ2hhcmFjdGVycyIsInRyYWRpdGlvbmFsQWx0T25lIiwidHJhZGl0aW9uYWxBbHRUd28iLCJ0cmFkaXRpb25hbEFsdFRocmVlIiwidHJhZGl0aW9uYWxBbHRGb3VyIiwidHJhZGl0aW9uYWxBbHRGaXZlIiwiZXhwZXJ0Q2hhcmFjdGVycyIsIkpJUzIwMDRDaGFyYWN0ZXJzIiwiaG9qb0NoYXJhY3RlcnMiLCJOTENDaGFyYWN0ZXJzIiwidHJhZGl0aW9uYWxOYW1lc0NoYXJhY3RlcnMiLCJudW1iZXJDYXNlIiwibG93ZXJDYXNlTnVtYmVycyIsInVwcGVyQ2FzZU51bWJlcnMiLCJ0ZXh0U3BhY2luZyIsInByb3BvcnRpb25hbFRleHQiLCJtb25vc3BhY2VkVGV4dCIsImhhbGZXaWR0aFRleHQiLCJ0aGlyZFdpZHRoVGV4dCIsInF1YXJ0ZXJXaWR0aFRleHQiLCJhbHRQcm9wb3J0aW9uYWxUZXh0IiwiYWx0SGFsZldpZHRoVGV4dCIsInRyYW5zbGl0ZXJhdGlvbiIsIm5vVHJhbnNsaXRlcmF0aW9uIiwiYW5ub3RhdGlvbiIsIm5vQW5ub3RhdGlvbiIsImJveEFubm90YXRpb24iLCJyb3VuZGVkQm94QW5ub3RhdGlvbiIsImNpcmNsZUFubm90YXRpb24iLCJpbnZlcnRlZENpcmNsZUFubm90YXRpb24iLCJwYXJlbnRoZXNpc0Fubm90YXRpb24iLCJwZXJpb2RBbm5vdGF0aW9uIiwicm9tYW5OdW1lcmFsQW5ub3RhdGlvbiIsImRpYW1vbmRBbm5vdGF0aW9uIiwiaW52ZXJ0ZWRCb3hBbm5vdGF0aW9uIiwiaW52ZXJ0ZWRSb3VuZGVkQm94QW5ub3RhdGlvbiIsImthbmFTcGFjaW5nIiwiZnVsbFdpZHRoS2FuYSIsInByb3BvcnRpb25hbEthbmEiLCJpZGVvZ3JhcGhpY1NwYWNpbmciLCJmdWxsV2lkdGhJZGVvZ3JhcGhzIiwicHJvcG9ydGlvbmFsSWRlb2dyYXBocyIsImhhbGZXaWR0aElkZW9ncmFwaHMiLCJ1bmljb2RlRGVjb21wb3NpdGlvbiIsImNhbm9uaWNhbENvbXBvc2l0aW9uIiwiY29tcGF0aWJpbGl0eUNvbXBvc2l0aW9uIiwidHJhbnNjb2RpbmdDb21wb3NpdGlvbiIsInJ1YnlLYW5hIiwiQ0pLU3ltYm9sQWx0ZXJuYXRpdmVzIiwibm9DSktTeW1ib2xBbHRlcm5hdGl2ZXMiLCJDSktTeW1ib2xBbHRPbmUiLCJDSktTeW1ib2xBbHRUd28iLCJDSktTeW1ib2xBbHRUaHJlZSIsIkNKS1N5bWJvbEFsdEZvdXIiLCJDSktTeW1ib2xBbHRGaXZlIiwiaWRlb2dyYXBoaWNBbHRlcm5hdGl2ZXMiLCJub0lkZW9ncmFwaGljQWx0ZXJuYXRpdmVzIiwiaWRlb2dyYXBoaWNBbHRPbmUiLCJpZGVvZ3JhcGhpY0FsdFR3byIsImlkZW9ncmFwaGljQWx0VGhyZWUiLCJpZGVvZ3JhcGhpY0FsdEZvdXIiLCJpZGVvZ3JhcGhpY0FsdEZpdmUiLCJDSktWZXJ0aWNhbFJvbWFuUGxhY2VtZW50IiwiQ0pLVmVydGljYWxSb21hbkNlbnRlcmVkIiwiQ0pLVmVydGljYWxSb21hbkhCYXNlbGluZSIsIml0YWxpY0NKS1JvbWFuIiwiQ0pLSXRhbGljUm9tYW4iLCJjYXNlU2Vuc2l0aXZlTGF5b3V0IiwiY2FzZVNlbnNpdGl2ZVNwYWNpbmciLCJhbHRlcm5hdGVLYW5hIiwiYWx0ZXJuYXRlSG9yaXpLYW5hIiwiYWx0ZXJuYXRlVmVydEthbmEiLCJzdHlsaXN0aWNBbHRlcm5hdGl2ZXMiLCJub1N0eWxpc3RpY0FsdGVybmF0ZXMiLCJzdHlsaXN0aWNBbHRPbmUiLCJzdHlsaXN0aWNBbHRUd28iLCJzdHlsaXN0aWNBbHRUaHJlZSIsInN0eWxpc3RpY0FsdEZvdXIiLCJzdHlsaXN0aWNBbHRGaXZlIiwic3R5bGlzdGljQWx0U2l4Iiwic3R5bGlzdGljQWx0U2V2ZW4iLCJzdHlsaXN0aWNBbHRFaWdodCIsInN0eWxpc3RpY0FsdE5pbmUiLCJzdHlsaXN0aWNBbHRUZW4iLCJzdHlsaXN0aWNBbHRFbGV2ZW4iLCJzdHlsaXN0aWNBbHRUd2VsdmUiLCJzdHlsaXN0aWNBbHRUaGlydGVlbiIsInN0eWxpc3RpY0FsdEZvdXJ0ZWVuIiwic3R5bGlzdGljQWx0RmlmdGVlbiIsInN0eWxpc3RpY0FsdFNpeHRlZW4iLCJzdHlsaXN0aWNBbHRTZXZlbnRlZW4iLCJzdHlsaXN0aWNBbHRFaWdodGVlbiIsInN0eWxpc3RpY0FsdE5pbmV0ZWVuIiwic3R5bGlzdGljQWx0VHdlbnR5IiwiY29udGV4dHVhbEFsdGVybmF0ZXMiLCJzd2FzaEFsdGVybmF0ZXMiLCJjb250ZXh0dWFsU3dhc2hBbHRlcm5hdGVzIiwibG93ZXJDYXNlIiwiZGVmYXVsdExvd2VyQ2FzZSIsImxvd2VyQ2FzZVNtYWxsQ2FwcyIsImxvd2VyQ2FzZVBldGl0ZUNhcHMiLCJ1cHBlckNhc2UiLCJkZWZhdWx0VXBwZXJDYXNlIiwidXBwZXJDYXNlU21hbGxDYXBzIiwidXBwZXJDYXNlUGV0aXRlQ2FwcyIsImxhbmd1YWdlVGFnIiwiQ0pLUm9tYW5TcGFjaW5nIiwiaGFsZldpZHRoQ0pLUm9tYW4iLCJwcm9wb3J0aW9uYWxDSktSb21hbiIsImRlZmF1bHRDSktSb21hbiIsImZ1bGxXaWR0aENKS1JvbWFuIiwiJDNiNjMwMmI2NGVjY2MzMmMkdmFyJGZlYXR1cmUiLCJzZWxlY3RvciIsIiQzYjYzMDJiNjRlY2NjMzJjJHZhciRPVE1hcHBpbmciLCJybGlnIiwiY2xpZyIsImRsaWciLCJobGlnIiwibGlnYSIsImhpc3QiLCJzbWNwIiwicGNhcCIsImZyYWMiLCJkbm9tIiwibnVtciIsImFmcmMiLCJjYXNlIiwiY2NtcCIsImNwY3QiLCJ2YWx0Iiwic3dzaCIsImNzd2giLCJjdXJzIiwiYzJwYyIsImMyc2MiLCJpbml0IiwiZmluMiIsIm1lZGkiLCJtZWQyIiwiZmluMyIsImZpbmEiLCJwa25hIiwiaGFsZiIsImhhbHQiLCJoa25hIiwidmtuYSIsIml0YWwiLCJsbnVtIiwib251bSIsIm1ncmsiLCJjYWx0IiwidnJ0MiIsInRudW0iLCJwbnVtIiwic3VwcyIsInN1YnMiLCJvcmRuIiwicHdpZCIsImh3aWQiLCJxd2lkIiwidHdpZCIsImZ3aWQiLCJwYWx0IiwidHJhZCIsInNtcGwiLCJqcDc4IiwianA4MyIsImpwOTAiLCJqcDA0IiwiZXhwdCIsImhvam8iLCJubGNrIiwidG5hbSIsInJ1YnkiLCJ0aXRsIiwiemVybyIsInNzMDEiLCJzczAyIiwic3MwMyIsInNzMDQiLCJzczA1Iiwic3MwNiIsInNzMDciLCJzczA4Iiwic3MwOSIsInNzMTAiLCJzczExIiwic3MxMiIsInNzMTMiLCJzczE0Iiwic3MxNSIsInNzMTYiLCJzczE3Iiwic3MxOCIsInNzMTkiLCJzczIwIiwic2xpY2UiLCIkM2I2MzAyYjY0ZWNjYzMyYyR2YXIkQUFUTWFwcGluZyIsIm90IiwiYWF0IiwiJDNiNjMwMmI2NGVjY2MzMmMkZXhwb3J0JGI4MTNmN2QyYTE2NzdjMTYiLCJmZWF0dXJlczEiLCJyIiwiJDNiNjMwMmI2NGVjY2MzMmMkdmFyJG1hcEZlYXR1cmVTdHJpbmdzIiwiZiIsImlzTmFOIiwidHlwZUNvZGUiLCJzZXR0aW5nQ29kZSIsIiQzYjYzMDJiNjRlY2NjMzJjJGV4cG9ydCRiZDZkZjM0N2E0ZjM5MWM0IiwiZmVhdHVyZXMyIiwiZmVhdHVyZTEiLCJrZXlzIiwiJGZmNWNlMDc3ZGFlMGYxNDQkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsInNlZyIsImdseXBoc0ZvclZhbHVlIiwiY2xhc3NWYWx1ZSIsInNlZ21lbnQxIiwiJDUwYzdhYWM5MzE2ZjI5NDgkdmFyJFNUQVJUX09GX1RFWFRfU1RBVEUiLCIkNTBjN2FhYzkzMTZmMjk0OCR2YXIkU1RBUlRfT0ZfTElORV9TVEFURSIsIiQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRFTkRfT0ZfVEVYVF9DTEFTUyIsIiQ1MGM3YWFjOTMxNmYyOTQ4JHZhciRPVVRfT0ZfQk9VTkRTX0NMQVNTIiwiJDUwYzdhYWM5MzE2ZjI5NDgkdmFyJERFTEVURURfR0xZUEhfQ0xBU1MiLCIkNTBjN2FhYzkzMTZmMjk0OCR2YXIkRU5EX09GX0xJTkVfQ0xBU1MiLCIkNTBjN2FhYzkzMTZmMjk0OCR2YXIkRE9OVF9BRFZBTkNFIiwiJDUwYzdhYWM5MzE2ZjI5NDgkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsInJldmVyc2UiLCJwcm9jZXNzRW50cnkiLCJjdXJyZW50U3RhdGUiLCJkaXIiLCJjbGFzc0NvZGUiLCJzaG91bGRBZHZhbmNlIiwicm93IiwiZW50cnlJbmRleCIsInRyYXZlcnNlIiwib3B0cyIsInN0YXRlIiwidmlzaXRlZCIsImFkZCIsImVudGVyIiwiZXhpdCIsIiQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLX0ZJUlNUIiwiJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJE1BUktfTEFTVCIsIiQ1NWY3MTQzM2E2MDVjODdkJHZhciRWRVJCIiwiJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJFNFVF9NQVJLIiwiJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJFNFVF9DT01QT05FTlQiLCIkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkUEVSRk9STV9BQ1RJT04iLCIkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkTEFTVF9NQVNLIiwiJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJFNUT1JFX01BU0siLCIkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkT0ZGU0VUX01BU0siLCIkNTVmNzE0MzNhNjA1Yzg3ZCR2YXIkVkVSVElDQUxfT05MWSIsIiQ1NWY3MTQzM2E2MDVjODdkJHZhciRSRVZFUlNFX0RJUkVDVElPTiIsIiQ1NWY3MTQzM2E2MDVjODdkJHZhciRIT1JJWk9OVEFMX0FORF9WRVJUSUNBTCIsIiQ1NWY3MTQzM2E2MDVjODdkJHZhciRDVVJSRU5UX0lTX0tBU0hJREFfTElLRSIsIiQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLRURfSVNfS0FTSElEQV9MSUtFIiwiJDU1ZjcxNDMzYTYwNWM4N2QkdmFyJENVUlJFTlRfSU5TRVJUX0JFRk9SRSIsIiQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLRURfSU5TRVJUX0JFRk9SRSIsIiQ1NWY3MTQzM2E2MDVjODdkJHZhciRDVVJSRU5UX0lOU0VSVF9DT1VOVCIsIiQ1NWY3MTQzM2E2MDVjODdkJHZhciRNQVJLRURfSU5TRVJUX0NPVU5UIiwiJDU1ZjcxNDMzYTYwNWM4N2QkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsImNoYWluIiwicHJvY2Vzc1N1YnRhYmxlIiwic3BsaWNlIiwicHJvY2Vzc05vbmNvbnRleHR1YWxTdWJzdGl0dXRpb25zIiwibGlnYXR1cmVTdGFjayIsIm1hcmtlZEdseXBoIiwibWFya2VkSW5kZXgiLCJzdGF0ZU1hY2hpbmUiLCJnZXRTdGF0ZU1hY2hpbmUiLCJnZXRQcm9jZXNzb3IiLCJwcm9jZXNzSW5kaWNSZWFycmFnZW1lbnQiLCJwcm9jZXNzQ29udGV4dHVhbFN1YnN0aXR1dGlvbiIsInByb2Nlc3NMaWdhdHVyZSIsInByb2Nlc3NHbHlwaEluc2VydGlvbiIsIiQ1NWY3MTQzM2E2MDVjODdkJHZhciRyZW9yZGVyR2x5cGhzIiwic3Vic2l0dXRpb25zIiwiZ2V0R2x5cGgiLCJhY3Rpb25zIiwiYWN0aW9uSW5kZXgiLCJsYXN0IiwibGlnYXR1cmVJbmRleCIsImxpZ2F0dXJlR2x5cGhzIiwiY29tcG9uZW50R2x5cGgiLCJ1bnNoaWZ0Iiwic3RvcmUiLCJjb21wb25lbnQiLCJsaWdhdHVyZUVudHJ5IiwiX2luc2VydEdseXBocyIsImluc2VydGlvbkFjdGlvbkluZGV4IiwiaXNCZWZvcmUiLCJpbnNlcnRpb25zIiwiZ2V0U3VwcG9ydGVkRmVhdHVyZXMiLCJnZW5lcmF0ZUlucHV0cyIsImlucHV0Q2FjaGUiLCJnZW5lcmF0ZUlucHV0Q2FjaGUiLCJnZW5lcmF0ZUlucHV0c0ZvclN1YnRhYmxlIiwic3RhY2siLCJnMSIsImZvdW5kIiwiYmluZCIsIiQ1NWY3MTQzM2E2MDVjODdkJHZhciRzd2FwIiwicmFuZ2VBIiwicmFuZ2VCIiwicmV2ZXJzZUEiLCJyZXZlcnNlQiIsInZlcmIiLCIkYmE2ZGQ3NDIwM2JlODcyOCRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiZ2x5cGhSdW4iLCJtb3J4UHJvY2Vzc29yIiwiZ2V0QXZhaWxhYmxlRmVhdHVyZXMiLCJzdHJpbmdzRm9yR2x5cGgiLCJnbHlwaFN0cmluZ3MiLCJfYWRkU3RyaW5ncyIsInN0cmluZ3MiLCJfY21hcFByb2Nlc3NvciIsImZyb21Db2RlUG9pbnQiLCJmYWxsYmFja1Bvc2l0aW9uIiwiJDk0ZDdhNzNiZDJlZGZjOWEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIl9hZGRGZWF0dXJlcyIsImdsb2JhbCIsInN0YWdlSW5kZXgiLCJzdGFnZXMiLCJzdGFnZSIsImFsbEZlYXR1cmVzIiwiZ2xvYmFsRmVhdHVyZXMiLCJhcmciLCJsb2NhbCIsImFkZFN0YWdlIiwic2V0RmVhdHVyZU92ZXJyaWRlcyIsImFzc2lnbkdsb2JhbEZlYXR1cmVzIiwicHJvY2Vzc29yIiwiYXBwbHlGZWF0dXJlcyIsIiQ2NDk5NzBkODczMzViMzBmJHZhciRWQVJJQVRJT05fRkVBVFVSRVMiLCIkNjQ5OTcwZDg3MzM1YjMwZiR2YXIkQ09NTU9OX0ZFQVRVUkVTIiwiJDY0OTk3MGQ4NzMzNWIzMGYkdmFyJEZSQUNUSU9OQUxfRkVBVFVSRVMiLCIkNjQ5OTcwZDg3MzM1YjMwZiR2YXIkSE9SSVpPTlRBTF9GRUFUVVJFUyIsIiQ2NDk5NzBkODczMzViMzBmJHZhciRWRVJUSUNBTF9GRUFUVVJFUyIsIiQ2NDk5NzBkODczMzViMzBmJHZhciRESVJFQ1RJT05BTF9GRUFUVVJFUyIsImx0ciIsInJ0bCIsIiQ2NDk5NzBkODczMzViMzBmJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJwbGFuIiwicGxhblByZXByb2Nlc3NpbmciLCJwbGFuRmVhdHVyZXMiLCJwbGFuUG9zdHByb2Nlc3NpbmciLCJhc3NpZ25GZWF0dXJlcyIsInVzZXJGZWF0dXJlcyIsIiQ3NjRlYjU0NGJiZTFjY2YwJHZhciR0cmllIiwiJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZFQVRVUkVTIiwiJDc2NGViNTQ0YmJlMWNjZjAkdmFyJFNoYXBpbmdDbGFzc2VzIiwiTm9uX0pvaW5pbmciLCJMZWZ0X0pvaW5pbmciLCJSaWdodF9Kb2luaW5nIiwiRHVhbF9Kb2luaW5nIiwiSm9pbl9DYXVzaW5nIiwiQUxBUEgiLCJUcmFuc3BhcmVudCIsIiQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJU09MIiwiJDc2NGViNTQ0YmJlMWNjZjAkdmFyJEZJTkEiLCIkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkRklOMiIsIiQ3NjRlYjU0NGJiZTFjY2YwJHZhciRGSU4zIiwiJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE1FREkiLCIkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkTUVEMiIsIiQ3NjRlYjU0NGJiZTFjY2YwJHZhciRJTklUIiwiJDc2NGViNTQ0YmJlMWNjZjAkdmFyJE5PTkUiLCIkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkU1RBVEVfVEFCTEUiLCIkNzY0ZWI1NDRiYmUxY2NmMCRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwicHJldiIsImN1ckFjdGlvbiIsInByZXZBY3Rpb24iLCIkNzY0ZWI1NDRiYmUxY2NmMCR2YXIkZ2V0U2hhcGluZ0NsYXNzIiwiY2F0ZWdvcnkiLCIkODVkNDA4NjMyMjcwMjQ4YiRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwicmVzZXQiLCJjdXIiLCJzaG91bGRJZ25vcmUiLCJpZ25vcmVNYXJrcyIsImlnbm9yZUJhc2VHbHlwaHMiLCJpc0Jhc2UiLCJpZ25vcmVMaWdhdHVyZXMiLCJpc0xpZ2F0dXJlIiwibW92ZSIsInBlZWsiLCJpbmNyZW1lbnQiLCJwZWVrSW5kZXgiLCIkYTgzYjljMzZhYWE5NGZkMyR2YXIkREVGQVVMVF9TQ1JJUFRTIiwiJGE4M2I5YzM2YWFhOTRmZDMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsImZpbmRTY3JpcHQiLCJzZWxlY3RTY3JpcHQiLCJjaGFuZ2VkIiwic2NyaXB0VGFnIiwicmVwZWF0Iiwic3Vic3RpdHV0ZUZlYXR1cmUiLCJzdWJzdGl0dXRlRmVhdHVyZUZvclZhcmlhdGlvbnMiLCJsb29rdXBzRm9yRmVhdHVyZXMiLCJleGNsdWRlIiwibG9va3VwcyIsImxvb2t1cEluZGV4Iiwic29ydCIsInZhcmlhdGlvbnNJbmRleCIsInN1YnN0aXR1dGlvbiIsImZpbmRWYXJpYXRpb25zSW5kZXgiLCJjb29yZHMiLCJ2YXJpYXRpb25zIiwiY29uZGl0aW9ucyIsInZhcmlhdGlvbkNvbmRpdGlvbnNNYXRjaCIsImV2ZXJ5IiwiY29uZGl0aW9uIiwiYWR2YW5jZXMiLCJhcHBseUxvb2t1cHMiLCJnbHlwaEl0ZXJhdG9yIiwiY3VycmVudEZlYXR1cmUiLCJhcHBseUxvb2t1cCIsImFwcGx5TG9va3VwTGlzdCIsImxvb2t1cFJlY29yZCIsImNvdmVyYWdlSW5kZXgiLCJtYXRjaCIsInNlcXVlbmNlIiwibWF0Y2hlZCIsInNlcXVlbmNlTWF0Y2hlcyIsInNlcXVlbmNlTWF0Y2hJbmRpY2VzIiwiY292ZXJhZ2VTZXF1ZW5jZU1hdGNoZXMiLCJnZXRDbGFzc0lEIiwiY2xhc3NTZXF1ZW5jZU1hdGNoZXMiLCJjbGFzc0lEIiwiYXBwbHlDb250ZXh0IiwicnVsZSIsInJ1bGUxIiwiYXBwbHlDaGFpbmluZ0NvbnRleHQiLCJydWxlcyIsInJ1bGUyIiwiX3ZhcmlhdGlvblByb2Nlc3NvciIsIm5vcm1hbGl6ZWRDb29yZHMiLCJsaWdhdHVyZUlEIiwiJDEwZTdiMjU3ZTFhOWE3NTYkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIl9pZCIsInN1YnN0aXR1dGVkIiwiX2ZvbnQiLCJsaWdhdHVyZUNvbXBvbmVudCIsImlzTGlnYXRlZCIsImN1cnNpdmVBdHRhY2htZW50IiwibWFya0F0dGFjaG1lbnQiLCJzaGFwZXJJbmZvIiwiaXNNdWx0aXBsaWVkIiwiJGUxYzZiYmM4Y2I0MTZmOGMkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRUeXBlIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFNUQVRFX1RBQkxFIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJERFQ09NUE9TRSIsImhhc0dseXBoRm9yQ29kZVBvaW50IiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGRlY29tcG9zZSIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRDT01QT1NFIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGNvbXBvc2UiLCIkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVE9ORV9NQVJLIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJHJlb3JkZXJUb25lTWFyayIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRJTlZBTElEIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGluc2VydERvdHRlZENpcmNsZSIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRIQU5HVUxfQkFTRSIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRIQU5HVUxfRU5EIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJEhBTkdVTF9DT1VOVCIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMX0JBU0UiLCIkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVl9CQVNFIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFRfQkFTRSIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMX0NPVU5UIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFZfQ09VTlQiLCIkZTFjNmJiYzhjYjQxNmY4YyR2YXIkVF9DT1VOVCIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRMX0VORCIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWX0VORCIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRUX0VORCIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRET1RURURfQ0lSQ0xFIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzTCIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc1YiLCIkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNUIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzVG9uZSIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0xWVCIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0xWIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGlzQ29tYmluaW5nTCIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRpc0NvbWJpbmluZ1YiLCIkZTFjNmJiYzhjYjQxNmY4YyR2YXIkaXNDb21iaW5pbmdUIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFgiLCIkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTCIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRWIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJFQiLCIkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTFYiLCIkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTFZUIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJE0iLCIkZTFjNmJiYzhjYjQxNmY4YyR2YXIkTk9fQUNUSU9OIiwiJGUxYzZiYmM4Y2I0MTZmOGMkdmFyJGdldEdseXBoIiwiZ2x5cGhGb3JDb2RlUG9pbnQiLCJsIiwibGptbyIsInZqbW8iLCJpbnNlcnQiLCJ0am1vIiwicHJldlR5cGUiLCJsdiIsImRlbCIsIiRlMWM2YmJjOGNiNDE2ZjhjJHZhciRnZXRMZW5ndGgiLCJkb3R0ZWRDaXJjbGUiLCIkNGIwNzM1Y2E2YzY5MmVhNSRleHBvcnRzIiwiSlNPTiIsInBhcnNlIiwiJGFhMzMzYTk2MDc0NzEyOTYkZXhwb3J0cyIsIiQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRhNTEzZWE2MWE3YmVlOTFjIiwiWCIsIkMiLCJWIiwiTiIsIkgiLCJaV05KIiwiWldKIiwiTSIsIlNNIiwiVkQiLCJBIiwiUGxhY2Vob2xkZXIiLCJEb3R0ZWRfQ2lyY2xlIiwiUlMiLCJDb2VuZyIsIlJlcGhhIiwiUmEiLCJDTSIsIlN5bWJvbCIsIiQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCQxYTFmNjFjOWM0ZGQ5ZGYwIiwiU3RhcnQiLCJSYV9Ub19CZWNvbWVfUmVwaCIsIlByZV9NIiwiUHJlX0MiLCJCYXNlX0MiLCJBZnRlcl9NYWluIiwiQWJvdmVfQyIsIkJlZm9yZV9TdWIiLCJCZWxvd19DIiwiQWZ0ZXJfU3ViIiwiQmVmb3JlX1Bvc3QiLCJQb3N0X0MiLCJBZnRlcl9Qb3N0IiwiRmluYWxfQyIsIlNNVkQiLCJFbmQiLCIkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkODUxOWRlYWE3ZGUyYjA3IiwiJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGJiY2Q5Mjg3NjczMzhlMGQiLCIkOTBhOWQzMzk4ZWU1NGZlNSRleHBvcnQkY2E5NTk5YjJhMzAwYWZjIiwiJDkwYTlkMzM5OGVlNTRmZTUkZXhwb3J0JGU5OWQxMTlkYTc2YTBmYzUiLCJEZWZhdWx0IiwiaGFzT2xkU3BlYyIsInZpcmFtYSIsImJhc2VQb3MiLCJyZXBoUG9zIiwicmVwaE1vZGUiLCJibHdmTW9kZSIsIiQ5MGE5ZDMzOThlZTU0ZmU1JGV4cG9ydCRmNjQ3YzljZmRkNzdkOTVhIiwiZGVjb21wb3NpdGlvbnMiLCIkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkZGVjb21wb3NpdGlvbnMiLCIkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkdHJpZSIsIiQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRzdGF0ZU1hY2hpbmUiLCIkNzgyNmY5MGY2ZjBjZWNjOSRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHNldHVwU3lsbGFibGVzIiwiJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGluaXRpYWxSZW9yZGVyaW5nIiwiJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGZpbmFsUmVvcmRlcmluZyIsInVuaWNvZGVTY3JpcHQiLCJpbmRpY0NvbmZpZyIsImlzT2xkU3BlYyIsImQiLCJkZWNvbXBvc2VkIiwiJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGluZGljQ2F0ZWdvcnkiLCIkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaW5kaWNQb3NpdGlvbiIsIiQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRJbmRpY0luZm8iLCJzeWxsYWJsZVR5cGUiLCJzeWxsYWJsZSIsInRhZ3MiLCIkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNDb25zb25hbnQiLCIkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNKb2luZXIiLCIkNzgyNmY5MGY2ZjBjZWNjOSR2YXIkaXNIYWxhbnRPckNvZW5nIiwiJDc4MjZmOTBmNmYwY2VjYzkkdmFyJHdvdWxkU3Vic3RpdHV0ZSIsIl9sYXlvdXRFbmdpbmUiLCJlbmdpbmUiLCJHU1VCUHJvY2Vzc29yIiwiJDc4MjZmOTBmNmYwY2VjYzkkdmFyJGNvbnNvbmFudFBvc2l0aW9uIiwiY29uc29uYW50IiwiaW5mbyIsIiQ3ODI2ZjkwZjZmMGNlY2M5JHZhciRuZXh0U3lsbGFibGUiLCJsaW1pdCIsImhhc1JlcGgiLCJycGhmIiwic2VlbkJlbG93IiwiaTIiLCJqIiwiZGlzYWxsb3dEb3VibGVIYWxhbnRzIiwibGFzdFBvcyIsImkzIiwiaTQiLCJpNSIsImk2IiwiYmx3ZiIsImk3IiwiaTgiLCJhYnZmIiwicHN0ZiIsInByZWZMZW4iLCJwcmVmIiwiaTkiLCJjZmFyIiwiaTEwIiwibm9uSm9pbmVyIiwidHJ5UHJlZiIsIkJBU0VfQyIsIm5ld1BvcyIsIm9sZFBvcyIsInRtcCIsIm5ld1JlcGhQb3MiLCJyZXBoIiwidGVzdCIsImNhdGVnb3JpZXMiLCIkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkY2F0ZWdvcmllcyIsIiQ3YWI0OTRmZTk3NzE0M2M2JHZhciRkZWNvbXBvc2l0aW9ucyIsIiQ3YWI0OTRmZTk3NzE0M2M2JHZhciR0cmllIiwiJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJHN0YXRlTWFjaGluZSIsIiQ3YWI0OTRmZTk3NzE0M2M2JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCIkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkc2V0dXBTeWxsYWJsZXMiLCIkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkY2xlYXJTdWJzdGl0dXRpb25GbGFncyIsIiQ3YWI0OTRmZTk3NzE0M2M2JHZhciRyZWNvcmRScGhmIiwiJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJHJlY29yZFByZWYiLCIkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkcmVvcmRlciIsIiQ3YWI0OTRmZTk3NzE0M2M2JHZhciR1c2VDYXRlZ29yeSIsIiQ3YWI0OTRmZTk3NzE0M2M2JHZhciRVU0VJbmZvIiwiJDdhYjQ5NGZlOTc3MTQzYzYkdmFyJG5leHRTeWxsYWJsZSIsIiQ3YWI0OTRmZTk3NzE0M2M2JHZhciRpc0Jhc2UiLCIkN2FiNDk0ZmU5NzcxNDNjNiR2YXIkaXNIYWxhbnQiLCIkMTAyYjZmZTUwZjFkNTBiNCR2YXIkU0hBUEVSUyIsIm1vbmciLCJwaGFnIiwiaGFuZyIsImJuZzIiLCJiZW5nIiwiZGV2MiIsImRldmEiLCJnanIyIiwiZ3VqciIsImd1cnUiLCJndXIyIiwia25kYSIsImtuZDIiLCJtbG0yIiwibWx5bSIsIm9yeTIiLCJvcnlhIiwidGFtbCIsInRtbDIiLCJ0ZWx1IiwidGVsMiIsImtobXIiLCJiYWxpIiwiYmF0ayIsImJyYWgiLCJidWdpIiwiYnVoZCIsImNha20iLCJjaGFtIiwiZHVwbCIsImVneXAiLCJncmFuIiwiaGFubyIsImphdmEiLCJrdGhpIiwia2FsaSIsImtob2oiLCJzaW5kIiwibGVwYyIsImxpbWIiLCJtYWhqIiwibXRlaSIsIm1vZGkiLCJobW5nIiwicmpuZyIsInNhdXIiLCJzaHJkIiwic2lkZCIsInNpbmgiLCJzdW5kIiwic3lsbyIsInRnbGciLCJ0YWdiIiwidGFsZSIsImxhbmEiLCJ0YXZ0IiwidGFrciIsInRpYnQiLCJ0Zm5nIiwidGlyaCIsImxhdG4iLCJERkxUIiwiJDEwMmI2ZmU1MGYxZDUwYjQkZXhwb3J0JDc4NzdhNDc4ZGQzMGZkM2QiLCJzaGFwZXIiLCIkMGE4NzZjNDVmMWY3YzQxYyRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiY3VyR2x5cGgiLCJyZXBsYWNlbWVudCIsInVuZGVmaW5lZCIsIlVTRVJfSU5ERVgiLCJsaWdhdHVyZSIsImNoYXJhY3RlcnMiLCJsaWdhdHVyZUdseXBoIiwiaXNNYXJrTGlnYXR1cmUiLCJsYXN0TGlnSUQiLCJsYXN0TnVtQ29tcHMiLCJjdXJDb21wcyIsIm1hdGNoSW5kZXgiLCIkYzk2YzkzNTg3ZDQ5YzE0ZCRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiYXBwbHlQb3NpdGlvblZhbHVlIiwidmFyaWF0aW9uUHJvY2Vzc29yIiwidmFyaWF0aW9uU3RvcmUiLCJnZXREZWx0YSIsIm5leHRHbHlwaCIsImNsYXNzMSIsImNsYXNzMiIsInBhaXIxIiwibmV4dEluZGV4IiwiY3VyUmVjb3JkIiwibmV4dFJlY29yZCIsImdldEFuY2hvciIsInJpZ2h0VG9MZWZ0IiwiYmFzZUdseXBoSW5kZXgiLCJiYXNlSW5kZXgiLCJtYXJrUmVjb3JkIiwiYmFzZUFuY2hvciIsImFwcGx5QW5jaG9yIiwibGlnSW5kZXgiLCJsaWdBdHRhY2giLCJtYXJrR2x5cGgiLCJsaWdHbHlwaCIsImNvbXBJbmRleCIsIm1hcmsxSW5kZXgiLCJwcmV2SW5kZXgiLCJnb29kIiwibWFyazJJbmRleCIsIm1hcmtDb29yZHMiLCJtYXJrUG9zIiwiYW5jaG9yIiwiZml4Q3Vyc2l2ZUF0dGFjaG1lbnQiLCJmaXhNYXJrQXR0YWNobWVudCIsImsxIiwiJGE2MjQ5MjgxMGRlMjdlM2QkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsInNldHVwIiwiZ2x5cGhJbmZvcyIsIkdQT1NQcm9jZXNzb3IiLCJnbHlwaEluZm8iLCJ6ZXJvTWFya1dpZHRocyIsInplcm9NYXJrQWR2YW5jZXMiLCJjbGVhbnVwIiwiJDRjMGE3ZmE1ZGY3YTlhYjEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsImxheW91dCIsImdseXBoc0ZvclN0cmluZyIsImhpZGVEZWZhdWx0SWdub3JhYmxlcyIsInBvc2l0aW9uZWQiLCJ1bmljb2RlTGF5b3V0RW5naW5lIiwia2VyblByb2Nlc3NvciIsInNwYWNlIiwiaXNEZWZhdWx0SWdub3JhYmxlIiwiY2giLCJwbGFuZSIsImZyb20iLCIkZjQzYWVjOTU0Y2RmZGYyMSR2YXIkU1ZHX0NPTU1BTkRTIiwibW92ZVRvIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImJlemllckN1cnZlVG8iLCJjbG9zZVBhdGgiLCIkZjQzYWVjOTU0Y2RmZGYyMSRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwidG9GdW5jdGlvbiIsImNvbW1hbmRzIiwiZm9yRWFjaCIsImNvbW1hbmQiLCJ0b1NWRyIsImNtZHMiLCJyb3VuZCIsImpvaW4iLCJfY2JveCIsImNvbW1hbmQxIiwiZnJlZXplIiwiX2Jib3giLCJjeCIsImN5IiwicDAiLCJwMSIsInAyIiwicDMiLCJxcDF4IiwicXAxeSIsInAzeCIsInAzeSIsImNwMXgiLCJjcDF5IiwiY3AyeCIsImNwMnkiLCJiMmFjIiwidDEiLCJzcXJ0IiwidDIiLCJtYXBQb2ludHMiLCJwYXRoIiwidHJhbnNmb3JtIiwibTAiLCJtMSIsIm0yIiwibTMiLCJtNCIsIm01IiwidHgiLCJ0eSIsInRyYW5zbGF0ZSIsInJvdGF0ZSIsImFuZ2xlIiwiY29zIiwic2luIiwic2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCIkNzcxM2I5YjdiNDM4ZGZmOCRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiJGY5MjkwNmJlMjhlNjE3NjkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIl9nZXRQYXRoIiwiX2dldENCb3giLCJfZ2V0QkJveCIsIl9nZXRUYWJsZU1ldHJpY3MiLCJtZXRyaWMiLCJfZ2V0TWV0cmljcyIsIl9tZXRyaWNzIiwibGVmdEJlYXJpbmciLCJ0b3BCZWFyaW5nIiwib3MyIiwiZ2V0QWR2YW5jZUFkanVzdG1lbnQiLCJnZXRTY2FsZWRQYXRoIiwibGlnYXR1cmVDYXJldFBvc2l0aW9ucyIsIl9nZXROYW1lIiwiZnJvbUNoYXJDb2RlIiwicmVuZGVyIiwic2F2ZSIsImZpbGwiLCJyZXN0b3JlIiwiJDY5YWFjMTYwMjk5Njg2OTIkdmFyJEdseWZIZWFkZXIiLCJudW1iZXJPZkNvbnRvdXJzIiwiJDY5YWFjMTYwMjk5Njg2OTIkdmFyJE9OX0NVUlZFIiwiJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFhfU0hPUlRfVkVDVE9SIiwiJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFlfU0hPUlRfVkVDVE9SIiwiJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFJFUEVBVCIsIiQ2OWFhYzE2MDI5OTY4NjkyJHZhciRTQU1FX1giLCIkNjlhYWMxNjAyOTk2ODY5MiR2YXIkU0FNRV9ZIiwiJDY5YWFjMTYwMjk5Njg2OTIkdmFyJEFSR18xX0FORF8yX0FSRV9XT1JEUyIsIiQ2OWFhYzE2MDI5OTY4NjkyJHZhciRBUkdTX0FSRV9YWV9WQUxVRVMiLCIkNjlhYWMxNjAyOTk2ODY5MiR2YXIkUk9VTkRfWFlfVE9fR1JJRCIsIiQ2OWFhYzE2MDI5OTY4NjkyJHZhciRXRV9IQVZFX0FfU0NBTEUiLCIkNjlhYWMxNjAyOTk2ODY5MiR2YXIkTU9SRV9DT01QT05FTlRTIiwiJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFdFX0hBVkVfQU5fWF9BTkRfWV9TQ0FMRSIsIiQ2OWFhYzE2MDI5OTY4NjkyJHZhciRXRV9IQVZFX0FfVFdPX0JZX1RXTyIsIiQ2OWFhYzE2MDI5OTY4NjkyJHZhciRXRV9IQVZFX0lOU1RSVUNUSU9OUyIsIiQ2OWFhYzE2MDI5OTY4NjkyJHZhciRVU0VfTVlfTUVUUklDUyIsIiQ2OWFhYzE2MDI5OTY4NjkyJHZhciRPVkVSTEFQX0NPTVBPVU5EIiwiJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFNDQUxFRF9DT01QT05FTlRfT0ZGU0VUIiwiJDY5YWFjMTYwMjk5Njg2OTIkdmFyJFVOU0NBTEVEX0NPTVBPTkVOVF9PRkZTRVQiLCIkNjlhYWMxNjAyOTk2ODY5MiRleHBvcnQkYmFmMjYxNDZhNDE0ZjI0YSIsIm9uQ3VydmUiLCJlbmRDb250b3VyIiwiJDY5YWFjMTYwMjk5Njg2OTIkdmFyJENvbXBvbmVudCIsImR4IiwiZHkiLCJzY2FsZTAxIiwic2NhbGUxMCIsIiQ2OWFhYzE2MDI5OTY4NjkyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJpbnRlcm5hbCIsIl9nZXRUYWJsZVN0cmVhbSIsIl9wYXJzZUdseXBoQ29vcmQiLCJzaG9ydCIsInNhbWUiLCJfZGVjb2RlIiwiZ2x5ZlBvcyIsIm5leHRQb3MiLCJfZGVjb2RlU2ltcGxlIiwiX2RlY29kZUNvbXBvc2l0ZSIsInBvaW50cyIsImVuZFB0c09mQ29udG91cnMiLCJudW1Db29yZHMiLCJmbGFnIiwicG9pbnQiLCJweCIsInB5IiwiX2dldFBoYW50b21Qb2ludHMiLCJ0cmFuc2Zvcm1Qb2ludHMiLCJwaGFudG9tUG9pbnRzIiwiaGF2ZUluc3RydWN0aW9ucyIsImdQb3MiLCJyZWFkSW50OCIsIl9nZXRDb250b3VycyIsImNvbnRvdXJzIiwiY29udG91ciIsImRpcmVjdG9yeSIsImZpcnN0UHQiLCJsYXN0UHQiLCJjdXJ2ZVB0IiwicHQiLCJwcmV2UHQiLCJtaWRYIiwibWlkWSIsIiQ2MmNjNTEwOWM2MTAxODkzJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJDRkYyIiwiYmlhcyIsImNmZiIsInRyYW5zIiwiblN0ZW1zIiwieDEiLCJ5MSIsInVzZWRHc3VicnMiLCJ1c2VkU3VicnMiLCJvcGVuIiwiX3VzZWRHc3VicnMiLCJfdXNlZFN1YnJzIiwiZ3N1YnJzIiwiZ3N1YnJzQmlhcyIsInByaXZhdGVEaWN0Iiwic3VicnMiLCJTdWJycyIsInN1YnJzQmlhcyIsInZzdG9yZSIsInZzaW5kZXgiLCJjaGVja1dpZHRoIiwic2hpZnQiLCJub21pbmFsV2lkdGhYIiwicGFyc2VTdGVtcyIsInN1YnIiLCJwaGFzZSIsImMxeCIsImMxeSIsImMyeCIsImMyeSIsImJsZW5kVmVjdG9yIiwiZ2V0QmxlbmRWZWN0b3IiLCJudW1PcGVyYW5kcyIsInN1bSIsInMxIiwiczIiLCJ2MSIsInYyIiwicmFuZG9tIiwiYzN4IiwiYzN5IiwiYzR4IiwiYzR5IiwiYzV4IiwiYzV5IiwiYzZ4IiwiYzZ5IiwicHRzIiwic3RhcnR4Iiwic3RhcnR5IiwiYjEiLCIkMjVkOGYwNDljMjIyMDg0YyR2YXIkU0JJWEltYWdlIiwib3JpZ2luWCIsIm9yaWdpblkiLCJidWZsZW4iLCIkMjVkOGYwNDljMjIyMDg0YyRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiZ2V0SW1hZ2VGb3JTaXplIiwiaW1nIiwiaW1hZ2UiLCJyZW5kZXJPdXRsaW5lcyIsIiQwZDQxMWYwMTY1ODU5NjgxJHZhciRDT0xSTGF5ZXIiLCJjb2xvciIsIiQwZDQxMWYwMTY1ODU5NjgxJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJsYXllcnMiLCJsYXllciIsImNwYWwiLCJjb2xyIiwicmVjIiwiYmFzZUxheWVyIiwiX2dldEJhc2VHbHlwaCIsImZpbGxDb2xvciIsIiQwYmI4NDBjYWMwNGU5MTFiJHZhciRUVVBMRVNfU0hBUkVfUE9JTlRfTlVNQkVSUyIsIiQwYmI4NDBjYWMwNGU5MTFiJHZhciRUVVBMRV9DT1VOVF9NQVNLIiwiJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJEVNQkVEREVEX1RVUExFX0NPT1JEIiwiJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJElOVEVSTUVESUFURV9UVVBMRSIsIiQwYmI4NDBjYWMwNGU5MTFiJHZhciRQUklWQVRFX1BPSU5UX05VTUJFUlMiLCIkMGJiODQwY2FjMDRlOTExYiR2YXIkVFVQTEVfSU5ERVhfTUFTSyIsIiQwYmI4NDBjYWMwNGU5MTFiJHZhciRQT0lOVFNfQVJFX1dPUkRTIiwiJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJFBPSU5UX1JVTl9DT1VOVF9NQVNLIiwiJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJERFTFRBU19BUkVfWkVSTyIsIiQwYmI4NDBjYWMwNGU5MTFiJHZhciRERUxUQVNfQVJFX1dPUkRTIiwiJDBiYjg0MGNhYzA0ZTkxMWIkdmFyJERFTFRBX1JVTl9DT1VOVF9NQVNLIiwiJDBiYjg0MGNhYzA0ZTkxMWIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIm5vcm1hbGl6ZUNvb3JkcyIsIm5vcm1hbGl6ZWQiLCJFUFNJTE9OIiwiZ2x5cGhQb2ludHMiLCJ0dXBsZUNvdW50IiwiaGVyZSIsInNoYXJlZFBvaW50cyIsImRlY29kZVBvaW50cyIsIm9yaWdQb2ludHMiLCJ0dXBsZURhdGFTaXplIiwidHVwbGVDb29yZHMiLCJzdGFydENvb3JkcyIsImVuZENvb3JkcyIsImExIiwiZmFjdG9yIiwidHVwbGVGYWN0b3IiLCJuUG9pbnRzIiwieERlbHRhcyIsImRlY29kZURlbHRhcyIsInlEZWx0YXMiLCJvdXRQb2ludHMiLCJoYXNEZWx0YSIsImludGVycG9sYXRlTWlzc2luZ0RlbHRhcyIsImRlbHRhWCIsImRlbHRhWSIsIlVpbnQxNkFycmF5IiwicnVuIiwicnVuQ291bnQiLCJyZWFkVUludDE2IiwiSW50MTZBcnJheSIsImluUG9pbnRzIiwiZmlyc3RQb2ludCIsImVuZFBvaW50IiwiZmlyc3REZWx0YSIsImN1ckRlbHRhIiwiZGVsdGFJbnRlcnBvbGF0ZSIsImRlbHRhU2hpZnQiLCJyZWYxIiwicmVmMiIsIml0ZXJhYmxlIiwiaW4xIiwiaW4yIiwib3V0MSIsIm91dDIiLCJvdXQiLCJyZWYiLCJpdGVtU3RvcmUiLCJ2YXJEYXRhIiwiZGVsdGFTZXQiLCJuZXRBZGp1c3RtZW50IiwibWFzdGVyIiwiYmxlbmRWZWN0b3JzIiwic2NhbGFyIiwicmVnaW9uSW5kZXgiLCJheGVzIiwiYXhpc1NjYWxhciIsIiQ1Y2M3NDc2ZGE5MmRmMzc1JHZhciRyZXNvbHZlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiJDVjYzc0NzZkYTkyZGYzNzUkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsImluY2x1ZGVHbHlwaCIsIiQ4MDdlNTg1MDZiZTcwMDA1JHZhciRPTl9DVVJWRSIsIiQ4MDdlNTg1MDZiZTcwMDA1JHZhciRYX1NIT1JUX1ZFQ1RPUiIsIiQ4MDdlNTg1MDZiZTcwMDA1JHZhciRZX1NIT1JUX1ZFQ1RPUiIsIiQ4MDdlNTg1MDZiZTcwMDA1JHZhciRSRVBFQVQiLCIkODA3ZTU4NTA2YmU3MDAwNSR2YXIkU0FNRV9YIiwiJDgwN2U1ODUwNmJlNzAwMDUkdmFyJFNBTUVfWSIsIiQ4MDdlNTg1MDZiZTcwMDA1JHZhciRQb2ludCIsIiQ4MDdlNTg1MDZiZTcwMDA1JHZhciRHbHlmIiwieFBvaW50cyIsInlQb2ludHMiLCIkODA3ZTU4NTA2YmU3MDAwNSRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiZW5jb2RlU2ltcGxlIiwibGFzdFgiLCJsYXN0WSIsImxhc3RGbGFnIiwicG9pbnRDb3VudCIsIl9lbmNvZGVQb2ludCIsInNob3J0RmxhZyIsInNhbWVGbGFnIiwiZGlmZiIsIiQ0YWJiYjZhNWRiZGM0NDFhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJfYWRkR2x5cGgiLCJjdXJPZmZzZXQiLCJuZXh0T2Zmc2V0IiwidmlldyIsIkRhdGFWaWV3Iiwic2V0VWludDE2IiwiZ2x5cGhFbmNvZGVyIiwidG9CdWZmZXIiLCIkMDAxZDczOTQyOGE3MWQ1YSRleHBvcnQkMmUyYmNkODczOWFlMDM5Iiwic3Vic2V0Q2hhcnN0cmluZ3MiLCJjaGFyc3RyaW5ncyIsInN1YnNldFN1YnJzIiwidXNlZCIsInN1YnNldEZvbnRkaWN0IiwidXNlZF9mZHMiLCJ1c2VkX3N1YnJzIiwiZmRfc2VsZWN0IiwiRm9udE5hbWUiLCJjcmVhdGVDSURGb250ZGljdCIsImFkZFN0cmluZyIsIkVuY29kaW5nIiwiQ0lEQ291bnQiLCIkNGMxNzA5ZGVlNTI4ZWE3NiRleHBvcnQkMmUyYmNkODczOWFlMDM5Iiwic2V0RGVmYXVsdExhbmd1YWdlIiwiZGVmYXVsdExhbmd1YWdlIiwiX2dldFRhYmxlIiwiX3RhYmxlcyIsIl9kZWNvZGVUYWJsZSIsImNvbnNvbGUiLCJlcnJvciIsIl9kZWNvZGVEaXJlY3RvcnkiLCJnZXROYW1lIiwic3ViZmFtaWx5TmFtZSIsImNvcHlyaWdodCIsImNoYXJhY3RlclNldCIsIm5leHRTdGF0ZSIsImF2YWlsYWJsZUZlYXR1cmVzIiwiX2dseXBocyIsImNyZWF0ZVN1YnNldCIsInZhcmlhdGlvbkF4ZXMiLCJ0cmltIiwibmFtZWRWYXJpYXRpb25zIiwic2V0dGluZ3MiLCJnZXRWYXJpYXRpb24iLCJfZGlyZWN0b3J5UG9zIiwidmFyaWF0aW9uQ29vcmRzIiwiJGMxNzI2MzU1ZWNjNWI4ODkkdmFyJFdPRkZEaXJlY3RvcnlFbnRyeSIsImNvbXBMZW5ndGgiLCJvcmlnQ2hlY2tzdW0iLCIkYzE3MjYzNTVlY2M1Yjg4OSR2YXIkV09GRkRpcmVjdG9yeSIsImZsYXZvciIsInRvdGFsU2ZudFNpemUiLCJtZXRhT2Zmc2V0IiwibWV0YUxlbmd0aCIsIm1ldGFPcmlnTGVuZ3RoIiwicHJpdk9mZnNldCIsInByaXZMZW5ndGgiLCJ0YWJsZXMxIiwiJGMxNzI2MzU1ZWNjNWI4ODkkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIiQ3NjA3ODUyMTRiOWZjNTJjJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJvdXRCdWZmZXIiLCJidWYiLCIkODA0NjE5MGM5ZjFhZDE5ZSRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiX3RyYW5zZm9ybWVkR2x5cGhzIiwiJGMyOGVjN2JiYjNiOGRlM2EkdmFyJEJhc2UxMjgiLCIkYzI4ZWM3YmJiM2I4ZGUzYSR2YXIka25vd25UYWdzIiwiJGMyOGVjN2JiYjNiOGRlM2EkdmFyJFdPRkYyRGlyZWN0b3J5RW50cnkiLCJjdXN0b21UYWciLCJ0cmFuc2Zvcm1WZXJzaW9uIiwidHJhbnNmb3JtZWQiLCJ0cmFuc2Zvcm1MZW5ndGgiLCIkYzI4ZWM3YmJiM2I4ZGUzYSR2YXIkV09GRjJEaXJlY3RvcnkiLCJ0b3RhbENvbXByZXNzZWRTaXplIiwiJGMyOGVjN2JiYjNiOGRlM2EkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsIiQyMWVlMjE4Zjg0YWM3ZjMyJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCJfZGF0YVBvcyIsIl9kZWNvbXByZXNzIiwiX2RlY29tcHJlc3NlZCIsImRlY29tcHJlc3NlZFNpemUiLCJkZWNvbXByZXNzZWQiLCJfdHJhbnNmb3JtR2x5ZlRhYmxlIiwiJDIxZWUyMThmODRhYzdmMzIkdmFyJEdseWZUYWJsZSIsIm5Db250b3VycyIsInRvdGFsUG9pbnRzIiwicjEiLCIkMjFlZTIxOGY4NGFjN2YzMiR2YXIkcmVhZDI1NVVJbnQxNiIsIiQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRkZWNvZGVUcmlwbGV0IiwiaW5zdHJ1Y3Rpb25TaXplIiwiY29tcG9zaXRlcyIsIiQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRTdWJzdHJlYW0iLCJfYnVmIiwiaW5kZXhGb3JtYXQiLCJuQ29udG91clN0cmVhbVNpemUiLCJuUG9pbnRzU3RyZWFtU2l6ZSIsImZsYWdTdHJlYW1TaXplIiwiZ2x5cGhTdHJlYW1TaXplIiwiY29tcG9zaXRlU3RyZWFtU2l6ZSIsImJib3hTdHJlYW1TaXplIiwiaW5zdHJ1Y3Rpb25TdHJlYW1TaXplIiwiYmJveGVzIiwiJDIxZWUyMThmODRhYzdmMzIkdmFyJFdPUkRfQ09ERSIsIiQyMWVlMjE4Zjg0YWM3ZjMyJHZhciRPTkVfTU9SRV9CWVRFX0NPREUyIiwiJDIxZWUyMThmODRhYzdmMzIkdmFyJE9ORV9NT1JFX0JZVEVfQ09ERTEiLCIkMjFlZTIxOGY4NGFjN2YzMiR2YXIkTE9XRVNUX1VfQ09ERSIsIiQyMWVlMjE4Zjg0YWM3ZjMyJHZhciR3aXRoU2lnbiIsImJhc2V2YWwiLCJiMCIsImIyIiwiJGNkNTg1M2E1NmM2OGZlYzckdmFyJFRUQ0hlYWRlciIsIm51bUZvbnRzIiwiZHNpZ1RhZyIsImRzaWdMZW5ndGgiLCJkc2lnT2Zmc2V0IiwiJGNkNTg1M2E1NmM2OGZlYzckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSIsImZvbnRzIiwicmVhZFN0cmluZyIsIiQwNWY0OWY5MzAxODYxNDRlJHZhciRERm9udE5hbWUiLCIkMDVmNDlmOTMwMTg2MTQ0ZSR2YXIkREZvbnREYXRhIiwiJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJFJlZiIsIm5hbWVPZmZzZXQiLCJhdHRyIiwiZGF0YU9mZnNldCIsImhhbmRsZSIsIiQwNWY0OWY5MzAxODYxNDRlJHZhciRUeXBlIiwibWF4VHlwZUluZGV4IiwicmVmTGlzdCIsIiQwNWY0OWY5MzAxODYxNDRlJHZhciRUeXBlTGlzdCIsInR5cGVzIiwiJDA1ZjQ5ZjkzMDE4NjE0NGUkdmFyJERGb250TWFwIiwidHlwZUxpc3QiLCJuYW1lTGlzdE9mZnNldCIsIiQwNWY0OWY5MzAxODYxNDRlJHZhciRERm9udEhlYWRlciIsImRhdGFMZW5ndGgiLCJtYXBMZW5ndGgiLCIkMDVmNDlmOTMwMTg2MTQ0ZSRleHBvcnQkMmUyYmNkODczOWFlMDM5Iiwic2ZudCIsImxvZ0Vycm9ycyIsInJlZ2lzdGVyRm9ybWF0IiwiY3JlYXRlIiwib3BlblN5bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fontkit/dist/module.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/fontkit/node_modules/@swc/helpers/esm/_define_property.js":
/*!********************************************************************************!*\
  !*** ./node_modules/fontkit/node_modules/@swc/helpers/esm/_define_property.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _define_property),\n/* harmony export */   _define_property: () => (/* binding */ _define_property)\n/* harmony export */ });\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else obj[key] = value;\n    return obj;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZm9udGtpdC9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fZGVmaW5lX3Byb3BlcnR5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0EsaUJBQWlCQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsS0FBSztJQUM1QyxJQUFJRCxPQUFPRCxLQUFLO1FBQ1pHLE9BQU9DLGNBQWMsQ0FBQ0osS0FBS0MsS0FBSztZQUFFQyxPQUFPQTtZQUFPRyxZQUFZO1lBQU1DLGNBQWM7WUFBTUMsVUFBVTtRQUFLO0lBQ3pHLE9BQU9QLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztJQUVsQixPQUFPRjtBQUNYO0FBQ2lDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZvbnRraXQvbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9lc20vX2RlZmluZV9wcm9wZXJ0eS5qcz83YjJlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBfZGVmaW5lX3Byb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG4gICAgfSBlbHNlIG9ialtrZXldID0gdmFsdWU7XG5cbiAgICByZXR1cm4gb2JqO1xufVxuZXhwb3J0IHsgX2RlZmluZV9wcm9wZXJ0eSBhcyBfIH07XG4iXSwibmFtZXMiOlsiX2RlZmluZV9wcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fontkit/node_modules/@swc/helpers/esm/_define_property.js\n");

/***/ })

};
;