"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hsl-to-hex";
exports.ids = ["vendor-chunks/hsl-to-hex"];
exports.modules = {

/***/ "(ssr)/./node_modules/hsl-to-hex/index.js":
/*!******************************************!*\
  !*** ./node_modules/hsl-to-hex/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// In our case, there's only one dependency\n\nvar toRgb = __webpack_require__(/*! hsl-to-rgb-for-reals */ \"(ssr)/./node_modules/hsl-to-rgb-for-reals/converter.js\");\n// Typically all dependencies should be declared at the top of the file.\n// Now let's define an API for our module, we're taking hue, saturation and luminosity values and outputting a CSS compatible hex string.\n// Hue is in degrees, between 0 and 359. Since degrees a cyclical in nature, we'll support numbers greater than 359 or less than 0 by \"spinning\" them around until they fall within the 0 to 359 range.\n// Saturation and luminosity are both percentages, we'll represent these percentages with whole numbers between 0 and 100. For these numbers we'll need to enforce a maximum and a minimum, anything below 0 will become 0, anything above 100 will become 100.\n// Let's write some utility functions to handle this logic:\nfunction max(val, n) {\n    return val > n ? n : val;\n}\nfunction min(val, n) {\n    return val < n ? n : val;\n}\nfunction cycle(val) {\n    // for safety:\n    val = max(val, 1e7);\n    val = min(val, -1e7);\n    // cycle value:\n    while(val < 0){\n        val += 360;\n    }\n    while(val > 359){\n        val -= 360;\n    }\n    return val;\n}\n// Now for the main piece, the `hsl` function:\nfunction hsl(hue, saturation, luminosity) {\n    // resolve degrees to 0 - 359 range\n    hue = cycle(hue);\n    // enforce constraints\n    saturation = min(max(saturation, 100), 0);\n    luminosity = min(max(luminosity, 100), 0);\n    // convert to 0 to 1 range used by hsl-to-rgb-for-reals\n    saturation /= 100;\n    luminosity /= 100;\n    // let hsl-to-rgb-for-reals do the hard work\n    var rgb = toRgb(hue, saturation, luminosity);\n    // convert each value in the returned RGB array\n    // to a 2 character hex value, join the array into\n    // a string, prefixed with a hash\n    return \"#\" + rgb.map(function(n) {\n        return (256 + n).toString(16).substr(-2);\n    }).join(\"\");\n}\n// In order to make our code into a bona fide module we have to export it:\nmodule.exports = hsl;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHNsLXRvLWhleC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSwyQ0FBMkM7O0FBRTNDLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCLHdFQUF3RTtBQUV4RSx5SUFBeUk7QUFDekksdU1BQXVNO0FBQ3ZNLCtQQUErUDtBQUMvUCwyREFBMkQ7QUFFM0QsU0FBU0MsSUFBS0MsR0FBRyxFQUFFQyxDQUFDO0lBQ2xCLE9BQU8sTUFBT0EsSUFBS0EsSUFBSUQ7QUFDekI7QUFFQSxTQUFTRSxJQUFLRixHQUFHLEVBQUVDLENBQUM7SUFDbEIsT0FBTyxNQUFPQSxJQUFLQSxJQUFJRDtBQUN6QjtBQUVBLFNBQVNHLE1BQU9ILEdBQUc7SUFDakIsY0FBYztJQUNkQSxNQUFNRCxJQUFJQyxLQUFLO0lBQ2ZBLE1BQU1FLElBQUlGLEtBQUssQ0FBQztJQUNoQixlQUFlO0lBQ2YsTUFBT0EsTUFBTSxFQUFHO1FBQUVBLE9BQU87SUFBSTtJQUM3QixNQUFPQSxNQUFNLElBQUs7UUFBRUEsT0FBTztJQUFJO0lBQy9CLE9BQU9BO0FBQ1Q7QUFFQSw4Q0FBOEM7QUFFOUMsU0FBU0ksSUFBS0MsR0FBRyxFQUFFQyxVQUFVLEVBQUVDLFVBQVU7SUFDdkMsbUNBQW1DO0lBQ25DRixNQUFNRixNQUFNRTtJQUVaLHNCQUFzQjtJQUN0QkMsYUFBYUosSUFBSUgsSUFBSU8sWUFBWSxNQUFNO0lBQ3ZDQyxhQUFhTCxJQUFJSCxJQUFJUSxZQUFZLE1BQU07SUFFdkMsdURBQXVEO0lBQ3ZERCxjQUFjO0lBQ2RDLGNBQWM7SUFFZCw0Q0FBNEM7SUFDNUMsSUFBSUMsTUFBTVgsTUFBTVEsS0FBS0MsWUFBWUM7SUFFakMsK0NBQStDO0lBQy9DLGtEQUFrRDtJQUNsRCxpQ0FBaUM7SUFDakMsT0FBTyxNQUFNQyxJQUNWQyxHQUFHLENBQUMsU0FBVVIsQ0FBQztRQUNkLE9BQU8sQ0FBQyxNQUFNQSxDQUFBQSxFQUFHUyxRQUFRLENBQUMsSUFBSUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsR0FDQ0MsSUFBSSxDQUFDO0FBQ1Y7QUFFQSwwRUFBMEU7QUFFMUVDLE9BQU9DLE9BQU8sR0FBR1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHNsLXRvLWhleC9pbmRleC5qcz83MWMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEluIG91ciBjYXNlLCB0aGVyZSdzIG9ubHkgb25lIGRlcGVuZGVuY3lcblxudmFyIHRvUmdiID0gcmVxdWlyZSgnaHNsLXRvLXJnYi1mb3ItcmVhbHMnKVxuXG4vLyBUeXBpY2FsbHkgYWxsIGRlcGVuZGVuY2llcyBzaG91bGQgYmUgZGVjbGFyZWQgYXQgdGhlIHRvcCBvZiB0aGUgZmlsZS5cblxuLy8gTm93IGxldCdzIGRlZmluZSBhbiBBUEkgZm9yIG91ciBtb2R1bGUsIHdlJ3JlIHRha2luZyBodWUsIHNhdHVyYXRpb24gYW5kIGx1bWlub3NpdHkgdmFsdWVzIGFuZCBvdXRwdXR0aW5nIGEgQ1NTIGNvbXBhdGlibGUgaGV4IHN0cmluZy5cbi8vIEh1ZSBpcyBpbiBkZWdyZWVzLCBiZXR3ZWVuIDAgYW5kIDM1OS4gU2luY2UgZGVncmVlcyBhIGN5Y2xpY2FsIGluIG5hdHVyZSwgd2UnbGwgc3VwcG9ydCBudW1iZXJzIGdyZWF0ZXIgdGhhbiAzNTkgb3IgbGVzcyB0aGFuIDAgYnkgXCJzcGlubmluZ1wiIHRoZW0gYXJvdW5kIHVudGlsIHRoZXkgZmFsbCB3aXRoaW4gdGhlIDAgdG8gMzU5IHJhbmdlLlxuLy8gU2F0dXJhdGlvbiBhbmQgbHVtaW5vc2l0eSBhcmUgYm90aCBwZXJjZW50YWdlcywgd2UnbGwgcmVwcmVzZW50IHRoZXNlIHBlcmNlbnRhZ2VzIHdpdGggd2hvbGUgbnVtYmVycyBiZXR3ZWVuIDAgYW5kIDEwMC4gRm9yIHRoZXNlIG51bWJlcnMgd2UnbGwgbmVlZCB0byBlbmZvcmNlIGEgbWF4aW11bSBhbmQgYSBtaW5pbXVtLCBhbnl0aGluZyBiZWxvdyAwIHdpbGwgYmVjb21lIDAsIGFueXRoaW5nIGFib3ZlIDEwMCB3aWxsIGJlY29tZSAxMDAuXG4vLyBMZXQncyB3cml0ZSBzb21lIHV0aWxpdHkgZnVuY3Rpb25zIHRvIGhhbmRsZSB0aGlzIGxvZ2ljOlxuXG5mdW5jdGlvbiBtYXggKHZhbCwgbikge1xuICByZXR1cm4gKHZhbCA+IG4pID8gbiA6IHZhbFxufVxuXG5mdW5jdGlvbiBtaW4gKHZhbCwgbikge1xuICByZXR1cm4gKHZhbCA8IG4pID8gbiA6IHZhbFxufVxuXG5mdW5jdGlvbiBjeWNsZSAodmFsKSB7XG4gIC8vIGZvciBzYWZldHk6XG4gIHZhbCA9IG1heCh2YWwsIDFlNylcbiAgdmFsID0gbWluKHZhbCwgLTFlNylcbiAgLy8gY3ljbGUgdmFsdWU6XG4gIHdoaWxlICh2YWwgPCAwKSB7IHZhbCArPSAzNjAgfVxuICB3aGlsZSAodmFsID4gMzU5KSB7IHZhbCAtPSAzNjAgfVxuICByZXR1cm4gdmFsXG59XG5cbi8vIE5vdyBmb3IgdGhlIG1haW4gcGllY2UsIHRoZSBgaHNsYCBmdW5jdGlvbjpcblxuZnVuY3Rpb24gaHNsIChodWUsIHNhdHVyYXRpb24sIGx1bWlub3NpdHkpIHtcbiAgLy8gcmVzb2x2ZSBkZWdyZWVzIHRvIDAgLSAzNTkgcmFuZ2VcbiAgaHVlID0gY3ljbGUoaHVlKVxuXG4gIC8vIGVuZm9yY2UgY29uc3RyYWludHNcbiAgc2F0dXJhdGlvbiA9IG1pbihtYXgoc2F0dXJhdGlvbiwgMTAwKSwgMClcbiAgbHVtaW5vc2l0eSA9IG1pbihtYXgobHVtaW5vc2l0eSwgMTAwKSwgMClcblxuICAvLyBjb252ZXJ0IHRvIDAgdG8gMSByYW5nZSB1c2VkIGJ5IGhzbC10by1yZ2ItZm9yLXJlYWxzXG4gIHNhdHVyYXRpb24gLz0gMTAwXG4gIGx1bWlub3NpdHkgLz0gMTAwXG5cbiAgLy8gbGV0IGhzbC10by1yZ2ItZm9yLXJlYWxzIGRvIHRoZSBoYXJkIHdvcmtcbiAgdmFyIHJnYiA9IHRvUmdiKGh1ZSwgc2F0dXJhdGlvbiwgbHVtaW5vc2l0eSlcblxuICAvLyBjb252ZXJ0IGVhY2ggdmFsdWUgaW4gdGhlIHJldHVybmVkIFJHQiBhcnJheVxuICAvLyB0byBhIDIgY2hhcmFjdGVyIGhleCB2YWx1ZSwgam9pbiB0aGUgYXJyYXkgaW50b1xuICAvLyBhIHN0cmluZywgcHJlZml4ZWQgd2l0aCBhIGhhc2hcbiAgcmV0dXJuICcjJyArIHJnYlxuICAgIC5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICAgIHJldHVybiAoMjU2ICsgbikudG9TdHJpbmcoMTYpLnN1YnN0cigtMilcbiAgICB9KVxuICAgIC5qb2luKCcnKVxufVxuXG4vLyBJbiBvcmRlciB0byBtYWtlIG91ciBjb2RlIGludG8gYSBib25hIGZpZGUgbW9kdWxlIHdlIGhhdmUgdG8gZXhwb3J0IGl0OlxuXG5tb2R1bGUuZXhwb3J0cyA9IGhzbFxuIl0sIm5hbWVzIjpbInRvUmdiIiwicmVxdWlyZSIsIm1heCIsInZhbCIsIm4iLCJtaW4iLCJjeWNsZSIsImhzbCIsImh1ZSIsInNhdHVyYXRpb24iLCJsdW1pbm9zaXR5IiwicmdiIiwibWFwIiwidG9TdHJpbmciLCJzdWJzdHIiLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hsl-to-hex/index.js\n");

/***/ })

};
;