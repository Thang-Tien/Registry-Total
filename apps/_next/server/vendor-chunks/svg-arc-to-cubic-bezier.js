"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/svg-arc-to-cubic-bezier";
exports.ids = ["vendor-chunks/svg-arc-to-cubic-bezier"];
exports.modules = {

/***/ "(ssr)/./node_modules/svg-arc-to-cubic-bezier/modules/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/svg-arc-to-cubic-bezier/modules/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar _slicedToArray = function() {\n    function sliceIterator(arr, i) {\n        var _arr = [];\n        var _n = true;\n        var _d = false;\n        var _e = undefined;\n        try {\n            for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n                _arr.push(_s.value);\n                if (i && _arr.length === i) break;\n            }\n        } catch (err) {\n            _d = true;\n            _e = err;\n        } finally{\n            try {\n                if (!_n && _i[\"return\"]) _i[\"return\"]();\n            } finally{\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n    return function(arr, i) {\n        if (Array.isArray(arr)) {\n            return arr;\n        } else if (Symbol.iterator in Object(arr)) {\n            return sliceIterator(arr, i);\n        } else {\n            throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n        }\n    };\n}();\nvar TAU = Math.PI * 2;\nvar mapToEllipse = function mapToEllipse(_ref, rx, ry, cosphi, sinphi, centerx, centery) {\n    var x = _ref.x, y = _ref.y;\n    x *= rx;\n    y *= ry;\n    var xp = cosphi * x - sinphi * y;\n    var yp = sinphi * x + cosphi * y;\n    return {\n        x: xp + centerx,\n        y: yp + centery\n    };\n};\nvar approxUnitArc = function approxUnitArc(ang1, ang2) {\n    // If 90 degree circular arc, use a constant\n    // as derived from http://spencermortensen.com/articles/bezier-circle\n    var a = ang2 === 1.5707963267948966 ? 0.551915024494 : ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n    var x1 = Math.cos(ang1);\n    var y1 = Math.sin(ang1);\n    var x2 = Math.cos(ang1 + ang2);\n    var y2 = Math.sin(ang1 + ang2);\n    return [\n        {\n            x: x1 - y1 * a,\n            y: y1 + x1 * a\n        },\n        {\n            x: x2 + y2 * a,\n            y: y2 - x2 * a\n        },\n        {\n            x: x2,\n            y: y2\n        }\n    ];\n};\nvar vectorAngle = function vectorAngle(ux, uy, vx, vy) {\n    var sign = ux * vy - uy * vx < 0 ? -1 : 1;\n    var dot = ux * vx + uy * vy;\n    if (dot > 1) {\n        dot = 1;\n    }\n    if (dot < -1) {\n        dot = -1;\n    }\n    return sign * Math.acos(dot);\n};\nvar getArcCenter = function getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {\n    var rxsq = Math.pow(rx, 2);\n    var rysq = Math.pow(ry, 2);\n    var pxpsq = Math.pow(pxp, 2);\n    var pypsq = Math.pow(pyp, 2);\n    var radicant = rxsq * rysq - rxsq * pypsq - rysq * pxpsq;\n    if (radicant < 0) {\n        radicant = 0;\n    }\n    radicant /= rxsq * pypsq + rysq * pxpsq;\n    radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n    var centerxp = radicant * rx / ry * pyp;\n    var centeryp = radicant * -ry / rx * pxp;\n    var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;\n    var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;\n    var vx1 = (pxp - centerxp) / rx;\n    var vy1 = (pyp - centeryp) / ry;\n    var vx2 = (-pxp - centerxp) / rx;\n    var vy2 = (-pyp - centeryp) / ry;\n    var ang1 = vectorAngle(1, 0, vx1, vy1);\n    var ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n    if (sweepFlag === 0 && ang2 > 0) {\n        ang2 -= TAU;\n    }\n    if (sweepFlag === 1 && ang2 < 0) {\n        ang2 += TAU;\n    }\n    return [\n        centerx,\n        centery,\n        ang1,\n        ang2\n    ];\n};\nvar arcToBezier = function arcToBezier(_ref2) {\n    var px = _ref2.px, py = _ref2.py, cx = _ref2.cx, cy = _ref2.cy, rx = _ref2.rx, ry = _ref2.ry, _ref2$xAxisRotation = _ref2.xAxisRotation, xAxisRotation = _ref2$xAxisRotation === undefined ? 0 : _ref2$xAxisRotation, _ref2$largeArcFlag = _ref2.largeArcFlag, largeArcFlag = _ref2$largeArcFlag === undefined ? 0 : _ref2$largeArcFlag, _ref2$sweepFlag = _ref2.sweepFlag, sweepFlag = _ref2$sweepFlag === undefined ? 0 : _ref2$sweepFlag;\n    var curves = [];\n    if (rx === 0 || ry === 0) {\n        return [];\n    }\n    var sinphi = Math.sin(xAxisRotation * TAU / 360);\n    var cosphi = Math.cos(xAxisRotation * TAU / 360);\n    var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;\n    var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;\n    if (pxp === 0 && pyp === 0) {\n        return [];\n    }\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n    var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);\n    if (lambda > 1) {\n        rx *= Math.sqrt(lambda);\n        ry *= Math.sqrt(lambda);\n    }\n    var _getArcCenter = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp), _getArcCenter2 = _slicedToArray(_getArcCenter, 4), centerx = _getArcCenter2[0], centery = _getArcCenter2[1], ang1 = _getArcCenter2[2], ang2 = _getArcCenter2[3];\n    // If 'ang2' == 90.0000000001, then `ratio` will evaluate to\n    // 1.0000000001. This causes `segments` to be greater than one, which is an\n    // unecessary split, and adds extra points to the bezier curve. To alleviate\n    // this issue, we round to 1.0 when the ratio is close to 1.0.\n    var ratio = Math.abs(ang2) / (TAU / 4);\n    if (Math.abs(1.0 - ratio) < 0.0000001) {\n        ratio = 1.0;\n    }\n    var segments = Math.max(Math.ceil(ratio), 1);\n    ang2 /= segments;\n    for(var i = 0; i < segments; i++){\n        curves.push(approxUnitArc(ang1, ang2));\n        ang1 += ang2;\n    }\n    return curves.map(function(curve) {\n        var _mapToEllipse = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery), x1 = _mapToEllipse.x, y1 = _mapToEllipse.y;\n        var _mapToEllipse2 = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery), x2 = _mapToEllipse2.x, y2 = _mapToEllipse2.y;\n        var _mapToEllipse3 = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery), x = _mapToEllipse3.x, y = _mapToEllipse3.y;\n        return {\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2,\n            x: x,\n            y: y\n        };\n    });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arcToBezier);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/svg-arc-to-cubic-bezier/modules/index.js\n");

/***/ })

};
;