/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/validate-date";
exports.ids = ["vendor-chunks/validate-date"];
exports.modules = {

/***/ "(ssr)/./node_modules/validate-date/validate-date.js":
/*!*****************************************************!*\
  !*** ./node_modules/validate-date/validate-date.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("function validateDate(dateValue, responseType = \"string\", dateFormat = null) {\n    // Validate input parameters\n    if (typeof dateValue !== \"string\") {\n        throw new Error(\"dateValue must be a string.\");\n    }\n    if (typeof responseType !== \"string\" || ![\n        \"string\",\n        \"boolean\"\n    ].includes(responseType)) {\n        throw new Error(\"responseType must be 'string' or 'boolean'.\");\n    }\n    if (dateFormat !== null && typeof dateFormat !== \"string\") {\n        throw new Error(\"dateFormat must be a string.\");\n    }\n    // Throw an exception for empty dateValue\n    if (dateValue.trim() === \"\") {\n        throw new Error(\"dateValue cannot be empty.\");\n    }\n    let responses = responseSetter(responseType);\n    return dateValidator(dateValue, responses, dateFormat);\n}\n// TODO- This function returns different response types(String or boolean) which might be an anti pattern. Investigate and make necessary changes\nfunction responseSetter(responseType) {\n    switch(responseType){\n        case \"string\":\n            return [\n                \"Invalid Format\",\n                \"Invalid Date\",\n                \"Valid Date\"\n            ];\n        case \"boolean\":\n            return [\n                false,\n                false,\n                true\n            ];\n        default:\n            return [\n                \"Invalid Format\",\n                \"Invalid Date\",\n                \"Valid Date\"\n            ];\n    }\n}\nfunction daysInMonth(year, month) {\n    const days = [\n        31,\n        28,\n        31,\n        30,\n        31,\n        30,\n        31,\n        31,\n        30,\n        31,\n        30,\n        31\n    ];\n    return month === 2 && year % 4 === 0 ? 29 : days[month - 1];\n}\nfunction getAllIndexes(arr, val) {\n    var indexes = [];\n    for(var i = 0; i < arr.length; i++){\n        if (arr[i] === val) indexes.push(i);\n    }\n    return indexes;\n}\nfunction isLeapYear(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0) && year >= 1753;\n}\nfunction dateValidator(dateValue, responses, dateFormat) {\n    if (dateValue) {\n        if (!dateFormat) {\n            dateFormat = dateValue.includes(\"-\") ? \"yyyy-mm-dd\" : \"mm/dd/yyyy\";\n        }\n        const dateSeparator = /[^dmy]/i.exec(dateFormat)[0]; // Extract the separator character\n        if (!dateValue.includes(dateSeparator)) {\n            return responses[0];\n        }\n        if (dateFormat.length > 10 || dateFormat.length < 6) return responses[0];\n        const formatSplit = dateValue.includes(\"-\") ? dateFormat.split(\"-\") : dateFormat.split(\"/\");\n        let wrongFormat = formatSplit.map((formatPart)=>/([dmy])\\1/i.test(formatPart)).filter((rightFormat)=>!rightFormat);\n        if (wrongFormat.length > 0) return responses[0];\n        // let dateSeparator = dateValue.includes(\"-\") ? \"-\" : \"/\";\n        let formatRegex = new RegExp(`(\\\\d{${formatSplit[0].length}})(${dateSeparator})(\\\\d{${formatSplit[1].length}})(${dateSeparator})(\\\\d{${formatSplit[2].length}})`);\n        let dayPosition = getAllIndexes(formatSplit, formatSplit.filter((formatPart)=>/[d]/i.test(formatPart))[0]);\n        let monthPosition = getAllIndexes(formatSplit, formatSplit.filter((formatPart)=>/[m]/i.test(formatPart))[0]);\n        let yearPosition = getAllIndexes(formatSplit, formatSplit.filter((formatPart)=>/[y]/i.test(formatPart))[0]);\n        if (dayPosition.length !== 1 || monthPosition.length !== 1 || yearPosition.length !== 1) {\n            return responses[0];\n        }\n        if (formatRegex.test(dateValue)) {\n            const dateSplit = dateValue.split(dateSeparator);\n            const day = Number(dateSplit[dayPosition]);\n            const month = Number(dateSplit[monthPosition]);\n            const year = Number(dateSplit[yearPosition]);\n            // Check for invalid dates\n            if (month <= 0 || month > 12 || day <= 0 || day > daysInMonth(year, month) || year < 1753 || month === 2 && day === 29 && !isLeapYear(year)) {\n                return responses[1];\n            }\n        } else {\n            return responses[0];\n        }\n    }\n    return responses[2];\n}\nmodule.exports = validateDate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/validate-date/validate-date.js\n");

/***/ })

};
;